
motor_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c990  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800cb70  0800cb70  0000db70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc84  0800cc84  0000e254  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cc84  0800cc84  0000dc84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc8c  0800cc8c  0000e254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc8c  0800cc8c  0000dc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc90  0800cc90  0000dc90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000254  20000000  0800cc94  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022fc  20000254  0800cee8  0000e254  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002550  0800cee8  0000e550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e254  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034cfd  00000000  00000000  0000e284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000076e5  00000000  00000000  00042f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002758  00000000  00000000  0004a668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e43  00000000  00000000  0004cdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc4e  00000000  00000000  0004ec03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003932b  00000000  00000000  0007a851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f45dd  00000000  00000000  000b3b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a8159  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a6e4  00000000  00000000  001a819c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b2880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000254 	.word	0x20000254
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cb58 	.word	0x0800cb58

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000258 	.word	0x20000258
 800021c:	0800cb58 	.word	0x0800cb58

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08c      	sub	sp, #48	@ 0x30
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2220      	movs	r2, #32
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f00c f9df 	bl	800c928 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800056a:	4b3f      	ldr	r3, [pc, #252]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800056c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000570:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000572:	4b3d      	ldr	r3, [pc, #244]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000574:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000578:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800057a:	4b3b      	ldr	r3, [pc, #236]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000580:	4b39      	ldr	r3, [pc, #228]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000586:	4b38      	ldr	r3, [pc, #224]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800058c:	4b36      	ldr	r3, [pc, #216]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800058e:	2201      	movs	r2, #1
 8000590:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000592:	4b35      	ldr	r3, [pc, #212]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000594:	2204      	movs	r2, #4
 8000596:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000598:	4b33      	ldr	r3, [pc, #204]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800059a:	2200      	movs	r2, #0
 800059c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800059e:	4b32      	ldr	r3, [pc, #200]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80005a4:	4b30      	ldr	r3, [pc, #192]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005a6:	2203      	movs	r2, #3
 80005a8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 80005b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005b4:	f44f 62a8 	mov.w	r2, #1344	@ 0x540
 80005b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005c2:	4b29      	ldr	r3, [pc, #164]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ca:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005d0:	4b25      	ldr	r3, [pc, #148]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d8:	4823      	ldr	r0, [pc, #140]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005da:	f003 fba3 	bl	8003d24 <HAL_ADC_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80005e4:	f000 fc60 	bl	8000ea8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005e8:	2300      	movs	r3, #0
 80005ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f0:	4619      	mov	r1, r3
 80005f2:	481d      	ldr	r0, [pc, #116]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005f4:	f004 fb1c 	bl	8004c30 <HAL_ADCEx_MultiModeConfigChannel>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80005fe:	f000 fc53 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000602:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <MX_ADC1_Init+0x120>)
 8000604:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000606:	2306      	movs	r3, #6
 8000608:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800060e:	237f      	movs	r3, #127	@ 0x7f
 8000610:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000612:	2304      	movs	r3, #4
 8000614:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	4619      	mov	r1, r3
 800061e:	4812      	ldr	r0, [pc, #72]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000620:	f003 fdd6 	bl	80041d0 <HAL_ADC_ConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800062a:	f000 fc3d 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800062e:	230c      	movs	r3, #12
 8000630:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	480c      	ldr	r0, [pc, #48]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000638:	f003 fdca 	bl	80041d0 <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000642:	f000 fc31 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000646:	2312      	movs	r3, #18
 8000648:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	4619      	mov	r1, r3
 800064e:	4806      	ldr	r0, [pc, #24]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000650:	f003 fdbe 	bl	80041d0 <HAL_ADC_ConfigChannel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 800065a:	f000 fc25 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	3730      	adds	r7, #48	@ 0x30
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000270 	.word	0x20000270
 800066c:	2e300800 	.word	0x2e300800

08000670 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b09a      	sub	sp, #104	@ 0x68
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	2244      	movs	r2, #68	@ 0x44
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f00c f949 	bl	800c928 <memset>
  if(adcHandle->Instance==ADC1)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800069e:	d160      	bne.n	8000762 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4618      	mov	r0, r3
 80006b2:	f006 fdf7 	bl	80072a4 <HAL_RCCEx_PeriphCLKConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006bc:	f000 fbf4 	bl	8000ea8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006c0:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c4:	4a29      	ldr	r2, [pc, #164]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006cc:	4b27      	ldr	r3, [pc, #156]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d8:	4b24      	ldr	r3, [pc, #144]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006dc:	4a23      	ldr	r2, [pc, #140]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e4:	4b21      	ldr	r3, [pc, #132]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e8:	f003 0302 	and.w	r3, r3, #2
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 80006f0:	f641 0302 	movw	r3, #6146	@ 0x1802
 80006f4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f6:	2303      	movs	r3, #3
 80006f8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000702:	4619      	mov	r1, r3
 8000704:	481a      	ldr	r0, [pc, #104]	@ (8000770 <HAL_ADC_MspInit+0x100>)
 8000706:	f005 fcd5 	bl	80060b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800070c:	4a1a      	ldr	r2, [pc, #104]	@ (8000778 <HAL_ADC_MspInit+0x108>)
 800070e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000712:	2205      	movs	r2, #5
 8000714:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000724:	2280      	movs	r2, #128	@ 0x80
 8000726:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800072a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800072e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000730:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000732:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000736:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800073a:	2220      	movs	r2, #32
 800073c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800073e:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000740:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000744:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000746:	480b      	ldr	r0, [pc, #44]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000748:	f004 fd30 	bl	80051ac <HAL_DMA_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8000752:	f000 fba9 	bl	8000ea8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a06      	ldr	r2, [pc, #24]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800075a:	655a      	str	r2, [r3, #84]	@ 0x54
 800075c:	4a05      	ldr	r2, [pc, #20]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000762:	bf00      	nop
 8000764:	3768      	adds	r7, #104	@ 0x68
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000
 8000770:	48000400 	.word	0x48000400
 8000774:	200002dc 	.word	0x200002dc
 8000778:	40020408 	.word	0x40020408

0800077c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000780:	4a0c      	ldr	r2, [pc, #48]	@ (80007b4 <MX_FREERTOS_Init+0x38>)
 8000782:	2100      	movs	r1, #0
 8000784:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <MX_FREERTOS_Init+0x3c>)
 8000786:	f009 fa34 	bl	8009bf2 <osThreadNew>
 800078a:	4603      	mov	r3, r0
 800078c:	4a0b      	ldr	r2, [pc, #44]	@ (80007bc <MX_FREERTOS_Init+0x40>)
 800078e:	6013      	str	r3, [r2, #0]

  /* creation of motorTask */
  motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8000790:	4a0b      	ldr	r2, [pc, #44]	@ (80007c0 <MX_FREERTOS_Init+0x44>)
 8000792:	2100      	movs	r1, #0
 8000794:	480b      	ldr	r0, [pc, #44]	@ (80007c4 <MX_FREERTOS_Init+0x48>)
 8000796:	f009 fa2c 	bl	8009bf2 <osThreadNew>
 800079a:	4603      	mov	r3, r0
 800079c:	4a0a      	ldr	r2, [pc, #40]	@ (80007c8 <MX_FREERTOS_Init+0x4c>)
 800079e:	6013      	str	r3, [r2, #0]

  /* creation of adcTask */
  adcTaskHandle = osThreadNew(StartAdcTask, NULL, &adcTask_attributes);
 80007a0:	4a0a      	ldr	r2, [pc, #40]	@ (80007cc <MX_FREERTOS_Init+0x50>)
 80007a2:	2100      	movs	r1, #0
 80007a4:	480a      	ldr	r0, [pc, #40]	@ (80007d0 <MX_FREERTOS_Init+0x54>)
 80007a6:	f009 fa24 	bl	8009bf2 <osThreadNew>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4a09      	ldr	r2, [pc, #36]	@ (80007d4 <MX_FREERTOS_Init+0x58>)
 80007ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	0800cba8 	.word	0x0800cba8
 80007b8:	080019f5 	.word	0x080019f5
 80007bc:	2000033c 	.word	0x2000033c
 80007c0:	0800cbcc 	.word	0x0800cbcc
 80007c4:	08002f99 	.word	0x08002f99
 80007c8:	20000340 	.word	0x20000340
 80007cc:	0800cbf0 	.word	0x0800cbf0
 80007d0:	080015c5 	.word	0x080015c5
 80007d4:	20000344 	.word	0x20000344

080007d8 <MX_CORDIC_Init>:
DMA_HandleTypeDef hdma_cordic_read;
DMA_HandleTypeDef hdma_cordic_write;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_CORDIC_Init+0x20>)
 80007de:	4a07      	ldr	r2, [pc, #28]	@ (80007fc <MX_CORDIC_Init+0x24>)
 80007e0:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_CORDIC_Init+0x20>)
 80007e4:	f004 fac8 	bl	8004d78 <HAL_CORDIC_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80007ee:	f000 fb5b 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000348 	.word	0x20000348
 80007fc:	40020c00 	.word	0x40020c00

08000800 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a34      	ldr	r2, [pc, #208]	@ (80008e0 <HAL_CORDIC_MspInit+0xe0>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d161      	bne.n	80008d6 <HAL_CORDIC_MspInit+0xd6>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000812:	4b34      	ldr	r3, [pc, #208]	@ (80008e4 <HAL_CORDIC_MspInit+0xe4>)
 8000814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000816:	4a33      	ldr	r2, [pc, #204]	@ (80008e4 <HAL_CORDIC_MspInit+0xe4>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6493      	str	r3, [r2, #72]	@ 0x48
 800081e:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <HAL_CORDIC_MspInit+0xe4>)
 8000820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]

    /* CORDIC DMA Init */
    /* CORDIC_READ Init */
    hdma_cordic_read.Instance = DMA2_Channel2;
 800082a:	4b2f      	ldr	r3, [pc, #188]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 800082c:	4a2f      	ldr	r2, [pc, #188]	@ (80008ec <HAL_CORDIC_MspInit+0xec>)
 800082e:	601a      	str	r2, [r3, #0]
    hdma_cordic_read.Init.Request = DMA_REQUEST_CORDIC_READ;
 8000830:	4b2d      	ldr	r3, [pc, #180]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000832:	2270      	movs	r2, #112	@ 0x70
 8000834:	605a      	str	r2, [r3, #4]
    hdma_cordic_read.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000836:	4b2c      	ldr	r3, [pc, #176]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
    hdma_cordic_read.Init.PeriphInc = DMA_PINC_DISABLE;
 800083c:	4b2a      	ldr	r3, [pc, #168]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
    hdma_cordic_read.Init.MemInc = DMA_MINC_ENABLE;
 8000842:	4b29      	ldr	r3, [pc, #164]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000844:	2280      	movs	r2, #128	@ 0x80
 8000846:	611a      	str	r2, [r3, #16]
    hdma_cordic_read.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000848:	4b27      	ldr	r3, [pc, #156]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 800084a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800084e:	615a      	str	r2, [r3, #20]
    hdma_cordic_read.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000850:	4b25      	ldr	r3, [pc, #148]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000852:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000856:	619a      	str	r2, [r3, #24]
    hdma_cordic_read.Init.Mode = DMA_NORMAL;
 8000858:	4b23      	ldr	r3, [pc, #140]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
    hdma_cordic_read.Init.Priority = DMA_PRIORITY_LOW;
 800085e:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_cordic_read) != HAL_OK)
 8000864:	4820      	ldr	r0, [pc, #128]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000866:	f004 fca1 	bl	80051ac <HAL_DMA_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <HAL_CORDIC_MspInit+0x74>
    {
      Error_Handler();
 8000870:	f000 fb1a 	bl	8000ea8 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaOut,hdma_cordic_read);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a1c      	ldr	r2, [pc, #112]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000878:	61da      	str	r2, [r3, #28]
 800087a:	4a1b      	ldr	r2, [pc, #108]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* CORDIC_WRITE Init */
    hdma_cordic_write.Instance = DMA2_Channel3;
 8000880:	4b1b      	ldr	r3, [pc, #108]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 8000882:	4a1c      	ldr	r2, [pc, #112]	@ (80008f4 <HAL_CORDIC_MspInit+0xf4>)
 8000884:	601a      	str	r2, [r3, #0]
    hdma_cordic_write.Init.Request = DMA_REQUEST_CORDIC_WRITE;
 8000886:	4b1a      	ldr	r3, [pc, #104]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 8000888:	2271      	movs	r2, #113	@ 0x71
 800088a:	605a      	str	r2, [r3, #4]
    hdma_cordic_write.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800088c:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 800088e:	2210      	movs	r2, #16
 8000890:	609a      	str	r2, [r3, #8]
    hdma_cordic_write.Init.PeriphInc = DMA_PINC_DISABLE;
 8000892:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
    hdma_cordic_write.Init.MemInc = DMA_MINC_ENABLE;
 8000898:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 800089a:	2280      	movs	r2, #128	@ 0x80
 800089c:	611a      	str	r2, [r3, #16]
    hdma_cordic_write.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800089e:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008a4:	615a      	str	r2, [r3, #20]
    hdma_cordic_write.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008a6:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008ac:	619a      	str	r2, [r3, #24]
    hdma_cordic_write.Init.Mode = DMA_NORMAL;
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
    hdma_cordic_write.Init.Priority = DMA_PRIORITY_LOW;
 80008b4:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_cordic_write) != HAL_OK)
 80008ba:	480d      	ldr	r0, [pc, #52]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008bc:	f004 fc76 	bl	80051ac <HAL_DMA_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <HAL_CORDIC_MspInit+0xca>
    {
      Error_Handler();
 80008c6:	f000 faef 	bl	8000ea8 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaIn,hdma_cordic_write);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008ce:	619a      	str	r2, [r3, #24]
 80008d0:	4a07      	ldr	r2, [pc, #28]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	40021000 	.word	0x40021000
 80008e8:	20000370 	.word	0x20000370
 80008ec:	4002041c 	.word	0x4002041c
 80008f0:	200003d0 	.word	0x200003d0
 80008f4:	40020430 	.word	0x40020430

080008f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <MX_DMA_Init+0x70>)
 8000900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000902:	4a19      	ldr	r2, [pc, #100]	@ (8000968 <MX_DMA_Init+0x70>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6493      	str	r3, [r2, #72]	@ 0x48
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <MX_DMA_Init+0x70>)
 800090c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_DMA_Init+0x70>)
 8000918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800091a:	4a13      	ldr	r2, [pc, #76]	@ (8000968 <MX_DMA_Init+0x70>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6493      	str	r3, [r2, #72]	@ 0x48
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_DMA_Init+0x70>)
 8000924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2105      	movs	r1, #5
 8000932:	2038      	movs	r0, #56	@ 0x38
 8000934:	f004 fc12 	bl	800515c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000938:	2038      	movs	r0, #56	@ 0x38
 800093a:	f004 fc29 	bl	8005190 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2105      	movs	r1, #5
 8000942:	2039      	movs	r0, #57	@ 0x39
 8000944:	f004 fc0a 	bl	800515c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000948:	2039      	movs	r0, #57	@ 0x39
 800094a:	f004 fc21 	bl	8005190 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2105      	movs	r1, #5
 8000952:	203a      	movs	r0, #58	@ 0x3a
 8000954:	f004 fc02 	bl	800515c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000958:	203a      	movs	r0, #58	@ 0x3a
 800095a:	f004 fc19 	bl	8005190 <HAL_NVIC_EnableIRQ>

}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000

0800096c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000970:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 8000972:	4a20      	ldr	r2, [pc, #128]	@ (80009f4 <MX_FDCAN1_Init+0x88>)
 8000974:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000976:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800097c:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000982:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000988:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 800098a:	2200      	movs	r2, #0
 800098c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800098e:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 8000990:	2200      	movs	r2, #0
 8000992:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000994:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 8000996:	2200      	movs	r2, #0
 8000998:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 800099c:	2214      	movs	r2, #20
 800099e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80009a0:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80009a6:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009a8:	220e      	movs	r2, #14
 80009aa:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80009ac:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009ae:	2202      	movs	r2, #2
 80009b0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80009b8:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 80009be:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009c0:	220e      	movs	r2, #14
 80009c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009c6:	2202      	movs	r2, #2
 80009c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = FDCAN_STD_FILTER_NBR;
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009d0:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009d8:	2200      	movs	r2, #0
 80009da:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009de:	f004 feb9 	bl	8005754 <HAL_FDCAN_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80009e8:	f000 fa5e 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000430 	.word	0x20000430
 80009f4:	40006400 	.word	0x40006400

080009f8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b09a      	sub	sp, #104	@ 0x68
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	2244      	movs	r2, #68	@ 0x44
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f00b ff85 	bl	800c928 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a28      	ldr	r2, [pc, #160]	@ (8000ac4 <HAL_FDCAN_MspInit+0xcc>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d149      	bne.n	8000abc <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a2c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a32:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f006 fc33 	bl	80072a4 <HAL_RCCEx_PeriphCLKConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a44:	f000 fa30 	bl	8000ea8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac8 <HAL_FDCAN_MspInit+0xd0>)
 8000a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac8 <HAL_FDCAN_MspInit+0xd0>)
 8000a4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a52:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac8 <HAL_FDCAN_MspInit+0xd0>)
 8000a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <HAL_FDCAN_MspInit+0xd0>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a64:	4a18      	ldr	r2, [pc, #96]	@ (8000ac8 <HAL_FDCAN_MspInit+0xd0>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <HAL_FDCAN_MspInit+0xd0>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a78:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a7c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a8a:	2309      	movs	r3, #9
 8000a8c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a92:	4619      	mov	r1, r3
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a98:	f005 fb0c 	bl	80060b4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2105      	movs	r1, #5
 8000aa0:	2015      	movs	r0, #21
 8000aa2:	f004 fb5b 	bl	800515c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000aa6:	2015      	movs	r0, #21
 8000aa8:	f004 fb72 	bl	8005190 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2105      	movs	r1, #5
 8000ab0:	2016      	movs	r0, #22
 8000ab2:	f004 fb53 	bl	800515c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000ab6:	2016      	movs	r0, #22
 8000ab8:	f004 fb6a 	bl	8005190 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000abc:	bf00      	nop
 8000abe:	3768      	adds	r7, #104	@ 0x68
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40006400 	.word	0x40006400
 8000ac8:	40021000 	.word	0x40021000

08000acc <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4b42      	ldr	r3, [pc, #264]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae6:	4a41      	ldr	r2, [pc, #260]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aee:	4b3f      	ldr	r3, [pc, #252]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000afa:	4b3c      	ldr	r3, [pc, #240]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afe:	4a3b      	ldr	r2, [pc, #236]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000b00:	f043 0320 	orr.w	r3, r3, #32
 8000b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b06:	4b39      	ldr	r3, [pc, #228]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	f003 0320 	and.w	r3, r3, #32
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b36      	ldr	r3, [pc, #216]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	4a35      	ldr	r2, [pc, #212]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1e:	4b33      	ldr	r3, [pc, #204]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b30      	ldr	r3, [pc, #192]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	4a2f      	ldr	r2, [pc, #188]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b36:	4b2d      	ldr	r3, [pc, #180]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2120      	movs	r1, #32
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b4a:	f005 fc35 	bl	80063b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8000b54:	4826      	ldr	r0, [pc, #152]	@ (8000bf0 <MX_GPIO_Init+0x124>)
 8000b56:	f005 fc2f 	bl	80063b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b5a:	230c      	movs	r3, #12
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b6a:	230c      	movs	r3, #12
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b78:	f005 fa9c 	bl	80060b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b7c:	2320      	movs	r3, #32
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b96:	f005 fa8d 	bl	80060b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8000b9a:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480f      	ldr	r0, [pc, #60]	@ (8000bf0 <MX_GPIO_Init+0x124>)
 8000bb4:	f005 fa7e 	bl	80060b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000bb8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000bbe:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4809      	ldr	r0, [pc, #36]	@ (8000bf4 <MX_GPIO_Init+0x128>)
 8000bd0:	f005 fa70 	bl	80060b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2105      	movs	r1, #5
 8000bd8:	2028      	movs	r0, #40	@ 0x28
 8000bda:	f004 fabf 	bl	800515c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bde:	2028      	movs	r0, #40	@ 0x28
 8000be0:	f004 fad6 	bl	8005190 <HAL_NVIC_EnableIRQ>

}
 8000be4:	bf00      	nop
 8000be6:	3728      	adds	r7, #40	@ 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	48000400 	.word	0x48000400
 8000bf4:	48000800 	.word	0x48000800

08000bf8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8000c70 <MX_I2C1_Init+0x78>)
 8000c00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c04:	4a1b      	ldr	r2, [pc, #108]	@ (8000c74 <MX_I2C1_Init+0x7c>)
 8000c06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c08:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c14:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c32:	480e      	ldr	r0, [pc, #56]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c34:	f005 fbf0 	bl	8006418 <HAL_I2C_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c3e:	f000 f933 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4809      	ldr	r0, [pc, #36]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c46:	f005 fc82 	bl	800654e <HAL_I2CEx_ConfigAnalogFilter>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c50:	f000 f92a 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c54:	2100      	movs	r1, #0
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c58:	f005 fcc4 	bl	80065e4 <HAL_I2CEx_ConfigDigitalFilter>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c62:	f000 f921 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000494 	.word	0x20000494
 8000c70:	40005400 	.word	0x40005400
 8000c74:	40b285c2 	.word	0x40b285c2

08000c78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b09c      	sub	sp, #112	@ 0x70
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c90:	f107 0318 	add.w	r3, r7, #24
 8000c94:	2244      	movs	r2, #68	@ 0x44
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f00b fe45 	bl	800c928 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a2d      	ldr	r2, [pc, #180]	@ (8000d58 <HAL_I2C_MspInit+0xe0>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d153      	bne.n	8000d50 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ca8:	2340      	movs	r3, #64	@ 0x40
 8000caa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb0:	f107 0318 	add.w	r3, r7, #24
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f006 faf5 	bl	80072a4 <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000cc0:	f000 f8f2 	bl	8000ea8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b25      	ldr	r3, [pc, #148]	@ (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc8:	4a24      	ldr	r2, [pc, #144]	@ (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd0:	4b22      	ldr	r3, [pc, #136]	@ (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000ce2:	f043 0302 	orr.w	r3, r3, #2
 8000ce6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cf4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cfa:	2312      	movs	r3, #18
 8000cfc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d06:	2304      	movs	r3, #4
 8000d08:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d14:	f005 f9ce 	bl	80060b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d18:	2380      	movs	r3, #128	@ 0x80
 8000d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1c:	2312      	movs	r3, #18
 8000d1e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d30:	4619      	mov	r1, r3
 8000d32:	480b      	ldr	r0, [pc, #44]	@ (8000d60 <HAL_I2C_MspInit+0xe8>)
 8000d34:	f005 f9be 	bl	80060b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3c:	4a07      	ldr	r2, [pc, #28]	@ (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000d3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d42:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d50:	bf00      	nop
 8000d52:	3770      	adds	r7, #112	@ 0x70
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	48000400 	.word	0x48000400

08000d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d68:	f002 fd88 	bl	800387c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6c:	f000 f83c 	bl	8000de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d70:	f7ff feac 	bl	8000acc <MX_GPIO_Init>
  MX_DMA_Init();
 8000d74:	f7ff fdc0 	bl	80008f8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d78:	f7ff fbe8 	bl	800054c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000d7c:	f7ff fdf6 	bl	800096c <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000d80:	f000 f9b6 	bl	80010f0 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000d84:	f7ff ff38 	bl	8000bf8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000d88:	f000 fa64 	bl	8001254 <MX_TIM2_Init>
  MX_CORDIC_Init();
 8000d8c:	f7ff fd24 	bl	80007d8 <MX_CORDIC_Init>
  MX_TIM3_Init();
 8000d90:	f000 fab6 	bl	8001300 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d94:	f008 fece 	bl	8009b34 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d98:	f7ff fcf0 	bl	800077c <MX_FREERTOS_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f002 fbf5 	bl	800358c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000da2:	2101      	movs	r1, #1
 8000da4:	2000      	movs	r0, #0
 8000da6:	f002 fc27 	bl	80035f8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <main+0x80>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000db0:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <main+0x80>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <main+0x80>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <main+0x80>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <main+0x80>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000dca:	4906      	ldr	r1, [pc, #24]	@ (8000de4 <main+0x80>)
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f002 fc9f 	bl	8003710 <BSP_COM_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <main+0x78>
  {
    Error_Handler();
 8000dd8:	f000 f866 	bl	8000ea8 <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 8000ddc:	f008 fece 	bl	8009b7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <main+0x7c>
 8000de4:	200004e8 	.word	0x200004e8

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b094      	sub	sp, #80	@ 0x50
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0318 	add.w	r3, r7, #24
 8000df2:	2238      	movs	r2, #56	@ 0x38
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f00b fd96 	bl	800c928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f005 fc36 	bl	800667c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1a:	2340      	movs	r3, #64	@ 0x40
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e22:	2302      	movs	r3, #2
 8000e24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e26:	2304      	movs	r3, #4
 8000e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e2a:	2355      	movs	r3, #85	@ 0x55
 8000e2c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e32:	2302      	movs	r3, #2
 8000e34:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3a:	f107 0318 	add.w	r3, r7, #24
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f005 fcd0 	bl	80067e4 <HAL_RCC_OscConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e4a:	f000 f82d 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4e:	230f      	movs	r3, #15
 8000e50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e52:	2303      	movs	r3, #3
 8000e54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2104      	movs	r1, #4
 8000e66:	4618      	mov	r0, r3
 8000e68:	f005 ffce 	bl	8006e08 <HAL_RCC_ClockConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e72:	f000 f819 	bl	8000ea8 <Error_Handler>
  }
}
 8000e76:	bf00      	nop
 8000e78:	3750      	adds	r7, #80	@ 0x50
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a05      	ldr	r2, [pc, #20]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e92:	f002 fd0b 	bl	80038ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  HAL_TIM_PeriodElapsedCallback_OWN(htim);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f000 fd9a 	bl	80019d0 <HAL_TIM_PeriodElapsedCallback_OWN>
  /* USER CODE END Callback 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40001000 	.word	0x40001000

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <Error_Handler+0x8>

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <HAL_MspInit+0x50>)
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ebe:	4a11      	ldr	r2, [pc, #68]	@ (8000f04 <HAL_MspInit+0x50>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <HAL_MspInit+0x50>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <HAL_MspInit+0x50>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	@ (8000f04 <HAL_MspInit+0x50>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000edc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ede:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <HAL_MspInit+0x50>)
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	210f      	movs	r1, #15
 8000eee:	f06f 0001 	mvn.w	r0, #1
 8000ef2:	f004 f933 	bl	800515c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ef6:	f005 fc65 	bl	80067c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000

08000f08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	@ 0x30
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f18:	4b2c      	ldr	r3, [pc, #176]	@ (8000fcc <HAL_InitTick+0xc4>)
 8000f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8000fcc <HAL_InitTick+0xc4>)
 8000f1e:	f043 0310 	orr.w	r3, r3, #16
 8000f22:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f24:	4b29      	ldr	r3, [pc, #164]	@ (8000fcc <HAL_InitTick+0xc4>)
 8000f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f28:	f003 0310 	and.w	r3, r3, #16
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f30:	f107 020c 	add.w	r2, r7, #12
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f006 f93a 	bl	80071b4 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f40:	f006 f90c 	bl	800715c <HAL_RCC_GetPCLK1Freq>
 8000f44:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f48:	4a21      	ldr	r2, [pc, #132]	@ (8000fd0 <HAL_InitTick+0xc8>)
 8000f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4e:	0c9b      	lsrs	r3, r3, #18
 8000f50:	3b01      	subs	r3, #1
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f54:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <HAL_InitTick+0xcc>)
 8000f56:	4a20      	ldr	r2, [pc, #128]	@ (8000fd8 <HAL_InitTick+0xd0>)
 8000f58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <HAL_InitTick+0xcc>)
 8000f5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f60:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f62:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd4 <HAL_InitTick+0xcc>)
 8000f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f66:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <HAL_InitTick+0xcc>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <HAL_InitTick+0xcc>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000f74:	4817      	ldr	r0, [pc, #92]	@ (8000fd4 <HAL_InitTick+0xcc>)
 8000f76:	f006 fb85 	bl	8007684 <HAL_TIM_Base_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d11b      	bne.n	8000fc0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f88:	4812      	ldr	r0, [pc, #72]	@ (8000fd4 <HAL_InitTick+0xcc>)
 8000f8a:	f006 fc3f 	bl	800780c <HAL_TIM_Base_Start_IT>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d111      	bne.n	8000fc0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f9c:	2036      	movs	r0, #54	@ 0x36
 8000f9e:	f004 f8f7 	bl	8005190 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d808      	bhi.n	8000fba <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	2036      	movs	r0, #54	@ 0x36
 8000fae:	f004 f8d5 	bl	800515c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <HAL_InitTick+0xd4>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	e002      	b.n	8000fc0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3730      	adds	r7, #48	@ 0x30
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	431bde83 	.word	0x431bde83
 8000fd4:	200004f8 	.word	0x200004f8
 8000fd8:	40001000 	.word	0x40001000
 8000fdc:	200001f8 	.word	0x200001f8

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <UsageFault_Handler+0x4>

08001008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <FDCAN1_IT0_IRQHandler+0x10>)
 800101e:	f004 fe83 	bl	8005d28 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000430 	.word	0x20000430

0800102c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <FDCAN1_IT1_IRQHandler+0x10>)
 8001032:	f004 fe79 	bl	8005d28 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000430 	.word	0x20000430

08001040 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001046:	f006 fe8f 	bl	8007d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000544 	.word	0x20000544

08001054 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001058:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800105c:	f005 f9c4 	bl	80063e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001060:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001064:	f005 f9c0 	bl	80063e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001068:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800106c:	f005 f9bc 	bl	80063e8 <HAL_GPIO_EXTI_IRQHandler>
  BSP_PB_IRQHandler(BUTTON_USER);
 8001070:	2000      	movs	r0, #0
 8001072:	f002 fb2f 	bl	80036d4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <TIM6_DAC_IRQHandler+0x10>)
 8001082:	f006 fe71 	bl	8007d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200004f8 	.word	0x200004f8

08001090 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <DMA2_Channel1_IRQHandler+0x10>)
 8001096:	f004 f9ac 	bl	80053f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200002dc 	.word	0x200002dc

080010a4 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_read);
 80010a8:	4802      	ldr	r0, [pc, #8]	@ (80010b4 <DMA2_Channel2_IRQHandler+0x10>)
 80010aa:	f004 f9a2 	bl	80053f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000370 	.word	0x20000370

080010b8 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_write);
 80010bc:	4802      	ldr	r0, [pc, #8]	@ (80010c8 <DMA2_Channel3_IRQHandler+0x10>)
 80010be:	f004 f998 	bl	80053f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200003d0 	.word	0x200003d0

080010cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <SystemInit+0x20>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010d6:	4a05      	ldr	r2, [pc, #20]	@ (80010ec <SystemInit+0x20>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b098      	sub	sp, #96	@ 0x60
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001102:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]
 8001112:	615a      	str	r2, [r3, #20]
 8001114:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2234      	movs	r2, #52	@ 0x34
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f00b fc03 	bl	800c928 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001122:	4b4a      	ldr	r3, [pc, #296]	@ (800124c <MX_TIM1_Init+0x15c>)
 8001124:	4a4a      	ldr	r2, [pc, #296]	@ (8001250 <MX_TIM1_Init+0x160>)
 8001126:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC;
 8001128:	4b48      	ldr	r3, [pc, #288]	@ (800124c <MX_TIM1_Init+0x15c>)
 800112a:	2210      	movs	r2, #16
 800112c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800112e:	4b47      	ldr	r3, [pc, #284]	@ (800124c <MX_TIM1_Init+0x15c>)
 8001130:	2220      	movs	r2, #32
 8001132:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR;
 8001134:	4b45      	ldr	r3, [pc, #276]	@ (800124c <MX_TIM1_Init+0x15c>)
 8001136:	22fa      	movs	r2, #250	@ 0xfa
 8001138:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113a:	4b44      	ldr	r3, [pc, #272]	@ (800124c <MX_TIM1_Init+0x15c>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001140:	4b42      	ldr	r3, [pc, #264]	@ (800124c <MX_TIM1_Init+0x15c>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001146:	4b41      	ldr	r3, [pc, #260]	@ (800124c <MX_TIM1_Init+0x15c>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800114c:	483f      	ldr	r0, [pc, #252]	@ (800124c <MX_TIM1_Init+0x15c>)
 800114e:	f006 fc1e 	bl	800798e <HAL_TIM_PWM_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001158:	f7ff fea6 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 8001160:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001164:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800116a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800116e:	4619      	mov	r1, r3
 8001170:	4836      	ldr	r0, [pc, #216]	@ (800124c <MX_TIM1_Init+0x15c>)
 8001172:	f007 fdc9 	bl	8008d08 <HAL_TIMEx_MasterConfigSynchronization>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800117c:	f7ff fe94 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001180:	2360      	movs	r3, #96	@ 0x60
 8001182:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001188:	2302      	movs	r3, #2
 800118a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800118c:	2300      	movs	r3, #0
 800118e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001194:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001198:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800119e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011a2:	2200      	movs	r2, #0
 80011a4:	4619      	mov	r1, r3
 80011a6:	4829      	ldr	r0, [pc, #164]	@ (800124c <MX_TIM1_Init+0x15c>)
 80011a8:	f006 ffa8 	bl	80080fc <HAL_TIM_PWM_ConfigChannel>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80011b2:	f7ff fe79 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011ba:	2204      	movs	r2, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	4823      	ldr	r0, [pc, #140]	@ (800124c <MX_TIM1_Init+0x15c>)
 80011c0:	f006 ff9c 	bl	80080fc <HAL_TIM_PWM_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80011ca:	f7ff fe6d 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011d2:	2208      	movs	r2, #8
 80011d4:	4619      	mov	r1, r3
 80011d6:	481d      	ldr	r0, [pc, #116]	@ (800124c <MX_TIM1_Init+0x15c>)
 80011d8:	f006 ff90 	bl	80080fc <HAL_TIM_PWM_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80011e2:	f7ff fe61 	bl	8000ea8 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80011e6:	4819      	ldr	r0, [pc, #100]	@ (800124c <MX_TIM1_Init+0x15c>)
 80011e8:	f007 fe9c 	bl	8008f24 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80011ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80011f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = TIM_DTG_200ns;
 80011fc:	2322      	movs	r3, #34	@ 0x22
 80011fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001204:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001208:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800120e:	2300      	movs	r3, #0
 8001210:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001216:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800121a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4807      	ldr	r0, [pc, #28]	@ (800124c <MX_TIM1_Init+0x15c>)
 800122e:	f007 fded 	bl	8008e0c <HAL_TIMEx_ConfigBreakDeadTime>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8001238:	f7ff fe36 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800123c:	4803      	ldr	r0, [pc, #12]	@ (800124c <MX_TIM1_Init+0x15c>)
 800123e:	f000 f90f 	bl	8001460 <HAL_TIM_MspPostInit>

}
 8001242:	bf00      	nop
 8001244:	3760      	adds	r7, #96	@ 0x60
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000544 	.word	0x20000544
 8001250:	40012c00 	.word	0x40012c00

08001254 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	@ 0x28
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001266:	463b      	mov	r3, r7
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
 8001274:	615a      	str	r2, [r3, #20]
 8001276:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001278:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <MX_TIM2_Init+0xa8>)
 800127a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800127e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PSC;
 8001280:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <MX_TIM2_Init+0xa8>)
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <MX_TIM2_Init+0xa8>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_ARR;
 800128c:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <MX_TIM2_Init+0xa8>)
 800128e:	f04f 32ff 	mov.w	r2, #4294967295
 8001292:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001294:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <MX_TIM2_Init+0xa8>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129a:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <MX_TIM2_Init+0xa8>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80012a0:	4816      	ldr	r0, [pc, #88]	@ (80012fc <MX_TIM2_Init+0xa8>)
 80012a2:	f006 fb1d 	bl	80078e0 <HAL_TIM_OC_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80012ac:	f7ff fdfc 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	480f      	ldr	r0, [pc, #60]	@ (80012fc <MX_TIM2_Init+0xa8>)
 80012c0:	f007 fd22 	bl	8008d08 <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80012ca:	f7ff fded 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	@ (80012fc <MX_TIM2_Init+0xa8>)
 80012e6:	f006 fe8f 	bl	8008008 <HAL_TIM_OC_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80012f0:	f7ff fdda 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	@ 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000590 	.word	0x20000590

08001300 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001312:	463b      	mov	r3, r7
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
 8001320:	615a      	str	r2, [r3, #20]
 8001322:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001324:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 8001326:	4a21      	ldr	r2, [pc, #132]	@ (80013ac <MX_TIM3_Init+0xac>)
 8001328:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = TIM3_PSC;
 800132a:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 800132c:	2210      	movs	r2, #16
 800132e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001330:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR;
 8001336:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 8001338:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800133c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133e:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001344:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800134a:	4817      	ldr	r0, [pc, #92]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 800134c:	f006 fac8 	bl	80078e0 <HAL_TIM_OC_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001356:	f7ff fda7 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	480f      	ldr	r0, [pc, #60]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 800136a:	f007 fccd 	bl	8008d08 <HAL_TIMEx_MasterConfigSynchronization>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001374:	f7ff fd98 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001378:	2300      	movs	r3, #0
 800137a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	2200      	movs	r2, #0
 800138c:	4619      	mov	r1, r3
 800138e:	4806      	ldr	r0, [pc, #24]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 8001390:	f006 fe3a 	bl	8008008 <HAL_TIM_OC_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800139a:	f7ff fd85 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	@ 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200005dc 	.word	0x200005dc
 80013ac:	40000400 	.word	0x40000400

080013b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0d      	ldr	r2, [pc, #52]	@ (80013f4 <HAL_TIM_PWM_MspInit+0x44>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d113      	bne.n	80013ea <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013c2:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <HAL_TIM_PWM_MspInit+0x48>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c6:	4a0c      	ldr	r2, [pc, #48]	@ (80013f8 <HAL_TIM_PWM_MspInit+0x48>)
 80013c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80013ce:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <HAL_TIM_PWM_MspInit+0x48>)
 80013d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2105      	movs	r1, #5
 80013de:	2019      	movs	r0, #25
 80013e0:	f003 febc 	bl	800515c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013e4:	2019      	movs	r0, #25
 80013e6:	f003 fed3 	bl	8005190 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40012c00 	.word	0x40012c00
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800140c:	d10c      	bne.n	8001428 <HAL_TIM_OC_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800140e:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <HAL_TIM_OC_MspInit+0x5c>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001412:	4a11      	ldr	r2, [pc, #68]	@ (8001458 <HAL_TIM_OC_MspInit+0x5c>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6593      	str	r3, [r2, #88]	@ 0x58
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <HAL_TIM_OC_MspInit+0x5c>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001426:	e010      	b.n	800144a <HAL_TIM_OC_MspInit+0x4e>
  else if(tim_ocHandle->Instance==TIM3)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0b      	ldr	r2, [pc, #44]	@ (800145c <HAL_TIM_OC_MspInit+0x60>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d10b      	bne.n	800144a <HAL_TIM_OC_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <HAL_TIM_OC_MspInit+0x5c>)
 8001434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001436:	4a08      	ldr	r2, [pc, #32]	@ (8001458 <HAL_TIM_OC_MspInit+0x5c>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	6593      	str	r3, [r2, #88]	@ 0x58
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_TIM_OC_MspInit+0x5c>)
 8001440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000
 800145c:	40000400 	.word	0x40000400

08001460 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a28      	ldr	r2, [pc, #160]	@ (8001520 <HAL_TIM_MspPostInit+0xc0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d149      	bne.n	8001516 <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001482:	4b28      	ldr	r3, [pc, #160]	@ (8001524 <HAL_TIM_MspPostInit+0xc4>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	4a27      	ldr	r2, [pc, #156]	@ (8001524 <HAL_TIM_MspPostInit+0xc4>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148e:	4b25      	ldr	r3, [pc, #148]	@ (8001524 <HAL_TIM_MspPostInit+0xc4>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	4b22      	ldr	r3, [pc, #136]	@ (8001524 <HAL_TIM_MspPostInit+0xc4>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	4a21      	ldr	r2, [pc, #132]	@ (8001524 <HAL_TIM_MspPostInit+0xc4>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <HAL_TIM_MspPostInit+0xc4>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80014b2:	2307      	movs	r3, #7
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80014c2:	2302      	movs	r3, #2
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4816      	ldr	r0, [pc, #88]	@ (8001528 <HAL_TIM_MspPostInit+0xc8>)
 80014ce:	f004 fdf1 	bl	80060b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80014d2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014e4:	2306      	movs	r3, #6
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	480f      	ldr	r0, [pc, #60]	@ (800152c <HAL_TIM_MspPostInit+0xcc>)
 80014f0:	f004 fde0 	bl	80060b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001506:	2304      	movs	r3, #4
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	4806      	ldr	r0, [pc, #24]	@ (800152c <HAL_TIM_MspPostInit+0xcc>)
 8001512:	f004 fdcf 	bl	80060b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001516:	bf00      	nop
 8001518:	3728      	adds	r7, #40	@ 0x28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40012c00 	.word	0x40012c00
 8001524:	40021000 	.word	0x40021000
 8001528:	48000800 	.word	0x48000800
 800152c:	48000400 	.word	0x48000400

08001530 <average>:
    }
    return RESULT_OK(NULL);
}

static Result average(uint16_t adc_id, volatile uint16_t *adc_store)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	@ 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	460b      	mov	r3, r1
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	817b      	strh	r3, [r7, #10]
    uint16_t i;
    uint32_t total = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < ADC_NEED_LEN; i++)
 8001542:	2300      	movs	r3, #0
 8001544:	83fb      	strh	r3, [r7, #30]
 8001546:	e00f      	b.n	8001568 <average+0x38>
    {
        total += ADC_Values[i * ADC_COUNT + adc_id];
 8001548:	8bfa      	ldrh	r2, [r7, #30]
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	441a      	add	r2, r3
 8001550:	897b      	ldrh	r3, [r7, #10]
 8001552:	4413      	add	r3, r2
 8001554:	4a10      	ldr	r2, [pc, #64]	@ (8001598 <average+0x68>)
 8001556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800155a:	461a      	mov	r2, r3
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	4413      	add	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < ADC_NEED_LEN; i++)
 8001562:	8bfb      	ldrh	r3, [r7, #30]
 8001564:	3301      	adds	r3, #1
 8001566:	83fb      	strh	r3, [r7, #30]
 8001568:	8bfb      	ldrh	r3, [r7, #30]
 800156a:	2b08      	cmp	r3, #8
 800156c:	d9ec      	bls.n	8001548 <average+0x18>
    }
    *adc_store = (uint16_t)(total / ADC_NEED_LEN);
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4a0a      	ldr	r2, [pc, #40]	@ (800159c <average+0x6c>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	085b      	lsrs	r3, r3, #1
 8001578:	b29a      	uxth	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	801a      	strh	r2, [r3, #0]
    return RESULT_OK(NULL);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	605a      	str	r2, [r3, #4]
}
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	3724      	adds	r7, #36	@ 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000628 	.word	0x20000628
 800159c:	38e38e39 	.word	0x38e38e39

080015a0 <renew_adc>:

Result renew_adc(uint16_t adc_id, volatile uint16_t *adc_store)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	460b      	mov	r3, r1
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	817b      	strh	r3, [r7, #10]
    return average(adc_id, adc_store);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8979      	ldrh	r1, [r7, #10]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ffbb 	bl	8001530 <average>
}
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <StartAdcTask>:

void StartAdcTask(void *argument)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Values, ADC_COUNT * ADC_NEED_LEN);
 80015cc:	221b      	movs	r2, #27
 80015ce:	4903      	ldr	r1, [pc, #12]	@ (80015dc <StartAdcTask+0x18>)
 80015d0:	4803      	ldr	r0, [pc, #12]	@ (80015e0 <StartAdcTask+0x1c>)
 80015d2:	f002 fd2b 	bl	800402c <HAL_ADC_Start_DMA>
    StopTask();
 80015d6:	f008 fb9e 	bl	8009d16 <osThreadExit>
 80015da:	bf00      	nop
 80015dc:	20000628 	.word	0x20000628
 80015e0:	20000270 	.word	0x20000270

080015e4 <fdcan_pkt_get_byte>:
bool fdcan_bus_off = false;

FncState fdacn_data_store = FNC_DISABLE;

Result fdcan_pkt_get_byte(FdcanPkt* pkt, uint8_t id, uint8_t* container)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	@ 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	4613      	mov	r3, r2
 80015f2:	71fb      	strb	r3, [r7, #7]
    if (pkt->len <= id) return RESULT_ERROR(RES_ERR_NOT_FOUND);
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	7b1b      	ldrb	r3, [r3, #12]
 80015f8:	79fa      	ldrb	r2, [r7, #7]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d308      	bcc.n	8001610 <fdcan_pkt_get_byte+0x2c>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	461a      	mov	r2, r3
 8001602:	2300      	movs	r3, #0
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	6053      	str	r3, [r2, #4]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2208      	movs	r2, #8
 800160c:	711a      	strb	r2, [r3, #4]
 800160e:	e00b      	b.n	8001628 <fdcan_pkt_get_byte+0x44>
    *container = pkt->data[id];
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	4413      	add	r3, r2
 8001616:	791a      	ldrb	r2, [r3, #4]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	701a      	strb	r2, [r3, #0]
    return RESULT_OK(container);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	605a      	str	r2, [r3, #4]
}
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	3724      	adds	r7, #36	@ 0x24
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <fdcan_pkt_pool_alloc>:
    }
    fdcan_pkt_pool.remain = FDCAN_PKT_POOL_CAP;
}

Result fdcan_pkt_pool_alloc(void)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	@ 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
    if (fdcan_pkt_pool.head == NULL) {
 800163c:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <fdcan_pkt_pool_alloc+0x64>)
 800163e:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8001642:	2b00      	cmp	r3, #0
 8001644:	d108      	bne.n	8001658 <fdcan_pkt_pool_alloc+0x24>
        return RESULT_ERROR(RES_ERR_EMPTY);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	461a      	mov	r2, r3
 800164a:	2300      	movs	r3, #0
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	6053      	str	r3, [r2, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2205      	movs	r2, #5
 8001654:	711a      	strb	r2, [r3, #4]
    FdcanPkt* pkt = fdcan_pkt_pool.head;
    fdcan_pkt_pool.head = pkt->next;
    pkt->next = NULL;
    fdcan_pkt_pool.remain--;
    return RESULT_OK(pkt);
}
 8001656:	e019      	b.n	800168c <fdcan_pkt_pool_alloc+0x58>
    FdcanPkt* pkt = fdcan_pkt_pool.head;
 8001658:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <fdcan_pkt_pool_alloc+0x64>)
 800165a:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 800165e:	61fb      	str	r3, [r7, #28]
    fdcan_pkt_pool.head = pkt->next;
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	4a0c      	ldr	r2, [pc, #48]	@ (8001698 <fdcan_pkt_pool_alloc+0x64>)
 8001666:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    pkt->next = NULL;
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.remain--;
 8001670:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <fdcan_pkt_pool_alloc+0x64>)
 8001672:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 8001676:	3b01      	subs	r3, #1
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b07      	ldr	r3, [pc, #28]	@ (8001698 <fdcan_pkt_pool_alloc+0x64>)
 800167c:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
    return RESULT_OK(pkt);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	605a      	str	r2, [r3, #4]
}
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	3724      	adds	r7, #36	@ 0x24
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	20000660 	.word	0x20000660

0800169c <fdcan_pkt_pool_free>:

void fdcan_pkt_pool_free(FdcanPkt* pkt)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
    memset(pkt->data, 0, sizeof(pkt->data));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3304      	adds	r3, #4
 80016a8:	2208      	movs	r2, #8
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00b f93b 	bl	800c928 <memset>
    pkt->len = 0;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	731a      	strb	r2, [r3, #12]
    pkt->next = fdcan_pkt_pool.head;
 80016b8:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <fdcan_pkt_pool_free+0x48>)
 80016ba:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.head = pkt;
 80016c2:	4a08      	ldr	r2, [pc, #32]	@ (80016e4 <fdcan_pkt_pool_free+0x48>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    fdcan_pkt_pool.remain++;
 80016ca:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <fdcan_pkt_pool_free+0x48>)
 80016cc:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 80016d0:	3301      	adds	r3, #1
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	4b03      	ldr	r3, [pc, #12]	@ (80016e4 <fdcan_pkt_pool_free+0x48>)
 80016d6:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000660 	.word	0x20000660

080016e8 <fdcan_pkt_buf_push>:
    .buf = recv_pkt_buf,
    .cap = FDCAN_RECV_BUF_CAP,
};

Result fdcan_pkt_buf_push(FdcanPktBuf* self, FdcanPkt* pkt)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b08b      	sub	sp, #44	@ 0x2c
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
    if (self->len >= self->cap) return RESULT_ERROR(RES_ERR_OVERFLOW);
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d308      	bcc.n	8001712 <fdcan_pkt_buf_push+0x2a>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	461a      	mov	r2, r3
 8001704:	2300      	movs	r3, #0
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	6053      	str	r3, [r2, #4]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2207      	movs	r2, #7
 800170e:	711a      	strb	r2, [r3, #4]
 8001710:	e01e      	b.n	8001750 <fdcan_pkt_buf_push+0x68>
    size_t tail = (self->head + self->len) % self->cap;
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	4413      	add	r3, r2
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	68d2      	ldr	r2, [r2, #12]
 8001720:	fbb3 f1f2 	udiv	r1, r3, r2
 8001724:	fb01 f202 	mul.w	r2, r1, r2
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
    self->buf[tail] = pkt;
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	601a      	str	r2, [r3, #0]
    self->len++;
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	609a      	str	r2, [r3, #8]
    return RESULT_OK(self);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	605a      	str	r2, [r3, #4]
}
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	372c      	adds	r7, #44	@ 0x2c
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_FDCAN_ErrorStatusCallback>:
#include "connectivity/fdcan/callback.h"
#include "fdcan.h"
#include "connectivity/fdcan/main.h"

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
    if (hfdcan == &hfdcan1)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a08      	ldr	r2, [pc, #32]	@ (800178c <HAL_FDCAN_ErrorStatusCallback+0x30>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d107      	bne.n	800177e <HAL_FDCAN_ErrorStatusCallback+0x22>
    {
        if (ITS_CHECK(ErrorStatusITs, FDCAN_IT_BUS_OFF))
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <HAL_FDCAN_ErrorStatusCallback+0x22>
        {
            fdcan_bus_off = true;
 8001778:	4b05      	ldr	r3, [pc, #20]	@ (8001790 <HAL_FDCAN_ErrorStatusCallback+0x34>)
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
        }
    }
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000430 	.word	0x20000430
 8001790:	200008e8 	.word	0x200008e8

08001794 <HAL_FDCAN_TxEventFifoCallback>:

void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08c      	sub	sp, #48	@ 0x30
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_NEW_DATA))
    {
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_FULL))
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_FDCAN_TxEventFifoCallback+0x20>
    {
        FDCAN_TxEventFifoTypeDef txEvent;
        HAL_FDCAN_GetTxEvent(hfdcan, &txEvent);
 80017a8:	f107 0308 	add.w	r3, r7, #8
 80017ac:	4619      	mov	r1, r3
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f004 fa32 	bl	8005c18 <HAL_FDCAN_GetTxEvent>
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_ELT_LOST))
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_FDCAN_TxEventFifoCallback+0x2e>
    {
        Error_Handler();
 80017be:	f7ff fb73 	bl	8000ea8 <Error_Handler>
    }
}
 80017c2:	bf00      	nop
 80017c4:	3730      	adds	r7, #48	@ 0x30
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_FDCAN_TxBufferCompleteCallback>:

void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_FDCAN_RxFifo0Callback>:

FDCAN_RxHeaderTypeDef RxHeader0 = {0};
FDCAN_RxHeaderTypeDef RxHeader1 = {0};
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	@ 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
    if(ITS_CHECK(RxFifo0ITs, FDCAN_IT_RX_FIFO0_NEW_MESSAGE))
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d05b      	beq.n	80018ac <HAL_FDCAN_RxFifo0Callback+0xcc>
    {
        FdcanPkt* pkt = RESULT_UNWRAP_HANDLE(fdcan_pkt_pool_alloc());
 80017f4:	f107 0318 	add.w	r3, r7, #24
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff1b 	bl	8001634 <fdcan_pkt_pool_alloc>
 80017fe:	7e3b      	ldrb	r3, [r7, #24]
 8001800:	f083 0301 	eor.w	r3, r3, #1
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <HAL_FDCAN_RxFifo0Callback+0x36>
 800180a:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800180e:	4b29      	ldr	r3, [pc, #164]	@ (80018b4 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	f7ff fb49 	bl	8000ea8 <Error_Handler>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24
        ERROR_CHECK_HAL_HANDLE(HAL_FDCAN_GetRxMessage(
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	3304      	adds	r3, #4
 800181e:	4a26      	ldr	r2, [pc, #152]	@ (80018b8 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8001820:	2140      	movs	r1, #64	@ 0x40
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f004 f8f0 	bl	8005a08 <HAL_FDCAN_GetRxMessage>
 8001828:	4603      	mov	r3, r0
 800182a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800182e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001832:	2b00      	cmp	r3, #0
 8001834:	d005      	beq.n	8001842 <HAL_FDCAN_RxFifo0Callback+0x62>
 8001836:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 800183a:	4b1e      	ldr	r3, [pc, #120]	@ (80018b4 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800183c:	701a      	strb	r2, [r3, #0]
 800183e:	f7ff fb33 	bl	8000ea8 <Error_Handler>
            hfdcan, FDCAN_RX_FIFO0, &RxHeader0, pkt->data));
        pkt->id = RxHeader0.Identifier;
 8001842:	4b1d      	ldr	r3, [pc, #116]	@ (80018b8 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001848:	601a      	str	r2, [r3, #0]
        pkt->len = RxHeader0.DataLength;
 800184a:	4b1b      	ldr	r3, [pc, #108]	@ (80018b8 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	b2da      	uxtb	r2, r3
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	731a      	strb	r2, [r3, #12]
        if (pkt->id >= FDCAN_FILTER0_ID_MIN && pkt->id <= FDCAN_FILTER0_ID_MAX)
 8001854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b1f      	cmp	r3, #31
 800185a:	d90c      	bls.n	8001876 <HAL_FDCAN_RxFifo0Callback+0x96>
 800185c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b21      	cmp	r3, #33	@ 0x21
 8001862:	d808      	bhi.n	8001876 <HAL_FDCAN_RxFifo0Callback+0x96>
        {
            instant_recv_proc(pkt);
 8001864:	463b      	mov	r3, r7
 8001866:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001868:	4618      	mov	r0, r3
 800186a:	f000 f849 	bl	8001900 <instant_recv_proc>
            fdcan_pkt_pool_free(pkt);
 800186e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001870:	f7ff ff14 	bl	800169c <fdcan_pkt_pool_free>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
        }
        else
        {}
    }
}
 8001874:	e01a      	b.n	80018ac <HAL_FDCAN_RxFifo0Callback+0xcc>
        else if (pkt->id >= FDCAN_FILTER1_ID_MIN && pkt->id <= FDCAN_FILTER1_ID_MAX)
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b21      	cmp	r3, #33	@ 0x21
 800187c:	d916      	bls.n	80018ac <HAL_FDCAN_RxFifo0Callback+0xcc>
 800187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b23      	cmp	r3, #35	@ 0x23
 8001884:	d812      	bhi.n	80018ac <HAL_FDCAN_RxFifo0Callback+0xcc>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800188c:	490b      	ldr	r1, [pc, #44]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0xdc>)
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff2a 	bl	80016e8 <fdcan_pkt_buf_push>
 8001894:	7c3b      	ldrb	r3, [r7, #16]
 8001896:	f083 0301 	eor.w	r3, r3, #1
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_FDCAN_RxFifo0Callback+0xcc>
 80018a0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 80018a6:	701a      	strb	r2, [r3, #0]
 80018a8:	f7ff fafe 	bl	8000ea8 <Error_Handler>
}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	@ 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	2000093c 	.word	0x2000093c
 80018b8:	20000914 	.word	0x20000914
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
        //     hfdcan, FDCAN_RX_FIFO1, &RxHeader1, pkt->data));
        // pkt->id = RxHeader1.Identifier;
        // pkt->len = RxHeader1.DataLength;
        // RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
    }
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <instant_recv_proc_inner>:
#include "fdcan.h"
#include "connectivity/cmds.h"
#include "connectivity/fdcan/pkt_write.h"

__weak Result instant_recv_proc_inner(FdcanPkt* pkt, uint8_t byte0)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b087      	sub	sp, #28
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	4613      	mov	r3, r2
 80018e2:	71fb      	strb	r3, [r7, #7]
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	461a      	mov	r2, r3
 80018e8:	2300      	movs	r3, #0
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	6053      	str	r3, [r2, #4]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2208      	movs	r2, #8
 80018f2:	711a      	strb	r2, [r3, #4]
}
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <instant_recv_proc>:
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
}
#endif

Result instant_recv_proc(FdcanPkt* pkt)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	@ 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
    uint8_t code;
    RESULT_CHECK_RET_RES(fdcan_pkt_get_byte(pkt, 0, &code));
 800190a:	f107 001c 	add.w	r0, r7, #28
 800190e:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8001912:	2200      	movs	r2, #0
 8001914:	6839      	ldr	r1, [r7, #0]
 8001916:	f7ff fe65 	bl	80015e4 <fdcan_pkt_get_byte>
 800191a:	7f3b      	ldrb	r3, [r7, #28]
 800191c:	f083 0301 	eor.w	r3, r3, #1
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00c      	beq.n	8001940 <instant_recv_proc+0x40>
 8001926:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800192a:	4b18      	ldr	r3, [pc, #96]	@ (800198c <instant_recv_proc+0x8c>)
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	461a      	mov	r2, r3
 8001932:	f107 031c 	add.w	r3, r7, #28
 8001936:	e893 0003 	ldmia.w	r3, {r0, r1}
 800193a:	e882 0003 	stmia.w	r2, {r0, r1}
            fdacn_data_store = FNC_ENABLE;
            return RESULT_OK(NULL);
        }
        default: return instant_recv_proc_inner(pkt, code);
    }
}
 800193e:	e021      	b.n	8001984 <instant_recv_proc+0x84>
    switch (code)
 8001940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001944:	2b11      	cmp	r3, #17
 8001946:	d002      	beq.n	800194e <instant_recv_proc+0x4e>
 8001948:	2b12      	cmp	r3, #18
 800194a:	d00a      	beq.n	8001962 <instant_recv_proc+0x62>
 800194c:	e013      	b.n	8001976 <instant_recv_proc+0x76>
            fdacn_data_store = FNC_DISABLE;
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <instant_recv_proc+0x90>)
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	605a      	str	r2, [r3, #4]
}
 8001960:	e010      	b.n	8001984 <instant_recv_proc+0x84>
            fdacn_data_store = FNC_ENABLE;
 8001962:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <instant_recv_proc+0x90>)
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	605a      	str	r2, [r3, #4]
}
 8001974:	e006      	b.n	8001984 <instant_recv_proc+0x84>
        default: return instant_recv_proc_inner(pkt, code);
 8001976:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6839      	ldr	r1, [r7, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ffa9 	bl	80018d6 <instant_recv_proc_inner>
}
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	3728      	adds	r7, #40	@ 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	2000093c 	.word	0x2000093c
 8001990:	200008e9 	.word	0x200008e9

08001994 <HAL_GPIO_EXTI_Callback>:
#include "main/main.h"
#include "motor/main.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
    if (
           (GPIO_Pin == motor_h.const_h.Hall_GPIO_Pin_x[0])
 800199e:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x38>)
 80019a0:	8a1b      	ldrh	r3, [r3, #16]
    if (
 80019a2:	88fa      	ldrh	r2, [r7, #6]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d009      	beq.n	80019bc <HAL_GPIO_EXTI_Callback+0x28>
        || (GPIO_Pin == motor_h.const_h.Hall_GPIO_Pin_x[1])
 80019a8:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x38>)
 80019aa:	8a5b      	ldrh	r3, [r3, #18]
 80019ac:	88fa      	ldrh	r2, [r7, #6]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d004      	beq.n	80019bc <HAL_GPIO_EXTI_Callback+0x28>
        || (GPIO_Pin == motor_h.const_h.Hall_GPIO_Pin_x[2])
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x38>)
 80019b4:	8a9b      	ldrh	r3, [r3, #20]
 80019b6:	88fa      	ldrh	r2, [r7, #6]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d102      	bne.n	80019c2 <HAL_GPIO_EXTI_Callback+0x2e>
    ) {
        motor_hall_exti(&motor_h);
 80019bc:	4803      	ldr	r0, [pc, #12]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x38>)
 80019be:	f001 fa4b 	bl	8002e58 <motor_hall_exti>
    }
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000014 	.word	0x20000014

080019d0 <HAL_TIM_PeriodElapsedCallback_OWN>:

inline void HAL_TIM_PeriodElapsedCallback_OWN(TIM_HandleTypeDef *htim)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
    if (htim == motor_h.const_h.htimx)
 80019d8:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback_OWN+0x20>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d102      	bne.n	80019e8 <HAL_TIM_PeriodElapsedCallback_OWN+0x18>
    {
        motor_pwm_pulse(&motor_h);
 80019e2:	4803      	ldr	r0, [pc, #12]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback_OWN+0x20>)
 80019e4:	f001 fac0 	bl	8002f68 <motor_pwm_pulse>
    }
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000014 	.word	0x20000014

080019f4 <StartDefaultTask>:

#define DEFALT_TASK_DELAY_MS 50
uint32_t defalt_running;
void StartDefaultTask(void *argument)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
    const uint32_t osPeriod = pdMS_TO_TICKS(DEFALT_TASK_DELAY_MS);
 80019fc:	2332      	movs	r3, #50	@ 0x32
 80019fe:	60bb      	str	r3, [r7, #8]
    uint32_t next_wake = osKernelGetTickCount() + osPeriod;
 8001a00:	f008 f8e2 	bl	8009bc8 <osKernelGetTickCount>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	4413      	add	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
    for(;;)
    {
        defalt_running = HAL_GetTick();
 8001a0c:	f001 ff60 	bl	80038d0 <HAL_GetTick>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4a05      	ldr	r2, [pc, #20]	@ (8001a28 <StartDefaultTask+0x34>)
 8001a14:	6013      	str	r3, [r2, #0]
        osDelayUntil(next_wake);
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f008 f99f 	bl	8009d5a <osDelayUntil>
        next_wake += osPeriod;
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	4413      	add	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
        defalt_running = HAL_GetTick();
 8001a24:	bf00      	nop
 8001a26:	e7f1      	b.n	8001a0c <StartDefaultTask+0x18>
 8001a28:	20000940 	.word	0x20000940

08001a2c <motor_hall_to_angle>:
    },
    .pwm_it_angle_acc = 0.0f,
};

Result motor_hall_to_angle(uint8_t hall, float32_t *angle)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	@ 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	460b      	mov	r3, r1
 8001a36:	607a      	str	r2, [r7, #4]
 8001a38:	72fb      	strb	r3, [r7, #11]
    switch(hall)
 8001a3a:	7afb      	ldrb	r3, [r7, #11]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	2b05      	cmp	r3, #5
 8001a40:	d827      	bhi.n	8001a92 <motor_hall_to_angle+0x66>
 8001a42:	a201      	add	r2, pc, #4	@ (adr r2, 8001a48 <motor_hall_to_angle+0x1c>)
 8001a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a48:	08001a8b 	.word	0x08001a8b
 8001a4c:	08001a7b 	.word	0x08001a7b
 8001a50:	08001a83 	.word	0x08001a83
 8001a54:	08001a6b 	.word	0x08001a6b
 8001a58:	08001a61 	.word	0x08001a61
 8001a5c:	08001a73 	.word	0x08001a73
    {
        case 5:
        {
            *angle = 0.0f * DEG_TO_RAD;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
            break;
 8001a68:	e01c      	b.n	8001aa4 <motor_hall_to_angle+0x78>
        }
        case 4:
        {
            *angle = 60.0f * DEG_TO_RAD;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a13      	ldr	r2, [pc, #76]	@ (8001abc <motor_hall_to_angle+0x90>)
 8001a6e:	601a      	str	r2, [r3, #0]
            break;
 8001a70:	e018      	b.n	8001aa4 <motor_hall_to_angle+0x78>
        }
        case 6:
        {
            *angle = 120.0f * DEG_TO_RAD;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a12      	ldr	r2, [pc, #72]	@ (8001ac0 <motor_hall_to_angle+0x94>)
 8001a76:	601a      	str	r2, [r3, #0]
            break;
 8001a78:	e014      	b.n	8001aa4 <motor_hall_to_angle+0x78>
        }
        case 2:
        {
            *angle = 180.0f * DEG_TO_RAD;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a11      	ldr	r2, [pc, #68]	@ (8001ac4 <motor_hall_to_angle+0x98>)
 8001a7e:	601a      	str	r2, [r3, #0]
            break;
 8001a80:	e010      	b.n	8001aa4 <motor_hall_to_angle+0x78>
        }
        case 3:
        {
            *angle = 240.0f * DEG_TO_RAD;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a10      	ldr	r2, [pc, #64]	@ (8001ac8 <motor_hall_to_angle+0x9c>)
 8001a86:	601a      	str	r2, [r3, #0]
            break;
 8001a88:	e00c      	b.n	8001aa4 <motor_hall_to_angle+0x78>
        }
        case 1:
        {
            *angle = 300.0f * DEG_TO_RAD;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001acc <motor_hall_to_angle+0xa0>)
 8001a8e:	601a      	str	r2, [r3, #0]
            break;
 8001a90:	e008      	b.n	8001aa4 <motor_hall_to_angle+0x78>
        }
        default: return RESULT_ERROR(RES_ERR_NOT_FOUND);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	461a      	mov	r2, r3
 8001a96:	2300      	movs	r3, #0
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	6053      	str	r3, [r2, #4]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2208      	movs	r2, #8
 8001aa0:	711a      	strb	r2, [r3, #4]
    }
    return RESULT_OK(NULL);
}
 8001aa2:	e005      	b.n	8001ab0 <motor_hall_to_angle+0x84>
    return RESULT_OK(NULL);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	605a      	str	r2, [r3, #4]
}
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	3724      	adds	r7, #36	@ 0x24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	3f860a92 	.word	0x3f860a92
 8001ac0:	40060a92 	.word	0x40060a92
 8001ac4:	40490fdb 	.word	0x40490fdb
 8001ac8:	40860a92 	.word	0x40860a92
 8001acc:	40a78d36 	.word	0x40a78d36

08001ad0 <clampf>:

float32_t clampf(float32_t val, float32_t min, float32_t max)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ada:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ade:	ed87 1a01 	vstr	s2, [r7, #4]
    if (val > max) return max;
 8001ae2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ae6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af2:	dd01      	ble.n	8001af8 <clampf+0x28>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	e00b      	b.n	8001b10 <clampf+0x40>
    if (val < min) return min;
 8001af8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001afc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b08:	d501      	bpl.n	8001b0e <clampf+0x3e>
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	e000      	b.n	8001b10 <clampf+0x40>
    return val;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	ee07 3a90 	vmov	s15, r3
 8001b14:	eeb0 0a67 	vmov.f32	s0, s15
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <wrap_m1_1pi>:
    if (x < 0) x += MUL_2_PI;
    return x;
}

float32_t wrap_m1_1pi(float32_t x)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t n = (int32_t)(x / MUL_2_PI);
 8001b2e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b32:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001bbc <wrap_m1_1pi+0x98>
 8001b36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b3e:	ee17 3a90 	vmov	r3, s15
 8001b42:	60fb      	str	r3, [r7, #12]
    x -= (float32_t)n * MUL_2_PI;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b4e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001bbc <wrap_m1_1pi+0x98>
 8001b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b56:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5e:	edc7 7a01 	vstr	s15, [r7, #4]
    if      (x < -PI) x += MUL_2_PI;
 8001b62:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b66:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001bc0 <wrap_m1_1pi+0x9c>
 8001b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b72:	d508      	bpl.n	8001b86 <wrap_m1_1pi+0x62>
 8001b74:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b78:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001bbc <wrap_m1_1pi+0x98>
 8001b7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b80:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b84:	e010      	b.n	8001ba8 <wrap_m1_1pi+0x84>
    else if (x >= PI) x -= MUL_2_PI;
 8001b86:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b8a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001bc4 <wrap_m1_1pi+0xa0>
 8001b8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b96:	db07      	blt.n	8001ba8 <wrap_m1_1pi+0x84>
 8001b98:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b9c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001bbc <wrap_m1_1pi+0x98>
 8001ba0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ba4:	edc7 7a01 	vstr	s15, [r7, #4]
    return x;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	ee07 3a90 	vmov	s15, r3
}
 8001bae:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	40c90fdb 	.word	0x40c90fdb
 8001bc0:	c0490fdb 	.word	0xc0490fdb
 8001bc4:	40490fdb 	.word	0x40490fdb

08001bc8 <fast_fabsf>:

inline float32_t fast_fabsf(float32_t x)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	ed87 0a01 	vstr	s0, [r7, #4]
    union {
        float32_t f;
        uint32_t u;
    } v = { x };
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]
    v.u &= 0x7FFFFFFF;  // 清除最高位 sign bit
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bdc:	60fb      	str	r3, [r7, #12]
    return v.f;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	ee07 3a90 	vmov	s15, r3
}
 8001be4:	eeb0 0a67 	vmov.f32	s0, s15
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <CLARKE_run_ideal>:
#include "motor/clarke.h"
#include "motor/basic.h"

Result CLARKE_run_ideal(volatile CLARKE *clarke)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
    clarke->Alpha = clarke->As;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	60da      	str	r2, [r3, #12]
    clarke->Beta = (clarke->As + clarke->Bs * 2.0f) * ONEbySQRT3;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	ed93 7a00 	vldr	s14, [r3]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001c40 <CLARKE_run_ideal+0x4c>
 8001c1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	edc3 7a04 	vstr	s15, [r3, #16]
    return RESULT_OK(NULL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	605a      	str	r2, [r3, #4]
}
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	3f13cd3a 	.word	0x3f13cd3a

08001c44 <motor_120_hall_update>:
};
static const uint8_t motor_seq_index[] = {0xFF, 5, 3, 4, 1, 0, 2, 0xFF};

// 120 deg cntrol
void motor_120_hall_update(const MotorParameter *motor)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
    uint8_t idx = motor_seq_index[motor->exti_hall_curt];
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b8e      	ldr	r3, [pc, #568]	@ (8001e90 <motor_120_hall_update+0x24c>)
 8001c58:	5c9b      	ldrb	r3, [r3, r2]
 8001c5a:	73fb      	strb	r3, [r7, #15]
    if (motor->reverse) idx = (idx + 3) % 6; // CCW
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00d      	beq.n	8001c82 <motor_120_hall_update+0x3e>
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	1cda      	adds	r2, r3, #3
 8001c6a:	4b8a      	ldr	r3, [pc, #552]	@ (8001e94 <motor_120_hall_update+0x250>)
 8001c6c:	fb83 3102 	smull	r3, r1, r3, r2
 8001c70:	17d3      	asrs	r3, r2, #31
 8001c72:	1ac9      	subs	r1, r1, r3
 8001c74:	460b      	mov	r3, r1
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	440b      	add	r3, r1
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	1ad1      	subs	r1, r2, r3
 8001c7e:	460b      	mov	r3, r1
 8001c80:	73fb      	strb	r3, [r7, #15]
    // idx = 5;
    uint8_t i;
    uint32_t compare = (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_u);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8001c88:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8001e98 <motor_120_hall_update+0x254>
 8001c8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c94:	ee17 3a90 	vmov	r3, s15
 8001c98:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < 3; i++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73bb      	strb	r3, [r7, #14]
 8001c9e:	e0ed      	b.n	8001e7c <motor_120_hall_update+0x238>
    {
        switch (motor_seq_map[idx][i])
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	7bb9      	ldrb	r1, [r7, #14]
 8001ca4:	487d      	ldr	r0, [pc, #500]	@ (8001e9c <motor_120_hall_update+0x258>)
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	4403      	add	r3, r0
 8001cae:	440b      	add	r3, r1
 8001cb0:	f993 3000 	ldrsb.w	r3, [r3]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb8:	d064      	beq.n	8001d84 <motor_120_hall_update+0x140>
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	f040 80c4 	bne.w	8001e48 <motor_120_hall_update+0x204>
        {
            case HIGH_PASS:
            {
                __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i], compare);
 8001cc0:	7bbb      	ldrb	r3, [r7, #14]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	3306      	adds	r3, #6
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d105      	bne.n	8001cdc <motor_120_hall_update+0x98>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cda:	e03c      	b.n	8001d56 <motor_120_hall_update+0x112>
 8001cdc:	7bbb      	ldrb	r3, [r7, #14]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	3306      	adds	r3, #6
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d105      	bne.n	8001cf8 <motor_120_hall_update+0xb4>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	6393      	str	r3, [r2, #56]	@ 0x38
 8001cf6:	e02e      	b.n	8001d56 <motor_120_hall_update+0x112>
 8001cf8:	7bbb      	ldrb	r3, [r7, #14]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	3306      	adds	r3, #6
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d105      	bne.n	8001d14 <motor_120_hall_update+0xd0>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001d12:	e020      	b.n	8001d56 <motor_120_hall_update+0x112>
 8001d14:	7bbb      	ldrb	r3, [r7, #14]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	3306      	adds	r3, #6
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b0c      	cmp	r3, #12
 8001d22:	d105      	bne.n	8001d30 <motor_120_hall_update+0xec>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2e:	e012      	b.n	8001d56 <motor_120_hall_update+0x112>
 8001d30:	7bbb      	ldrb	r3, [r7, #14]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	3306      	adds	r3, #6
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b10      	cmp	r3, #16
 8001d3e:	d105      	bne.n	8001d4c <motor_120_hall_update+0x108>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d4a:	e004      	b.n	8001d56 <motor_120_hall_update+0x112>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
                HAL_TIM_PWM_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6998      	ldr	r0, [r3, #24]
 8001d5a:	7bbb      	ldrb	r3, [r7, #14]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	3306      	adds	r3, #6
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4619      	mov	r1, r3
 8001d68:	f005 fe68 	bl	8007a3c <HAL_TIM_PWM_Start>
                HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6998      	ldr	r0, [r3, #24]
 8001d70:	7bbb      	ldrb	r3, [r7, #14]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	3306      	adds	r3, #6
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f006 ff65 	bl	8008c4c <HAL_TIMEx_PWMN_Stop>
                // HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
                break;
 8001d82:	e078      	b.n	8001e76 <motor_120_hall_update+0x232>
            }
            case LOW_PASS:
            {
                HAL_TIM_PWM_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6998      	ldr	r0, [r3, #24]
 8001d88:	7bbb      	ldrb	r3, [r7, #14]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	3306      	adds	r3, #6
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4619      	mov	r1, r3
 8001d96:	f005 ff51 	bl	8007c3c <HAL_TIM_PWM_Stop>
                __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i], TIM1_ARR);
 8001d9a:	7bbb      	ldrb	r3, [r7, #14]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	3306      	adds	r3, #6
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d105      	bne.n	8001db6 <motor_120_hall_update+0x172>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	22fa      	movs	r2, #250	@ 0xfa
 8001db2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001db4:	e03c      	b.n	8001e30 <motor_120_hall_update+0x1ec>
 8001db6:	7bbb      	ldrb	r3, [r7, #14]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	3306      	adds	r3, #6
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d105      	bne.n	8001dd2 <motor_120_hall_update+0x18e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	23fa      	movs	r3, #250	@ 0xfa
 8001dce:	6393      	str	r3, [r2, #56]	@ 0x38
 8001dd0:	e02e      	b.n	8001e30 <motor_120_hall_update+0x1ec>
 8001dd2:	7bbb      	ldrb	r3, [r7, #14]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	3306      	adds	r3, #6
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d105      	bne.n	8001dee <motor_120_hall_update+0x1aa>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	23fa      	movs	r3, #250	@ 0xfa
 8001dea:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001dec:	e020      	b.n	8001e30 <motor_120_hall_update+0x1ec>
 8001dee:	7bbb      	ldrb	r3, [r7, #14]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	3306      	adds	r3, #6
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d105      	bne.n	8001e0a <motor_120_hall_update+0x1c6>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	23fa      	movs	r3, #250	@ 0xfa
 8001e06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e08:	e012      	b.n	8001e30 <motor_120_hall_update+0x1ec>
 8001e0a:	7bbb      	ldrb	r3, [r7, #14]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	3306      	adds	r3, #6
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b10      	cmp	r3, #16
 8001e18:	d105      	bne.n	8001e26 <motor_120_hall_update+0x1e2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	23fa      	movs	r3, #250	@ 0xfa
 8001e22:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e24:	e004      	b.n	8001e30 <motor_120_hall_update+0x1ec>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	23fa      	movs	r3, #250	@ 0xfa
 8001e2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
                HAL_TIMEx_PWMN_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6998      	ldr	r0, [r3, #24]
 8001e34:	7bbb      	ldrb	r3, [r7, #14]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	3306      	adds	r3, #6
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	4619      	mov	r1, r3
 8001e42:	f006 fe4f 	bl	8008ae4 <HAL_TIMEx_PWMN_Start>
                // HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_SET);
                break;
 8001e46:	e016      	b.n	8001e76 <motor_120_hall_update+0x232>
            }
            default:
            {
                HAL_TIM_PWM_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6998      	ldr	r0, [r3, #24]
 8001e4c:	7bbb      	ldrb	r3, [r7, #14]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	3306      	adds	r3, #6
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f005 feef 	bl	8007c3c <HAL_TIM_PWM_Stop>
                HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6998      	ldr	r0, [r3, #24]
 8001e62:	7bbb      	ldrb	r3, [r7, #14]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	3306      	adds	r3, #6
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f006 feec 	bl	8008c4c <HAL_TIMEx_PWMN_Stop>
                // HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
                break;
 8001e74:	bf00      	nop
    for (i = 0; i < 3; i++)
 8001e76:	7bbb      	ldrb	r3, [r7, #14]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	73bb      	strb	r3, [r7, #14]
 8001e7c:	7bbb      	ldrb	r3, [r7, #14]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	f67f af0e 	bls.w	8001ca0 <motor_120_hall_update+0x5c>
            }
        }
    }
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	0800cc50 	.word	0x0800cc50
 8001e94:	2aaaaaab 	.word	0x2aaaaaab
 8001e98:	437a0000 	.word	0x437a0000
 8001e9c:	0800cc3c 	.word	0x0800cc3c

08001ea0 <motor_120_ctrl_stop>:

void motor_120_ctrl_stop(const MotorParameter *motor)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for (i = 0; i < 3; i++)
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	73fb      	strb	r3, [r7, #15]
 8001eac:	e018      	b.n	8001ee0 <motor_120_ctrl_stop+0x40>
    {
        HAL_TIM_PWM_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6998      	ldr	r0, [r3, #24]
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	3306      	adds	r3, #6
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f005 febc 	bl	8007c3c <HAL_TIM_PWM_Stop>
        HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6998      	ldr	r0, [r3, #24]
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	3306      	adds	r3, #6
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f006 feb9 	bl	8008c4c <HAL_TIMEx_PWMN_Stop>
    for (i = 0; i < 3; i++)
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	3301      	adds	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d9e3      	bls.n	8001eae <motor_120_ctrl_stop+0xe>
        // HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
    }
}
 8001ee6:	bf00      	nop
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <motor_foc_tim_setup>:
#include "analog/adc1/main.h"

uint32_t cycle[16] = {0};

Result motor_foc_tim_setup(const MotorParameter *motor)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[0]);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	699a      	ldr	r2, [r3, #24]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	4619      	mov	r1, r3
 8001f04:	4610      	mov	r0, r2
 8001f06:	f005 fd99 	bl	8007a3c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[1]);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4619      	mov	r1, r3
 8001f14:	4610      	mov	r0, r2
 8001f16:	f005 fd91 	bl	8007a3c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[2]);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f22:	4619      	mov	r1, r3
 8001f24:	4610      	mov	r0, r2
 8001f26:	f005 fd89 	bl	8007a3c <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[0]);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4619      	mov	r1, r3
 8001f34:	4610      	mov	r0, r2
 8001f36:	f006 fdd5 	bl	8008ae4 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[1]);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	699a      	ldr	r2, [r3, #24]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4619      	mov	r1, r3
 8001f44:	4610      	mov	r0, r2
 8001f46:	f006 fdcd 	bl	8008ae4 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[2]);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f52:	4619      	mov	r1, r3
 8001f54:	4610      	mov	r0, r2
 8001f56:	f006 fdc5 	bl	8008ae4 <HAL_TIMEx_PWMN_Start>
    HAL_TIM_Base_Start(motor->const_h.ELE_htimx);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f005 fbf2 	bl	8007748 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim2);
 8001f64:	4806      	ldr	r0, [pc, #24]	@ (8001f80 <motor_foc_tim_setup+0x90>)
 8001f66:	f005 fbef 	bl	8007748 <HAL_TIM_Base_Start>
    return RESULT_OK(NULL);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	605a      	str	r2, [r3, #4]
}
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000590 	.word	0x20000590

08001f84 <motor_foc_hall_update>:

// Thread - hallExti - 0
Result motor_foc_hall_update(MotorParameter *motor)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
    float32_t htim_cnt = (float32_t)__HAL_TIM_GET_COUNTER(motor->const_h.ELE_htimx);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f96:	ee07 3a90 	vmov	s15, r3
 8001f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f9e:	edc7 7a05 	vstr	s15, [r7, #20]
    __HAL_TIM_SET_COUNTER(motor->const_h.ELE_htimx, 0);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	625a      	str	r2, [r3, #36]	@ 0x24
    motor->rpm_fbk_hall = 100000000.0f / htim_cnt;
 8001fac:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8002060 <motor_foc_hall_update+0xdc>
 8001fb0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    uint16_t expected = (!motor->reverse)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8001fc4:	f083 0301 	eor.w	r3, r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <motor_foc_hall_update+0x58>
        ? hall_seq_clw[motor->exti_hall_last]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b23      	ldr	r3, [pc, #140]	@ (8002064 <motor_foc_hall_update+0xe0>)
 8001fd8:	5c9b      	ldrb	r3, [r3, r2]
 8001fda:	e005      	b.n	8001fe8 <motor_foc_hall_update+0x64>
        : hall_seq_ccw[motor->exti_hall_last];
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b20      	ldr	r3, [pc, #128]	@ (8002068 <motor_foc_hall_update+0xe4>)
 8001fe6:	5c9b      	ldrb	r3, [r3, r2]
    uint16_t expected = (!motor->reverse)
 8001fe8:	827b      	strh	r3, [r7, #18]
    // if (hall_last == 0) // ? CHECK
    // {
    //     hall_last = expected;
    // }
    if (motor->exti_hall_curt == expected)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	8a7b      	ldrh	r3, [r7, #18]
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d107      	bne.n	800200a <motor_foc_hall_update+0x86>
    {
        // rotated
        motor->hall_angle_acc = 0;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	651a      	str	r2, [r3, #80]	@ 0x50
        motor->pwm_it_angle_acc = 0;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	65da      	str	r2, [r3, #92]	@ 0x5c

    // ? check
    // 電氣週期算轉速，分鐘[3G=50,000,000 (計數轉秒)*60(秒轉分鐘)] / 轉速
    // calculate speed every hall instead of  6 times
    // agv gear ratio MOTOR_42BLF01_GEAR
    motor->pi_speed.Fbk = (6000000.0f / (htim_cnt * (MOTOR_42BLF01_POLE / 2))) / 6 / MOTOR_42BLF01_GEAR;
 800200a:	edd7 7a05 	vldr	s15, [r7, #20]
 800200e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002012:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002016:	eddf 6a15 	vldr	s13, [pc, #84]	@ 800206c <motor_foc_hall_update+0xe8>
 800201a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800201e:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8002022:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002026:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002070 <motor_foc_hall_update+0xec>
 800202a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
    // 單次PWM中斷時的角度變化 50us*60/(0.1us*CNT)
    motor->pwm_per_it_angle_itpl = 30000.0f * DEG_TO_RAD / htim_cnt;
 8002034:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8002074 <motor_foc_hall_update+0xf0>
 8002038:	ed97 7a05 	vldr	s14, [r7, #20]
 800203c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

    return RESULT_OK(NULL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	605a      	str	r2, [r3, #4]
}
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	371c      	adds	r7, #28
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	4cbebc20 	.word	0x4cbebc20
 8002064:	0800cc2c 	.word	0x0800cc2c
 8002068:	0800cc34 	.word	0x0800cc34
 800206c:	4ab71b00 	.word	0x4ab71b00
 8002070:	408ccccd 	.word	0x408ccccd
 8002074:	4402e652 	.word	0x4402e652

08002078 <stop_check>:

static inline Result stop_check(MotorParameter *motor)
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
    // 停轉判斷
    // 現在與上一個霍爾的總和與之前的總和相同，視為馬達靜止不動
    uint8_t hall_current = motor->exti_hall_curt;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002088:	75fb      	strb	r3, [r7, #23]
    uint16_t hall_total = motor->pwm_hall_last*10 + hall_current;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002090:	461a      	mov	r2, r3
 8002092:	0092      	lsls	r2, r2, #2
 8002094:	4413      	add	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	7dfb      	ldrb	r3, [r7, #23]
 800209c:	b29b      	uxth	r3, r3
 800209e:	4413      	add	r3, r2
 80020a0:	82bb      	strh	r3, [r7, #20]
    if(hall_total == motor->pwm_hall_acc)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	8aba      	ldrh	r2, [r7, #20]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d123      	bne.n	80020f8 <stop_check+0x80>
    {
        motor->spin_stop_acc++;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80020b6:	3301      	adds	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        if (motor->spin_stop_acc >= 50)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80020c6:	2b31      	cmp	r3, #49	@ 0x31
 80020c8:	d91a      	bls.n	8002100 <stop_check+0x88>
        {
            motor->spin_stop_acc = 0;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
            // timerclockvalue_onecycle_electric = 0;   // 歸零一電氣週期之時間
            motor->pi_speed.i1 = 0;                     // 重置i控制舊值
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            motor->pi_speed.Fbk = 0;                    // 歸零速度實際值
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	671a      	str	r2, [r3, #112]	@ 0x70
            motor->pi_Iq.Out=0;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
            motor->pwm_it_angle_acc = 0.0f;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020f6:	e003      	b.n	8002100 <stop_check+0x88>
        }
    }
    else
    {
        motor->spin_stop_acc = 0;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    motor->pwm_hall_acc = hall_total;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	8aba      	ldrh	r2, [r7, #20]
 8002104:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    motor->pwm_hall_last = hall_current;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	7dfa      	ldrb	r2, [r7, #23]
 800210c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    return RESULT_OK(NULL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	605a      	str	r2, [r3, #4]
}
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	371c      	adds	r7, #28
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <pi_speed>:

static inline Result pi_speed(MotorParameter *motor)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
    // 計算 速度PI (每100個PWM中斷)
    // if(Speed.Fbk>0 && stop_flag==0)
    PI_run(&motor->pi_speed);
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8002138:	463b      	mov	r3, r7
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f000 ffd3 	bl	80030e8 <PI_run>
    motor->pi_speed_cmd = clampf((motor->pi_speed_cmd + motor->pi_speed.Out), 0.15f, 0.2f);
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	ed93 7a28 	vldr	s14, [r3, #160]	@ 0xa0
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 800214e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002152:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 8002180 <pi_speed+0x58>
 8002156:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8002184 <pi_speed+0x5c>
 800215a:	eeb0 0a67 	vmov.f32	s0, s15
 800215e:	f7ff fcb7 	bl	8001ad0 <clampf>
 8002162:	eef0 7a40 	vmov.f32	s15, s0
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0
    // else if(Speed.Fbk==0 | stop_flag==1)
    //     motor->pi_speed_cmd=0.18;
    return RESULT_OK(NULL);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	605a      	str	r2, [r3, #4]
}
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	3e4ccccd 	.word	0x3e4ccccd
 8002184:	3e19999a 	.word	0x3e19999a

08002188 <angal_cal>:

static inline Result angal_cal(MotorParameter *motor)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
    // ?
    if((motor->hall_angle_acc + motor->pwm_per_it_angle_itpl) < 60)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800219e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a2:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80021fc <angal_cal+0x74>
 80021a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ae:	d51a      	bpl.n	80021e6 <angal_cal+0x5e>
    {
        motor->hall_angle_acc += motor->pwm_per_it_angle_itpl;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80021bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
        motor->hall_angle_acc = clampf(motor->hall_angle_acc, 0.0f, 60.0f);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80021cc:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 80021fc <angal_cal+0x74>
 80021d0:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8002200 <angal_cal+0x78>
 80021d4:	eeb0 0a67 	vmov.f32	s0, s15
 80021d8:	f7ff fc7a 	bl	8001ad0 <clampf>
 80021dc:	eef0 7a40 	vmov.f32	s15, s0
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
    }
    return RESULT_OK(NULL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	701a      	strb	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	605a      	str	r2, [r3, #4]
}
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	42700000 	.word	0x42700000
 8002200:	00000000 	.word	0x00000000

08002204 <vec_ctrl_clarke>:

#define ADC_TO_CURRENT (3.3f / 4095.0f / 0.185f ) // ~ 0.004356 A/LSB
static inline Result vec_ctrl_clarke(MotorParameter *motor)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
    // I alpha = 2/3Ia - 1/3Ib - 1/3Ic
    // I bata = (根號3/3)Ib - (根號3/3)Ic
    // (根號3/3) = 0.57735

    // 三相電流向量
    float32_t adc_zero = ((float32_t)motor->adc_u + (float32_t)motor->adc_v +(float32_t) motor->adc_w) / 3.0f ;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002214:	ee07 3a90 	vmov	s15, r3
 8002218:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800222a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8002234:	ee07 3a90 	vmov	s15, r3
 8002238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800223c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002240:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002244:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002248:	edc7 7a07 	vstr	s15, [r7, #28]
    motor->clarke.As = ((float32_t)motor->adc_u - adc_zero) * ADC_TO_CURRENT;
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800225a:	edd7 7a07 	vldr	s15, [r7, #28]
 800225e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002262:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80022dc <vec_ctrl_clarke+0xd8>
 8002266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	edc3 7a43 	vstr	s15, [r3, #268]	@ 0x10c
    motor->clarke.Bs = ((float32_t)motor->adc_v - adc_zero) * ADC_TO_CURRENT;
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800227e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002286:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80022dc <vec_ctrl_clarke+0xd8>
 800228a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	edc3 7a44 	vstr	s15, [r3, #272]	@ 0x110
    motor->clarke.Cs = ((float32_t)motor->adc_w - adc_zero) * ADC_TO_CURRENT;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80022a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022aa:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80022dc <vec_ctrl_clarke+0xd8>
 80022ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114

    // PeriodStateVar_w += ( ( (float32_t)motor->clarke.Cs - (float32_t)PeriodFilter_w)*(float32_t)PeriodKFilter );
    // PeriodFilter_w = (float32_t)PeriodStateVar_w;//0.9
    // motor->clarke.Cs =PeriodFilter_w;
		
    CLARKE_run_ideal(&motor->clarke);//Id.Out=CLAMP((Id.Out + Id.delta), 0.1, 0)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f503 7286 	add.w	r2, r3, #268	@ 0x10c
 80022be:	463b      	mov	r3, r7
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fc96 	bl	8001bf4 <CLARKE_run_ideal>

    return RESULT_OK(NULL);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	605a      	str	r2, [r3, #4]
}
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	3720      	adds	r7, #32
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	3b8ebcd0 	.word	0x3b8ebcd0

080022e0 <vec_ctrl_park>:

static inline Result vec_ctrl_park(MotorParameter *motor)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	@ 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
    motor->pwm_it_angle_acc += motor->pwm_per_it_angle_itpl;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80022f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
    float32_t foc_park_cal_rad;
    motor_hall_to_angle(motor->exti_hall_curt, &foc_park_cal_rad);
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002306:	b2d9      	uxtb	r1, r3
 8002308:	463b      	mov	r3, r7
 800230a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fb8c 	bl	8001a2c <motor_hall_to_angle>
    foc_park_cal_rad += motor->pwm_it_angle_acc;
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 800231a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800231e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002322:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    if      (foc_park_cal_rad >= MUL_2_PI) foc_park_cal_rad -= MUL_2_PI;
 8002326:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800232a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80023ec <vec_ctrl_park+0x10c>
 800232e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002336:	db08      	blt.n	800234a <vec_ctrl_park+0x6a>
 8002338:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800233c:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80023ec <vec_ctrl_park+0x10c>
 8002340:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002344:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8002348:	e00e      	b.n	8002368 <vec_ctrl_park+0x88>
    else if (foc_park_cal_rad <      0.0f) foc_park_cal_rad += MUL_2_PI;
 800234a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800234e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002356:	d507      	bpl.n	8002368 <vec_ctrl_park+0x88>
 8002358:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800235c:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80023ec <vec_ctrl_park+0x10c>
 8002360:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002364:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    foc_park_cal_rad += DIV_PI_2 * 3;
 8002368:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800236c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80023f0 <vec_ctrl_park+0x110>
 8002370:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002374:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // park
    // Id = I alpha cos(theta) + I bata sin(theta)
    motor->park.Alpha = motor->clarke.Alpha;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
    motor->park.Beta = motor->clarke.Beta;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    RESULT_CHECK_HANDLE(trigo_sin_cosf(foc_park_cal_rad, &motor->park.Sine, &motor->park.Cosine));
 8002390:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f503 719a 	add.w	r1, r3, #308	@ 0x134
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f503 729c 	add.w	r2, r3, #312	@ 0x138
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	eeb0 0a67 	vmov.f32	s0, s15
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 ff81 	bl	80032b0 <trigo_sin_cosf>
 80023ae:	7d3b      	ldrb	r3, [r7, #20]
 80023b0:	f083 0301 	eor.w	r3, r3, #1
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <vec_ctrl_park+0xe6>
 80023ba:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80023be:	4b0d      	ldr	r3, [pc, #52]	@ (80023f4 <vec_ctrl_park+0x114>)
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	f7fe fd71 	bl	8000ea8 <Error_Handler>
    
    PARK_run(&motor->park);
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 80023cc:	463b      	mov	r3, r7
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fe13 	bl	8002ffc <PARK_run>
    // motor->park.Ds = PeriodFilter_id;
        
    // PeriodStateVar_iq += ( ( (float32_t)motor->park.Qs - (float32_t)PeriodFilter_iq)*(float32_t)PeriodKFilter );
    // PeriodFilter_iq = (float32_t)PeriodStateVar_iq;
    // motor->park.Qs = PeriodFilter_iq;
    return RESULT_OK(NULL);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	605a      	str	r2, [r3, #4]
}
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	3728      	adds	r7, #40	@ 0x28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40c90fdb 	.word	0x40c90fdb
 80023f0:	4096cbe4 	.word	0x4096cbe4
 80023f4:	2000093c 	.word	0x2000093c

080023f8 <vec_ctrl_pi_id_iq>:

#define IQ_REF_ADD 0
static inline Result vec_ctrl_pi_id_iq(MotorParameter *motor)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
    // Id、Iq 之 PI 控制
    if(motor->pi_speed.Fbk > 0)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8002408:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800240c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002410:	dd4b      	ble.n	80024aa <vec_ctrl_pi_id_iq+0xb2>
    {
        motor->pi_Id.Ref = 0;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        motor->pi_Id.Fbk = motor->park.Ds;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        
        // Id.Fbk=CLAMP(( motor->park.Ds), 0.1, -0.1);
        
        PI_run(&motor->pi_Id); 
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 800242e:	463b      	mov	r3, r7
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fe58 	bl	80030e8 <PI_run>
        // if(Id.Ref > Id.Fbk)
        //     Id.delta = 0.002;
        // else
        //     Id.delta = -0.002;
        
        motor->pi_Id.Out = clampf(motor->pi_Id.Out, -0.01f, 0.01f);//限制最大與最小參數
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 800243e:	ed9f 1a22 	vldr	s2, [pc, #136]	@ 80024c8 <vec_ctrl_pi_id_iq+0xd0>
 8002442:	eddf 0a22 	vldr	s1, [pc, #136]	@ 80024cc <vec_ctrl_pi_id_iq+0xd4>
 8002446:	eeb0 0a67 	vmov.f32	s0, s15
 800244a:	f7ff fb41 	bl	8001ad0 <clampf>
 800244e:	eef0 7a40 	vmov.f32	s15, s0
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	edc3 7a38 	vstr	s15, [r3, #224]	@ 0xe0
        // motor->pi_Iq.Fbk = motor->park.Qs;
        // motor->pi_Iq.delta = (motor->pi_Iq.Ref - motor->pi_Iq.Fbk) * (motor->pi_Iq.Kp);
        // motor->pi_Iq.delta = CLAMP((motor->pi_Iq.delta), 0.1, -0.1);//限制最大與最小參數
        // motor->pi_Iq.Out = CLAMP((motor->pi_Iq.Ref + motor->pi_Iq.delta), 0.75, 0);//限制最大與最小參數

        motor->pi_Iq.Ref = motor->pi_speed_cmd + IQ_REF_ADD;  // 外環給轉矩命令
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
 800245e:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80024d0 <vec_ctrl_pi_id_iq+0xd8>
 8002462:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
        motor->pi_Iq.Fbk = motor->park.Qs;                    // q 軸量測
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        PI_run(&motor->pi_Iq);                                // 統一用 PI_run + anti-windup
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f103 02a4 	add.w	r2, r3, #164	@ 0xa4
 800247e:	463b      	mov	r3, r7
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fe30 	bl	80030e8 <PI_run>
        // 視匯流排/過調制上限，做一次幅值限幅（可留在這或放到 Vqref 指派前）
        motor->pi_Iq.Out = clampf(motor->pi_Iq.Out, 0.0f, 0.75f);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 800248e:	eeb6 1a08 	vmov.f32	s2, #104	@ 0x3f400000  0.750
 8002492:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80024d0 <vec_ctrl_pi_id_iq+0xd8>
 8002496:	eeb0 0a67 	vmov.f32	s0, s15
 800249a:	f7ff fb19 	bl	8001ad0 <clampf>
 800249e:	eef0 7a40 	vmov.f32	s15, s0
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac
 80024a8:	e003      	b.n	80024b2 <vec_ctrl_pi_id_iq+0xba>

    }
    else
    {
        motor->pi_Iq.Out = 0.18;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	4a09      	ldr	r2, [pc, #36]	@ (80024d4 <vec_ctrl_pi_id_iq+0xdc>)
 80024ae:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    }
    return RESULT_OK(NULL);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	605a      	str	r2, [r3, #4]
}
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	3c23d70a 	.word	0x3c23d70a
 80024cc:	bc23d70a 	.word	0xbc23d70a
 80024d0:	00000000 	.word	0x00000000
 80024d4:	3e3851ec 	.word	0x3e3851ec

080024d8 <vec_ctrl_ipark>:

static inline Result vec_ctrl_ipark(MotorParameter *motor)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
    // ipark
    // V alpha = Vd cos(theta) - Vq sin(theta)
    // V bata = Vd sin(theta) + Vq cos(theta)
    //限制最大與最小參數
    // ? motor->ipark.Vdref = CLAMP((motor->ipark.Vdref += motor->pi_Id.Out), 0.06, -0.06);
    motor->ipark.Vdref = clampf(motor->pi_Id.Out, -0.06f, 0.06f);
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 80024e8:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 8002588 <vec_ctrl_ipark+0xb0>
 80024ec:	eddf 0a27 	vldr	s1, [pc, #156]	@ 800258c <vec_ctrl_ipark+0xb4>
 80024f0:	eeb0 0a67 	vmov.f32	s0, s15
 80024f4:	f7ff faec 	bl	8001ad0 <clampf>
 80024f8:	eef0 7a40 	vmov.f32	s15, s0
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	edc3 7a52 	vstr	s15, [r3, #328]	@ 0x148
    motor->ipark.Vqref = motor->pi_Iq.Out;
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
    motor->ipark.Sine = motor->park.Sine;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    motor->ipark.Cosine = motor->park.Cosine;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
    IPARK_run(&motor->ipark);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f503 729e 	add.w	r2, r3, #316	@ 0x13c
 800252c:	463b      	mov	r3, r7
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fd9e 	bl	8003072 <IPARK_run>
    RESULT_CHECK_HANDLE(trigo_atan(motor->ipark.Alpha, motor->ipark.Beta, &motor->elec_theta_rad));
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	edd3 7a4f 	vldr	s15, [r3, #316]	@ 0x13c
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	ed93 7a50 	vldr	s14, [r3, #320]	@ 0x140
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f503 72b8 	add.w	r2, r3, #368	@ 0x170
 8002548:	f107 0310 	add.w	r3, r7, #16
 800254c:	4611      	mov	r1, r2
 800254e:	eef0 0a47 	vmov.f32	s1, s14
 8002552:	eeb0 0a67 	vmov.f32	s0, s15
 8002556:	4618      	mov	r0, r3
 8002558:	f000 ff28 	bl	80033ac <trigo_atan>
 800255c:	7c3b      	ldrb	r3, [r7, #16]
 800255e:	f083 0301 	eor.w	r3, r3, #1
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <vec_ctrl_ipark+0x9c>
 8002568:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800256c:	4b08      	ldr	r3, [pc, #32]	@ (8002590 <vec_ctrl_ipark+0xb8>)
 800256e:	701a      	strb	r2, [r3, #0]
 8002570:	f7fe fc9a 	bl	8000ea8 <Error_Handler>
    // motor->elec_theta_deg = motor->elec_theta_rad * RAD_TO_DEG;
    return RESULT_OK(NULL);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	605a      	str	r2, [r3, #4]
}
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	3720      	adds	r7, #32
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	3d75c28f 	.word	0x3d75c28f
 800258c:	bd75c28f 	.word	0xbd75c28f
 8002590:	2000093c 	.word	0x2000093c

08002594 <vec_ctrl_svgen>:

static inline Result vec_ctrl_svgen(MotorParameter *motor)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
    // svgen  //5us
    motor->svgendq.Ualpha = motor->ipark.Alpha;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
    motor->svgendq.Ubeta = motor->ipark.Beta;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    SVGEN_run(&motor->svgendq);
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f503 72ac 	add.w	r2, r3, #344	@ 0x158
 80025bc:	463b      	mov	r3, r7
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 fe07 	bl	80031d4 <SVGEN_run>
    return RESULT_OK(NULL);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	605a      	str	r2, [r3, #4]
}
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <vec_ctrl_vref>:

static inline Result vec_ctrl_vref(MotorParameter *motor)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b086      	sub	sp, #24
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
    //     }
    //     else
    //         motor->svpwm_Vref=0;
    //     }
    // else
    arm_sqrt_f32(motor->svgendq.Ualpha * motor->svgendq.Ualpha 
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	ed93 7a56 	vldr	s14, [r3, #344]	@ 0x158
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	edd3 7a56 	vldr	s15, [r3, #344]	@ 0x158
 80025f0:	ee27 7a27 	vmul.f32	s14, s14, s15
            + motor->svgendq.Ubeta * motor->svgendq.Ubeta,
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	edd3 6a57 	vldr	s13, [r3, #348]	@ 0x15c
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	edd3 7a57 	vldr	s15, [r3, #348]	@ 0x15c
 8002600:	ee66 7aa7 	vmul.f32	s15, s13, s15
    arm_sqrt_f32(motor->svgendq.Ualpha * motor->svgendq.Ualpha 
 8002604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800260e:	edc7 7a05 	vstr	s15, [r7, #20]
 8002612:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8002614:	edd7 7a05 	vldr	s15, [r7, #20]
 8002618:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800261c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002620:	db09      	blt.n	8002636 <vec_ctrl_vref+0x5c>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8002622:	ed97 0a05 	vldr	s0, [r7, #20]
 8002626:	f00a fa75 	bl	800cb14 <sqrtf>
 800262a:	eef0 7a40 	vmov.f32	s15, s0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8002634:	e004      	b.n	8002640 <vec_ctrl_vref+0x66>
    }
    else
    {
      *pOut = 0.0f;
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800263e:	bf00      	nop
    //		motor->elec_theta_deg      =  (int)motor_angle % 60;
    
    /*
        svpwm_interval = ((int)cmd_deg / 60) % 6;
        motor->elec_theta_deg      =  (int)cmd_deg % 60;*/
    return RESULT_OK(NULL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	605a      	str	r2, [r3, #4]
}
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <vec_ctrl_svpwm>:

static inline Result vec_ctrl_svpwm(MotorParameter *motor)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b092      	sub	sp, #72	@ 0x48
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
    float32_t T1, T2, TX;
    float32_t theta_in_sector = motor->elec_theta_rad;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8002664:	647b      	str	r3, [r7, #68]	@ 0x44
    int32_t n = (int32_t)(theta_in_sector / DIV_PI_3);
 8002666:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800266a:	eddf 6aca 	vldr	s13, [pc, #808]	@ 8002994 <vec_ctrl_svpwm+0x340>
 800266e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002676:	ee17 3a90 	vmov	r3, s15
 800267a:	643b      	str	r3, [r7, #64]	@ 0x40
    theta_in_sector -= (float32_t)n * DIV_PI_3;
 800267c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800267e:	ee07 3a90 	vmov	s15, r3
 8002682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002686:	ed9f 7ac3 	vldr	s14, [pc, #780]	@ 8002994 <vec_ctrl_svpwm+0x340>
 800268a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800268e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002692:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002696:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    if (theta_in_sector < 0) theta_in_sector += DIV_PI_3;
 800269a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800269e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a6:	d507      	bpl.n	80026b8 <vec_ctrl_svpwm+0x64>
 80026a8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80026ac:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 8002994 <vec_ctrl_svpwm+0x340>
 80026b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026b4:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    // ? CHECK
    if(!motor->reverse)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 80026be:	f083 0301 	eor.w	r3, r3, #1
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d035      	beq.n	8002734 <vec_ctrl_svpwm+0xe0>
    {
        RESULT_CHECK_HANDLE(trigo_sin_cosf(DIV_PI_3 - theta_in_sector, &T1, &TX));
 80026c8:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8002994 <vec_ctrl_svpwm+0x340>
 80026cc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80026d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d4:	f107 0320 	add.w	r3, r7, #32
 80026d8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80026dc:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80026e0:	eeb0 0a67 	vmov.f32	s0, s15
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fde3 	bl	80032b0 <trigo_sin_cosf>
 80026ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026ee:	f083 0301 	eor.w	r3, r3, #1
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <vec_ctrl_svpwm+0xb0>
 80026f8:	f997 2024 	ldrsb.w	r2, [r7, #36]	@ 0x24
 80026fc:	4ba6      	ldr	r3, [pc, #664]	@ (8002998 <vec_ctrl_svpwm+0x344>)
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	f7fe fbd2 	bl	8000ea8 <Error_Handler>
        RESULT_CHECK_HANDLE(trigo_sin_cosf(theta_in_sector, &T2, &TX));
 8002704:	f107 0318 	add.w	r3, r7, #24
 8002708:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800270c:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002710:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fdcb 	bl	80032b0 <trigo_sin_cosf>
 800271a:	7e3b      	ldrb	r3, [r7, #24]
 800271c:	f083 0301 	eor.w	r3, r3, #1
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d03a      	beq.n	800279c <vec_ctrl_svpwm+0x148>
 8002726:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800272a:	4b9b      	ldr	r3, [pc, #620]	@ (8002998 <vec_ctrl_svpwm+0x344>)
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	f7fe fbbb 	bl	8000ea8 <Error_Handler>
 8002732:	e033      	b.n	800279c <vec_ctrl_svpwm+0x148>
    }
    else
    {
        RESULT_CHECK_HANDLE(trigo_sin_cosf(theta_in_sector, &T1, &TX));
 8002734:	f107 0310 	add.w	r3, r7, #16
 8002738:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800273c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002740:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fdb3 	bl	80032b0 <trigo_sin_cosf>
 800274a:	7c3b      	ldrb	r3, [r7, #16]
 800274c:	f083 0301 	eor.w	r3, r3, #1
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <vec_ctrl_svpwm+0x10e>
 8002756:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800275a:	4b8f      	ldr	r3, [pc, #572]	@ (8002998 <vec_ctrl_svpwm+0x344>)
 800275c:	701a      	strb	r2, [r3, #0]
 800275e:	f7fe fba3 	bl	8000ea8 <Error_Handler>
        RESULT_CHECK_HANDLE(trigo_sin_cosf(DIV_PI_3 - theta_in_sector, &T2, &TX));
 8002762:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8002994 <vec_ctrl_svpwm+0x340>
 8002766:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800276a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276e:	f107 0308 	add.w	r3, r7, #8
 8002772:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002776:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800277a:	eeb0 0a67 	vmov.f32	s0, s15
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fd96 	bl	80032b0 <trigo_sin_cosf>
 8002784:	7a3b      	ldrb	r3, [r7, #8]
 8002786:	f083 0301 	eor.w	r3, r3, #1
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <vec_ctrl_svpwm+0x148>
 8002790:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8002794:	4b80      	ldr	r3, [pc, #512]	@ (8002998 <vec_ctrl_svpwm+0x344>)
 8002796:	701a      	strb	r2, [r3, #0]
 8002798:	f7fe fb86 	bl	8000ea8 <Error_Handler>
    }
    float32_t T0div2 = (1 - (T1 + T2)) / 2;
 800279c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80027a0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80027a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80027ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027b0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80027b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027b8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    motor->svpwm_T0 = T0div2;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027c0:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    motor->svpwm_T1 = T1;
 80027c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    motor->svpwm_T2 = T2;
 80027cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184

    switch(motor->svgendq.Sector)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 80027da:	3b01      	subs	r3, #1
 80027dc:	2b05      	cmp	r3, #5
 80027de:	f200 80b1 	bhi.w	8002944 <vec_ctrl_svpwm+0x2f0>
 80027e2:	a201      	add	r2, pc, #4	@ (adr r2, 80027e8 <vec_ctrl_svpwm+0x194>)
 80027e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e8:	0800290f 	.word	0x0800290f
 80027ec:	080028a3 	.word	0x080028a3
 80027f0:	080028d9 	.word	0x080028d9
 80027f4:	08002837 	.word	0x08002837
 80027f8:	08002801 	.word	0x08002801
 80027fc:	0800286d 	.word	0x0800286d
    {
        case 5://240~299 1    bac
        {
            motor->pwm_duty_u = T0div2 + T1;
 8002800:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002804:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_v = T0div2 + T1 + T2;
 8002812:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002816:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800281a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800281e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            motor->pwm_duty_w = T0div2;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002830:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
            break;
 8002834:	e086      	b.n	8002944 <vec_ctrl_svpwm+0x2f0>
        }
        case 4://300~359 5  bca
        {
            motor->pwm_duty_u = T0div2;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800283a:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            motor->pwm_duty_v = T0div2 + T1 + T2;
 800283e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002842:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002846:	ee37 7a27 	vadd.f32	s14, s14, s15
 800284a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800284e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            motor->pwm_duty_w = T0div2 + T2;
 8002858:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800285c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	edc3 7a64 	vstr	s15, [r3, #400]	@ 0x190
            break;
 800286a:	e06b      	b.n	8002944 <vec_ctrl_svpwm+0x2f0>
        }
        case 6://0~59 4 cba
        {
            motor->pwm_duty_u = T0div2;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002870:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            motor->pwm_duty_v = T0div2 + T1;
 8002874:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002878:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800287c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            motor->pwm_duty_w = T0div2 + T1 + T2;
 8002886:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800288a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800288e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002892:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	edc3 7a64 	vstr	s15, [r3, #400]	@ 0x190
            break;
 80028a0:	e050      	b.n	8002944 <vec_ctrl_svpwm+0x2f0>
        }
        case 2://60~119 6 cba
        {
            motor->pwm_duty_u = T0div2 + T2;
 80028a2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80028a6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80028aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_v = T0div2;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028b8:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
            motor->pwm_duty_w = T0div2 + T1 + T2;
 80028bc:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80028c0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80028c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028c8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80028cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	edc3 7a64 	vstr	s15, [r3, #400]	@ 0x190
            break;
 80028d6:	e035      	b.n	8002944 <vec_ctrl_svpwm+0x2f0>
        }
        case 3://120~179 2 acb
        {
            motor->pwm_duty_u = T0div2 + T1 + T2;
 80028d8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80028dc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80028e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80028e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_v = T0div2;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028f6:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
            motor->pwm_duty_w = T0div2 + T1;
 80028fa:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80028fe:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	edc3 7a64 	vstr	s15, [r3, #400]	@ 0x190
            break;
 800290c:	e01a      	b.n	8002944 <vec_ctrl_svpwm+0x2f0>
        }
        case 1://180~239 3 abc
        {
            motor->pwm_duty_u = T0div2 + T1 + T2;
 800290e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002912:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002916:	ee37 7a27 	vadd.f32	s14, s14, s15
 800291a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800291e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_v = T0div2 + T2;
 8002928:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800292c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            motor->pwm_duty_w = T0div2;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800293e:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
            break;
 8002942:	bf00      	nop
        }
    }
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[0], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_u));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10f      	bne.n	800296c <vec_ctrl_svpwm+0x318>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002952:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800299c <vec_ctrl_svpwm+0x348>
 8002956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002964:	ee17 2a90 	vmov	r2, s15
 8002968:	635a      	str	r2, [r3, #52]	@ 0x34
 800296a:	e064      	b.n	8002a36 <vec_ctrl_svpwm+0x3e2>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	2b04      	cmp	r3, #4
 8002972:	d115      	bne.n	80029a0 <vec_ctrl_svpwm+0x34c>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 800297a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800299c <vec_ctrl_svpwm+0x348>
 800297e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800298c:	ee17 3a90 	vmov	r3, s15
 8002990:	6393      	str	r3, [r2, #56]	@ 0x38
 8002992:	e050      	b.n	8002a36 <vec_ctrl_svpwm+0x3e2>
 8002994:	3f860a92 	.word	0x3f860a92
 8002998:	2000093c 	.word	0x2000093c
 800299c:	437a0000 	.word	0x437a0000
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d10f      	bne.n	80029c8 <vec_ctrl_svpwm+0x374>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 80029ae:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 800299c <vec_ctrl_svpwm+0x348>
 80029b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c0:	ee17 3a90 	vmov	r3, s15
 80029c4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80029c6:	e036      	b.n	8002a36 <vec_ctrl_svpwm+0x3e2>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	2b0c      	cmp	r3, #12
 80029ce:	d10f      	bne.n	80029f0 <vec_ctrl_svpwm+0x39c>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 80029d6:	ed1f 7a0f 	vldr	s14, [pc, #-60]	@ 800299c <vec_ctrl_svpwm+0x348>
 80029da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029e8:	ee17 3a90 	vmov	r3, s15
 80029ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ee:	e022      	b.n	8002a36 <vec_ctrl_svpwm+0x3e2>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	2b10      	cmp	r3, #16
 80029f6:	d10f      	bne.n	8002a18 <vec_ctrl_svpwm+0x3c4>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 80029fe:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 800299c <vec_ctrl_svpwm+0x348>
 8002a02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a10:	ee17 3a90 	vmov	r3, s15
 8002a14:	6493      	str	r3, [r2, #72]	@ 0x48
 8002a16:	e00e      	b.n	8002a36 <vec_ctrl_svpwm+0x3e2>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002a1e:	ed1f 7a21 	vldr	s14, [pc, #-132]	@ 800299c <vec_ctrl_svpwm+0x348>
 8002a22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a30:	ee17 3a90 	vmov	r3, s15
 8002a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[1], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_v));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10f      	bne.n	8002a5e <vec_ctrl_svpwm+0x40a>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002a44:	ed1f 7a2b 	vldr	s14, [pc, #-172]	@ 800299c <vec_ctrl_svpwm+0x348>
 8002a48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a56:	ee17 2a90 	vmov	r2, s15
 8002a5a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a5c:	e05e      	b.n	8002b1c <vec_ctrl_svpwm+0x4c8>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d10f      	bne.n	8002a86 <vec_ctrl_svpwm+0x432>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002a6c:	ed1f 7a35 	vldr	s14, [pc, #-212]	@ 800299c <vec_ctrl_svpwm+0x348>
 8002a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a7e:	ee17 3a90 	vmov	r3, s15
 8002a82:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a84:	e04a      	b.n	8002b1c <vec_ctrl_svpwm+0x4c8>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d10f      	bne.n	8002aae <vec_ctrl_svpwm+0x45a>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002a94:	ed1f 7a3f 	vldr	s14, [pc, #-252]	@ 800299c <vec_ctrl_svpwm+0x348>
 8002a98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aa6:	ee17 3a90 	vmov	r3, s15
 8002aaa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002aac:	e036      	b.n	8002b1c <vec_ctrl_svpwm+0x4c8>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	2b0c      	cmp	r3, #12
 8002ab4:	d10f      	bne.n	8002ad6 <vec_ctrl_svpwm+0x482>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002abc:	ed1f 7a49 	vldr	s14, [pc, #-292]	@ 800299c <vec_ctrl_svpwm+0x348>
 8002ac0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ace:	ee17 3a90 	vmov	r3, s15
 8002ad2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ad4:	e022      	b.n	8002b1c <vec_ctrl_svpwm+0x4c8>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	2b10      	cmp	r3, #16
 8002adc:	d10f      	bne.n	8002afe <vec_ctrl_svpwm+0x4aa>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002ae4:	ed1f 7a53 	vldr	s14, [pc, #-332]	@ 800299c <vec_ctrl_svpwm+0x348>
 8002ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002af6:	ee17 3a90 	vmov	r3, s15
 8002afa:	6493      	str	r3, [r2, #72]	@ 0x48
 8002afc:	e00e      	b.n	8002b1c <vec_ctrl_svpwm+0x4c8>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002b04:	ed1f 7a5b 	vldr	s14, [pc, #-364]	@ 800299c <vec_ctrl_svpwm+0x348>
 8002b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b16:	ee17 3a90 	vmov	r3, s15
 8002b1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[2], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_w));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10f      	bne.n	8002b44 <vec_ctrl_svpwm+0x4f0>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002b2a:	ed1f 7a64 	vldr	s14, [pc, #-400]	@ 800299c <vec_ctrl_svpwm+0x348>
 8002b2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b3c:	ee17 2a90 	vmov	r2, s15
 8002b40:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b42:	e05e      	b.n	8002c02 <vec_ctrl_svpwm+0x5ae>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d10f      	bne.n	8002b6c <vec_ctrl_svpwm+0x518>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002b52:	ed1f 7a6e 	vldr	s14, [pc, #-440]	@ 800299c <vec_ctrl_svpwm+0x348>
 8002b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b64:	ee17 3a90 	vmov	r3, s15
 8002b68:	6393      	str	r3, [r2, #56]	@ 0x38
 8002b6a:	e04a      	b.n	8002c02 <vec_ctrl_svpwm+0x5ae>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d10f      	bne.n	8002b94 <vec_ctrl_svpwm+0x540>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002b7a:	ed1f 7a78 	vldr	s14, [pc, #-480]	@ 800299c <vec_ctrl_svpwm+0x348>
 8002b7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b8c:	ee17 3a90 	vmov	r3, s15
 8002b90:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002b92:	e036      	b.n	8002c02 <vec_ctrl_svpwm+0x5ae>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	2b0c      	cmp	r3, #12
 8002b9a:	d10f      	bne.n	8002bbc <vec_ctrl_svpwm+0x568>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002ba2:	ed1f 7a82 	vldr	s14, [pc, #-520]	@ 800299c <vec_ctrl_svpwm+0x348>
 8002ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bb4:	ee17 3a90 	vmov	r3, s15
 8002bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bba:	e022      	b.n	8002c02 <vec_ctrl_svpwm+0x5ae>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d10f      	bne.n	8002be4 <vec_ctrl_svpwm+0x590>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002bca:	ed1f 7a8c 	vldr	s14, [pc, #-560]	@ 800299c <vec_ctrl_svpwm+0x348>
 8002bce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bdc:	ee17 3a90 	vmov	r3, s15
 8002be0:	6493      	str	r3, [r2, #72]	@ 0x48
 8002be2:	e00e      	b.n	8002c02 <vec_ctrl_svpwm+0x5ae>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002bea:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 800299c <vec_ctrl_svpwm+0x348>
 8002bee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bfc:	ee17 3a90 	vmov	r3, s15
 8002c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
    return RESULT_OK(NULL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	605a      	str	r2, [r3, #4]
}
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	3748      	adds	r7, #72	@ 0x48
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop

08002c18 <motor_foc_pwm_pulse>:

#define CYCLE_CNT(id) ({cycle[id] = __HAL_TIM_GET_COUNTER(&htim2) - cycle[id-1];})
// FOC 20kHz
// Thread - pwmIt - 0
Result motor_foc_pwm_pulse(MotorParameter *motor)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002c22:	4b89      	ldr	r3, [pc, #548]	@ (8002e48 <motor_foc_pwm_pulse+0x230>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2200      	movs	r2, #0
 8002c28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (motor->pwm_count % 100 == 0)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002c30:	4a86      	ldr	r2, [pc, #536]	@ (8002e4c <motor_foc_pwm_pulse+0x234>)
 8002c32:	fba2 1203 	umull	r1, r2, r2, r3
 8002c36:	0952      	lsrs	r2, r2, #5
 8002c38:	2164      	movs	r1, #100	@ 0x64
 8002c3a:	fb01 f202 	mul.w	r2, r1, r2
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d122      	bne.n	8002c8c <motor_foc_pwm_pulse+0x74>
    {
        __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002c46:	4b80      	ldr	r3, [pc, #512]	@ (8002e48 <motor_foc_pwm_pulse+0x230>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	625a      	str	r2, [r3, #36]	@ 0x24
        cycle[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8002c4e:	4b7e      	ldr	r3, [pc, #504]	@ (8002e48 <motor_foc_pwm_pulse+0x230>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	4a7e      	ldr	r2, [pc, #504]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002c56:	6013      	str	r3, [r2, #0]
        // Thread - pwmIt(100) - 1
        stop_check(motor);
 8002c58:	463b      	mov	r3, r7
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fa0b 	bl	8002078 <stop_check>
        CYCLE_CNT(1);
 8002c62:	4b79      	ldr	r3, [pc, #484]	@ (8002e48 <motor_foc_pwm_pulse+0x230>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c68:	4b79      	ldr	r3, [pc, #484]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	4a78      	ldr	r2, [pc, #480]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002c70:	6053      	str	r3, [r2, #4]
        // Thread - pwmIt(100) - 2
        pi_speed(motor); // !
 8002c72:	463b      	mov	r3, r7
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fa56 	bl	8002128 <pi_speed>
        CYCLE_CNT(2);
 8002c7c:	4b72      	ldr	r3, [pc, #456]	@ (8002e48 <motor_foc_pwm_pulse+0x230>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c82:	4b73      	ldr	r3, [pc, #460]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	4a71      	ldr	r2, [pc, #452]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002c8a:	6093      	str	r3, [r2, #8]
    }
    if (motor->pwm_count % 2 == 0)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f040 80a6 	bne.w	8002dea <motor_foc_pwm_pulse+0x1d2>
    {
        CYCLE_CNT(3);
 8002c9e:	4b6a      	ldr	r3, [pc, #424]	@ (8002e48 <motor_foc_pwm_pulse+0x230>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	4a69      	ldr	r2, [pc, #420]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002cac:	60d3      	str	r3, [r2, #12]
        // Thread - pwmIt - 1
        renew_adc(motor->const_h.adc_u_id, &motor->adc_u);
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8002cba:	463b      	mov	r3, r7
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fe fc6f 	bl	80015a0 <renew_adc>
        CYCLE_CNT(4);
 8002cc2:	4b61      	ldr	r3, [pc, #388]	@ (8002e48 <motor_foc_pwm_pulse+0x230>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cc8:	4b61      	ldr	r3, [pc, #388]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	4a60      	ldr	r2, [pc, #384]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002cd0:	6113      	str	r3, [r2, #16]
        renew_adc(motor->const_h.adc_v_id, &motor->adc_v);
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	785b      	ldrb	r3, [r3, #1]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f103 0266 	add.w	r2, r3, #102	@ 0x66
 8002cde:	463b      	mov	r3, r7
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe fc5d 	bl	80015a0 <renew_adc>
        CYCLE_CNT(5);
 8002ce6:	4b58      	ldr	r3, [pc, #352]	@ (8002e48 <motor_foc_pwm_pulse+0x230>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cec:	4b58      	ldr	r3, [pc, #352]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	4a57      	ldr	r2, [pc, #348]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002cf4:	6153      	str	r3, [r2, #20]
        renew_adc(motor->const_h.adc_w_id, &motor->adc_w);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	789b      	ldrb	r3, [r3, #2]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d02:	463b      	mov	r3, r7
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe fc4b 	bl	80015a0 <renew_adc>
        CYCLE_CNT(6);
 8002d0a:	4b4f      	ldr	r3, [pc, #316]	@ (8002e48 <motor_foc_pwm_pulse+0x230>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d10:	4b4f      	ldr	r3, [pc, #316]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	4a4e      	ldr	r2, [pc, #312]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002d18:	6193      	str	r3, [r2, #24]
        // Thread - pwmIt - 2
        angal_cal(motor);
 8002d1a:	463b      	mov	r3, r7
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fa32 	bl	8002188 <angal_cal>
        CYCLE_CNT(7);
 8002d24:	4b48      	ldr	r3, [pc, #288]	@ (8002e48 <motor_foc_pwm_pulse+0x230>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d2a:	4b49      	ldr	r3, [pc, #292]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	4a47      	ldr	r2, [pc, #284]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002d32:	61d3      	str	r3, [r2, #28]
        // Thread - pwmIt - 3
        vec_ctrl_clarke(motor);
 8002d34:	463b      	mov	r3, r7
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fa63 	bl	8002204 <vec_ctrl_clarke>
        CYCLE_CNT(8);
 8002d3e:	4b42      	ldr	r3, [pc, #264]	@ (8002e48 <motor_foc_pwm_pulse+0x230>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d44:	4b42      	ldr	r3, [pc, #264]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	4a41      	ldr	r2, [pc, #260]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002d4c:	6213      	str	r3, [r2, #32]
        // Thread - pwmIt - 4
        vec_ctrl_park(motor);
 8002d4e:	463b      	mov	r3, r7
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fac4 	bl	80022e0 <vec_ctrl_park>
        CYCLE_CNT(9);
 8002d58:	4b3b      	ldr	r3, [pc, #236]	@ (8002e48 <motor_foc_pwm_pulse+0x230>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d5e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	4a3a      	ldr	r2, [pc, #232]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002d66:	6253      	str	r3, [r2, #36]	@ 0x24
        // Thread - pwmIt - 5
        vec_ctrl_pi_id_iq(motor);
 8002d68:	463b      	mov	r3, r7
 8002d6a:	68b9      	ldr	r1, [r7, #8]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fb43 	bl	80023f8 <vec_ctrl_pi_id_iq>
        CYCLE_CNT(10);
 8002d72:	4b35      	ldr	r3, [pc, #212]	@ (8002e48 <motor_foc_pwm_pulse+0x230>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d78:	4b35      	ldr	r3, [pc, #212]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	4a34      	ldr	r2, [pc, #208]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002d80:	6293      	str	r3, [r2, #40]	@ 0x28
        // Thread - pwmIt - 6
        vec_ctrl_ipark(motor); // !
 8002d82:	463b      	mov	r3, r7
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fba6 	bl	80024d8 <vec_ctrl_ipark>
        CYCLE_CNT(11);
 8002d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e48 <motor_foc_pwm_pulse+0x230>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d92:	4b2f      	ldr	r3, [pc, #188]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	4a2d      	ldr	r2, [pc, #180]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        // Thread - pwmIt - 7
        vec_ctrl_svgen(motor);
 8002d9c:	463b      	mov	r3, r7
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fbf7 	bl	8002594 <vec_ctrl_svgen>
        CYCLE_CNT(12);
 8002da6:	4b28      	ldr	r3, [pc, #160]	@ (8002e48 <motor_foc_pwm_pulse+0x230>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dac:	4b28      	ldr	r3, [pc, #160]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	4a27      	ldr	r2, [pc, #156]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002db4:	6313      	str	r3, [r2, #48]	@ 0x30
        // Thread - pwmIt - 8
        vec_ctrl_vref(motor);  // !
 8002db6:	463b      	mov	r3, r7
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fc0d 	bl	80025da <vec_ctrl_vref>
        CYCLE_CNT(13);
 8002dc0:	4b21      	ldr	r3, [pc, #132]	@ (8002e48 <motor_foc_pwm_pulse+0x230>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dc6:	4b22      	ldr	r3, [pc, #136]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	4a20      	ldr	r2, [pc, #128]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002dce:	6353      	str	r3, [r2, #52]	@ 0x34
        // Thread - pwmIt - 9
        vec_ctrl_svpwm(motor);
 8002dd0:	463b      	mov	r3, r7
 8002dd2:	68b9      	ldr	r1, [r7, #8]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fc3d 	bl	8002654 <vec_ctrl_svpwm>
        CYCLE_CNT(14);
 8002dda:	4b1b      	ldr	r3, [pc, #108]	@ (8002e48 <motor_foc_pwm_pulse+0x230>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002de0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e50 <motor_foc_pwm_pulse+0x238>)
 8002de8:	6393      	str	r3, [r2, #56]	@ 0x38
    }
    if (motor->pwm_count >= 1000)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002df0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002df4:	d316      	bcc.n	8002e24 <motor_foc_pwm_pulse+0x20c>
    {
        motor->pwm_count = 0;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        motor->rpm_fbk_htim = motor->exti_hall_cnt * 200.0f;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	ee07 3a90 	vmov	s15, r3
 8002e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e0e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002e54 <motor_foc_pwm_pulse+0x23c>
 8002e12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
        motor->exti_hall_cnt = 0;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    }
    motor->pwm_count++;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    return RESULT_OK(NULL);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2201      	movs	r2, #1
 8002e38:	701a      	strb	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	605a      	str	r2, [r3, #4]
}
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000590 	.word	0x20000590
 8002e4c:	51eb851f 	.word	0x51eb851f
 8002e50:	20000944 	.word	0x20000944
 8002e54:	43480000 	.word	0x43480000

08002e58 <motor_hall_exti>:
#include "motor/ctrl_120.h"
#include "motor/ctrl_foc.h"
#include "analog/adc1/main.h"

void motor_hall_exti(MotorParameter *motor)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
    motor->exti_hall_cnt++;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3301      	adds	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    uint8_t hall_last = motor->exti_hall_curt;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002e78:	75bb      	strb	r3, [r7, #22]
    uint8_t hall_current =
          ((motor->const_h.Hall_GPIOx[0]->IDR & motor->const_h.Hall_GPIO_Pin_x[0]) ? 4U : 0U)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	8a12      	ldrh	r2, [r2, #16]
 8002e84:	4013      	ands	r3, r2
        | ((motor->const_h.Hall_GPIOx[1]->IDR & motor->const_h.Hall_GPIO_Pin_x[1]) ? 2U : 0U)
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <motor_hall_exti+0x36>
 8002e8a:	2204      	movs	r2, #4
 8002e8c:	e000      	b.n	8002e90 <motor_hall_exti+0x38>
 8002e8e:	2200      	movs	r2, #0
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	68f9      	ldr	r1, [r7, #12]
 8002e98:	8a49      	ldrh	r1, [r1, #18]
 8002e9a:	400b      	ands	r3, r1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <motor_hall_exti+0x4c>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e000      	b.n	8002ea6 <motor_hall_exti+0x4e>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	b2db      	uxtb	r3, r3
        | ((motor->const_h.Hall_GPIOx[2]->IDR & motor->const_h.Hall_GPIO_Pin_x[2]) ? 1U : 0U);
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	68d2      	ldr	r2, [r2, #12]
 8002eae:	6912      	ldr	r2, [r2, #16]
 8002eb0:	68f9      	ldr	r1, [r7, #12]
 8002eb2:	8a89      	ldrh	r1, [r1, #20]
 8002eb4:	400a      	ands	r2, r1
 8002eb6:	2a00      	cmp	r2, #0
 8002eb8:	d001      	beq.n	8002ebe <motor_hall_exti+0x66>
 8002eba:	2201      	movs	r2, #1
 8002ebc:	e000      	b.n	8002ec0 <motor_hall_exti+0x68>
 8002ebe:	2200      	movs	r2, #0
    uint8_t hall_current =
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	757b      	strb	r3, [r7, #21]
    motor->exti_hall_last = hall_last;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	7dba      	ldrb	r2, [r7, #22]
 8002ec8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    motor->exti_hall_curt = hall_current;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	7d7a      	ldrb	r2, [r7, #21]
 8002ed0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    if (hall_current == 0 || hall_current == 7) 
 8002ed4:	7d7b      	ldrb	r3, [r7, #21]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <motor_hall_exti+0x88>
 8002eda:	7d7b      	ldrb	r3, [r7, #21]
 8002edc:	2b07      	cmp	r3, #7
 8002ede:	d12e      	bne.n	8002f3e <motor_hall_exti+0xe6>
    {
        uint8_t i;
        for (i = 0; i < 3; i++)
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	75fb      	strb	r3, [r7, #23]
 8002ee4:	e027      	b.n	8002f36 <motor_hall_exti+0xde>
        {
            HAL_TIM_PWM_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6998      	ldr	r0, [r3, #24]
 8002eea:	7dfb      	ldrb	r3, [r7, #23]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	3306      	adds	r3, #6
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	f004 fea0 	bl	8007c3c <HAL_TIM_PWM_Stop>
            HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6998      	ldr	r0, [r3, #24]
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	3306      	adds	r3, #6
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f005 fe9d 	bl	8008c4c <HAL_TIMEx_PWMN_Stop>
            HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
 8002f12:	7dfa      	ldrb	r2, [r7, #23]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	320a      	adds	r2, #10
 8002f18:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002f1c:	7dfb      	ldrb	r3, [r7, #23]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	3318      	adds	r3, #24
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	889b      	ldrh	r3, [r3, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	f003 fa44 	bl	80063b8 <HAL_GPIO_WritePin>
        for (i = 0; i < 3; i++)
 8002f30:	7dfb      	ldrb	r3, [r7, #23]
 8002f32:	3301      	adds	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d9d4      	bls.n	8002ee6 <motor_hall_exti+0x8e>
        }
        return;
 8002f3c:	e011      	b.n	8002f62 <motor_hall_exti+0x10a>
    }
    switch (motor->mode)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <motor_hall_exti+0xf6>
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d004      	beq.n	8002f56 <motor_hall_exti+0xfe>
 8002f4c:	e009      	b.n	8002f62 <motor_hall_exti+0x10a>
    {
        case MOTOR_CTRL_120:
        {
            motor_120_hall_update(motor);
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f7fe fe78 	bl	8001c44 <motor_120_hall_update>
            break;
 8002f54:	e005      	b.n	8002f62 <motor_hall_exti+0x10a>
        }
        case MOTOR_CTRL_FOC:
        {
            motor_foc_hall_update(motor);
 8002f56:	463b      	mov	r3, r7
 8002f58:	68f9      	ldr	r1, [r7, #12]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff f812 	bl	8001f84 <motor_foc_hall_update>
            break;
 8002f60:	bf00      	nop
        }
    }
}
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <motor_pwm_pulse>:

void motor_pwm_pulse(MotorParameter *motor)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
    switch (motor->mode)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <motor_pwm_pulse+0x24>
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d000      	beq.n	8002f80 <motor_pwm_pulse+0x18>
        {
            motor_foc_pwm_pulse(motor);
            break;
        }
    }
}
 8002f7e:	e006      	b.n	8002f8e <motor_pwm_pulse+0x26>
            motor_foc_pwm_pulse(motor);
 8002f80:	463b      	mov	r3, r7
 8002f82:	68f9      	ldr	r1, [r7, #12]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fe47 	bl	8002c18 <motor_foc_pwm_pulse>
            break;
 8002f8a:	e000      	b.n	8002f8e <motor_pwm_pulse+0x26>
            break;
 8002f8c:	bf00      	nop
}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <StartMotorTask>:

void StartMotorTask(void *argument)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
    motor_h.pi_speed.Ref = 80.0f;
 8002fa0:	4b14      	ldr	r3, [pc, #80]	@ (8002ff4 <StartMotorTask+0x5c>)
 8002fa2:	4a15      	ldr	r2, [pc, #84]	@ (8002ff8 <StartMotorTask+0x60>)
 8002fa4:	66da      	str	r2, [r3, #108]	@ 0x6c
    motor_h.pwm_duty_u = 1.0f;
 8002fa6:	4b13      	ldr	r3, [pc, #76]	@ (8002ff4 <StartMotorTask+0x5c>)
 8002fa8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002fac:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    // motor_h.reverse = true;

    HAL_TIM_Base_Start_IT(motor_h.const_h.htimx);
 8002fb0:	4b10      	ldr	r3, [pc, #64]	@ (8002ff4 <StartMotorTask+0x5c>)
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f004 fc29 	bl	800780c <HAL_TIM_Base_Start_IT>
    // HAL_TIM_Base_Start(motor_h.const_h.htimx);
    
    motor_hall_exti(&motor_h);
 8002fba:	480e      	ldr	r0, [pc, #56]	@ (8002ff4 <StartMotorTask+0x5c>)
 8002fbc:	f7ff ff4c 	bl	8002e58 <motor_hall_exti>
    motor_h.mode = MOTOR_CTRL_120;
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff4 <StartMotorTask+0x5c>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    osDelay(3000);
 8002fc8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002fcc:	f006 feaa 	bl	8009d24 <osDelay>
    motor_120_ctrl_stop(&motor_h);
 8002fd0:	4808      	ldr	r0, [pc, #32]	@ (8002ff4 <StartMotorTask+0x5c>)
 8002fd2:	f7fe ff65 	bl	8001ea0 <motor_120_ctrl_stop>

    motor_foc_tim_setup(&motor_h);
 8002fd6:	463b      	mov	r3, r7
 8002fd8:	4906      	ldr	r1, [pc, #24]	@ (8002ff4 <StartMotorTask+0x5c>)
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe ff88 	bl	8001ef0 <motor_foc_tim_setup>
    motor_hall_exti(&motor_h);
 8002fe0:	4804      	ldr	r0, [pc, #16]	@ (8002ff4 <StartMotorTask+0x5c>)
 8002fe2:	f7ff ff39 	bl	8002e58 <motor_hall_exti>
    motor_h.mode = MOTOR_CTRL_FOC;
 8002fe6:	4b03      	ldr	r3, [pc, #12]	@ (8002ff4 <StartMotorTask+0x5c>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    StopTask();
 8002fee:	f006 fe92 	bl	8009d16 <osThreadExit>
 8002ff2:	bf00      	nop
 8002ff4:	20000014 	.word	0x20000014
 8002ff8:	42a00000 	.word	0x42a00000

08002ffc <PARK_run>:
#include "motor/park.h"

Result PARK_run(volatile PARK *park)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
    park->Ds = (park->Alpha * park->Cosine) + (park->Beta  * park->Sine);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	ed93 7a00 	vldr	s14, [r3]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003012:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	edd3 6a01 	vldr	s13, [r3, #4]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003022:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	edc3 7a03 	vstr	s15, [r3, #12]
    park->Qs = (park->Beta  * park->Cosine) - (park->Alpha * park->Sine);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	ed93 7a01 	vldr	s14, [r3, #4]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	edd3 7a06 	vldr	s15, [r3, #24]
 800303c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	edd3 6a00 	vldr	s13, [r3]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	edd3 7a05 	vldr	s15, [r3, #20]
 800304c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	edc3 7a04 	vstr	s15, [r3, #16]
    return RESULT_OK(NULL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	605a      	str	r2, [r3, #4]
}
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <IPARK_run>:

Result IPARK_run(volatile IPARK *ipark)
{
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
    ipark->Alpha = (ipark->Vdref * ipark->Cosine) - (ipark->Vqref * ipark->Sine);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	edd3 7a06 	vldr	s15, [r3, #24]
 8003088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	edd3 6a04 	vldr	s13, [r3, #16]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	edd3 7a05 	vldr	s15, [r3, #20]
 8003098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800309c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	edc3 7a00 	vstr	s15, [r3]
    ipark->Beta  = (ipark->Vqref * ipark->Cosine) + (ipark->Vdref * ipark->Sine);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	ed93 7a04 	vldr	s14, [r3, #16]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80030b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	edd3 6a03 	vldr	s13, [r3, #12]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	edd3 7a05 	vldr	s15, [r3, #20]
 80030c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	edc3 7a01 	vstr	s15, [r3, #4]
    return RESULT_OK(NULL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	605a      	str	r2, [r3, #4]
}
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <PI_run>:
#include "motor/pi.h"
#include "motor/basic.h"

Result PI_run(volatile PI_CTRL *pi)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
    pi->up = pi->Kp * (pi->Ref - pi->Fbk);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	edd3 6a00 	vldr	s13, [r3]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	edd3 7a01 	vldr	s15, [r3, #4]
 8003104:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	edc3 7a07 	vstr	s15, [r3, #28]

    if (pi->Out == pi->v1)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	ed93 7a02 	vldr	s14, [r3, #8]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800311e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003126:	d110      	bne.n	800314a <PI_run+0x62>
    {
        pi->ui = pi->Ki * pi->up + pi->i1;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	ed93 7a04 	vldr	s14, [r3, #16]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	edd3 7a07 	vldr	s15, [r3, #28]
 8003134:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800313e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	edc3 7a08 	vstr	s15, [r3, #32]
 8003148:	e003      	b.n	8003152 <PI_run+0x6a>
    }
    else
    {
        pi->ui = pi->i1;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	621a      	str	r2, [r3, #32]
    }
    pi->i1 = pi->ui;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	6a1a      	ldr	r2, [r3, #32]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	629a      	str	r2, [r3, #40]	@ 0x28
    pi->v1 = pi->up + pi->ui;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	ed93 7a07 	vldr	s14, [r3, #28]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	edd3 7a08 	vldr	s15, [r3, #32]
 8003166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    pi->Out = clampf(pi->v1, pi->Umin, pi->Umax);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	ed93 7a06 	vldr	s14, [r3, #24]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	edd3 6a05 	vldr	s13, [r3, #20]
 8003182:	eeb0 1a66 	vmov.f32	s2, s13
 8003186:	eef0 0a47 	vmov.f32	s1, s14
 800318a:	eeb0 0a67 	vmov.f32	s0, s15
 800318e:	f7fe fc9f 	bl	8001ad0 <clampf>
 8003192:	eef0 7a40 	vmov.f32	s15, s0
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	edc3 7a02 	vstr	s15, [r3, #8]
    pi->w1 = (pi->Out == pi->v1) ? 1.0f : 0.0f;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	ed93 7a02 	vldr	s14, [r3, #8]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80031a8:	eeb4 7a67 	vcmp.f32	s14, s15
 80031ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b0:	d102      	bne.n	80031b8 <PI_run+0xd0>
 80031b2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80031b6:	e001      	b.n	80031bc <PI_run+0xd4>
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	62da      	str	r2, [r3, #44]	@ 0x2c
    return RESULT_OK(NULL);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	605a      	str	r2, [r3, #4]
}
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <SVGEN_run>:
#include "motor/svgendq.h"

Result SVGEN_run(volatile SVGENDQ *svgq)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
    float32_t t1 = svgq->Ubeta * 0.5f;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80031e4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80031e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ec:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t t2 = 0.8660254f * svgq->Ualpha;   // sqrt(3)/2
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	edd3 7a00 	vldr	s15, [r3]
 80031f6:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80032ac <SVGEN_run+0xd8>
 80031fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031fe:	edc7 7a04 	vstr	s15, [r7, #16]
    // Inverse clarke transformation
    svgq->Va = svgq->Ubeta;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	609a      	str	r2, [r3, #8]
    svgq->Vb = -t1 + t2;
 800320a:	ed97 7a04 	vldr	s14, [r7, #16]
 800320e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	edc3 7a03 	vstr	s15, [r3, #12]
    svgq->Vc = -t1 - t2;
 800321c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003220:	eeb1 7a67 	vneg.f32	s14, s15
 8003224:	edd7 7a04 	vldr	s15, [r7, #16]
 8003228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	edc3 7a04 	vstr	s15, [r3, #16]
    // 60 degree Sector determination
    svgq->Sector = 0;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2200      	movs	r2, #0
 8003236:	829a      	strh	r2, [r3, #20]
    if (svgq->Va > 0.0f) svgq->Sector += 2;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	edd3 7a02 	vldr	s15, [r3, #8]
 800323e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003246:	dd06      	ble.n	8003256 <SVGEN_run+0x82>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	8a9b      	ldrh	r3, [r3, #20]
 800324c:	b29b      	uxth	r3, r3
 800324e:	3302      	adds	r3, #2
 8003250:	b29a      	uxth	r2, r3
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	829a      	strh	r2, [r3, #20]
    if (svgq->Vb > 0.0f) svgq->Sector += 4;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	edd3 7a03 	vldr	s15, [r3, #12]
 800325c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003264:	dd06      	ble.n	8003274 <SVGEN_run+0xa0>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	8a9b      	ldrh	r3, [r3, #20]
 800326a:	b29b      	uxth	r3, r3
 800326c:	3304      	adds	r3, #4
 800326e:	b29a      	uxth	r2, r3
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	829a      	strh	r2, [r3, #20]
    if (svgq->Vc > 0.0f) svgq->Sector += 1;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	edd3 7a04 	vldr	s15, [r3, #16]
 800327a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800327e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003282:	dd06      	ble.n	8003292 <SVGEN_run+0xbe>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	8a9b      	ldrh	r3, [r3, #20]
 8003288:	b29b      	uxth	r3, r3
 800328a:	3301      	adds	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	829a      	strh	r2, [r3, #20]
    // Sector 0: this is special case for (Ualpha,Ubeta) = (0,0)
    return RESULT_OK(NULL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	605a      	str	r2, [r3, #4]
}
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	3f5db3d7 	.word	0x3f5db3d7

080032b0 <trigo_sin_cosf>:
    .OutSize    = CORDIC_OUTSIZE_32BITS,
};
static CORDIC_ConfigTypeDef *cordic_currunt;

Result trigo_sin_cosf(float32_t theta, float32_t *sin, float32_t *cos)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b090      	sub	sp, #64	@ 0x40
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80032bc:	6079      	str	r1, [r7, #4]
 80032be:	603a      	str	r2, [r7, #0]
    if (cordic_currunt != &cordic_cfg_sin_cos)
 80032c0:	4b36      	ldr	r3, [pc, #216]	@ (800339c <trigo_sin_cosf+0xec>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a36      	ldr	r2, [pc, #216]	@ (80033a0 <trigo_sin_cosf+0xf0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d01a      	beq.n	8003300 <trigo_sin_cosf+0x50>
    {
        cordic_currunt = &cordic_cfg_sin_cos;
 80032ca:	4b34      	ldr	r3, [pc, #208]	@ (800339c <trigo_sin_cosf+0xec>)
 80032cc:	4a34      	ldr	r2, [pc, #208]	@ (80033a0 <trigo_sin_cosf+0xf0>)
 80032ce:	601a      	str	r2, [r3, #0]
        ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Configure(&hcordic, cordic_currunt));
 80032d0:	4b32      	ldr	r3, [pc, #200]	@ (800339c <trigo_sin_cosf+0xec>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4619      	mov	r1, r3
 80032d6:	4833      	ldr	r0, [pc, #204]	@ (80033a4 <trigo_sin_cosf+0xf4>)
 80032d8:	f001 fd80 	bl	8004ddc <HAL_CORDIC_Configure>
 80032dc:	4603      	mov	r3, r0
 80032de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80032e2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <trigo_sin_cosf+0x50>
 80032ea:	f997 1037 	ldrsb.w	r1, [r7, #55]	@ 0x37
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	461a      	mov	r2, r3
 80032f2:	2300      	movs	r3, #0
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	6053      	str	r3, [r2, #4]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	460a      	mov	r2, r1
 80032fc:	711a      	strb	r2, [r3, #4]
 80032fe:	e049      	b.n	8003394 <trigo_sin_cosf+0xe4>
    }
    int32_t in = (int32_t)(wrap_m1_1pi(theta) * 2147483648.0f);
 8003300:	ed97 0a02 	vldr	s0, [r7, #8]
 8003304:	f7fe fc0e 	bl	8001b24 <wrap_m1_1pi>
 8003308:	eef0 7a40 	vmov.f32	s15, s0
 800330c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80033a8 <trigo_sin_cosf+0xf8>
 8003310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003318:	ee17 3a90 	vmov	r3, s15
 800331c:	633b      	str	r3, [r7, #48]	@ 0x30
    int32_t out[2];
    ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Calculate(&hcordic, &in, out, 1, HAL_MAX_DELAY));
 800331e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003322:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8003326:	f04f 33ff 	mov.w	r3, #4294967295
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	2301      	movs	r3, #1
 800332e:	481d      	ldr	r0, [pc, #116]	@ (80033a4 <trigo_sin_cosf+0xf4>)
 8003330:	f001 fd90 	bl	8004e54 <HAL_CORDIC_Calculate>
 8003334:	4603      	mov	r3, r0
 8003336:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800333a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <trigo_sin_cosf+0xa8>
 8003342:	f997 1036 	ldrsb.w	r1, [r7, #54]	@ 0x36
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	461a      	mov	r2, r3
 800334a:	2300      	movs	r3, #0
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	6053      	str	r3, [r2, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	460a      	mov	r2, r1
 8003354:	711a      	strb	r2, [r3, #4]
 8003356:	e01d      	b.n	8003394 <trigo_sin_cosf+0xe4>
    *sin = (float32_t)out[0] / 2147483648.0f;
 8003358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335a:	ee07 3a90 	vmov	s15, r3
 800335e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003362:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80033a8 <trigo_sin_cosf+0xf8>
 8003366:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	edc3 7a00 	vstr	s15, [r3]
    *cos = (float32_t)out[1] / 2147483648.0f;
 8003370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800337a:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80033a8 <trigo_sin_cosf+0xf8>
 800337e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	edc3 7a00 	vstr	s15, [r3]
    return RESULT_OK(NULL);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2201      	movs	r2, #1
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	605a      	str	r2, [r3, #4]
}
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	3738      	adds	r7, #56	@ 0x38
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000984 	.word	0x20000984
 80033a0:	200001ac 	.word	0x200001ac
 80033a4:	20000348 	.word	0x20000348
 80033a8:	4f000000 	.word	0x4f000000

080033ac <trigo_atan>:

Result trigo_atan(float32_t x, float32_t y, float32_t *theta)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b098      	sub	sp, #96	@ 0x60
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80033b8:	edc7 0a01 	vstr	s1, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
    if (cordic_currunt != &cordic_cfg_atan)
 80033be:	4b59      	ldr	r3, [pc, #356]	@ (8003524 <trigo_atan+0x178>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a59      	ldr	r2, [pc, #356]	@ (8003528 <trigo_atan+0x17c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d01a      	beq.n	80033fe <trigo_atan+0x52>
    {
        cordic_currunt = &cordic_cfg_atan;
 80033c8:	4b56      	ldr	r3, [pc, #344]	@ (8003524 <trigo_atan+0x178>)
 80033ca:	4a57      	ldr	r2, [pc, #348]	@ (8003528 <trigo_atan+0x17c>)
 80033cc:	601a      	str	r2, [r3, #0]
        ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Configure(&hcordic, cordic_currunt));
 80033ce:	4b55      	ldr	r3, [pc, #340]	@ (8003524 <trigo_atan+0x178>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4619      	mov	r1, r3
 80033d4:	4855      	ldr	r0, [pc, #340]	@ (800352c <trigo_atan+0x180>)
 80033d6:	f001 fd01 	bl	8004ddc <HAL_CORDIC_Configure>
 80033da:	4603      	mov	r3, r0
 80033dc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80033e0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <trigo_atan+0x52>
 80033e8:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	461a      	mov	r2, r3
 80033f0:	2300      	movs	r3, #0
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	6053      	str	r3, [r2, #4]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	460a      	mov	r2, r1
 80033fa:	711a      	strb	r2, [r3, #4]
 80033fc:	e08e      	b.n	800351c <trigo_atan+0x170>
    }
    float32_t ax = fast_fabsf(x);
 80033fe:	ed97 0a02 	vldr	s0, [r7, #8]
 8003402:	f7fe fbe1 	bl	8001bc8 <fast_fabsf>
 8003406:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
    float32_t ay = fast_fabsf(y);
 800340a:	ed97 0a01 	vldr	s0, [r7, #4]
 800340e:	f7fe fbdb 	bl	8001bc8 <fast_fabsf>
 8003412:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    float32_t norm = (ax > ay) ? ax : ay;
 8003416:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800341a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800341e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003426:	dd01      	ble.n	800342c <trigo_atan+0x80>
 8003428:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800342a:	e000      	b.n	800342e <trigo_atan+0x82>
 800342c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800342e:	647b      	str	r3, [r7, #68]	@ 0x44
    // !
    if (norm == 0.0f) return RESULT_ERROR(RES_ERR_FAIL);
 8003430:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003434:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343c:	d108      	bne.n	8003450 <trigo_atan+0xa4>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	461a      	mov	r2, r3
 8003442:	2300      	movs	r3, #0
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	6053      	str	r3, [r2, #4]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2201      	movs	r2, #1
 800344c:	711a      	strb	r2, [r3, #4]
 800344e:	e065      	b.n	800351c <trigo_atan+0x170>
    x /= norm;
 8003450:	edd7 6a02 	vldr	s13, [r7, #8]
 8003454:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800345c:	edc7 7a02 	vstr	s15, [r7, #8]
    y /= norm;
 8003460:	edd7 6a01 	vldr	s13, [r7, #4]
 8003464:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800346c:	edc7 7a01 	vstr	s15, [r7, #4]
    int32_t in[2], out;
    in[0] = (int32_t)(x * 2147483648.0f);  
 8003470:	edd7 7a02 	vldr	s15, [r7, #8]
 8003474:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8003530 <trigo_atan+0x184>
 8003478:	ee67 7a87 	vmul.f32	s15, s15, s14
 800347c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003480:	ee17 3a90 	vmov	r3, s15
 8003484:	63bb      	str	r3, [r7, #56]	@ 0x38
    in[1] = (int32_t)(y * 2147483648.0f);
 8003486:	edd7 7a01 	vldr	s15, [r7, #4]
 800348a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8003530 <trigo_atan+0x184>
 800348e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003496:	ee17 3a90 	vmov	r3, s15
 800349a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Calculate(&hcordic, in, &out, 1, HAL_MAX_DELAY));
 800349c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80034a0:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80034a4:	f04f 33ff 	mov.w	r3, #4294967295
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	2301      	movs	r3, #1
 80034ac:	481f      	ldr	r0, [pc, #124]	@ (800352c <trigo_atan+0x180>)
 80034ae:	f001 fcd1 	bl	8004e54 <HAL_CORDIC_Calculate>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <trigo_atan+0x12a>
 80034c0:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	461a      	mov	r2, r3
 80034c8:	2300      	movs	r3, #0
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	6053      	str	r3, [r2, #4]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	460a      	mov	r2, r1
 80034d2:	711a      	strb	r2, [r3, #4]
 80034d4:	e022      	b.n	800351c <trigo_atan+0x170>
    float32_t angle = (float32_t)out / 2147483648.0f; // [-π, π)
 80034d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d8:	ee07 3a90 	vmov	s15, r3
 80034dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034e0:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8003530 <trigo_atan+0x184>
 80034e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034e8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    if (angle < 0) angle += MUL_2_PI;
 80034ec:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80034f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f8:	d507      	bpl.n	800350a <trigo_atan+0x15e>
 80034fa:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80034fe:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003534 <trigo_atan+0x188>
 8003502:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003506:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    *theta = angle;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800350e:	601a      	str	r2, [r3, #0]
    return RESULT_OK(NULL);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	701a      	strb	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	605a      	str	r2, [r3, #4]
}
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	3758      	adds	r7, #88	@ 0x58
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20000984 	.word	0x20000984
 8003528:	200001c8 	.word	0x200001c8
 800352c:	20000348 	.word	0x20000348
 8003530:	4f000000 	.word	0x4f000000
 8003534:	40c90fdb 	.word	0x40c90fdb

08003538 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003538:	480d      	ldr	r0, [pc, #52]	@ (8003570 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800353a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800353c:	f7fd fdc6 	bl	80010cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003540:	480c      	ldr	r0, [pc, #48]	@ (8003574 <LoopForever+0x6>)
  ldr r1, =_edata
 8003542:	490d      	ldr	r1, [pc, #52]	@ (8003578 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003544:	4a0d      	ldr	r2, [pc, #52]	@ (800357c <LoopForever+0xe>)
  movs r3, #0
 8003546:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003548:	e002      	b.n	8003550 <LoopCopyDataInit>

0800354a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800354a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800354c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800354e:	3304      	adds	r3, #4

08003550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003554:	d3f9      	bcc.n	800354a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003556:	4a0a      	ldr	r2, [pc, #40]	@ (8003580 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003558:	4c0a      	ldr	r4, [pc, #40]	@ (8003584 <LoopForever+0x16>)
  movs r3, #0
 800355a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800355c:	e001      	b.n	8003562 <LoopFillZerobss>

0800355e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800355e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003560:	3204      	adds	r2, #4

08003562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003564:	d3fb      	bcc.n	800355e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003566:	f009 fa4b 	bl	800ca00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800356a:	f7fd fbfb 	bl	8000d64 <main>

0800356e <LoopForever>:

LoopForever:
    b LoopForever
 800356e:	e7fe      	b.n	800356e <LoopForever>
  ldr   r0, =_estack
 8003570:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003578:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 800357c:	0800cc94 	.word	0x0800cc94
  ldr r2, =_sbss
 8003580:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8003584:	20002550 	.word	0x20002550

08003588 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003588:	e7fe      	b.n	8003588 <ADC1_2_IRQHandler>
	...

0800358c <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8003596:	4b16      	ldr	r3, [pc, #88]	@ (80035f0 <BSP_LED_Init+0x64>)
 8003598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359a:	4a15      	ldr	r2, [pc, #84]	@ (80035f0 <BSP_LED_Init+0x64>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035a2:	4b13      	ldr	r3, [pc, #76]	@ (80035f0 <BSP_LED_Init+0x64>)
 80035a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80035ae:	2320      	movs	r3, #32
 80035b0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80035b2:	2301      	movs	r3, #1
 80035b4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ba:	2303      	movs	r3, #3
 80035bc:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	4a0c      	ldr	r2, [pc, #48]	@ (80035f4 <BSP_LED_Init+0x68>)
 80035c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c6:	f107 020c 	add.w	r2, r7, #12
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f002 fd71 	bl	80060b4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	4a07      	ldr	r2, [pc, #28]	@ (80035f4 <BSP_LED_Init+0x68>)
 80035d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035da:	2120      	movs	r1, #32
 80035dc:	2200      	movs	r2, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f002 feea 	bl	80063b8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
 80035f4:	200001e4 	.word	0x200001e4

080035f8 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	460a      	mov	r2, r1
 8003602:	71fb      	strb	r3, [r7, #7]
 8003604:	4613      	mov	r3, r2
 8003606:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8003608:	4b2c      	ldr	r3, [pc, #176]	@ (80036bc <BSP_PB_Init+0xc4>)
 800360a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360c:	4a2b      	ldr	r2, [pc, #172]	@ (80036bc <BSP_PB_Init+0xc4>)
 800360e:	f043 0304 	orr.w	r3, r3, #4
 8003612:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003614:	4b29      	ldr	r3, [pc, #164]	@ (80036bc <BSP_PB_Init+0xc4>)
 8003616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003620:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003624:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8003626:	2302      	movs	r3, #2
 8003628:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800362a:	2302      	movs	r3, #2
 800362c:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800362e:	79bb      	ldrb	r3, [r7, #6]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10c      	bne.n	800364e <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003634:	2300      	movs	r3, #0
 8003636:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	4a21      	ldr	r2, [pc, #132]	@ (80036c0 <BSP_PB_Init+0xc8>)
 800363c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003640:	f107 020c 	add.w	r2, r7, #12
 8003644:	4611      	mov	r1, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f002 fd34 	bl	80060b4 <HAL_GPIO_Init>
 800364c:	e031      	b.n	80036b2 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800364e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003652:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	4a1a      	ldr	r2, [pc, #104]	@ (80036c0 <BSP_PB_Init+0xc8>)
 8003658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800365c:	f107 020c 	add.w	r2, r7, #12
 8003660:	4611      	mov	r1, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f002 fd26 	bl	80060b4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8003668:	79fb      	ldrb	r3, [r7, #7]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4a15      	ldr	r2, [pc, #84]	@ (80036c4 <BSP_PB_Init+0xcc>)
 800366e:	441a      	add	r2, r3
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	4915      	ldr	r1, [pc, #84]	@ (80036c8 <BSP_PB_Init+0xd0>)
 8003674:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003678:	4619      	mov	r1, r3
 800367a:	4610      	mov	r0, r2
 800367c:	f002 f825 	bl	80056ca <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4a0f      	ldr	r2, [pc, #60]	@ (80036c4 <BSP_PB_Init+0xcc>)
 8003686:	1898      	adds	r0, r3, r2
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	4a10      	ldr	r2, [pc, #64]	@ (80036cc <BSP_PB_Init+0xd4>)
 800368c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003690:	461a      	mov	r2, r3
 8003692:	2100      	movs	r1, #0
 8003694:	f001 fffc 	bl	8005690 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003698:	2028      	movs	r0, #40	@ 0x28
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	4a0c      	ldr	r2, [pc, #48]	@ (80036d0 <BSP_PB_Init+0xd8>)
 800369e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a2:	2200      	movs	r2, #0
 80036a4:	4619      	mov	r1, r3
 80036a6:	f001 fd59 	bl	800515c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80036aa:	2328      	movs	r3, #40	@ 0x28
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 fd6f 	bl	8005190 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3720      	adds	r7, #32
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40021000 	.word	0x40021000
 80036c0:	200001e8 	.word	0x200001e8
 80036c4:	20000988 	.word	0x20000988
 80036c8:	0800cc58 	.word	0x0800cc58
 80036cc:	200001f0 	.word	0x200001f0
 80036d0:	200001f4 	.word	0x200001f4

080036d4 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4a04      	ldr	r2, [pc, #16]	@ (80036f4 <BSP_PB_IRQHandler+0x20>)
 80036e4:	4413      	add	r3, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f002 f804 	bl	80056f4 <HAL_EXTI_IRQHandler>
}
 80036ec:	bf00      	nop
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20000988 	.word	0x20000988

080036f8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
	...

08003710 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	6039      	str	r1, [r7, #0]
 800371a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d903      	bls.n	800372e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003726:	f06f 0301 	mvn.w	r3, #1
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	e018      	b.n	8003760 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	2294      	movs	r2, #148	@ 0x94
 8003732:	fb02 f303 	mul.w	r3, r2, r3
 8003736:	4a0d      	ldr	r2, [pc, #52]	@ (800376c <BSP_COM_Init+0x5c>)
 8003738:	4413      	add	r3, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f852 	bl	80037e4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	2294      	movs	r2, #148	@ 0x94
 8003744:	fb02 f303 	mul.w	r3, r2, r3
 8003748:	4a08      	ldr	r2, [pc, #32]	@ (800376c <BSP_COM_Init+0x5c>)
 800374a:	4413      	add	r3, r2
 800374c:	6839      	ldr	r1, [r7, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f80e 	bl	8003770 <MX_LPUART1_Init>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800375a:	f06f 0303 	mvn.w	r3, #3
 800375e:	e000      	b.n	8003762 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8003760:	68fb      	ldr	r3, [r7, #12]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20000990 	.word	0x20000990

08003770 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800377a:	4b15      	ldr	r3, [pc, #84]	@ (80037d0 <MX_LPUART1_Init+0x60>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	220c      	movs	r2, #12
 800378e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	895b      	ldrh	r3, [r3, #10]
 8003794:	461a      	mov	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	891b      	ldrh	r3, [r3, #8]
 80037a6:	461a      	mov	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	899b      	ldrh	r3, [r3, #12]
 80037b0:	461a      	mov	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80037bc:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f005 fc2e 	bl	8009020 <HAL_UART_Init>
 80037c4:	4603      	mov	r3, r0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	200001ec 	.word	0x200001ec

080037d4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80037d8:	2000      	movs	r0, #0
 80037da:	f7ff ff8d 	bl	80036f8 <BSP_PB_Callback>
}
 80037de:	bf00      	nop
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08a      	sub	sp, #40	@ 0x28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80037ec:	4b22      	ldr	r3, [pc, #136]	@ (8003878 <COM1_MspInit+0x94>)
 80037ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f0:	4a21      	ldr	r2, [pc, #132]	@ (8003878 <COM1_MspInit+0x94>)
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003878 <COM1_MspInit+0x94>)
 80037fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8003804:	4b1c      	ldr	r3, [pc, #112]	@ (8003878 <COM1_MspInit+0x94>)
 8003806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003808:	4a1b      	ldr	r2, [pc, #108]	@ (8003878 <COM1_MspInit+0x94>)
 800380a:	f043 0301 	orr.w	r3, r3, #1
 800380e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003810:	4b19      	ldr	r3, [pc, #100]	@ (8003878 <COM1_MspInit+0x94>)
 8003812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800381c:	4b16      	ldr	r3, [pc, #88]	@ (8003878 <COM1_MspInit+0x94>)
 800381e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003820:	4a15      	ldr	r2, [pc, #84]	@ (8003878 <COM1_MspInit+0x94>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003828:	4b13      	ldr	r3, [pc, #76]	@ (8003878 <COM1_MspInit+0x94>)
 800382a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8003834:	2304      	movs	r3, #4
 8003836:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003838:	2302      	movs	r3, #2
 800383a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800383c:	2302      	movs	r3, #2
 800383e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003840:	2301      	movs	r3, #1
 8003842:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8003844:	230c      	movs	r3, #12
 8003846:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8003848:	f107 0314 	add.w	r3, r7, #20
 800384c:	4619      	mov	r1, r3
 800384e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003852:	f002 fc2f 	bl	80060b4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8003856:	2308      	movs	r3, #8
 8003858:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800385a:	2302      	movs	r3, #2
 800385c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800385e:	230c      	movs	r3, #12
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8003862:	f107 0314 	add.w	r3, r7, #20
 8003866:	4619      	mov	r1, r3
 8003868:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800386c:	f002 fc22 	bl	80060b4 <HAL_GPIO_Init>
}
 8003870:	bf00      	nop
 8003872:	3728      	adds	r7, #40	@ 0x28
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000

0800387c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003886:	2003      	movs	r0, #3
 8003888:	f001 fc5d 	bl	8005146 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800388c:	200f      	movs	r0, #15
 800388e:	f7fd fb3b 	bl	8000f08 <HAL_InitTick>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	71fb      	strb	r3, [r7, #7]
 800389c:	e001      	b.n	80038a2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800389e:	f7fd fb09 	bl	8000eb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038a2:	79fb      	ldrb	r3, [r7, #7]

}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038b0:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <HAL_IncTick+0x1c>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b05      	ldr	r3, [pc, #20]	@ (80038cc <HAL_IncTick+0x20>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4413      	add	r3, r2
 80038ba:	4a03      	ldr	r2, [pc, #12]	@ (80038c8 <HAL_IncTick+0x1c>)
 80038bc:	6013      	str	r3, [r2, #0]
}
 80038be:	bf00      	nop
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	20000a24 	.word	0x20000a24
 80038cc:	200001fc 	.word	0x200001fc

080038d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return uwTick;
 80038d4:	4b03      	ldr	r3, [pc, #12]	@ (80038e4 <HAL_GetTick+0x14>)
 80038d6:	681b      	ldr	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	20000a24 	.word	0x20000a24

080038e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	609a      	str	r2, [r3, #8]
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	609a      	str	r2, [r3, #8]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3360      	adds	r3, #96	@ 0x60
 8003962:	461a      	mov	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b08      	ldr	r3, [pc, #32]	@ (8003994 <LL_ADC_SetOffset+0x44>)
 8003972:	4013      	ands	r3, r2
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	4313      	orrs	r3, r2
 8003980:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003988:	bf00      	nop
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	03fff000 	.word	0x03fff000

08003998 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3360      	adds	r3, #96	@ 0x60
 80039a6:	461a      	mov	r2, r3
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3360      	adds	r3, #96	@ 0x60
 80039d4:	461a      	mov	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	431a      	orrs	r2, r3
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b087      	sub	sp, #28
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	3360      	adds	r3, #96	@ 0x60
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003a24:	bf00      	nop
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3360      	adds	r3, #96	@ 0x60
 8003a40:	461a      	mov	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	431a      	orrs	r2, r3
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003a5a:	bf00      	nop
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	615a      	str	r2, [r3, #20]
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b087      	sub	sp, #28
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	3330      	adds	r3, #48	@ 0x30
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	0a1b      	lsrs	r3, r3, #8
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	f003 030c 	and.w	r3, r3, #12
 8003ace:	4413      	add	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	211f      	movs	r1, #31
 8003ade:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	401a      	ands	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	0e9b      	lsrs	r3, r3, #26
 8003aea:	f003 011f 	and.w	r1, r3, #31
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	fa01 f303 	lsl.w	r3, r1, r3
 8003af8:	431a      	orrs	r2, r3
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003afe:	bf00      	nop
 8003b00:	371c      	adds	r7, #28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b087      	sub	sp, #28
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3314      	adds	r3, #20
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	0e5b      	lsrs	r3, r3, #25
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	4413      	add	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	0d1b      	lsrs	r3, r3, #20
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	2107      	movs	r1, #7
 8003b38:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	401a      	ands	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	0d1b      	lsrs	r3, r3, #20
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003b54:	bf00      	nop
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f003 0318 	and.w	r3, r3, #24
 8003b82:	4908      	ldr	r1, [pc, #32]	@ (8003ba4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003b84:	40d9      	lsrs	r1, r3
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	400b      	ands	r3, r1
 8003b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003b96:	bf00      	nop
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	0007ffff 	.word	0x0007ffff

08003ba8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 031f 	and.w	r3, r3, #31
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003bd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6093      	str	r3, [r2, #8]
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bfc:	d101      	bne.n	8003c02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003c20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c24:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c4c:	d101      	bne.n	8003c52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c74:	f043 0201 	orr.w	r2, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <LL_ADC_IsEnabled+0x18>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <LL_ADC_IsEnabled+0x1a>
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003cbe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cc2:	f043 0204 	orr.w	r2, r3, #4
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d101      	bne.n	8003cee <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d101      	bne.n	8003d14 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d24:	b590      	push	{r4, r7, lr}
 8003d26:	b089      	sub	sp, #36	@ 0x24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e167      	b.n	800400e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d109      	bne.n	8003d60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7fc fc8f 	bl	8000670 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff ff3f 	bl	8003be8 <LL_ADC_IsDeepPowerDownEnabled>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d004      	beq.n	8003d7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff ff25 	bl	8003bc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff ff5a 	bl	8003c38 <LL_ADC_IsInternalRegulatorEnabled>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d115      	bne.n	8003db6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff ff3e 	bl	8003c10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d94:	4ba0      	ldr	r3, [pc, #640]	@ (8004018 <HAL_ADC_Init+0x2f4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	099b      	lsrs	r3, r3, #6
 8003d9a:	4aa0      	ldr	r2, [pc, #640]	@ (800401c <HAL_ADC_Init+0x2f8>)
 8003d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003da0:	099b      	lsrs	r3, r3, #6
 8003da2:	3301      	adds	r3, #1
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003da8:	e002      	b.n	8003db0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f9      	bne.n	8003daa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff ff3c 	bl	8003c38 <LL_ADC_IsInternalRegulatorEnabled>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10d      	bne.n	8003de2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dca:	f043 0210 	orr.w	r2, r3, #16
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dd6:	f043 0201 	orr.w	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff ff75 	bl	8003cd6 <LL_ADC_REG_IsConversionOngoing>
 8003dec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f040 8100 	bne.w	8003ffc <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f040 80fc 	bne.w	8003ffc <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e08:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003e0c:	f043 0202 	orr.w	r2, r3, #2
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff ff35 	bl	8003c88 <LL_ADC_IsEnabled>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d111      	bne.n	8003e48 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e24:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e28:	f7ff ff2e 	bl	8003c88 <LL_ADC_IsEnabled>
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	487c      	ldr	r0, [pc, #496]	@ (8004020 <HAL_ADC_Init+0x2fc>)
 8003e30:	f7ff ff2a 	bl	8003c88 <LL_ADC_IsEnabled>
 8003e34:	4603      	mov	r3, r0
 8003e36:	4323      	orrs	r3, r4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d105      	bne.n	8003e48 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	4619      	mov	r1, r3
 8003e42:	4878      	ldr	r0, [pc, #480]	@ (8004024 <HAL_ADC_Init+0x300>)
 8003e44:	f7ff fd50 	bl	80038e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	7f5b      	ldrb	r3, [r3, #29]
 8003e4c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e52:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003e58:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003e5e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e66:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d106      	bne.n	8003e84 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	045b      	lsls	r3, r3, #17
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d009      	beq.n	8003ea0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e90:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e98:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	4b60      	ldr	r3, [pc, #384]	@ (8004028 <HAL_ADC_Init+0x304>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	69b9      	ldr	r1, [r7, #24]
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff ff14 	bl	8003cfc <LL_ADC_INJ_IsConversionOngoing>
 8003ed4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d16d      	bne.n	8003fb8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d16a      	bne.n	8003fb8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ee6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003eee:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003efe:	f023 0302 	bic.w	r3, r3, #2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	69b9      	ldr	r1, [r7, #24]
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d017      	beq.n	8003f44 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003f22:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003f2c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003f30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6911      	ldr	r1, [r2, #16]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003f42:	e013      	b.n	8003f6c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003f52:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003f64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f68:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d118      	bne.n	8003fa8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003f80:	f023 0304 	bic.w	r3, r3, #4
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f8c:	4311      	orrs	r1, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003f92:	4311      	orrs	r1, r2
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	611a      	str	r2, [r3, #16]
 8003fa6:	e007      	b.n	8003fb8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d10c      	bne.n	8003fda <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc6:	f023 010f 	bic.w	r1, r3, #15
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	1e5a      	subs	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fd8:	e007      	b.n	8003fea <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 020f 	bic.w	r2, r2, #15
 8003fe8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	f043 0201 	orr.w	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ffa:	e007      	b.n	800400c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004000:	f043 0210 	orr.w	r2, r3, #16
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800400c:	7ffb      	ldrb	r3, [r7, #31]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3724      	adds	r7, #36	@ 0x24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd90      	pop	{r4, r7, pc}
 8004016:	bf00      	nop
 8004018:	20000000 	.word	0x20000000
 800401c:	053e2d63 	.word	0x053e2d63
 8004020:	50000100 	.word	0x50000100
 8004024:	50000300 	.word	0x50000300
 8004028:	fff04007 	.word	0xfff04007

0800402c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004038:	4851      	ldr	r0, [pc, #324]	@ (8004180 <HAL_ADC_Start_DMA+0x154>)
 800403a:	f7ff fdb5 	bl	8003ba8 <LL_ADC_GetMultimode>
 800403e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff fe46 	bl	8003cd6 <LL_ADC_REG_IsConversionOngoing>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	f040 808f 	bne.w	8004170 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_ADC_Start_DMA+0x34>
 800405c:	2302      	movs	r3, #2
 800405e:	e08a      	b.n	8004176 <HAL_ADC_Start_DMA+0x14a>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b05      	cmp	r3, #5
 8004072:	d002      	beq.n	800407a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2b09      	cmp	r3, #9
 8004078:	d173      	bne.n	8004162 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 fc98 	bl	80049b0 <ADC_Enable>
 8004080:	4603      	mov	r3, r0
 8004082:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004084:	7dfb      	ldrb	r3, [r7, #23]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d166      	bne.n	8004158 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a38      	ldr	r2, [pc, #224]	@ (8004184 <HAL_ADC_Start_DMA+0x158>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d002      	beq.n	80040ae <HAL_ADC_Start_DMA+0x82>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	e001      	b.n	80040b2 <HAL_ADC_Start_DMA+0x86>
 80040ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d002      	beq.n	80040c0 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d105      	bne.n	80040cc <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d006      	beq.n	80040e6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040dc:	f023 0206 	bic.w	r2, r3, #6
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	661a      	str	r2, [r3, #96]	@ 0x60
 80040e4:	e002      	b.n	80040ec <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f0:	4a25      	ldr	r2, [pc, #148]	@ (8004188 <HAL_ADC_Start_DMA+0x15c>)
 80040f2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f8:	4a24      	ldr	r2, [pc, #144]	@ (800418c <HAL_ADC_Start_DMA+0x160>)
 80040fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004100:	4a23      	ldr	r2, [pc, #140]	@ (8004190 <HAL_ADC_Start_DMA+0x164>)
 8004102:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	221c      	movs	r2, #28
 800410a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0210 	orr.w	r2, r2, #16
 8004122:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3340      	adds	r3, #64	@ 0x40
 800413e:	4619      	mov	r1, r3
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f001 f8da 	bl	80052fc <HAL_DMA_Start_IT>
 8004148:	4603      	mov	r3, r0
 800414a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff fdac 	bl	8003cae <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004156:	e00d      	b.n	8004174 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004160:	e008      	b.n	8004174 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800416e:	e001      	b.n	8004174 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004170:	2302      	movs	r3, #2
 8004172:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004174:	7dfb      	ldrb	r3, [r7, #23]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	50000300 	.word	0x50000300
 8004184:	50000100 	.word	0x50000100
 8004188:	08004abd 	.word	0x08004abd
 800418c:	08004b95 	.word	0x08004b95
 8004190:	08004bb1 	.word	0x08004bb1

08004194 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b0b6      	sub	sp, #216	@ 0xd8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x22>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e3c8      	b.n	8004984 <HAL_ADC_ConfigChannel+0x7b4>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff fd69 	bl	8003cd6 <LL_ADC_REG_IsConversionOngoing>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	f040 83ad 	bne.w	8004966 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6818      	ldr	r0, [r3, #0]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	6859      	ldr	r1, [r3, #4]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	f7ff fc4a 	bl	8003ab2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff fd57 	bl	8003cd6 <LL_ADC_REG_IsConversionOngoing>
 8004228:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff fd63 	bl	8003cfc <LL_ADC_INJ_IsConversionOngoing>
 8004236:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800423a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800423e:	2b00      	cmp	r3, #0
 8004240:	f040 81d9 	bne.w	80045f6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004248:	2b00      	cmp	r3, #0
 800424a:	f040 81d4 	bne.w	80045f6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004256:	d10f      	bne.n	8004278 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2200      	movs	r2, #0
 8004262:	4619      	mov	r1, r3
 8004264:	f7ff fc51 	bl	8003b0a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fbf8 	bl	8003a66 <LL_ADC_SetSamplingTimeCommonConfig>
 8004276:	e00e      	b.n	8004296 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	6819      	ldr	r1, [r3, #0]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	461a      	mov	r2, r3
 8004286:	f7ff fc40 	bl	8003b0a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2100      	movs	r1, #0
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff fbe8 	bl	8003a66 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	695a      	ldr	r2, [r3, #20]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	08db      	lsrs	r3, r3, #3
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d022      	beq.n	80042fe <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	6919      	ldr	r1, [r3, #16]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80042c8:	f7ff fb42 	bl	8003950 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	6919      	ldr	r1, [r3, #16]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	461a      	mov	r2, r3
 80042da:	f7ff fb8e 	bl	80039fa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d102      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x124>
 80042ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042f2:	e000      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x126>
 80042f4:	2300      	movs	r3, #0
 80042f6:	461a      	mov	r2, r3
 80042f8:	f7ff fb9a 	bl	8003a30 <LL_ADC_SetOffsetSaturation>
 80042fc:	e17b      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2100      	movs	r1, #0
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff fb47 	bl	8003998 <LL_ADC_GetOffsetChannel>
 800430a:	4603      	mov	r3, r0
 800430c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10a      	bne.n	800432a <HAL_ADC_ConfigChannel+0x15a>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2100      	movs	r1, #0
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff fb3c 	bl	8003998 <LL_ADC_GetOffsetChannel>
 8004320:	4603      	mov	r3, r0
 8004322:	0e9b      	lsrs	r3, r3, #26
 8004324:	f003 021f 	and.w	r2, r3, #31
 8004328:	e01e      	b.n	8004368 <HAL_ADC_ConfigChannel+0x198>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2100      	movs	r1, #0
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fb31 	bl	8003998 <LL_ADC_GetOffsetChannel>
 8004336:	4603      	mov	r3, r0
 8004338:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004340:	fa93 f3a3 	rbit	r3, r3
 8004344:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004348:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800434c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004350:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004358:	2320      	movs	r3, #32
 800435a:	e004      	b.n	8004366 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800435c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004360:	fab3 f383 	clz	r3, r3
 8004364:	b2db      	uxtb	r3, r3
 8004366:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004370:	2b00      	cmp	r3, #0
 8004372:	d105      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x1b0>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	0e9b      	lsrs	r3, r3, #26
 800437a:	f003 031f 	and.w	r3, r3, #31
 800437e:	e018      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1e2>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004388:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800438c:	fa93 f3a3 	rbit	r3, r3
 8004390:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004394:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800439c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80043a4:	2320      	movs	r3, #32
 80043a6:	e004      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80043a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80043ac:	fab3 f383 	clz	r3, r3
 80043b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d106      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2200      	movs	r2, #0
 80043bc:	2100      	movs	r1, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fb00 	bl	80039c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2101      	movs	r1, #1
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fae4 	bl	8003998 <LL_ADC_GetOffsetChannel>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10a      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x220>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2101      	movs	r1, #1
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fad9 	bl	8003998 <LL_ADC_GetOffsetChannel>
 80043e6:	4603      	mov	r3, r0
 80043e8:	0e9b      	lsrs	r3, r3, #26
 80043ea:	f003 021f 	and.w	r2, r3, #31
 80043ee:	e01e      	b.n	800442e <HAL_ADC_ConfigChannel+0x25e>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2101      	movs	r1, #1
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff face 	bl	8003998 <LL_ADC_GetOffsetChannel>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004402:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004406:	fa93 f3a3 	rbit	r3, r3
 800440a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800440e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004412:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800441e:	2320      	movs	r3, #32
 8004420:	e004      	b.n	800442c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004426:	fab3 f383 	clz	r3, r3
 800442a:	b2db      	uxtb	r3, r3
 800442c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004436:	2b00      	cmp	r3, #0
 8004438:	d105      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x276>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	0e9b      	lsrs	r3, r3, #26
 8004440:	f003 031f 	and.w	r3, r3, #31
 8004444:	e018      	b.n	8004478 <HAL_ADC_ConfigChannel+0x2a8>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004452:	fa93 f3a3 	rbit	r3, r3
 8004456:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800445a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800445e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004462:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800446a:	2320      	movs	r3, #32
 800446c:	e004      	b.n	8004478 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800446e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004472:	fab3 f383 	clz	r3, r3
 8004476:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004478:	429a      	cmp	r2, r3
 800447a:	d106      	bne.n	800448a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2200      	movs	r2, #0
 8004482:	2101      	movs	r1, #1
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fa9d 	bl	80039c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2102      	movs	r1, #2
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff fa81 	bl	8003998 <LL_ADC_GetOffsetChannel>
 8004496:	4603      	mov	r3, r0
 8004498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10a      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x2e6>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2102      	movs	r1, #2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fa76 	bl	8003998 <LL_ADC_GetOffsetChannel>
 80044ac:	4603      	mov	r3, r0
 80044ae:	0e9b      	lsrs	r3, r3, #26
 80044b0:	f003 021f 	and.w	r2, r3, #31
 80044b4:	e01e      	b.n	80044f4 <HAL_ADC_ConfigChannel+0x324>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2102      	movs	r1, #2
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fa6b 	bl	8003998 <LL_ADC_GetOffsetChannel>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044cc:	fa93 f3a3 	rbit	r3, r3
 80044d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80044d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80044dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80044e4:	2320      	movs	r3, #32
 80044e6:	e004      	b.n	80044f2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80044e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80044ec:	fab3 f383 	clz	r3, r3
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d105      	bne.n	800450c <HAL_ADC_ConfigChannel+0x33c>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	0e9b      	lsrs	r3, r3, #26
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	e016      	b.n	800453a <HAL_ADC_ConfigChannel+0x36a>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004514:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004518:	fa93 f3a3 	rbit	r3, r3
 800451c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800451e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004520:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004524:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800452c:	2320      	movs	r3, #32
 800452e:	e004      	b.n	800453a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004530:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004534:	fab3 f383 	clz	r3, r3
 8004538:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800453a:	429a      	cmp	r2, r3
 800453c:	d106      	bne.n	800454c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2200      	movs	r2, #0
 8004544:	2102      	movs	r1, #2
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff fa3c 	bl	80039c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2103      	movs	r1, #3
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff fa20 	bl	8003998 <LL_ADC_GetOffsetChannel>
 8004558:	4603      	mov	r3, r0
 800455a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x3a8>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2103      	movs	r1, #3
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fa15 	bl	8003998 <LL_ADC_GetOffsetChannel>
 800456e:	4603      	mov	r3, r0
 8004570:	0e9b      	lsrs	r3, r3, #26
 8004572:	f003 021f 	and.w	r2, r3, #31
 8004576:	e017      	b.n	80045a8 <HAL_ADC_ConfigChannel+0x3d8>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2103      	movs	r1, #3
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fa0a 	bl	8003998 <LL_ADC_GetOffsetChannel>
 8004584:	4603      	mov	r3, r0
 8004586:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004588:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800458a:	fa93 f3a3 	rbit	r3, r3
 800458e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004590:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004592:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004594:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800459a:	2320      	movs	r3, #32
 800459c:	e003      	b.n	80045a6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800459e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045a0:	fab3 f383 	clz	r3, r3
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d105      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x3f0>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	0e9b      	lsrs	r3, r3, #26
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	e011      	b.n	80045e4 <HAL_ADC_ConfigChannel+0x414>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045c8:	fa93 f3a3 	rbit	r3, r3
 80045cc:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80045ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80045d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80045d8:	2320      	movs	r3, #32
 80045da:	e003      	b.n	80045e4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80045dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045de:	fab3 f383 	clz	r3, r3
 80045e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d106      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2200      	movs	r2, #0
 80045ee:	2103      	movs	r1, #3
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff f9e7 	bl	80039c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fb44 	bl	8003c88 <LL_ADC_IsEnabled>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	f040 8140 	bne.w	8004888 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6818      	ldr	r0, [r3, #0]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	6819      	ldr	r1, [r3, #0]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	461a      	mov	r2, r3
 8004616:	f7ff faa3 	bl	8003b60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	4a8f      	ldr	r2, [pc, #572]	@ (800485c <HAL_ADC_ConfigChannel+0x68c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	f040 8131 	bne.w	8004888 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10b      	bne.n	800464e <HAL_ADC_ConfigChannel+0x47e>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	0e9b      	lsrs	r3, r3, #26
 800463c:	3301      	adds	r3, #1
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	2b09      	cmp	r3, #9
 8004644:	bf94      	ite	ls
 8004646:	2301      	movls	r3, #1
 8004648:	2300      	movhi	r3, #0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	e019      	b.n	8004682 <HAL_ADC_ConfigChannel+0x4b2>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004654:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004656:	fa93 f3a3 	rbit	r3, r3
 800465a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800465c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800465e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004660:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004666:	2320      	movs	r3, #32
 8004668:	e003      	b.n	8004672 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800466a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800466c:	fab3 f383 	clz	r3, r3
 8004670:	b2db      	uxtb	r3, r3
 8004672:	3301      	adds	r3, #1
 8004674:	f003 031f 	and.w	r3, r3, #31
 8004678:	2b09      	cmp	r3, #9
 800467a:	bf94      	ite	ls
 800467c:	2301      	movls	r3, #1
 800467e:	2300      	movhi	r3, #0
 8004680:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004682:	2b00      	cmp	r3, #0
 8004684:	d079      	beq.n	800477a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800468e:	2b00      	cmp	r3, #0
 8004690:	d107      	bne.n	80046a2 <HAL_ADC_ConfigChannel+0x4d2>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	0e9b      	lsrs	r3, r3, #26
 8004698:	3301      	adds	r3, #1
 800469a:	069b      	lsls	r3, r3, #26
 800469c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046a0:	e015      	b.n	80046ce <HAL_ADC_ConfigChannel+0x4fe>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046aa:	fa93 f3a3 	rbit	r3, r3
 80046ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80046b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046b2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80046b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80046ba:	2320      	movs	r3, #32
 80046bc:	e003      	b.n	80046c6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80046be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046c0:	fab3 f383 	clz	r3, r3
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	3301      	adds	r3, #1
 80046c8:	069b      	lsls	r3, r3, #26
 80046ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x51e>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	0e9b      	lsrs	r3, r3, #26
 80046e0:	3301      	adds	r3, #1
 80046e2:	f003 031f 	and.w	r3, r3, #31
 80046e6:	2101      	movs	r1, #1
 80046e8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ec:	e017      	b.n	800471e <HAL_ADC_ConfigChannel+0x54e>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046f6:	fa93 f3a3 	rbit	r3, r3
 80046fa:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80046fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004706:	2320      	movs	r3, #32
 8004708:	e003      	b.n	8004712 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800470a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800470c:	fab3 f383 	clz	r3, r3
 8004710:	b2db      	uxtb	r3, r3
 8004712:	3301      	adds	r3, #1
 8004714:	f003 031f 	and.w	r3, r3, #31
 8004718:	2101      	movs	r1, #1
 800471a:	fa01 f303 	lsl.w	r3, r1, r3
 800471e:	ea42 0103 	orr.w	r1, r2, r3
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10a      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x574>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	0e9b      	lsrs	r3, r3, #26
 8004734:	3301      	adds	r3, #1
 8004736:	f003 021f 	and.w	r2, r3, #31
 800473a:	4613      	mov	r3, r2
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4413      	add	r3, r2
 8004740:	051b      	lsls	r3, r3, #20
 8004742:	e018      	b.n	8004776 <HAL_ADC_ConfigChannel+0x5a6>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474c:	fa93 f3a3 	rbit	r3, r3
 8004750:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004754:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800475c:	2320      	movs	r3, #32
 800475e:	e003      	b.n	8004768 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004762:	fab3 f383 	clz	r3, r3
 8004766:	b2db      	uxtb	r3, r3
 8004768:	3301      	adds	r3, #1
 800476a:	f003 021f 	and.w	r2, r3, #31
 800476e:	4613      	mov	r3, r2
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	4413      	add	r3, r2
 8004774:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004776:	430b      	orrs	r3, r1
 8004778:	e081      	b.n	800487e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004782:	2b00      	cmp	r3, #0
 8004784:	d107      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x5c6>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	0e9b      	lsrs	r3, r3, #26
 800478c:	3301      	adds	r3, #1
 800478e:	069b      	lsls	r3, r3, #26
 8004790:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004794:	e015      	b.n	80047c2 <HAL_ADC_ConfigChannel+0x5f2>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800479e:	fa93 f3a3 	rbit	r3, r3
 80047a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80047a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80047ae:	2320      	movs	r3, #32
 80047b0:	e003      	b.n	80047ba <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80047b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b4:	fab3 f383 	clz	r3, r3
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	3301      	adds	r3, #1
 80047bc:	069b      	lsls	r3, r3, #26
 80047be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d109      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x612>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	0e9b      	lsrs	r3, r3, #26
 80047d4:	3301      	adds	r3, #1
 80047d6:	f003 031f 	and.w	r3, r3, #31
 80047da:	2101      	movs	r1, #1
 80047dc:	fa01 f303 	lsl.w	r3, r1, r3
 80047e0:	e017      	b.n	8004812 <HAL_ADC_ConfigChannel+0x642>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	fa93 f3a3 	rbit	r3, r3
 80047ee:	61fb      	str	r3, [r7, #28]
  return result;
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80047fa:	2320      	movs	r3, #32
 80047fc:	e003      	b.n	8004806 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	fab3 f383 	clz	r3, r3
 8004804:	b2db      	uxtb	r3, r3
 8004806:	3301      	adds	r3, #1
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	2101      	movs	r1, #1
 800480e:	fa01 f303 	lsl.w	r3, r1, r3
 8004812:	ea42 0103 	orr.w	r1, r2, r3
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10d      	bne.n	800483e <HAL_ADC_ConfigChannel+0x66e>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	0e9b      	lsrs	r3, r3, #26
 8004828:	3301      	adds	r3, #1
 800482a:	f003 021f 	and.w	r2, r3, #31
 800482e:	4613      	mov	r3, r2
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	4413      	add	r3, r2
 8004834:	3b1e      	subs	r3, #30
 8004836:	051b      	lsls	r3, r3, #20
 8004838:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800483c:	e01e      	b.n	800487c <HAL_ADC_ConfigChannel+0x6ac>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	fa93 f3a3 	rbit	r3, r3
 800484a:	613b      	str	r3, [r7, #16]
  return result;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d104      	bne.n	8004860 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004856:	2320      	movs	r3, #32
 8004858:	e006      	b.n	8004868 <HAL_ADC_ConfigChannel+0x698>
 800485a:	bf00      	nop
 800485c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	fab3 f383 	clz	r3, r3
 8004866:	b2db      	uxtb	r3, r3
 8004868:	3301      	adds	r3, #1
 800486a:	f003 021f 	and.w	r2, r3, #31
 800486e:	4613      	mov	r3, r2
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	4413      	add	r3, r2
 8004874:	3b1e      	subs	r3, #30
 8004876:	051b      	lsls	r3, r3, #20
 8004878:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800487c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004882:	4619      	mov	r1, r3
 8004884:	f7ff f941 	bl	8003b0a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	4b3f      	ldr	r3, [pc, #252]	@ (800498c <HAL_ADC_ConfigChannel+0x7bc>)
 800488e:	4013      	ands	r3, r2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d071      	beq.n	8004978 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004894:	483e      	ldr	r0, [pc, #248]	@ (8004990 <HAL_ADC_ConfigChannel+0x7c0>)
 8004896:	f7ff f84d 	bl	8003934 <LL_ADC_GetCommonPathInternalCh>
 800489a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a3c      	ldr	r2, [pc, #240]	@ (8004994 <HAL_ADC_ConfigChannel+0x7c4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d004      	beq.n	80048b2 <HAL_ADC_ConfigChannel+0x6e2>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a3a      	ldr	r2, [pc, #232]	@ (8004998 <HAL_ADC_ConfigChannel+0x7c8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d127      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d121      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048c6:	d157      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80048d0:	4619      	mov	r1, r3
 80048d2:	482f      	ldr	r0, [pc, #188]	@ (8004990 <HAL_ADC_ConfigChannel+0x7c0>)
 80048d4:	f7ff f81b 	bl	800390e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048d8:	4b30      	ldr	r3, [pc, #192]	@ (800499c <HAL_ADC_ConfigChannel+0x7cc>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	099b      	lsrs	r3, r3, #6
 80048de:	4a30      	ldr	r2, [pc, #192]	@ (80049a0 <HAL_ADC_ConfigChannel+0x7d0>)
 80048e0:	fba2 2303 	umull	r2, r3, r2, r3
 80048e4:	099b      	lsrs	r3, r3, #6
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	4613      	mov	r3, r2
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	4413      	add	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048f2:	e002      	b.n	80048fa <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f9      	bne.n	80048f4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004900:	e03a      	b.n	8004978 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a27      	ldr	r2, [pc, #156]	@ (80049a4 <HAL_ADC_ConfigChannel+0x7d4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d113      	bne.n	8004934 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800490c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004910:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10d      	bne.n	8004934 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a22      	ldr	r2, [pc, #136]	@ (80049a8 <HAL_ADC_ConfigChannel+0x7d8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d02a      	beq.n	8004978 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004922:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004926:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800492a:	4619      	mov	r1, r3
 800492c:	4818      	ldr	r0, [pc, #96]	@ (8004990 <HAL_ADC_ConfigChannel+0x7c0>)
 800492e:	f7fe ffee 	bl	800390e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004932:	e021      	b.n	8004978 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a1c      	ldr	r2, [pc, #112]	@ (80049ac <HAL_ADC_ConfigChannel+0x7dc>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d11c      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800493e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d116      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a16      	ldr	r2, [pc, #88]	@ (80049a8 <HAL_ADC_ConfigChannel+0x7d8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d011      	beq.n	8004978 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004954:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004958:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800495c:	4619      	mov	r1, r3
 800495e:	480c      	ldr	r0, [pc, #48]	@ (8004990 <HAL_ADC_ConfigChannel+0x7c0>)
 8004960:	f7fe ffd5 	bl	800390e <LL_ADC_SetCommonPathInternalCh>
 8004964:	e008      	b.n	8004978 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800496a:	f043 0220 	orr.w	r2, r3, #32
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004980:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004984:	4618      	mov	r0, r3
 8004986:	37d8      	adds	r7, #216	@ 0xd8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	80080000 	.word	0x80080000
 8004990:	50000300 	.word	0x50000300
 8004994:	c3210000 	.word	0xc3210000
 8004998:	90c00010 	.word	0x90c00010
 800499c:	20000000 	.word	0x20000000
 80049a0:	053e2d63 	.word	0x053e2d63
 80049a4:	c7520000 	.word	0xc7520000
 80049a8:	50000100 	.word	0x50000100
 80049ac:	cb840000 	.word	0xcb840000

080049b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80049b8:	2300      	movs	r3, #0
 80049ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff f961 	bl	8003c88 <LL_ADC_IsEnabled>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d169      	bne.n	8004aa0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	4b36      	ldr	r3, [pc, #216]	@ (8004aac <ADC_Enable+0xfc>)
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00d      	beq.n	80049f6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049de:	f043 0210 	orr.w	r2, r3, #16
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ea:	f043 0201 	orr.w	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e055      	b.n	8004aa2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff f930 	bl	8003c60 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004a00:	482b      	ldr	r0, [pc, #172]	@ (8004ab0 <ADC_Enable+0x100>)
 8004a02:	f7fe ff97 	bl	8003934 <LL_ADC_GetCommonPathInternalCh>
 8004a06:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004a08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d013      	beq.n	8004a38 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a10:	4b28      	ldr	r3, [pc, #160]	@ (8004ab4 <ADC_Enable+0x104>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	099b      	lsrs	r3, r3, #6
 8004a16:	4a28      	ldr	r2, [pc, #160]	@ (8004ab8 <ADC_Enable+0x108>)
 8004a18:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1c:	099b      	lsrs	r3, r3, #6
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	4613      	mov	r3, r2
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a2a:	e002      	b.n	8004a32 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f9      	bne.n	8004a2c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004a38:	f7fe ff4a 	bl	80038d0 <HAL_GetTick>
 8004a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a3e:	e028      	b.n	8004a92 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff f91f 	bl	8003c88 <LL_ADC_IsEnabled>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d104      	bne.n	8004a5a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff f903 	bl	8003c60 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a5a:	f7fe ff39 	bl	80038d0 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d914      	bls.n	8004a92 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d00d      	beq.n	8004a92 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7a:	f043 0210 	orr.w	r2, r3, #16
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a86:	f043 0201 	orr.w	r2, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e007      	b.n	8004aa2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d1cf      	bne.n	8004a40 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	8000003f 	.word	0x8000003f
 8004ab0:	50000300 	.word	0x50000300
 8004ab4:	20000000 	.word	0x20000000
 8004ab8:	053e2d63 	.word	0x053e2d63

08004abc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ace:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d14b      	bne.n	8004b6e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ada:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d021      	beq.n	8004b34 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fe ffc9 	bl	8003a8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d032      	beq.n	8004b66 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d12b      	bne.n	8004b66 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b12:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d11f      	bne.n	8004b66 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b2a:	f043 0201 	orr.w	r2, r3, #1
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b32:	e018      	b.n	8004b66 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d111      	bne.n	8004b66 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b46:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d105      	bne.n	8004b66 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b5e:	f043 0201 	orr.w	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f7ff fb14 	bl	8004194 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004b6c:	e00e      	b.n	8004b8c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f7ff fb1e 	bl	80041bc <HAL_ADC_ErrorCallback>
}
 8004b80:	e004      	b.n	8004b8c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	4798      	blx	r3
}
 8004b8c:	bf00      	nop
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7ff fb00 	bl	80041a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bce:	f043 0204 	orr.w	r2, r3, #4
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f7ff faf0 	bl	80041bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bdc:	bf00      	nop
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <LL_ADC_IsEnabled>:
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <LL_ADC_IsEnabled+0x18>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <LL_ADC_IsEnabled+0x1a>
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <LL_ADC_REG_IsConversionOngoing>:
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d101      	bne.n	8004c22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004c30:	b590      	push	{r4, r7, lr}
 8004c32:	b0a1      	sub	sp, #132	@ 0x84
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d101      	bne.n	8004c4e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	e08b      	b.n	8004d66 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004c56:	2300      	movs	r3, #0
 8004c58:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c66:	d102      	bne.n	8004c6e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c68:	4b41      	ldr	r3, [pc, #260]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004c6a:	60bb      	str	r3, [r7, #8]
 8004c6c:	e001      	b.n	8004c72 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10b      	bne.n	8004c90 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c7c:	f043 0220 	orr.w	r2, r3, #32
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e06a      	b.n	8004d66 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff ffb9 	bl	8004c0a <LL_ADC_REG_IsConversionOngoing>
 8004c98:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff ffb3 	bl	8004c0a <LL_ADC_REG_IsConversionOngoing>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d14c      	bne.n	8004d44 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004caa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d149      	bne.n	8004d44 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004cb0:	4b30      	ldr	r3, [pc, #192]	@ (8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004cb2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d028      	beq.n	8004d0e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004cbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	6859      	ldr	r1, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004cce:	035b      	lsls	r3, r3, #13
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cd6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cd8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004cdc:	f7ff ff82 	bl	8004be4 <LL_ADC_IsEnabled>
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	4823      	ldr	r0, [pc, #140]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004ce4:	f7ff ff7e 	bl	8004be4 <LL_ADC_IsEnabled>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	4323      	orrs	r3, r4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d133      	bne.n	8004d58 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004cf0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004cf8:	f023 030f 	bic.w	r3, r3, #15
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	6811      	ldr	r1, [r2, #0]
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	6892      	ldr	r2, [r2, #8]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	431a      	orrs	r2, r3
 8004d08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d0a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d0c:	e024      	b.n	8004d58 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004d0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d18:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d1a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d1e:	f7ff ff61 	bl	8004be4 <LL_ADC_IsEnabled>
 8004d22:	4604      	mov	r4, r0
 8004d24:	4812      	ldr	r0, [pc, #72]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004d26:	f7ff ff5d 	bl	8004be4 <LL_ADC_IsEnabled>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4323      	orrs	r3, r4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d112      	bne.n	8004d58 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d3a:	f023 030f 	bic.w	r3, r3, #15
 8004d3e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004d40:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d42:	e009      	b.n	8004d58 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d48:	f043 0220 	orr.w	r2, r3, #32
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004d56:	e000      	b.n	8004d5a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004d62:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3784      	adds	r7, #132	@ 0x84
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd90      	pop	{r4, r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	50000100 	.word	0x50000100
 8004d74:	50000300 	.word	0x50000300

08004d78 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e023      	b.n	8004dd2 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fb fd2e 	bl	8000800 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, const CORDIC_ConfigTypeDef *sConfig)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d11d      	bne.n	8004e32 <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	4b14      	ldr	r3, [pc, #80]	@ (8004e50 <HAL_CORDIC_Configure+0x74>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	6811      	ldr	r1, [r2, #0]
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	6992      	ldr	r2, [r2, #24]
 8004e08:	4311      	orrs	r1, r2
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	6852      	ldr	r2, [r2, #4]
 8004e0e:	4311      	orrs	r1, r2
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	6912      	ldr	r2, [r2, #16]
 8004e14:	4311      	orrs	r1, r2
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	6952      	ldr	r2, [r2, #20]
 8004e1a:	4311      	orrs	r1, r2
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	6892      	ldr	r2, [r2, #8]
 8004e20:	4311      	orrs	r1, r2
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	68d2      	ldr	r2, [r2, #12]
 8004e26:	4311      	orrs	r1, r2
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6812      	ldr	r2, [r2, #0]
 8004e2c:	430b      	orrs	r3, r1
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	e007      	b.n	8004e42 <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e36:	f043 0202 	orr.w	r2, r3, #2
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	ff87f800 	.word	0xff87f800

08004e54 <HAL_CORDIC_Calculate>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Calculate(CORDIC_HandleTypeDef *hcordic, const int32_t *pInBuff, int32_t *pOutBuff,
                                       uint32_t NbCalc, uint32_t Timeout)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t index;
  const int32_t *p_tmp_in_buff = pInBuff;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	617b      	str	r3, [r7, #20]
  int32_t *p_tmp_out_buff = pOutBuff;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	613b      	str	r3, [r7, #16]

  /* Check parameters setting */
  if ((pInBuff == NULL) || (pOutBuff == NULL) || (NbCalc == 0U))
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <HAL_CORDIC_Calculate+0x28>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <HAL_CORDIC_Calculate+0x28>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d107      	bne.n	8004e8c <HAL_CORDIC_Calculate+0x38>
  {
    /* Update the error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	f043 0201 	orr.w	r2, r3, #1
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e058      	b.n	8004f3e <HAL_CORDIC_Calculate+0xea>
  }

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d14b      	bne.n	8004f30 <HAL_CORDIC_Calculate+0xdc>
  {
    /* Reset CORDIC error code */
    hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_BUSY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ea6:	f7fe fd13 	bl	80038d0 <HAL_GetTick>
 8004eaa:	61b8      	str	r0, [r7, #24]

    /* Write of input data in Write Data register, and increment input buffer pointer */
    CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8004eac:	f107 0314 	add.w	r3, r7, #20
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 f847 	bl	8004f46 <CORDIC_WriteInDataIncrementPtr>

    /* Calculation is started.
       Provide next set of input data, until number of calculation is achieved */
    for (index = (NbCalc - 1U); index > 0U; index--)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	e028      	b.n	8004f12 <HAL_CORDIC_Calculate+0xbe>
    {
      /* Write of input data in Write Data register, and increment input buffer pointer */
      CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8004ec0:	f107 0314 	add.w	r3, r7, #20
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 f83d 	bl	8004f46 <CORDIC_WriteInDataIncrementPtr>

      /* Wait for RRDY flag to be raised */
      do
      {
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY)
 8004ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed2:	d010      	beq.n	8004ef6 <HAL_CORDIC_Calculate+0xa2>
        {
          if ((HAL_GetTick() - tickstart) > Timeout)
 8004ed4:	f7fe fcfc 	bl	80038d0 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d208      	bcs.n	8004ef6 <HAL_CORDIC_Calculate+0xa2>
          {
            /* Set CORDIC error code */
            hcordic->ErrorCode = HAL_CORDIC_ERROR_TIMEOUT;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2204      	movs	r2, #4
 8004ee8:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Change the CORDIC state */
            hcordic->State = HAL_CORDIC_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Return function status */
            return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e023      	b.n	8004f3e <HAL_CORDIC_Calculate+0xea>
          }
        }
      } while (HAL_IS_BIT_CLR(hcordic->Instance->CSR, CORDIC_CSR_RRDY));
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	dae5      	bge.n	8004ecc <HAL_CORDIC_Calculate+0x78>

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8004f00:	f107 0310 	add.w	r3, r7, #16
 8004f04:	4619      	mov	r1, r3
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f846 	bl	8004f98 <CORDIC_ReadOutDataIncrementPtr>
    for (index = (NbCalc - 1U); index > 0U; index--)
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1d3      	bne.n	8004ec0 <HAL_CORDIC_Calculate+0x6c>
    }

    /* Read output data from Read Data register, and increment output buffer pointer */
    CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8004f18:	f107 0310 	add.w	r3, r7, #16
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f83a 	bl	8004f98 <CORDIC_ReadOutDataIncrementPtr>

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Return function status */
    return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e006      	b.n	8004f3e <HAL_CORDIC_Calculate+0xea>
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	f043 0202 	orr.w	r2, r3, #2
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
  }
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3720      	adds	r7, #32
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	1d1a      	adds	r2, r3, #4
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f74:	d10a      	bne.n	8004f8c <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	1d1a      	adds	r2, r3, #4
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	601a      	str	r2, [r3, #0]
  }
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	1d1a      	adds	r2, r3, #4
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fc2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004fc6:	d10a      	bne.n	8004fde <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	1d1a      	adds	r2, r3, #4
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	601a      	str	r2, [r3, #0]
  }
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
	...

08004fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8005030 <__NVIC_SetPriorityGrouping+0x44>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005008:	4013      	ands	r3, r2
 800500a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005014:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800501c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800501e:	4a04      	ldr	r2, [pc, #16]	@ (8005030 <__NVIC_SetPriorityGrouping+0x44>)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	60d3      	str	r3, [r2, #12]
}
 8005024:	bf00      	nop
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	e000ed00 	.word	0xe000ed00

08005034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005038:	4b04      	ldr	r3, [pc, #16]	@ (800504c <__NVIC_GetPriorityGrouping+0x18>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	0a1b      	lsrs	r3, r3, #8
 800503e:	f003 0307 	and.w	r3, r3, #7
}
 8005042:	4618      	mov	r0, r3
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	e000ed00 	.word	0xe000ed00

08005050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800505a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505e:	2b00      	cmp	r3, #0
 8005060:	db0b      	blt.n	800507a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	f003 021f 	and.w	r2, r3, #31
 8005068:	4907      	ldr	r1, [pc, #28]	@ (8005088 <__NVIC_EnableIRQ+0x38>)
 800506a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	2001      	movs	r0, #1
 8005072:	fa00 f202 	lsl.w	r2, r0, r2
 8005076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	e000e100 	.word	0xe000e100

0800508c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	6039      	str	r1, [r7, #0]
 8005096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509c:	2b00      	cmp	r3, #0
 800509e:	db0a      	blt.n	80050b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	490c      	ldr	r1, [pc, #48]	@ (80050d8 <__NVIC_SetPriority+0x4c>)
 80050a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050aa:	0112      	lsls	r2, r2, #4
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	440b      	add	r3, r1
 80050b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050b4:	e00a      	b.n	80050cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	4908      	ldr	r1, [pc, #32]	@ (80050dc <__NVIC_SetPriority+0x50>)
 80050bc:	79fb      	ldrb	r3, [r7, #7]
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	3b04      	subs	r3, #4
 80050c4:	0112      	lsls	r2, r2, #4
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	440b      	add	r3, r1
 80050ca:	761a      	strb	r2, [r3, #24]
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	e000e100 	.word	0xe000e100
 80050dc:	e000ed00 	.word	0xe000ed00

080050e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b089      	sub	sp, #36	@ 0x24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f1c3 0307 	rsb	r3, r3, #7
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	bf28      	it	cs
 80050fe:	2304      	movcs	r3, #4
 8005100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	3304      	adds	r3, #4
 8005106:	2b06      	cmp	r3, #6
 8005108:	d902      	bls.n	8005110 <NVIC_EncodePriority+0x30>
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	3b03      	subs	r3, #3
 800510e:	e000      	b.n	8005112 <NVIC_EncodePriority+0x32>
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005114:	f04f 32ff 	mov.w	r2, #4294967295
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	43da      	mvns	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	401a      	ands	r2, r3
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005128:	f04f 31ff 	mov.w	r1, #4294967295
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	fa01 f303 	lsl.w	r3, r1, r3
 8005132:	43d9      	mvns	r1, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005138:	4313      	orrs	r3, r2
         );
}
 800513a:	4618      	mov	r0, r3
 800513c:	3724      	adds	r7, #36	@ 0x24
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7ff ff4c 	bl	8004fec <__NVIC_SetPriorityGrouping>
}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800516a:	f7ff ff63 	bl	8005034 <__NVIC_GetPriorityGrouping>
 800516e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	68b9      	ldr	r1, [r7, #8]
 8005174:	6978      	ldr	r0, [r7, #20]
 8005176:	f7ff ffb3 	bl	80050e0 <NVIC_EncodePriority>
 800517a:	4602      	mov	r2, r0
 800517c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005180:	4611      	mov	r1, r2
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff ff82 	bl	800508c <__NVIC_SetPriority>
}
 8005188:	bf00      	nop
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	4603      	mov	r3, r0
 8005198:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800519a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff ff56 	bl	8005050 <__NVIC_EnableIRQ>
}
 80051a4:	bf00      	nop
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e08d      	b.n	80052da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	4b47      	ldr	r3, [pc, #284]	@ (80052e4 <HAL_DMA_Init+0x138>)
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d80f      	bhi.n	80051ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	461a      	mov	r2, r3
 80051d0:	4b45      	ldr	r3, [pc, #276]	@ (80052e8 <HAL_DMA_Init+0x13c>)
 80051d2:	4413      	add	r3, r2
 80051d4:	4a45      	ldr	r2, [pc, #276]	@ (80052ec <HAL_DMA_Init+0x140>)
 80051d6:	fba2 2303 	umull	r2, r3, r2, r3
 80051da:	091b      	lsrs	r3, r3, #4
 80051dc:	009a      	lsls	r2, r3, #2
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a42      	ldr	r2, [pc, #264]	@ (80052f0 <HAL_DMA_Init+0x144>)
 80051e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80051e8:	e00e      	b.n	8005208 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	4b40      	ldr	r3, [pc, #256]	@ (80052f4 <HAL_DMA_Init+0x148>)
 80051f2:	4413      	add	r3, r2
 80051f4:	4a3d      	ldr	r2, [pc, #244]	@ (80052ec <HAL_DMA_Init+0x140>)
 80051f6:	fba2 2303 	umull	r2, r3, r2, r3
 80051fa:	091b      	lsrs	r3, r3, #4
 80051fc:	009a      	lsls	r2, r3, #2
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a3c      	ldr	r2, [pc, #240]	@ (80052f8 <HAL_DMA_Init+0x14c>)
 8005206:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800521e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005222:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800522c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005238:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005244:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f9b6 	bl	80055cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005268:	d102      	bne.n	8005270 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005284:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d010      	beq.n	80052b0 <HAL_DMA_Init+0x104>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b04      	cmp	r3, #4
 8005294:	d80c      	bhi.n	80052b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f9d6 	bl	8005648 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80052ac:	605a      	str	r2, [r3, #4]
 80052ae:	e008      	b.n	80052c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40020407 	.word	0x40020407
 80052e8:	bffdfff8 	.word	0xbffdfff8
 80052ec:	cccccccd 	.word	0xcccccccd
 80052f0:	40020000 	.word	0x40020000
 80052f4:	bffdfbf8 	.word	0xbffdfbf8
 80052f8:	40020400 	.word	0x40020400

080052fc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_DMA_Start_IT+0x20>
 8005318:	2302      	movs	r3, #2
 800531a:	e066      	b.n	80053ea <HAL_DMA_Start_IT+0xee>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	d155      	bne.n	80053dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0201 	bic.w	r2, r2, #1
 800534c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	68b9      	ldr	r1, [r7, #8]
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f8fb 	bl	8005550 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 020e 	orr.w	r2, r2, #14
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	e00f      	b.n	8005394 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0204 	bic.w	r2, r2, #4
 8005382:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 020a 	orr.w	r2, r2, #10
 8005392:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d007      	beq.n	80053b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d007      	beq.n	80053ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0201 	orr.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	e005      	b.n	80053e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80053e4:	2302      	movs	r3, #2
 80053e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80053e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800540e:	f003 031f 	and.w	r3, r3, #31
 8005412:	2204      	movs	r2, #4
 8005414:	409a      	lsls	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4013      	ands	r3, r2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d026      	beq.n	800546c <HAL_DMA_IRQHandler+0x7a>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d021      	beq.n	800546c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d107      	bne.n	8005446 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0204 	bic.w	r2, r2, #4
 8005444:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544a:	f003 021f 	and.w	r2, r3, #31
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005452:	2104      	movs	r1, #4
 8005454:	fa01 f202 	lsl.w	r2, r1, r2
 8005458:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545e:	2b00      	cmp	r3, #0
 8005460:	d071      	beq.n	8005546 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800546a:	e06c      	b.n	8005546 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005470:	f003 031f 	and.w	r3, r3, #31
 8005474:	2202      	movs	r2, #2
 8005476:	409a      	lsls	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4013      	ands	r3, r2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d02e      	beq.n	80054de <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d029      	beq.n	80054de <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0320 	and.w	r3, r3, #32
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10b      	bne.n	80054b0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 020a 	bic.w	r2, r2, #10
 80054a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b4:	f003 021f 	and.w	r2, r3, #31
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054bc:	2102      	movs	r1, #2
 80054be:	fa01 f202 	lsl.w	r2, r1, r2
 80054c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d038      	beq.n	8005546 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80054dc:	e033      	b.n	8005546 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e2:	f003 031f 	and.w	r3, r3, #31
 80054e6:	2208      	movs	r2, #8
 80054e8:	409a      	lsls	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4013      	ands	r3, r2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d02a      	beq.n	8005548 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d025      	beq.n	8005548 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 020e 	bic.w	r2, r2, #14
 800550a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005510:	f003 021f 	and.w	r2, r3, #31
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005518:	2101      	movs	r1, #1
 800551a:	fa01 f202 	lsl.w	r2, r1, r2
 800551e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800553a:	2b00      	cmp	r3, #0
 800553c:	d004      	beq.n	8005548 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005546:	bf00      	nop
 8005548:	bf00      	nop
}
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005566:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556c:	2b00      	cmp	r3, #0
 800556e:	d004      	beq.n	800557a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005578:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800557e:	f003 021f 	and.w	r2, r3, #31
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005586:	2101      	movs	r1, #1
 8005588:	fa01 f202 	lsl.w	r2, r1, r2
 800558c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2b10      	cmp	r3, #16
 800559c:	d108      	bne.n	80055b0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80055ae:	e007      	b.n	80055c0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	60da      	str	r2, [r3, #12]
}
 80055c0:	bf00      	nop
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	4b16      	ldr	r3, [pc, #88]	@ (8005634 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80055dc:	429a      	cmp	r2, r3
 80055de:	d802      	bhi.n	80055e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80055e0:	4b15      	ldr	r3, [pc, #84]	@ (8005638 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	e001      	b.n	80055ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80055e6:	4b15      	ldr	r3, [pc, #84]	@ (800563c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80055e8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	3b08      	subs	r3, #8
 80055f6:	4a12      	ldr	r2, [pc, #72]	@ (8005640 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80055f8:	fba2 2303 	umull	r2, r3, r2, r3
 80055fc:	091b      	lsrs	r3, r3, #4
 80055fe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005604:	089b      	lsrs	r3, r3, #2
 8005606:	009a      	lsls	r2, r3, #2
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	4413      	add	r3, r2
 800560c:	461a      	mov	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a0b      	ldr	r2, [pc, #44]	@ (8005644 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005616:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f003 031f 	and.w	r3, r3, #31
 800561e:	2201      	movs	r2, #1
 8005620:	409a      	lsls	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	40020407 	.word	0x40020407
 8005638:	40020800 	.word	0x40020800
 800563c:	40020820 	.word	0x40020820
 8005640:	cccccccd 	.word	0xcccccccd
 8005644:	40020880 	.word	0x40020880

08005648 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	4b0b      	ldr	r3, [pc, #44]	@ (8005688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	461a      	mov	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a08      	ldr	r2, [pc, #32]	@ (800568c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800566a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3b01      	subs	r3, #1
 8005670:	f003 031f 	and.w	r3, r3, #31
 8005674:	2201      	movs	r2, #1
 8005676:	409a      	lsls	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	1000823f 	.word	0x1000823f
 800568c:	40020940 	.word	0x40020940

08005690 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	460b      	mov	r3, r1
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80056a2:	7afb      	ldrb	r3, [r7, #11]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d103      	bne.n	80056b0 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	605a      	str	r2, [r3, #4]
      break;
 80056ae:	e005      	b.n	80056bc <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	75fb      	strb	r3, [r7, #23]
      break;
 80056ba:	bf00      	nop
  }

  return status;
 80056bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e003      	b.n	80056e6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80056e4:	2300      	movs	r3, #0
  }
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
	...

080056f4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	0c1b      	lsrs	r3, r3, #16
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 031f 	and.w	r3, r3, #31
 8005710:	2201      	movs	r2, #1
 8005712:	fa02 f303 	lsl.w	r3, r2, r3
 8005716:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	4b0c      	ldr	r3, [pc, #48]	@ (8005750 <HAL_EXTI_IRQHandler+0x5c>)
 800571e:	4413      	add	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4013      	ands	r3, r2
 800572a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	4798      	blx	r3
    }
  }
}
 8005746:	bf00      	nop
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40010414 	.word	0x40010414

08005754 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e147      	b.n	80059f6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fb f93c 	bl	80009f8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699a      	ldr	r2, [r3, #24]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0210 	bic.w	r2, r2, #16
 800578e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005790:	f7fe f89e 	bl	80038d0 <HAL_GetTick>
 8005794:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005796:	e012      	b.n	80057be <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005798:	f7fe f89a 	bl	80038d0 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b0a      	cmp	r3, #10
 80057a4:	d90b      	bls.n	80057be <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057aa:	f043 0201 	orr.w	r2, r3, #1
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2203      	movs	r2, #3
 80057b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e11b      	b.n	80059f6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d0e5      	beq.n	8005798 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0201 	orr.w	r2, r2, #1
 80057da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057dc:	f7fe f878 	bl	80038d0 <HAL_GetTick>
 80057e0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80057e2:	e012      	b.n	800580a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80057e4:	f7fe f874 	bl	80038d0 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b0a      	cmp	r3, #10
 80057f0:	d90b      	bls.n	800580a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057f6:	f043 0201 	orr.w	r2, r3, #1
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2203      	movs	r2, #3
 8005802:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e0f5      	b.n	80059f6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0e5      	beq.n	80057e4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0202 	orr.w	r2, r2, #2
 8005826:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a74      	ldr	r2, [pc, #464]	@ (8005a00 <HAL_FDCAN_Init+0x2ac>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d103      	bne.n	800583a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005832:	4a74      	ldr	r2, [pc, #464]	@ (8005a04 <HAL_FDCAN_Init+0x2b0>)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	7c1b      	ldrb	r3, [r3, #16]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d108      	bne.n	8005854 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	699a      	ldr	r2, [r3, #24]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005850:	619a      	str	r2, [r3, #24]
 8005852:	e007      	b.n	8005864 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005862:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	7c5b      	ldrb	r3, [r3, #17]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d108      	bne.n	800587e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699a      	ldr	r2, [r3, #24]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800587a:	619a      	str	r2, [r3, #24]
 800587c:	e007      	b.n	800588e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699a      	ldr	r2, [r3, #24]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800588c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	7c9b      	ldrb	r3, [r3, #18]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d108      	bne.n	80058a8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699a      	ldr	r2, [r3, #24]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80058a4:	619a      	str	r2, [r3, #24]
 80058a6:	e007      	b.n	80058b8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058b6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699a      	ldr	r2, [r3, #24]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80058dc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0210 	bic.w	r2, r2, #16
 80058ec:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d108      	bne.n	8005908 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	699a      	ldr	r2, [r3, #24]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f042 0204 	orr.w	r2, r2, #4
 8005904:	619a      	str	r2, [r3, #24]
 8005906:	e02c      	b.n	8005962 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d028      	beq.n	8005962 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	2b02      	cmp	r3, #2
 8005916:	d01c      	beq.n	8005952 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005926:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691a      	ldr	r2, [r3, #16]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0210 	orr.w	r2, r2, #16
 8005936:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	2b03      	cmp	r3, #3
 800593e:	d110      	bne.n	8005962 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0220 	orr.w	r2, r2, #32
 800594e:	619a      	str	r2, [r3, #24]
 8005950:	e007      	b.n	8005962 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699a      	ldr	r2, [r3, #24]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 0220 	orr.w	r2, r2, #32
 8005960:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	3b01      	subs	r3, #1
 8005968:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	3b01      	subs	r3, #1
 8005970:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005972:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800597a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	3b01      	subs	r3, #1
 8005984:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800598a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800598c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005996:	d115      	bne.n	80059c4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a2:	3b01      	subs	r3, #1
 80059a4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80059a6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ac:	3b01      	subs	r3, #1
 80059ae:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80059b0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b8:	3b01      	subs	r3, #1
 80059ba:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80059c0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80059c2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fb14 	bl	8006008 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40006400 	.word	0x40006400
 8005a04:	40006500 	.word	0x40006500

08005a08 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b08b      	sub	sp, #44	@ 0x2c
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005a16:	2300      	movs	r3, #0
 8005a18:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a20:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005a22:	7efb      	ldrb	r3, [r7, #27]
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	f040 80e8 	bne.w	8005bfa <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b40      	cmp	r3, #64	@ 0x40
 8005a2e:	d137      	bne.n	8005aa0 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a38:	f003 030f 	and.w	r3, r3, #15
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d107      	bne.n	8005a50 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e0db      	b.n	8005c08 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a60:	d10a      	bne.n	8005a78 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a72:	d101      	bne.n	8005a78 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005a74:	2301      	movs	r3, #1
 8005a76:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a80:	0a1b      	lsrs	r3, r3, #8
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	69fa      	ldr	r2, [r7, #28]
 8005a88:	4413      	add	r3, r2
 8005a8a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	4613      	mov	r3, r2
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	4413      	add	r3, r2
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	440b      	add	r3, r1
 8005a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a9e:	e036      	b.n	8005b0e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005aa8:	f003 030f 	and.w	r3, r3, #15
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d107      	bne.n	8005ac0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e0a3      	b.n	8005c08 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ac8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005acc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ad0:	d10a      	bne.n	8005ae8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ae2:	d101      	bne.n	8005ae8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005af0:	0a1b      	lsrs	r3, r3, #8
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	4413      	add	r3, r2
 8005afa:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	4613      	mov	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	4413      	add	r3, r2
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	440b      	add	r3, r1
 8005b0c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d107      	bne.n	8005b32 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	0c9b      	lsrs	r3, r3, #18
 8005b28:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	e005      	b.n	8005b3e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b58:	3304      	adds	r3, #4
 8005b5a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	0c1b      	lsrs	r3, r3, #16
 8005b6c:	f003 020f 	and.w	r2, r3, #15
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	0e1b      	lsrs	r3, r3, #24
 8005b92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	0fda      	lsrs	r2, r3, #31
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bac:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005bae:	2300      	movs	r3, #0
 8005bb0:	623b      	str	r3, [r7, #32]
 8005bb2:	e00a      	b.n	8005bca <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	441a      	add	r2, r3
 8005bba:	6839      	ldr	r1, [r7, #0]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	440b      	add	r3, r1
 8005bc0:	7812      	ldrb	r2, [r2, #0]
 8005bc2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	623b      	str	r3, [r7, #32]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	4a11      	ldr	r2, [pc, #68]	@ (8005c14 <HAL_FDCAN_GetRxMessage+0x20c>)
 8005bd0:	5cd3      	ldrb	r3, [r2, r3]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d3ec      	bcc.n	8005bb4 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b40      	cmp	r3, #64	@ 0x40
 8005bde:	d105      	bne.n	8005bec <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69fa      	ldr	r2, [r7, #28]
 8005be6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8005bea:	e004      	b.n	8005bf6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	e006      	b.n	8005c08 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bfe:	f043 0208 	orr.w	r2, r3, #8
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
  }
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	372c      	adds	r7, #44	@ 0x2c
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	0800cc5c 	.word	0x0800cc5c

08005c18 <HAL_FDCAN_GetTxEvent>:
  *         the configuration information for the specified FDCAN.
  * @param  pTxEvent pointer to a FDCAN_TxEventFifoTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetTxEvent(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxEventFifoTypeDef *pTxEvent)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t *TxEventAddress;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c28:	75fb      	strb	r3, [r7, #23]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005c2a:	7dfb      	ldrb	r3, [r7, #23]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d16e      	bne.n	8005d0e <HAL_FDCAN_GetTxEvent+0xf6>
  {
    /* Check that the Tx event FIFO is not empty */
    if ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFFL) == 0U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d107      	bne.n	8005c50 <HAL_FDCAN_GetTxEvent+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e065      	b.n	8005d1c <HAL_FDCAN_GetTxEvent+0x104>
    }

    /* Calculate Tx event FIFO element address */
    GetIndex = ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFGI) >> FDCAN_TXEFS_EFGI_Pos);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c58:	0a1b      	lsrs	r3, r3, #8
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	613b      	str	r3, [r7, #16]
    TxEventAddress = (uint32_t *)(hfdcan->msgRam.TxEventFIFOSA + (GetIndex * SRAMCAN_TEF_SIZE));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	4413      	add	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]

    /* Retrieve IdType */
    pTxEvent->IdType = *TxEventAddress & FDCAN_ELEMENT_MASK_XTD;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pTxEvent->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d107      	bne.n	8005c90 <HAL_FDCAN_GetTxEvent+0x78>
    {
      pTxEvent->Identifier = ((*TxEventAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	0c9b      	lsrs	r3, r3, #18
 8005c86:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	e005      	b.n	8005c9c <HAL_FDCAN_GetTxEvent+0x84>
    }
    else /* Extended ID element */
    {
      pTxEvent->Identifier = (*TxEventAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve TxFrameType */
    pTxEvent->TxFrameType = (*TxEventAddress & FDCAN_ELEMENT_MASK_RTR);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pTxEvent->ErrorStateIndicator = (*TxEventAddress & FDCAN_ELEMENT_MASK_ESI);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	611a      	str	r2, [r3, #16]

    /* Increment TxEventAddress pointer to second word of Tx Event FIFO element */
    TxEventAddress++;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	60fb      	str	r3, [r7, #12]

    /* Retrieve TxTimestamp */
    pTxEvent->TxTimestamp = (*TxEventAddress & FDCAN_ELEMENT_MASK_TS);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pTxEvent->DataLength = ((*TxEventAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	0c1b      	lsrs	r3, r3, #16
 8005cca:	f003 020f 	and.w	r2, r3, #15
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pTxEvent->BitRateSwitch = (*TxEventAddress & FDCAN_ELEMENT_MASK_BRS);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pTxEvent->FDFormat = (*TxEventAddress & FDCAN_ELEMENT_MASK_FDF);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	619a      	str	r2, [r3, #24]

    /* Retrieve EventType */
    pTxEvent->EventType = (*TxEventAddress & FDCAN_ELEMENT_MASK_ET);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Retrieve MessageMarker */
    pTxEvent->MessageMarker = ((*TxEventAddress & FDCAN_ELEMENT_MASK_MM) >> 24U);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	0e1a      	lsrs	r2, r3, #24
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	621a      	str	r2, [r3, #32]

    /* Acknowledge the Tx Event FIFO that the oldest element is read so that it increments the GetIndex */
    hfdcan->Instance->TXEFA = GetIndex;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

    /* Return function status */
    return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e006      	b.n	8005d1c <HAL_FDCAN_GetTxEvent+0x104>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d12:	f043 0208 	orr.w	r2, r3, #8
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
  }
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08c      	sub	sp, #48	@ 0x30
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d36:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d44:	4013      	ands	r3, r2
 8005d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d74:	4013      	ands	r3, r2
 8005d76:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d7e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005d82:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8a:	6a3a      	ldr	r2, [r7, #32]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d96:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005d9a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	4013      	ands	r3, r2
 8005da6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dae:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	099b      	lsrs	r3, r3, #6
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00c      	beq.n	8005dde <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	099b      	lsrs	r3, r3, #6
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d006      	beq.n	8005dde <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2240      	movs	r2, #64	@ 0x40
 8005dd6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f901 	bl	8005fe0 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	0a1b      	lsrs	r3, r3, #8
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d01a      	beq.n	8005e20 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	0a1b      	lsrs	r3, r3, #8
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d014      	beq.n	8005e20 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005dfe:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e16:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005e18:	6939      	ldr	r1, [r7, #16]
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f8c1 	bl	8005fa2 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d007      	beq.n	8005e36 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e2c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005e2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7fb fcaf 	bl	8001794 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d007      	beq.n	8005e4c <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e42:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005e44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7fb fcca 	bl	80017e0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d007      	beq.n	8005e62 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e58:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005e5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7fb fd2f 	bl	80018c0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	0a5b      	lsrs	r3, r3, #9
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00d      	beq.n	8005e8a <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	0a5b      	lsrs	r3, r3, #9
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d007      	beq.n	8005e8a <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e82:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f882 	bl	8005f8e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	09db      	lsrs	r3, r3, #7
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d019      	beq.n	8005eca <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	09db      	lsrs	r3, r3, #7
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d013      	beq.n	8005eca <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005eaa:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2280      	movs	r2, #128	@ 0x80
 8005ec0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005ec2:	68f9      	ldr	r1, [r7, #12]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7fb fc80 	bl	80017ca <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	0b5b      	lsrs	r3, r3, #13
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00d      	beq.n	8005ef2 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	0b5b      	lsrs	r3, r3, #13
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d007      	beq.n	8005ef2 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005eea:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f863 	bl	8005fb8 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	0bdb      	lsrs	r3, r3, #15
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00d      	beq.n	8005f1a <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	0bdb      	lsrs	r3, r3, #15
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d007      	beq.n	8005f1a <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005f12:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f859 	bl	8005fcc <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	0b9b      	lsrs	r3, r3, #14
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d010      	beq.n	8005f48 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	0b9b      	lsrs	r3, r3, #14
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005f3a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f40:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005f56:	69f9      	ldr	r1, [r7, #28]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7fb fbff 	bl	800175c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d009      	beq.n	8005f78 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6a3a      	ldr	r2, [r7, #32]
 8005f6a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f837 	bl	8005ff4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005f86:	bf00      	nop
 8005f88:	3730      	adds	r7, #48	@ 0x30
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006010:	4b27      	ldr	r3, [pc, #156]	@ (80060b0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8006012:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006022:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800602a:	041a      	lsls	r2, r3, #16
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006048:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006050:	061a      	lsls	r2, r3, #24
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	e005      	b.n	8006096 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	3304      	adds	r3, #4
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d3f3      	bcc.n	800608a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80060a2:	bf00      	nop
 80060a4:	bf00      	nop
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	4000a400 	.word	0x4000a400

080060b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80060be:	2300      	movs	r3, #0
 80060c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80060c2:	e15a      	b.n	800637a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	2101      	movs	r1, #1
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	fa01 f303 	lsl.w	r3, r1, r3
 80060d0:	4013      	ands	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 814c 	beq.w	8006374 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f003 0303 	and.w	r3, r3, #3
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d005      	beq.n	80060f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d130      	bne.n	8006156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	2203      	movs	r2, #3
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	43db      	mvns	r3, r3
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4013      	ands	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	fa02 f303 	lsl.w	r3, r2, r3
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	4313      	orrs	r3, r2
 800611c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800612a:	2201      	movs	r2, #1
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	fa02 f303 	lsl.w	r3, r2, r3
 8006132:	43db      	mvns	r3, r3
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4013      	ands	r3, r2
 8006138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	091b      	lsrs	r3, r3, #4
 8006140:	f003 0201 	and.w	r2, r3, #1
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	fa02 f303 	lsl.w	r3, r2, r3
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	2b03      	cmp	r3, #3
 8006160:	d017      	beq.n	8006192 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	2203      	movs	r2, #3
 800616e:	fa02 f303 	lsl.w	r3, r2, r3
 8006172:	43db      	mvns	r3, r3
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	4013      	ands	r3, r2
 8006178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	689a      	ldr	r2, [r3, #8]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	fa02 f303 	lsl.w	r3, r2, r3
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4313      	orrs	r3, r2
 800618a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d123      	bne.n	80061e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	08da      	lsrs	r2, r3, #3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	3208      	adds	r2, #8
 80061a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	220f      	movs	r2, #15
 80061b6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ba:	43db      	mvns	r3, r3
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4013      	ands	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	691a      	ldr	r2, [r3, #16]
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f003 0307 	and.w	r3, r3, #7
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	fa02 f303 	lsl.w	r3, r2, r3
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	08da      	lsrs	r2, r3, #3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3208      	adds	r2, #8
 80061e0:	6939      	ldr	r1, [r7, #16]
 80061e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	2203      	movs	r2, #3
 80061f2:	fa02 f303 	lsl.w	r3, r2, r3
 80061f6:	43db      	mvns	r3, r3
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4013      	ands	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f003 0203 	and.w	r2, r3, #3
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	fa02 f303 	lsl.w	r3, r2, r3
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	4313      	orrs	r3, r2
 8006212:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006222:	2b00      	cmp	r3, #0
 8006224:	f000 80a6 	beq.w	8006374 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006228:	4b5b      	ldr	r3, [pc, #364]	@ (8006398 <HAL_GPIO_Init+0x2e4>)
 800622a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800622c:	4a5a      	ldr	r2, [pc, #360]	@ (8006398 <HAL_GPIO_Init+0x2e4>)
 800622e:	f043 0301 	orr.w	r3, r3, #1
 8006232:	6613      	str	r3, [r2, #96]	@ 0x60
 8006234:	4b58      	ldr	r3, [pc, #352]	@ (8006398 <HAL_GPIO_Init+0x2e4>)
 8006236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	60bb      	str	r3, [r7, #8]
 800623e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006240:	4a56      	ldr	r2, [pc, #344]	@ (800639c <HAL_GPIO_Init+0x2e8>)
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	089b      	lsrs	r3, r3, #2
 8006246:	3302      	adds	r3, #2
 8006248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800624c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f003 0303 	and.w	r3, r3, #3
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	220f      	movs	r2, #15
 8006258:	fa02 f303 	lsl.w	r3, r2, r3
 800625c:	43db      	mvns	r3, r3
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4013      	ands	r3, r2
 8006262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800626a:	d01f      	beq.n	80062ac <HAL_GPIO_Init+0x1f8>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a4c      	ldr	r2, [pc, #304]	@ (80063a0 <HAL_GPIO_Init+0x2ec>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d019      	beq.n	80062a8 <HAL_GPIO_Init+0x1f4>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a4b      	ldr	r2, [pc, #300]	@ (80063a4 <HAL_GPIO_Init+0x2f0>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d013      	beq.n	80062a4 <HAL_GPIO_Init+0x1f0>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a4a      	ldr	r2, [pc, #296]	@ (80063a8 <HAL_GPIO_Init+0x2f4>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00d      	beq.n	80062a0 <HAL_GPIO_Init+0x1ec>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a49      	ldr	r2, [pc, #292]	@ (80063ac <HAL_GPIO_Init+0x2f8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d007      	beq.n	800629c <HAL_GPIO_Init+0x1e8>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a48      	ldr	r2, [pc, #288]	@ (80063b0 <HAL_GPIO_Init+0x2fc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d101      	bne.n	8006298 <HAL_GPIO_Init+0x1e4>
 8006294:	2305      	movs	r3, #5
 8006296:	e00a      	b.n	80062ae <HAL_GPIO_Init+0x1fa>
 8006298:	2306      	movs	r3, #6
 800629a:	e008      	b.n	80062ae <HAL_GPIO_Init+0x1fa>
 800629c:	2304      	movs	r3, #4
 800629e:	e006      	b.n	80062ae <HAL_GPIO_Init+0x1fa>
 80062a0:	2303      	movs	r3, #3
 80062a2:	e004      	b.n	80062ae <HAL_GPIO_Init+0x1fa>
 80062a4:	2302      	movs	r3, #2
 80062a6:	e002      	b.n	80062ae <HAL_GPIO_Init+0x1fa>
 80062a8:	2301      	movs	r3, #1
 80062aa:	e000      	b.n	80062ae <HAL_GPIO_Init+0x1fa>
 80062ac:	2300      	movs	r3, #0
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	f002 0203 	and.w	r2, r2, #3
 80062b4:	0092      	lsls	r2, r2, #2
 80062b6:	4093      	lsls	r3, r2
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062be:	4937      	ldr	r1, [pc, #220]	@ (800639c <HAL_GPIO_Init+0x2e8>)
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	089b      	lsrs	r3, r3, #2
 80062c4:	3302      	adds	r3, #2
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062cc:	4b39      	ldr	r3, [pc, #228]	@ (80063b4 <HAL_GPIO_Init+0x300>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	43db      	mvns	r3, r3
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	4013      	ands	r3, r2
 80062da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80062f0:	4a30      	ldr	r2, [pc, #192]	@ (80063b4 <HAL_GPIO_Init+0x300>)
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80062f6:	4b2f      	ldr	r3, [pc, #188]	@ (80063b4 <HAL_GPIO_Init+0x300>)
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	43db      	mvns	r3, r3
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	4013      	ands	r3, r2
 8006304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800631a:	4a26      	ldr	r2, [pc, #152]	@ (80063b4 <HAL_GPIO_Init+0x300>)
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006320:	4b24      	ldr	r3, [pc, #144]	@ (80063b4 <HAL_GPIO_Init+0x300>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	43db      	mvns	r3, r3
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4013      	ands	r3, r2
 800632e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006344:	4a1b      	ldr	r2, [pc, #108]	@ (80063b4 <HAL_GPIO_Init+0x300>)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800634a:	4b1a      	ldr	r3, [pc, #104]	@ (80063b4 <HAL_GPIO_Init+0x300>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	43db      	mvns	r3, r3
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	4013      	ands	r3, r2
 8006358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800636e:	4a11      	ldr	r2, [pc, #68]	@ (80063b4 <HAL_GPIO_Init+0x300>)
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	3301      	adds	r3, #1
 8006378:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	fa22 f303 	lsr.w	r3, r2, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	f47f ae9d 	bne.w	80060c4 <HAL_GPIO_Init+0x10>
  }
}
 800638a:	bf00      	nop
 800638c:	bf00      	nop
 800638e:	371c      	adds	r7, #28
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	40021000 	.word	0x40021000
 800639c:	40010000 	.word	0x40010000
 80063a0:	48000400 	.word	0x48000400
 80063a4:	48000800 	.word	0x48000800
 80063a8:	48000c00 	.word	0x48000c00
 80063ac:	48001000 	.word	0x48001000
 80063b0:	48001400 	.word	0x48001400
 80063b4:	40010400 	.word	0x40010400

080063b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	460b      	mov	r3, r1
 80063c2:	807b      	strh	r3, [r7, #2]
 80063c4:	4613      	mov	r3, r2
 80063c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063c8:	787b      	ldrb	r3, [r7, #1]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80063ce:	887a      	ldrh	r2, [r7, #2]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80063d4:	e002      	b.n	80063dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80063d6:	887a      	ldrh	r2, [r7, #2]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	4603      	mov	r3, r0
 80063f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80063f2:	4b08      	ldr	r3, [pc, #32]	@ (8006414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063f4:	695a      	ldr	r2, [r3, #20]
 80063f6:	88fb      	ldrh	r3, [r7, #6]
 80063f8:	4013      	ands	r3, r2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d006      	beq.n	800640c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80063fe:	4a05      	ldr	r2, [pc, #20]	@ (8006414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006400:	88fb      	ldrh	r3, [r7, #6]
 8006402:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006404:	88fb      	ldrh	r3, [r7, #6]
 8006406:	4618      	mov	r0, r3
 8006408:	f7fb fac4 	bl	8001994 <HAL_GPIO_EXTI_Callback>
  }
}
 800640c:	bf00      	nop
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40010400 	.word	0x40010400

08006418 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e08d      	b.n	8006546 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7fa fc1a 	bl	8000c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2224      	movs	r2, #36	@ 0x24
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 0201 	bic.w	r2, r2, #1
 800645a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006468:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006478:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d107      	bne.n	8006492 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689a      	ldr	r2, [r3, #8]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800648e:	609a      	str	r2, [r3, #8]
 8006490:	e006      	b.n	80064a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800649e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d108      	bne.n	80064ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064b6:	605a      	str	r2, [r3, #4]
 80064b8:	e007      	b.n	80064ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	6812      	ldr	r2, [r2, #0]
 80064d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80064d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80064ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691a      	ldr	r2, [r3, #16]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	69d9      	ldr	r1, [r3, #28]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a1a      	ldr	r2, [r3, #32]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0201 	orr.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2220      	movs	r2, #32
 8006532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b20      	cmp	r3, #32
 8006562:	d138      	bne.n	80065d6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800656a:	2b01      	cmp	r3, #1
 800656c:	d101      	bne.n	8006572 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800656e:	2302      	movs	r3, #2
 8006570:	e032      	b.n	80065d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2224      	movs	r2, #36	@ 0x24
 800657e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0201 	bic.w	r2, r2, #1
 8006590:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80065a0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6819      	ldr	r1, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f042 0201 	orr.w	r2, r2, #1
 80065c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	e000      	b.n	80065d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80065d6:	2302      	movs	r3, #2
  }
}
 80065d8:	4618      	mov	r0, r3
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b20      	cmp	r3, #32
 80065f8:	d139      	bne.n	800666e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006604:	2302      	movs	r3, #2
 8006606:	e033      	b.n	8006670 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2224      	movs	r2, #36	@ 0x24
 8006614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0201 	bic.w	r2, r2, #1
 8006626:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006636:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	021b      	lsls	r3, r3, #8
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f042 0201 	orr.w	r2, r2, #1
 8006658:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2220      	movs	r2, #32
 800665e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	e000      	b.n	8006670 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800666e:	2302      	movs	r3, #2
  }
}
 8006670:	4618      	mov	r0, r3
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d141      	bne.n	800670e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800668a:	4b4b      	ldr	r3, [pc, #300]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006696:	d131      	bne.n	80066fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006698:	4b47      	ldr	r3, [pc, #284]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800669a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800669e:	4a46      	ldr	r2, [pc, #280]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80066a8:	4b43      	ldr	r3, [pc, #268]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80066b0:	4a41      	ldr	r2, [pc, #260]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80066b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80066b8:	4b40      	ldr	r3, [pc, #256]	@ (80067bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2232      	movs	r2, #50	@ 0x32
 80066be:	fb02 f303 	mul.w	r3, r2, r3
 80066c2:	4a3f      	ldr	r2, [pc, #252]	@ (80067c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80066c4:	fba2 2303 	umull	r2, r3, r2, r3
 80066c8:	0c9b      	lsrs	r3, r3, #18
 80066ca:	3301      	adds	r3, #1
 80066cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066ce:	e002      	b.n	80066d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3b01      	subs	r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066d6:	4b38      	ldr	r3, [pc, #224]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066e2:	d102      	bne.n	80066ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f2      	bne.n	80066d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066ea:	4b33      	ldr	r3, [pc, #204]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066f6:	d158      	bne.n	80067aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e057      	b.n	80067ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066fc:	4b2e      	ldr	r3, [pc, #184]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006702:	4a2d      	ldr	r2, [pc, #180]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006708:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800670c:	e04d      	b.n	80067aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006714:	d141      	bne.n	800679a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006716:	4b28      	ldr	r3, [pc, #160]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800671e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006722:	d131      	bne.n	8006788 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006724:	4b24      	ldr	r3, [pc, #144]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800672a:	4a23      	ldr	r2, [pc, #140]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800672c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006730:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006734:	4b20      	ldr	r3, [pc, #128]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800673c:	4a1e      	ldr	r2, [pc, #120]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800673e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006742:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006744:	4b1d      	ldr	r3, [pc, #116]	@ (80067bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2232      	movs	r2, #50	@ 0x32
 800674a:	fb02 f303 	mul.w	r3, r2, r3
 800674e:	4a1c      	ldr	r2, [pc, #112]	@ (80067c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006750:	fba2 2303 	umull	r2, r3, r2, r3
 8006754:	0c9b      	lsrs	r3, r3, #18
 8006756:	3301      	adds	r3, #1
 8006758:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800675a:	e002      	b.n	8006762 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3b01      	subs	r3, #1
 8006760:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006762:	4b15      	ldr	r3, [pc, #84]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800676a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800676e:	d102      	bne.n	8006776 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1f2      	bne.n	800675c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006776:	4b10      	ldr	r3, [pc, #64]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800677e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006782:	d112      	bne.n	80067aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e011      	b.n	80067ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006788:	4b0b      	ldr	r3, [pc, #44]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800678a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800678e:	4a0a      	ldr	r2, [pc, #40]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006794:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006798:	e007      	b.n	80067aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800679a:	4b07      	ldr	r3, [pc, #28]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80067a2:	4a05      	ldr	r2, [pc, #20]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80067a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	40007000 	.word	0x40007000
 80067bc:	20000000 	.word	0x20000000
 80067c0:	431bde83 	.word	0x431bde83

080067c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80067c8:	4b05      	ldr	r3, [pc, #20]	@ (80067e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	4a04      	ldr	r2, [pc, #16]	@ (80067e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80067ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80067d2:	6093      	str	r3, [r2, #8]
}
 80067d4:	bf00      	nop
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	40007000 	.word	0x40007000

080067e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e2fe      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d075      	beq.n	80068ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006802:	4b97      	ldr	r3, [pc, #604]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 030c 	and.w	r3, r3, #12
 800680a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800680c:	4b94      	ldr	r3, [pc, #592]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f003 0303 	and.w	r3, r3, #3
 8006814:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	2b0c      	cmp	r3, #12
 800681a:	d102      	bne.n	8006822 <HAL_RCC_OscConfig+0x3e>
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	2b03      	cmp	r3, #3
 8006820:	d002      	beq.n	8006828 <HAL_RCC_OscConfig+0x44>
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	2b08      	cmp	r3, #8
 8006826:	d10b      	bne.n	8006840 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006828:	4b8d      	ldr	r3, [pc, #564]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d05b      	beq.n	80068ec <HAL_RCC_OscConfig+0x108>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d157      	bne.n	80068ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e2d9      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006848:	d106      	bne.n	8006858 <HAL_RCC_OscConfig+0x74>
 800684a:	4b85      	ldr	r3, [pc, #532]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a84      	ldr	r2, [pc, #528]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 8006850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	e01d      	b.n	8006894 <HAL_RCC_OscConfig+0xb0>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006860:	d10c      	bne.n	800687c <HAL_RCC_OscConfig+0x98>
 8006862:	4b7f      	ldr	r3, [pc, #508]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a7e      	ldr	r2, [pc, #504]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 8006868:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	4b7c      	ldr	r3, [pc, #496]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a7b      	ldr	r2, [pc, #492]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 8006874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	e00b      	b.n	8006894 <HAL_RCC_OscConfig+0xb0>
 800687c:	4b78      	ldr	r3, [pc, #480]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a77      	ldr	r2, [pc, #476]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 8006882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	4b75      	ldr	r3, [pc, #468]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a74      	ldr	r2, [pc, #464]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 800688e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d013      	beq.n	80068c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800689c:	f7fd f818 	bl	80038d0 <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068a2:	e008      	b.n	80068b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068a4:	f7fd f814 	bl	80038d0 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b64      	cmp	r3, #100	@ 0x64
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e29e      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068b6:	4b6a      	ldr	r3, [pc, #424]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0f0      	beq.n	80068a4 <HAL_RCC_OscConfig+0xc0>
 80068c2:	e014      	b.n	80068ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c4:	f7fd f804 	bl	80038d0 <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068ca:	e008      	b.n	80068de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068cc:	f7fd f800 	bl	80038d0 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b64      	cmp	r3, #100	@ 0x64
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e28a      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068de:	4b60      	ldr	r3, [pc, #384]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1f0      	bne.n	80068cc <HAL_RCC_OscConfig+0xe8>
 80068ea:	e000      	b.n	80068ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d075      	beq.n	80069e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068fa:	4b59      	ldr	r3, [pc, #356]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 030c 	and.w	r3, r3, #12
 8006902:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006904:	4b56      	ldr	r3, [pc, #344]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 0303 	and.w	r3, r3, #3
 800690c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	2b0c      	cmp	r3, #12
 8006912:	d102      	bne.n	800691a <HAL_RCC_OscConfig+0x136>
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d002      	beq.n	8006920 <HAL_RCC_OscConfig+0x13c>
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	2b04      	cmp	r3, #4
 800691e:	d11f      	bne.n	8006960 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006920:	4b4f      	ldr	r3, [pc, #316]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006928:	2b00      	cmp	r3, #0
 800692a:	d005      	beq.n	8006938 <HAL_RCC_OscConfig+0x154>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e25d      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006938:	4b49      	ldr	r3, [pc, #292]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	061b      	lsls	r3, r3, #24
 8006946:	4946      	ldr	r1, [pc, #280]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 8006948:	4313      	orrs	r3, r2
 800694a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800694c:	4b45      	ldr	r3, [pc, #276]	@ (8006a64 <HAL_RCC_OscConfig+0x280>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4618      	mov	r0, r3
 8006952:	f7fa fad9 	bl	8000f08 <HAL_InitTick>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d043      	beq.n	80069e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e249      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d023      	beq.n	80069b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006968:	4b3d      	ldr	r3, [pc, #244]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a3c      	ldr	r2, [pc, #240]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 800696e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006974:	f7fc ffac 	bl	80038d0 <HAL_GetTick>
 8006978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800697a:	e008      	b.n	800698e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800697c:	f7fc ffa8 	bl	80038d0 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	2b02      	cmp	r3, #2
 8006988:	d901      	bls.n	800698e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e232      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800698e:	4b34      	ldr	r3, [pc, #208]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0f0      	beq.n	800697c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800699a:	4b31      	ldr	r3, [pc, #196]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	061b      	lsls	r3, r3, #24
 80069a8:	492d      	ldr	r1, [pc, #180]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	604b      	str	r3, [r1, #4]
 80069ae:	e01a      	b.n	80069e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069b0:	4b2b      	ldr	r3, [pc, #172]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a2a      	ldr	r2, [pc, #168]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 80069b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069bc:	f7fc ff88 	bl	80038d0 <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069c4:	f7fc ff84 	bl	80038d0 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e20e      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069d6:	4b22      	ldr	r3, [pc, #136]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1f0      	bne.n	80069c4 <HAL_RCC_OscConfig+0x1e0>
 80069e2:	e000      	b.n	80069e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d041      	beq.n	8006a76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d01c      	beq.n	8006a34 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069fa:	4b19      	ldr	r3, [pc, #100]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 80069fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a00:	4a17      	ldr	r2, [pc, #92]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 8006a02:	f043 0301 	orr.w	r3, r3, #1
 8006a06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a0a:	f7fc ff61 	bl	80038d0 <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a10:	e008      	b.n	8006a24 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a12:	f7fc ff5d 	bl	80038d0 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e1e7      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a24:	4b0e      	ldr	r3, [pc, #56]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 8006a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0ef      	beq.n	8006a12 <HAL_RCC_OscConfig+0x22e>
 8006a32:	e020      	b.n	8006a76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a34:	4b0a      	ldr	r3, [pc, #40]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 8006a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a3a:	4a09      	ldr	r2, [pc, #36]	@ (8006a60 <HAL_RCC_OscConfig+0x27c>)
 8006a3c:	f023 0301 	bic.w	r3, r3, #1
 8006a40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a44:	f7fc ff44 	bl	80038d0 <HAL_GetTick>
 8006a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a4a:	e00d      	b.n	8006a68 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a4c:	f7fc ff40 	bl	80038d0 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d906      	bls.n	8006a68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e1ca      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>
 8006a5e:	bf00      	nop
 8006a60:	40021000 	.word	0x40021000
 8006a64:	200001f8 	.word	0x200001f8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a68:	4b8c      	ldr	r3, [pc, #560]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1ea      	bne.n	8006a4c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 80a6 	beq.w	8006bd0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a84:	2300      	movs	r3, #0
 8006a86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a88:	4b84      	ldr	r3, [pc, #528]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <HAL_RCC_OscConfig+0x2b4>
 8006a94:	2301      	movs	r3, #1
 8006a96:	e000      	b.n	8006a9a <HAL_RCC_OscConfig+0x2b6>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00d      	beq.n	8006aba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a9e:	4b7f      	ldr	r3, [pc, #508]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aa2:	4a7e      	ldr	r2, [pc, #504]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006aa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006aaa:	4b7c      	ldr	r3, [pc, #496]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006aba:	4b79      	ldr	r3, [pc, #484]	@ (8006ca0 <HAL_RCC_OscConfig+0x4bc>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d118      	bne.n	8006af8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ac6:	4b76      	ldr	r3, [pc, #472]	@ (8006ca0 <HAL_RCC_OscConfig+0x4bc>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a75      	ldr	r2, [pc, #468]	@ (8006ca0 <HAL_RCC_OscConfig+0x4bc>)
 8006acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ad2:	f7fc fefd 	bl	80038d0 <HAL_GetTick>
 8006ad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ad8:	e008      	b.n	8006aec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ada:	f7fc fef9 	bl	80038d0 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d901      	bls.n	8006aec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e183      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006aec:	4b6c      	ldr	r3, [pc, #432]	@ (8006ca0 <HAL_RCC_OscConfig+0x4bc>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d0f0      	beq.n	8006ada <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d108      	bne.n	8006b12 <HAL_RCC_OscConfig+0x32e>
 8006b00:	4b66      	ldr	r3, [pc, #408]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b06:	4a65      	ldr	r2, [pc, #404]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006b08:	f043 0301 	orr.w	r3, r3, #1
 8006b0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006b10:	e024      	b.n	8006b5c <HAL_RCC_OscConfig+0x378>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	2b05      	cmp	r3, #5
 8006b18:	d110      	bne.n	8006b3c <HAL_RCC_OscConfig+0x358>
 8006b1a:	4b60      	ldr	r3, [pc, #384]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b20:	4a5e      	ldr	r2, [pc, #376]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006b22:	f043 0304 	orr.w	r3, r3, #4
 8006b26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006b2a:	4b5c      	ldr	r3, [pc, #368]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b30:	4a5a      	ldr	r2, [pc, #360]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006b32:	f043 0301 	orr.w	r3, r3, #1
 8006b36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006b3a:	e00f      	b.n	8006b5c <HAL_RCC_OscConfig+0x378>
 8006b3c:	4b57      	ldr	r3, [pc, #348]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b42:	4a56      	ldr	r2, [pc, #344]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006b44:	f023 0301 	bic.w	r3, r3, #1
 8006b48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006b4c:	4b53      	ldr	r3, [pc, #332]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b52:	4a52      	ldr	r2, [pc, #328]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006b54:	f023 0304 	bic.w	r3, r3, #4
 8006b58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d016      	beq.n	8006b92 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b64:	f7fc feb4 	bl	80038d0 <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b6a:	e00a      	b.n	8006b82 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b6c:	f7fc feb0 	bl	80038d0 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e138      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b82:	4b46      	ldr	r3, [pc, #280]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d0ed      	beq.n	8006b6c <HAL_RCC_OscConfig+0x388>
 8006b90:	e015      	b.n	8006bbe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b92:	f7fc fe9d 	bl	80038d0 <HAL_GetTick>
 8006b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b98:	e00a      	b.n	8006bb0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b9a:	f7fc fe99 	bl	80038d0 <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d901      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e121      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006bb0:	4b3a      	ldr	r3, [pc, #232]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1ed      	bne.n	8006b9a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006bbe:	7ffb      	ldrb	r3, [r7, #31]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d105      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bc4:	4b35      	ldr	r3, [pc, #212]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bc8:	4a34      	ldr	r2, [pc, #208]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006bca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0320 	and.w	r3, r3, #32
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d03c      	beq.n	8006c56 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d01c      	beq.n	8006c1e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006be4:	4b2d      	ldr	r3, [pc, #180]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006bea:	4a2c      	ldr	r2, [pc, #176]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006bec:	f043 0301 	orr.w	r3, r3, #1
 8006bf0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bf4:	f7fc fe6c 	bl	80038d0 <HAL_GetTick>
 8006bf8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bfa:	e008      	b.n	8006c0e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bfc:	f7fc fe68 	bl	80038d0 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d901      	bls.n	8006c0e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e0f2      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c0e:	4b23      	ldr	r3, [pc, #140]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d0ef      	beq.n	8006bfc <HAL_RCC_OscConfig+0x418>
 8006c1c:	e01b      	b.n	8006c56 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006c20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c24:	4a1d      	ldr	r2, [pc, #116]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006c26:	f023 0301 	bic.w	r3, r3, #1
 8006c2a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c2e:	f7fc fe4f 	bl	80038d0 <HAL_GetTick>
 8006c32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c34:	e008      	b.n	8006c48 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c36:	f7fc fe4b 	bl	80038d0 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e0d5      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c48:	4b14      	ldr	r3, [pc, #80]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006c4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1ef      	bne.n	8006c36 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 80c9 	beq.w	8006df2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c60:	4b0e      	ldr	r3, [pc, #56]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f003 030c 	and.w	r3, r3, #12
 8006c68:	2b0c      	cmp	r3, #12
 8006c6a:	f000 8083 	beq.w	8006d74 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d15e      	bne.n	8006d34 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c76:	4b09      	ldr	r3, [pc, #36]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a08      	ldr	r2, [pc, #32]	@ (8006c9c <HAL_RCC_OscConfig+0x4b8>)
 8006c7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c82:	f7fc fe25 	bl	80038d0 <HAL_GetTick>
 8006c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c88:	e00c      	b.n	8006ca4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c8a:	f7fc fe21 	bl	80038d0 <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d905      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e0ab      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>
 8006c9c:	40021000 	.word	0x40021000
 8006ca0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ca4:	4b55      	ldr	r3, [pc, #340]	@ (8006dfc <HAL_RCC_OscConfig+0x618>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1ec      	bne.n	8006c8a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cb0:	4b52      	ldr	r3, [pc, #328]	@ (8006dfc <HAL_RCC_OscConfig+0x618>)
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	4b52      	ldr	r3, [pc, #328]	@ (8006e00 <HAL_RCC_OscConfig+0x61c>)
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6a11      	ldr	r1, [r2, #32]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006cc0:	3a01      	subs	r2, #1
 8006cc2:	0112      	lsls	r2, r2, #4
 8006cc4:	4311      	orrs	r1, r2
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006cca:	0212      	lsls	r2, r2, #8
 8006ccc:	4311      	orrs	r1, r2
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006cd2:	0852      	lsrs	r2, r2, #1
 8006cd4:	3a01      	subs	r2, #1
 8006cd6:	0552      	lsls	r2, r2, #21
 8006cd8:	4311      	orrs	r1, r2
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006cde:	0852      	lsrs	r2, r2, #1
 8006ce0:	3a01      	subs	r2, #1
 8006ce2:	0652      	lsls	r2, r2, #25
 8006ce4:	4311      	orrs	r1, r2
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006cea:	06d2      	lsls	r2, r2, #27
 8006cec:	430a      	orrs	r2, r1
 8006cee:	4943      	ldr	r1, [pc, #268]	@ (8006dfc <HAL_RCC_OscConfig+0x618>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cf4:	4b41      	ldr	r3, [pc, #260]	@ (8006dfc <HAL_RCC_OscConfig+0x618>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a40      	ldr	r2, [pc, #256]	@ (8006dfc <HAL_RCC_OscConfig+0x618>)
 8006cfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cfe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d00:	4b3e      	ldr	r3, [pc, #248]	@ (8006dfc <HAL_RCC_OscConfig+0x618>)
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	4a3d      	ldr	r2, [pc, #244]	@ (8006dfc <HAL_RCC_OscConfig+0x618>)
 8006d06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d0c:	f7fc fde0 	bl	80038d0 <HAL_GetTick>
 8006d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d12:	e008      	b.n	8006d26 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d14:	f7fc fddc 	bl	80038d0 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e066      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d26:	4b35      	ldr	r3, [pc, #212]	@ (8006dfc <HAL_RCC_OscConfig+0x618>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0f0      	beq.n	8006d14 <HAL_RCC_OscConfig+0x530>
 8006d32:	e05e      	b.n	8006df2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d34:	4b31      	ldr	r3, [pc, #196]	@ (8006dfc <HAL_RCC_OscConfig+0x618>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a30      	ldr	r2, [pc, #192]	@ (8006dfc <HAL_RCC_OscConfig+0x618>)
 8006d3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d40:	f7fc fdc6 	bl	80038d0 <HAL_GetTick>
 8006d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d46:	e008      	b.n	8006d5a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d48:	f7fc fdc2 	bl	80038d0 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e04c      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d5a:	4b28      	ldr	r3, [pc, #160]	@ (8006dfc <HAL_RCC_OscConfig+0x618>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1f0      	bne.n	8006d48 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006d66:	4b25      	ldr	r3, [pc, #148]	@ (8006dfc <HAL_RCC_OscConfig+0x618>)
 8006d68:	68da      	ldr	r2, [r3, #12]
 8006d6a:	4924      	ldr	r1, [pc, #144]	@ (8006dfc <HAL_RCC_OscConfig+0x618>)
 8006d6c:	4b25      	ldr	r3, [pc, #148]	@ (8006e04 <HAL_RCC_OscConfig+0x620>)
 8006d6e:	4013      	ands	r3, r2
 8006d70:	60cb      	str	r3, [r1, #12]
 8006d72:	e03e      	b.n	8006df2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e039      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006d80:	4b1e      	ldr	r3, [pc, #120]	@ (8006dfc <HAL_RCC_OscConfig+0x618>)
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f003 0203 	and.w	r2, r3, #3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d12c      	bne.n	8006dee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d123      	bne.n	8006dee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d11b      	bne.n	8006dee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d113      	bne.n	8006dee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dd0:	085b      	lsrs	r3, r3, #1
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d109      	bne.n	8006dee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006de4:	085b      	lsrs	r3, r3, #1
 8006de6:	3b01      	subs	r3, #1
 8006de8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d001      	beq.n	8006df2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e000      	b.n	8006df4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3720      	adds	r7, #32
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	40021000 	.word	0x40021000
 8006e00:	019f800c 	.word	0x019f800c
 8006e04:	feeefffc 	.word	0xfeeefffc

08006e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006e12:	2300      	movs	r3, #0
 8006e14:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e11e      	b.n	800705e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e20:	4b91      	ldr	r3, [pc, #580]	@ (8007068 <HAL_RCC_ClockConfig+0x260>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 030f 	and.w	r3, r3, #15
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d910      	bls.n	8006e50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e2e:	4b8e      	ldr	r3, [pc, #568]	@ (8007068 <HAL_RCC_ClockConfig+0x260>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f023 020f 	bic.w	r2, r3, #15
 8006e36:	498c      	ldr	r1, [pc, #560]	@ (8007068 <HAL_RCC_ClockConfig+0x260>)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e3e:	4b8a      	ldr	r3, [pc, #552]	@ (8007068 <HAL_RCC_ClockConfig+0x260>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d001      	beq.n	8006e50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e106      	b.n	800705e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d073      	beq.n	8006f44 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	d129      	bne.n	8006eb8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e64:	4b81      	ldr	r3, [pc, #516]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e0f4      	b.n	800705e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006e74:	f000 f9d0 	bl	8007218 <RCC_GetSysClockFreqFromPLLSource>
 8006e78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	4a7c      	ldr	r2, [pc, #496]	@ (8007070 <HAL_RCC_ClockConfig+0x268>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d93f      	bls.n	8006f02 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006e82:	4b7a      	ldr	r3, [pc, #488]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d009      	beq.n	8006ea2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d033      	beq.n	8006f02 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d12f      	bne.n	8006f02 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006ea2:	4b72      	ldr	r3, [pc, #456]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006eaa:	4a70      	ldr	r2, [pc, #448]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8006eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eb0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006eb2:	2380      	movs	r3, #128	@ 0x80
 8006eb4:	617b      	str	r3, [r7, #20]
 8006eb6:	e024      	b.n	8006f02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d107      	bne.n	8006ed0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ec0:	4b6a      	ldr	r3, [pc, #424]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d109      	bne.n	8006ee0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e0c6      	b.n	800705e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ed0:	4b66      	ldr	r3, [pc, #408]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e0be      	b.n	800705e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006ee0:	f000 f8ce 	bl	8007080 <HAL_RCC_GetSysClockFreq>
 8006ee4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	4a61      	ldr	r2, [pc, #388]	@ (8007070 <HAL_RCC_ClockConfig+0x268>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d909      	bls.n	8006f02 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006eee:	4b5f      	ldr	r3, [pc, #380]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ef6:	4a5d      	ldr	r2, [pc, #372]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8006ef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006efc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006efe:	2380      	movs	r3, #128	@ 0x80
 8006f00:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f02:	4b5a      	ldr	r3, [pc, #360]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f023 0203 	bic.w	r2, r3, #3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	4957      	ldr	r1, [pc, #348]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f14:	f7fc fcdc 	bl	80038d0 <HAL_GetTick>
 8006f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f1a:	e00a      	b.n	8006f32 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f1c:	f7fc fcd8 	bl	80038d0 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e095      	b.n	800705e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f32:	4b4e      	ldr	r3, [pc, #312]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f003 020c 	and.w	r2, r3, #12
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d1eb      	bne.n	8006f1c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d023      	beq.n	8006f98 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0304 	and.w	r3, r3, #4
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d005      	beq.n	8006f68 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f5c:	4b43      	ldr	r3, [pc, #268]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	4a42      	ldr	r2, [pc, #264]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8006f62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006f66:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0308 	and.w	r3, r3, #8
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d007      	beq.n	8006f84 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006f74:	4b3d      	ldr	r3, [pc, #244]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006f7c:	4a3b      	ldr	r2, [pc, #236]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8006f7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006f82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f84:	4b39      	ldr	r3, [pc, #228]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	4936      	ldr	r1, [pc, #216]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	608b      	str	r3, [r1, #8]
 8006f96:	e008      	b.n	8006faa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2b80      	cmp	r3, #128	@ 0x80
 8006f9c:	d105      	bne.n	8006faa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006f9e:	4b33      	ldr	r3, [pc, #204]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	4a32      	ldr	r2, [pc, #200]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8006fa4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fa8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006faa:	4b2f      	ldr	r3, [pc, #188]	@ (8007068 <HAL_RCC_ClockConfig+0x260>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 030f 	and.w	r3, r3, #15
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d21d      	bcs.n	8006ff4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8007068 <HAL_RCC_ClockConfig+0x260>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f023 020f 	bic.w	r2, r3, #15
 8006fc0:	4929      	ldr	r1, [pc, #164]	@ (8007068 <HAL_RCC_ClockConfig+0x260>)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006fc8:	f7fc fc82 	bl	80038d0 <HAL_GetTick>
 8006fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fce:	e00a      	b.n	8006fe6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fd0:	f7fc fc7e 	bl	80038d0 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d901      	bls.n	8006fe6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e03b      	b.n	800705e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fe6:	4b20      	ldr	r3, [pc, #128]	@ (8007068 <HAL_RCC_ClockConfig+0x260>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 030f 	and.w	r3, r3, #15
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d1ed      	bne.n	8006fd0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d008      	beq.n	8007012 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007000:	4b1a      	ldr	r3, [pc, #104]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	4917      	ldr	r1, [pc, #92]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 800700e:	4313      	orrs	r3, r2
 8007010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0308 	and.w	r3, r3, #8
 800701a:	2b00      	cmp	r3, #0
 800701c:	d009      	beq.n	8007032 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800701e:	4b13      	ldr	r3, [pc, #76]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	490f      	ldr	r1, [pc, #60]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 800702e:	4313      	orrs	r3, r2
 8007030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007032:	f000 f825 	bl	8007080 <HAL_RCC_GetSysClockFreq>
 8007036:	4602      	mov	r2, r0
 8007038:	4b0c      	ldr	r3, [pc, #48]	@ (800706c <HAL_RCC_ClockConfig+0x264>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	091b      	lsrs	r3, r3, #4
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	490c      	ldr	r1, [pc, #48]	@ (8007074 <HAL_RCC_ClockConfig+0x26c>)
 8007044:	5ccb      	ldrb	r3, [r1, r3]
 8007046:	f003 031f 	and.w	r3, r3, #31
 800704a:	fa22 f303 	lsr.w	r3, r2, r3
 800704e:	4a0a      	ldr	r2, [pc, #40]	@ (8007078 <HAL_RCC_ClockConfig+0x270>)
 8007050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007052:	4b0a      	ldr	r3, [pc, #40]	@ (800707c <HAL_RCC_ClockConfig+0x274>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4618      	mov	r0, r3
 8007058:	f7f9 ff56 	bl	8000f08 <HAL_InitTick>
 800705c:	4603      	mov	r3, r0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	40022000 	.word	0x40022000
 800706c:	40021000 	.word	0x40021000
 8007070:	04c4b400 	.word	0x04c4b400
 8007074:	0800cc14 	.word	0x0800cc14
 8007078:	20000000 	.word	0x20000000
 800707c:	200001f8 	.word	0x200001f8

08007080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007086:	4b2c      	ldr	r3, [pc, #176]	@ (8007138 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f003 030c 	and.w	r3, r3, #12
 800708e:	2b04      	cmp	r3, #4
 8007090:	d102      	bne.n	8007098 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007092:	4b2a      	ldr	r3, [pc, #168]	@ (800713c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007094:	613b      	str	r3, [r7, #16]
 8007096:	e047      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007098:	4b27      	ldr	r3, [pc, #156]	@ (8007138 <HAL_RCC_GetSysClockFreq+0xb8>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f003 030c 	and.w	r3, r3, #12
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d102      	bne.n	80070aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80070a4:	4b26      	ldr	r3, [pc, #152]	@ (8007140 <HAL_RCC_GetSysClockFreq+0xc0>)
 80070a6:	613b      	str	r3, [r7, #16]
 80070a8:	e03e      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80070aa:	4b23      	ldr	r3, [pc, #140]	@ (8007138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f003 030c 	and.w	r3, r3, #12
 80070b2:	2b0c      	cmp	r3, #12
 80070b4:	d136      	bne.n	8007124 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80070b6:	4b20      	ldr	r3, [pc, #128]	@ (8007138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	091b      	lsrs	r3, r3, #4
 80070c6:	f003 030f 	and.w	r3, r3, #15
 80070ca:	3301      	adds	r3, #1
 80070cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d10c      	bne.n	80070ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007140 <HAL_RCC_GetSysClockFreq+0xc0>)
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070dc:	4a16      	ldr	r2, [pc, #88]	@ (8007138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070de:	68d2      	ldr	r2, [r2, #12]
 80070e0:	0a12      	lsrs	r2, r2, #8
 80070e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80070e6:	fb02 f303 	mul.w	r3, r2, r3
 80070ea:	617b      	str	r3, [r7, #20]
      break;
 80070ec:	e00c      	b.n	8007108 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070ee:	4a13      	ldr	r2, [pc, #76]	@ (800713c <HAL_RCC_GetSysClockFreq+0xbc>)
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f6:	4a10      	ldr	r2, [pc, #64]	@ (8007138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070f8:	68d2      	ldr	r2, [r2, #12]
 80070fa:	0a12      	lsrs	r2, r2, #8
 80070fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007100:	fb02 f303 	mul.w	r3, r2, r3
 8007104:	617b      	str	r3, [r7, #20]
      break;
 8007106:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007108:	4b0b      	ldr	r3, [pc, #44]	@ (8007138 <HAL_RCC_GetSysClockFreq+0xb8>)
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	0e5b      	lsrs	r3, r3, #25
 800710e:	f003 0303 	and.w	r3, r3, #3
 8007112:	3301      	adds	r3, #1
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007120:	613b      	str	r3, [r7, #16]
 8007122:	e001      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007128:	693b      	ldr	r3, [r7, #16]
}
 800712a:	4618      	mov	r0, r3
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40021000 	.word	0x40021000
 800713c:	00f42400 	.word	0x00f42400
 8007140:	016e3600 	.word	0x016e3600

08007144 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007148:	4b03      	ldr	r3, [pc, #12]	@ (8007158 <HAL_RCC_GetHCLKFreq+0x14>)
 800714a:	681b      	ldr	r3, [r3, #0]
}
 800714c:	4618      	mov	r0, r3
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	20000000 	.word	0x20000000

0800715c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007160:	f7ff fff0 	bl	8007144 <HAL_RCC_GetHCLKFreq>
 8007164:	4602      	mov	r2, r0
 8007166:	4b06      	ldr	r3, [pc, #24]	@ (8007180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	0a1b      	lsrs	r3, r3, #8
 800716c:	f003 0307 	and.w	r3, r3, #7
 8007170:	4904      	ldr	r1, [pc, #16]	@ (8007184 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007172:	5ccb      	ldrb	r3, [r1, r3]
 8007174:	f003 031f 	and.w	r3, r3, #31
 8007178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800717c:	4618      	mov	r0, r3
 800717e:	bd80      	pop	{r7, pc}
 8007180:	40021000 	.word	0x40021000
 8007184:	0800cc24 	.word	0x0800cc24

08007188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800718c:	f7ff ffda 	bl	8007144 <HAL_RCC_GetHCLKFreq>
 8007190:	4602      	mov	r2, r0
 8007192:	4b06      	ldr	r3, [pc, #24]	@ (80071ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	0adb      	lsrs	r3, r3, #11
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	4904      	ldr	r1, [pc, #16]	@ (80071b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800719e:	5ccb      	ldrb	r3, [r1, r3]
 80071a0:	f003 031f 	and.w	r3, r3, #31
 80071a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	40021000 	.word	0x40021000
 80071b0:	0800cc24 	.word	0x0800cc24

080071b4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	220f      	movs	r2, #15
 80071c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80071c4:	4b12      	ldr	r3, [pc, #72]	@ (8007210 <HAL_RCC_GetClockConfig+0x5c>)
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f003 0203 	and.w	r2, r3, #3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80071d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007210 <HAL_RCC_GetClockConfig+0x5c>)
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80071dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007210 <HAL_RCC_GetClockConfig+0x5c>)
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80071e8:	4b09      	ldr	r3, [pc, #36]	@ (8007210 <HAL_RCC_GetClockConfig+0x5c>)
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	08db      	lsrs	r3, r3, #3
 80071ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80071f6:	4b07      	ldr	r3, [pc, #28]	@ (8007214 <HAL_RCC_GetClockConfig+0x60>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 020f 	and.w	r2, r3, #15
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	601a      	str	r2, [r3, #0]
}
 8007202:	bf00      	nop
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	40021000 	.word	0x40021000
 8007214:	40022000 	.word	0x40022000

08007218 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800721e:	4b1e      	ldr	r3, [pc, #120]	@ (8007298 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	f003 0303 	and.w	r3, r3, #3
 8007226:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007228:	4b1b      	ldr	r3, [pc, #108]	@ (8007298 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	091b      	lsrs	r3, r3, #4
 800722e:	f003 030f 	and.w	r3, r3, #15
 8007232:	3301      	adds	r3, #1
 8007234:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	2b03      	cmp	r3, #3
 800723a:	d10c      	bne.n	8007256 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800723c:	4a17      	ldr	r2, [pc, #92]	@ (800729c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	fbb2 f3f3 	udiv	r3, r2, r3
 8007244:	4a14      	ldr	r2, [pc, #80]	@ (8007298 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007246:	68d2      	ldr	r2, [r2, #12]
 8007248:	0a12      	lsrs	r2, r2, #8
 800724a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800724e:	fb02 f303 	mul.w	r3, r2, r3
 8007252:	617b      	str	r3, [r7, #20]
    break;
 8007254:	e00c      	b.n	8007270 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007256:	4a12      	ldr	r2, [pc, #72]	@ (80072a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	fbb2 f3f3 	udiv	r3, r2, r3
 800725e:	4a0e      	ldr	r2, [pc, #56]	@ (8007298 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007260:	68d2      	ldr	r2, [r2, #12]
 8007262:	0a12      	lsrs	r2, r2, #8
 8007264:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007268:	fb02 f303 	mul.w	r3, r2, r3
 800726c:	617b      	str	r3, [r7, #20]
    break;
 800726e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007270:	4b09      	ldr	r3, [pc, #36]	@ (8007298 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	0e5b      	lsrs	r3, r3, #25
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	3301      	adds	r3, #1
 800727c:	005b      	lsls	r3, r3, #1
 800727e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	fbb2 f3f3 	udiv	r3, r2, r3
 8007288:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800728a:	687b      	ldr	r3, [r7, #4]
}
 800728c:	4618      	mov	r0, r3
 800728e:	371c      	adds	r7, #28
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	40021000 	.word	0x40021000
 800729c:	016e3600 	.word	0x016e3600
 80072a0:	00f42400 	.word	0x00f42400

080072a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072ac:	2300      	movs	r3, #0
 80072ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072b0:	2300      	movs	r3, #0
 80072b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 8098 	beq.w	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072c2:	2300      	movs	r3, #0
 80072c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072c6:	4b43      	ldr	r3, [pc, #268]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10d      	bne.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072d2:	4b40      	ldr	r3, [pc, #256]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072d6:	4a3f      	ldr	r2, [pc, #252]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80072de:	4b3d      	ldr	r3, [pc, #244]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072e6:	60bb      	str	r3, [r7, #8]
 80072e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072ea:	2301      	movs	r3, #1
 80072ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072ee:	4b3a      	ldr	r3, [pc, #232]	@ (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a39      	ldr	r2, [pc, #228]	@ (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80072f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072fa:	f7fc fae9 	bl	80038d0 <HAL_GetTick>
 80072fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007300:	e009      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007302:	f7fc fae5 	bl	80038d0 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	2b02      	cmp	r3, #2
 800730e:	d902      	bls.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	74fb      	strb	r3, [r7, #19]
        break;
 8007314:	e005      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007316:	4b30      	ldr	r3, [pc, #192]	@ (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800731e:	2b00      	cmp	r3, #0
 8007320:	d0ef      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007322:	7cfb      	ldrb	r3, [r7, #19]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d159      	bne.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007328:	4b2a      	ldr	r3, [pc, #168]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800732a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800732e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007332:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d01e      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	429a      	cmp	r2, r3
 8007342:	d019      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007344:	4b23      	ldr	r3, [pc, #140]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800734a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800734e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007350:	4b20      	ldr	r3, [pc, #128]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007356:	4a1f      	ldr	r2, [pc, #124]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800735c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007360:	4b1c      	ldr	r3, [pc, #112]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007366:	4a1b      	ldr	r2, [pc, #108]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800736c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007370:	4a18      	ldr	r2, [pc, #96]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	d016      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007382:	f7fc faa5 	bl	80038d0 <HAL_GetTick>
 8007386:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007388:	e00b      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800738a:	f7fc faa1 	bl	80038d0 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007398:	4293      	cmp	r3, r2
 800739a:	d902      	bls.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	74fb      	strb	r3, [r7, #19]
            break;
 80073a0:	e006      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073a2:	4b0c      	ldr	r3, [pc, #48]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d0ec      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80073b0:	7cfb      	ldrb	r3, [r7, #19]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10b      	bne.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073b6:	4b07      	ldr	r3, [pc, #28]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c4:	4903      	ldr	r1, [pc, #12]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80073cc:	e008      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80073ce:	7cfb      	ldrb	r3, [r7, #19]
 80073d0:	74bb      	strb	r3, [r7, #18]
 80073d2:	e005      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80073d4:	40021000 	.word	0x40021000
 80073d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073dc:	7cfb      	ldrb	r3, [r7, #19]
 80073de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073e0:	7c7b      	ldrb	r3, [r7, #17]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d105      	bne.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073e6:	4ba6      	ldr	r3, [pc, #664]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ea:	4aa5      	ldr	r2, [pc, #660]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00a      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073fe:	4ba0      	ldr	r3, [pc, #640]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007404:	f023 0203 	bic.w	r2, r3, #3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	499c      	ldr	r1, [pc, #624]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800740e:	4313      	orrs	r3, r2
 8007410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007420:	4b97      	ldr	r3, [pc, #604]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007426:	f023 020c 	bic.w	r2, r3, #12
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	4994      	ldr	r1, [pc, #592]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007430:	4313      	orrs	r3, r2
 8007432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0304 	and.w	r3, r3, #4
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00a      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007442:	4b8f      	ldr	r3, [pc, #572]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007448:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	498b      	ldr	r1, [pc, #556]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007452:	4313      	orrs	r3, r2
 8007454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0308 	and.w	r3, r3, #8
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00a      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007464:	4b86      	ldr	r3, [pc, #536]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800746a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	4983      	ldr	r1, [pc, #524]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007474:	4313      	orrs	r3, r2
 8007476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0320 	and.w	r3, r3, #32
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007486:	4b7e      	ldr	r3, [pc, #504]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800748c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	497a      	ldr	r1, [pc, #488]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007496:	4313      	orrs	r3, r2
 8007498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00a      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074a8:	4b75      	ldr	r3, [pc, #468]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	4972      	ldr	r1, [pc, #456]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074ca:	4b6d      	ldr	r3, [pc, #436]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	4969      	ldr	r1, [pc, #420]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00a      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80074ec:	4b64      	ldr	r3, [pc, #400]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	4961      	ldr	r1, [pc, #388]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800750e:	4b5c      	ldr	r3, [pc, #368]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007514:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751c:	4958      	ldr	r1, [pc, #352]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800751e:	4313      	orrs	r3, r2
 8007520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800752c:	2b00      	cmp	r3, #0
 800752e:	d015      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007530:	4b53      	ldr	r3, [pc, #332]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007536:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753e:	4950      	ldr	r1, [pc, #320]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007540:	4313      	orrs	r3, r2
 8007542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800754e:	d105      	bne.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007550:	4b4b      	ldr	r3, [pc, #300]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	4a4a      	ldr	r2, [pc, #296]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007556:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800755a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007564:	2b00      	cmp	r3, #0
 8007566:	d015      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007568:	4b45      	ldr	r3, [pc, #276]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800756a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800756e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007576:	4942      	ldr	r1, [pc, #264]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007578:	4313      	orrs	r3, r2
 800757a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007582:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007586:	d105      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007588:	4b3d      	ldr	r3, [pc, #244]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	4a3c      	ldr	r2, [pc, #240]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800758e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007592:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d015      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80075a0:	4b37      	ldr	r3, [pc, #220]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ae:	4934      	ldr	r1, [pc, #208]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075be:	d105      	bne.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075c0:	4b2f      	ldr	r3, [pc, #188]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	4a2e      	ldr	r2, [pc, #184]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d015      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075d8:	4b29      	ldr	r3, [pc, #164]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075e6:	4926      	ldr	r1, [pc, #152]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075f6:	d105      	bne.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075f8:	4b21      	ldr	r3, [pc, #132]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	4a20      	ldr	r2, [pc, #128]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007602:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d015      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007610:	4b1b      	ldr	r3, [pc, #108]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007616:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800761e:	4918      	ldr	r1, [pc, #96]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007620:	4313      	orrs	r3, r2
 8007622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800762e:	d105      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007630:	4b13      	ldr	r3, [pc, #76]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	4a12      	ldr	r2, [pc, #72]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007636:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800763a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d015      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007648:	4b0d      	ldr	r3, [pc, #52]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800764a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800764e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007656:	490a      	ldr	r1, [pc, #40]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007658:	4313      	orrs	r3, r2
 800765a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007662:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007666:	d105      	bne.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007668:	4b05      	ldr	r3, [pc, #20]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	4a04      	ldr	r2, [pc, #16]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800766e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007672:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007674:	7cbb      	ldrb	r3, [r7, #18]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	40021000 	.word	0x40021000

08007684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e049      	b.n	800772a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d106      	bne.n	80076b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f841 	bl	8007732 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2202      	movs	r2, #2
 80076b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3304      	adds	r3, #4
 80076c0:	4619      	mov	r1, r3
 80076c2:	4610      	mov	r0, r2
 80076c4:	f000 fe56 	bl	8008374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007732:	b480      	push	{r7}
 8007734:	b083      	sub	sp, #12
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800773a:	bf00      	nop
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
	...

08007748 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b01      	cmp	r3, #1
 800775a:	d001      	beq.n	8007760 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e042      	b.n	80077e6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2202      	movs	r2, #2
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a21      	ldr	r2, [pc, #132]	@ (80077f4 <HAL_TIM_Base_Start+0xac>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d018      	beq.n	80077a4 <HAL_TIM_Base_Start+0x5c>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800777a:	d013      	beq.n	80077a4 <HAL_TIM_Base_Start+0x5c>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a1d      	ldr	r2, [pc, #116]	@ (80077f8 <HAL_TIM_Base_Start+0xb0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d00e      	beq.n	80077a4 <HAL_TIM_Base_Start+0x5c>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a1c      	ldr	r2, [pc, #112]	@ (80077fc <HAL_TIM_Base_Start+0xb4>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d009      	beq.n	80077a4 <HAL_TIM_Base_Start+0x5c>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a1a      	ldr	r2, [pc, #104]	@ (8007800 <HAL_TIM_Base_Start+0xb8>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d004      	beq.n	80077a4 <HAL_TIM_Base_Start+0x5c>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a19      	ldr	r2, [pc, #100]	@ (8007804 <HAL_TIM_Base_Start+0xbc>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d115      	bne.n	80077d0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689a      	ldr	r2, [r3, #8]
 80077aa:	4b17      	ldr	r3, [pc, #92]	@ (8007808 <HAL_TIM_Base_Start+0xc0>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2b06      	cmp	r3, #6
 80077b4:	d015      	beq.n	80077e2 <HAL_TIM_Base_Start+0x9a>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077bc:	d011      	beq.n	80077e2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f042 0201 	orr.w	r2, r2, #1
 80077cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ce:	e008      	b.n	80077e2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0201 	orr.w	r2, r2, #1
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	e000      	b.n	80077e4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	40012c00 	.word	0x40012c00
 80077f8:	40000400 	.word	0x40000400
 80077fc:	40000800 	.word	0x40000800
 8007800:	40013400 	.word	0x40013400
 8007804:	40014000 	.word	0x40014000
 8007808:	00010007 	.word	0x00010007

0800780c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b01      	cmp	r3, #1
 800781e:	d001      	beq.n	8007824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e04a      	b.n	80078ba <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2202      	movs	r2, #2
 8007828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68da      	ldr	r2, [r3, #12]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0201 	orr.w	r2, r2, #1
 800783a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a21      	ldr	r2, [pc, #132]	@ (80078c8 <HAL_TIM_Base_Start_IT+0xbc>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d018      	beq.n	8007878 <HAL_TIM_Base_Start_IT+0x6c>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800784e:	d013      	beq.n	8007878 <HAL_TIM_Base_Start_IT+0x6c>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a1d      	ldr	r2, [pc, #116]	@ (80078cc <HAL_TIM_Base_Start_IT+0xc0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d00e      	beq.n	8007878 <HAL_TIM_Base_Start_IT+0x6c>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a1c      	ldr	r2, [pc, #112]	@ (80078d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d009      	beq.n	8007878 <HAL_TIM_Base_Start_IT+0x6c>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a1a      	ldr	r2, [pc, #104]	@ (80078d4 <HAL_TIM_Base_Start_IT+0xc8>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d004      	beq.n	8007878 <HAL_TIM_Base_Start_IT+0x6c>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a19      	ldr	r2, [pc, #100]	@ (80078d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d115      	bne.n	80078a4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689a      	ldr	r2, [r3, #8]
 800787e:	4b17      	ldr	r3, [pc, #92]	@ (80078dc <HAL_TIM_Base_Start_IT+0xd0>)
 8007880:	4013      	ands	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2b06      	cmp	r3, #6
 8007888:	d015      	beq.n	80078b6 <HAL_TIM_Base_Start_IT+0xaa>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007890:	d011      	beq.n	80078b6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f042 0201 	orr.w	r2, r2, #1
 80078a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078a2:	e008      	b.n	80078b6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f042 0201 	orr.w	r2, r2, #1
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	e000      	b.n	80078b8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	40012c00 	.word	0x40012c00
 80078cc:	40000400 	.word	0x40000400
 80078d0:	40000800 	.word	0x40000800
 80078d4:	40013400 	.word	0x40013400
 80078d8:	40014000 	.word	0x40014000
 80078dc:	00010007 	.word	0x00010007

080078e0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e049      	b.n	8007986 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d106      	bne.n	800790c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7f9 fd78 	bl	80013fc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	3304      	adds	r3, #4
 800791c:	4619      	mov	r1, r3
 800791e:	4610      	mov	r0, r2
 8007920:	f000 fd28 	bl	8008374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e049      	b.n	8007a34 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d106      	bne.n	80079ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7f9 fcfb 	bl	80013b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2202      	movs	r2, #2
 80079be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	3304      	adds	r3, #4
 80079ca:	4619      	mov	r1, r3
 80079cc:	4610      	mov	r0, r2
 80079ce:	f000 fcd1 	bl	8008374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d109      	bne.n	8007a60 <HAL_TIM_PWM_Start+0x24>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	bf14      	ite	ne
 8007a58:	2301      	movne	r3, #1
 8007a5a:	2300      	moveq	r3, #0
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	e03c      	b.n	8007ada <HAL_TIM_PWM_Start+0x9e>
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	d109      	bne.n	8007a7a <HAL_TIM_PWM_Start+0x3e>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	bf14      	ite	ne
 8007a72:	2301      	movne	r3, #1
 8007a74:	2300      	moveq	r3, #0
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	e02f      	b.n	8007ada <HAL_TIM_PWM_Start+0x9e>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b08      	cmp	r3, #8
 8007a7e:	d109      	bne.n	8007a94 <HAL_TIM_PWM_Start+0x58>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	bf14      	ite	ne
 8007a8c:	2301      	movne	r3, #1
 8007a8e:	2300      	moveq	r3, #0
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	e022      	b.n	8007ada <HAL_TIM_PWM_Start+0x9e>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b0c      	cmp	r3, #12
 8007a98:	d109      	bne.n	8007aae <HAL_TIM_PWM_Start+0x72>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	bf14      	ite	ne
 8007aa6:	2301      	movne	r3, #1
 8007aa8:	2300      	moveq	r3, #0
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	e015      	b.n	8007ada <HAL_TIM_PWM_Start+0x9e>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b10      	cmp	r3, #16
 8007ab2:	d109      	bne.n	8007ac8 <HAL_TIM_PWM_Start+0x8c>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	bf14      	ite	ne
 8007ac0:	2301      	movne	r3, #1
 8007ac2:	2300      	moveq	r3, #0
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	e008      	b.n	8007ada <HAL_TIM_PWM_Start+0x9e>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	bf14      	ite	ne
 8007ad4:	2301      	movne	r3, #1
 8007ad6:	2300      	moveq	r3, #0
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e097      	b.n	8007c12 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d104      	bne.n	8007af2 <HAL_TIM_PWM_Start+0xb6>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2202      	movs	r2, #2
 8007aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007af0:	e023      	b.n	8007b3a <HAL_TIM_PWM_Start+0xfe>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b04      	cmp	r3, #4
 8007af6:	d104      	bne.n	8007b02 <HAL_TIM_PWM_Start+0xc6>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2202      	movs	r2, #2
 8007afc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b00:	e01b      	b.n	8007b3a <HAL_TIM_PWM_Start+0xfe>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d104      	bne.n	8007b12 <HAL_TIM_PWM_Start+0xd6>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b10:	e013      	b.n	8007b3a <HAL_TIM_PWM_Start+0xfe>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b0c      	cmp	r3, #12
 8007b16:	d104      	bne.n	8007b22 <HAL_TIM_PWM_Start+0xe6>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b20:	e00b      	b.n	8007b3a <HAL_TIM_PWM_Start+0xfe>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b10      	cmp	r3, #16
 8007b26:	d104      	bne.n	8007b32 <HAL_TIM_PWM_Start+0xf6>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b30:	e003      	b.n	8007b3a <HAL_TIM_PWM_Start+0xfe>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2202      	movs	r2, #2
 8007b36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 ffa8 	bl	8008a98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a33      	ldr	r2, [pc, #204]	@ (8007c1c <HAL_TIM_PWM_Start+0x1e0>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d013      	beq.n	8007b7a <HAL_TIM_PWM_Start+0x13e>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a32      	ldr	r2, [pc, #200]	@ (8007c20 <HAL_TIM_PWM_Start+0x1e4>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d00e      	beq.n	8007b7a <HAL_TIM_PWM_Start+0x13e>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a30      	ldr	r2, [pc, #192]	@ (8007c24 <HAL_TIM_PWM_Start+0x1e8>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d009      	beq.n	8007b7a <HAL_TIM_PWM_Start+0x13e>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a2f      	ldr	r2, [pc, #188]	@ (8007c28 <HAL_TIM_PWM_Start+0x1ec>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d004      	beq.n	8007b7a <HAL_TIM_PWM_Start+0x13e>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a2d      	ldr	r2, [pc, #180]	@ (8007c2c <HAL_TIM_PWM_Start+0x1f0>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d101      	bne.n	8007b7e <HAL_TIM_PWM_Start+0x142>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e000      	b.n	8007b80 <HAL_TIM_PWM_Start+0x144>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d007      	beq.n	8007b94 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b92:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a20      	ldr	r2, [pc, #128]	@ (8007c1c <HAL_TIM_PWM_Start+0x1e0>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d018      	beq.n	8007bd0 <HAL_TIM_PWM_Start+0x194>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ba6:	d013      	beq.n	8007bd0 <HAL_TIM_PWM_Start+0x194>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a20      	ldr	r2, [pc, #128]	@ (8007c30 <HAL_TIM_PWM_Start+0x1f4>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d00e      	beq.n	8007bd0 <HAL_TIM_PWM_Start+0x194>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8007c34 <HAL_TIM_PWM_Start+0x1f8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d009      	beq.n	8007bd0 <HAL_TIM_PWM_Start+0x194>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a17      	ldr	r2, [pc, #92]	@ (8007c20 <HAL_TIM_PWM_Start+0x1e4>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d004      	beq.n	8007bd0 <HAL_TIM_PWM_Start+0x194>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a16      	ldr	r2, [pc, #88]	@ (8007c24 <HAL_TIM_PWM_Start+0x1e8>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d115      	bne.n	8007bfc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689a      	ldr	r2, [r3, #8]
 8007bd6:	4b18      	ldr	r3, [pc, #96]	@ (8007c38 <HAL_TIM_PWM_Start+0x1fc>)
 8007bd8:	4013      	ands	r3, r2
 8007bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2b06      	cmp	r3, #6
 8007be0:	d015      	beq.n	8007c0e <HAL_TIM_PWM_Start+0x1d2>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007be8:	d011      	beq.n	8007c0e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f042 0201 	orr.w	r2, r2, #1
 8007bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bfa:	e008      	b.n	8007c0e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f042 0201 	orr.w	r2, r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	e000      	b.n	8007c10 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	40012c00 	.word	0x40012c00
 8007c20:	40013400 	.word	0x40013400
 8007c24:	40014000 	.word	0x40014000
 8007c28:	40014400 	.word	0x40014400
 8007c2c:	40014800 	.word	0x40014800
 8007c30:	40000400 	.word	0x40000400
 8007c34:	40000800 	.word	0x40000800
 8007c38:	00010007 	.word	0x00010007

08007c3c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 ff22 	bl	8008a98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a3e      	ldr	r2, [pc, #248]	@ (8007d54 <HAL_TIM_PWM_Stop+0x118>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d013      	beq.n	8007c86 <HAL_TIM_PWM_Stop+0x4a>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a3d      	ldr	r2, [pc, #244]	@ (8007d58 <HAL_TIM_PWM_Stop+0x11c>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d00e      	beq.n	8007c86 <HAL_TIM_PWM_Stop+0x4a>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a3b      	ldr	r2, [pc, #236]	@ (8007d5c <HAL_TIM_PWM_Stop+0x120>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d009      	beq.n	8007c86 <HAL_TIM_PWM_Stop+0x4a>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a3a      	ldr	r2, [pc, #232]	@ (8007d60 <HAL_TIM_PWM_Stop+0x124>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d004      	beq.n	8007c86 <HAL_TIM_PWM_Stop+0x4a>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a38      	ldr	r2, [pc, #224]	@ (8007d64 <HAL_TIM_PWM_Stop+0x128>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d101      	bne.n	8007c8a <HAL_TIM_PWM_Stop+0x4e>
 8007c86:	2301      	movs	r3, #1
 8007c88:	e000      	b.n	8007c8c <HAL_TIM_PWM_Stop+0x50>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d017      	beq.n	8007cc0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6a1a      	ldr	r2, [r3, #32]
 8007c96:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10f      	bne.n	8007cc0 <HAL_TIM_PWM_Stop+0x84>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6a1a      	ldr	r2, [r3, #32]
 8007ca6:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007caa:	4013      	ands	r3, r2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d107      	bne.n	8007cc0 <HAL_TIM_PWM_Stop+0x84>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007cbe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6a1a      	ldr	r2, [r3, #32]
 8007cc6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007cca:	4013      	ands	r3, r2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10f      	bne.n	8007cf0 <HAL_TIM_PWM_Stop+0xb4>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6a1a      	ldr	r2, [r3, #32]
 8007cd6:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007cda:	4013      	ands	r3, r2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d107      	bne.n	8007cf0 <HAL_TIM_PWM_Stop+0xb4>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f022 0201 	bic.w	r2, r2, #1
 8007cee:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d104      	bne.n	8007d00 <HAL_TIM_PWM_Stop+0xc4>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cfe:	e023      	b.n	8007d48 <HAL_TIM_PWM_Stop+0x10c>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2b04      	cmp	r3, #4
 8007d04:	d104      	bne.n	8007d10 <HAL_TIM_PWM_Stop+0xd4>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d0e:	e01b      	b.n	8007d48 <HAL_TIM_PWM_Stop+0x10c>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b08      	cmp	r3, #8
 8007d14:	d104      	bne.n	8007d20 <HAL_TIM_PWM_Stop+0xe4>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d1e:	e013      	b.n	8007d48 <HAL_TIM_PWM_Stop+0x10c>
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	2b0c      	cmp	r3, #12
 8007d24:	d104      	bne.n	8007d30 <HAL_TIM_PWM_Stop+0xf4>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d2e:	e00b      	b.n	8007d48 <HAL_TIM_PWM_Stop+0x10c>
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	2b10      	cmp	r3, #16
 8007d34:	d104      	bne.n	8007d40 <HAL_TIM_PWM_Stop+0x104>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d3e:	e003      	b.n	8007d48 <HAL_TIM_PWM_Stop+0x10c>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	40012c00 	.word	0x40012c00
 8007d58:	40013400 	.word	0x40013400
 8007d5c:	40014000 	.word	0x40014000
 8007d60:	40014400 	.word	0x40014400
 8007d64:	40014800 	.word	0x40014800

08007d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d020      	beq.n	8007dcc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f003 0302 	and.w	r3, r3, #2
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d01b      	beq.n	8007dcc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f06f 0202 	mvn.w	r2, #2
 8007d9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fac0 	bl	8008338 <HAL_TIM_IC_CaptureCallback>
 8007db8:	e005      	b.n	8007dc6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fab2 	bl	8008324 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fac3 	bl	800834c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	f003 0304 	and.w	r3, r3, #4
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d020      	beq.n	8007e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d01b      	beq.n	8007e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f06f 0204 	mvn.w	r2, #4
 8007de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2202      	movs	r2, #2
 8007dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fa9a 	bl	8008338 <HAL_TIM_IC_CaptureCallback>
 8007e04:	e005      	b.n	8007e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fa8c 	bl	8008324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fa9d 	bl	800834c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	f003 0308 	and.w	r3, r3, #8
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d020      	beq.n	8007e64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f003 0308 	and.w	r3, r3, #8
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01b      	beq.n	8007e64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f06f 0208 	mvn.w	r2, #8
 8007e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2204      	movs	r2, #4
 8007e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	f003 0303 	and.w	r3, r3, #3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d003      	beq.n	8007e52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fa74 	bl	8008338 <HAL_TIM_IC_CaptureCallback>
 8007e50:	e005      	b.n	8007e5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fa66 	bl	8008324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fa77 	bl	800834c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f003 0310 	and.w	r3, r3, #16
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d020      	beq.n	8007eb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f003 0310 	and.w	r3, r3, #16
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d01b      	beq.n	8007eb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0210 	mvn.w	r2, #16
 8007e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2208      	movs	r2, #8
 8007e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fa4e 	bl	8008338 <HAL_TIM_IC_CaptureCallback>
 8007e9c:	e005      	b.n	8007eaa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fa40 	bl	8008324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fa51 	bl	800834c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00c      	beq.n	8007ed4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d007      	beq.n	8007ed4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f06f 0201 	mvn.w	r2, #1
 8007ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7f8 ffd6 	bl	8000e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d104      	bne.n	8007ee8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00c      	beq.n	8007f02 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d007      	beq.n	8007f02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 f82e 	bl	8008f5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00c      	beq.n	8007f26 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d007      	beq.n	8007f26 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f001 f826 	bl	8008f72 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00c      	beq.n	8007f4a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d007      	beq.n	8007f4a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fa0b 	bl	8008360 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f003 0320 	and.w	r3, r3, #32
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00c      	beq.n	8007f6e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f003 0320 	and.w	r3, r3, #32
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d007      	beq.n	8007f6e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f06f 0220 	mvn.w	r2, #32
 8007f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 ffee 	bl	8008f4a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00c      	beq.n	8007f92 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d007      	beq.n	8007f92 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fffa 	bl	8008f86 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00c      	beq.n	8007fb6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d007      	beq.n	8007fb6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fff2 	bl	8008f9a <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00c      	beq.n	8007fda <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d007      	beq.n	8007fda <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 ffea 	bl	8008fae <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00c      	beq.n	8007ffe <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d007      	beq.n	8007ffe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 ffe2 	bl	8008fc2 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ffe:	bf00      	nop
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
	...

08008008 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800801e:	2b01      	cmp	r3, #1
 8008020:	d101      	bne.n	8008026 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008022:	2302      	movs	r3, #2
 8008024:	e066      	b.n	80080f4 <HAL_TIM_OC_ConfigChannel+0xec>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2b14      	cmp	r3, #20
 8008032:	d857      	bhi.n	80080e4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008034:	a201      	add	r2, pc, #4	@ (adr r2, 800803c <HAL_TIM_OC_ConfigChannel+0x34>)
 8008036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803a:	bf00      	nop
 800803c:	08008091 	.word	0x08008091
 8008040:	080080e5 	.word	0x080080e5
 8008044:	080080e5 	.word	0x080080e5
 8008048:	080080e5 	.word	0x080080e5
 800804c:	0800809f 	.word	0x0800809f
 8008050:	080080e5 	.word	0x080080e5
 8008054:	080080e5 	.word	0x080080e5
 8008058:	080080e5 	.word	0x080080e5
 800805c:	080080ad 	.word	0x080080ad
 8008060:	080080e5 	.word	0x080080e5
 8008064:	080080e5 	.word	0x080080e5
 8008068:	080080e5 	.word	0x080080e5
 800806c:	080080bb 	.word	0x080080bb
 8008070:	080080e5 	.word	0x080080e5
 8008074:	080080e5 	.word	0x080080e5
 8008078:	080080e5 	.word	0x080080e5
 800807c:	080080c9 	.word	0x080080c9
 8008080:	080080e5 	.word	0x080080e5
 8008084:	080080e5 	.word	0x080080e5
 8008088:	080080e5 	.word	0x080080e5
 800808c:	080080d7 	.word	0x080080d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68b9      	ldr	r1, [r7, #8]
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fa08 	bl	80084ac <TIM_OC1_SetConfig>
      break;
 800809c:	e025      	b.n	80080ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68b9      	ldr	r1, [r7, #8]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f000 fa91 	bl	80085cc <TIM_OC2_SetConfig>
      break;
 80080aa:	e01e      	b.n	80080ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68b9      	ldr	r1, [r7, #8]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 fb14 	bl	80086e0 <TIM_OC3_SetConfig>
      break;
 80080b8:	e017      	b.n	80080ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68b9      	ldr	r1, [r7, #8]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 fb95 	bl	80087f0 <TIM_OC4_SetConfig>
      break;
 80080c6:	e010      	b.n	80080ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68b9      	ldr	r1, [r7, #8]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 fc18 	bl	8008904 <TIM_OC5_SetConfig>
      break;
 80080d4:	e009      	b.n	80080ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68b9      	ldr	r1, [r7, #8]
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fc75 	bl	80089cc <TIM_OC6_SetConfig>
      break;
 80080e2:	e002      	b.n	80080ea <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	75fb      	strb	r3, [r7, #23]
      break;
 80080e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008112:	2b01      	cmp	r3, #1
 8008114:	d101      	bne.n	800811a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008116:	2302      	movs	r3, #2
 8008118:	e0ff      	b.n	800831a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b14      	cmp	r3, #20
 8008126:	f200 80f0 	bhi.w	800830a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800812a:	a201      	add	r2, pc, #4	@ (adr r2, 8008130 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800812c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008130:	08008185 	.word	0x08008185
 8008134:	0800830b 	.word	0x0800830b
 8008138:	0800830b 	.word	0x0800830b
 800813c:	0800830b 	.word	0x0800830b
 8008140:	080081c5 	.word	0x080081c5
 8008144:	0800830b 	.word	0x0800830b
 8008148:	0800830b 	.word	0x0800830b
 800814c:	0800830b 	.word	0x0800830b
 8008150:	08008207 	.word	0x08008207
 8008154:	0800830b 	.word	0x0800830b
 8008158:	0800830b 	.word	0x0800830b
 800815c:	0800830b 	.word	0x0800830b
 8008160:	08008247 	.word	0x08008247
 8008164:	0800830b 	.word	0x0800830b
 8008168:	0800830b 	.word	0x0800830b
 800816c:	0800830b 	.word	0x0800830b
 8008170:	08008289 	.word	0x08008289
 8008174:	0800830b 	.word	0x0800830b
 8008178:	0800830b 	.word	0x0800830b
 800817c:	0800830b 	.word	0x0800830b
 8008180:	080082c9 	.word	0x080082c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68b9      	ldr	r1, [r7, #8]
 800818a:	4618      	mov	r0, r3
 800818c:	f000 f98e 	bl	80084ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	699a      	ldr	r2, [r3, #24]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 0208 	orr.w	r2, r2, #8
 800819e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	699a      	ldr	r2, [r3, #24]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f022 0204 	bic.w	r2, r2, #4
 80081ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6999      	ldr	r1, [r3, #24]
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	691a      	ldr	r2, [r3, #16]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	619a      	str	r2, [r3, #24]
      break;
 80081c2:	e0a5      	b.n	8008310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68b9      	ldr	r1, [r7, #8]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 f9fe 	bl	80085cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	699a      	ldr	r2, [r3, #24]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	699a      	ldr	r2, [r3, #24]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6999      	ldr	r1, [r3, #24]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	021a      	lsls	r2, r3, #8
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	430a      	orrs	r2, r1
 8008202:	619a      	str	r2, [r3, #24]
      break;
 8008204:	e084      	b.n	8008310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68b9      	ldr	r1, [r7, #8]
 800820c:	4618      	mov	r0, r3
 800820e:	f000 fa67 	bl	80086e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	69da      	ldr	r2, [r3, #28]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f042 0208 	orr.w	r2, r2, #8
 8008220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	69da      	ldr	r2, [r3, #28]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0204 	bic.w	r2, r2, #4
 8008230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	69d9      	ldr	r1, [r3, #28]
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	691a      	ldr	r2, [r3, #16]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	430a      	orrs	r2, r1
 8008242:	61da      	str	r2, [r3, #28]
      break;
 8008244:	e064      	b.n	8008310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68b9      	ldr	r1, [r7, #8]
 800824c:	4618      	mov	r0, r3
 800824e:	f000 facf 	bl	80087f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	69da      	ldr	r2, [r3, #28]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	69da      	ldr	r2, [r3, #28]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	69d9      	ldr	r1, [r3, #28]
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	021a      	lsls	r2, r3, #8
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	430a      	orrs	r2, r1
 8008284:	61da      	str	r2, [r3, #28]
      break;
 8008286:	e043      	b.n	8008310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68b9      	ldr	r1, [r7, #8]
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fb38 	bl	8008904 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f042 0208 	orr.w	r2, r2, #8
 80082a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f022 0204 	bic.w	r2, r2, #4
 80082b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	691a      	ldr	r2, [r3, #16]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80082c6:	e023      	b.n	8008310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68b9      	ldr	r1, [r7, #8]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 fb7c 	bl	80089cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	021a      	lsls	r2, r3, #8
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008308:	e002      	b.n	8008310 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	75fb      	strb	r3, [r7, #23]
      break;
 800830e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008318:	7dfb      	ldrb	r3, [r7, #23]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop

08008324 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a42      	ldr	r2, [pc, #264]	@ (8008490 <TIM_Base_SetConfig+0x11c>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d00f      	beq.n	80083ac <TIM_Base_SetConfig+0x38>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008392:	d00b      	beq.n	80083ac <TIM_Base_SetConfig+0x38>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a3f      	ldr	r2, [pc, #252]	@ (8008494 <TIM_Base_SetConfig+0x120>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d007      	beq.n	80083ac <TIM_Base_SetConfig+0x38>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a3e      	ldr	r2, [pc, #248]	@ (8008498 <TIM_Base_SetConfig+0x124>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d003      	beq.n	80083ac <TIM_Base_SetConfig+0x38>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a3d      	ldr	r2, [pc, #244]	@ (800849c <TIM_Base_SetConfig+0x128>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d108      	bne.n	80083be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a33      	ldr	r2, [pc, #204]	@ (8008490 <TIM_Base_SetConfig+0x11c>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d01b      	beq.n	80083fe <TIM_Base_SetConfig+0x8a>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083cc:	d017      	beq.n	80083fe <TIM_Base_SetConfig+0x8a>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a30      	ldr	r2, [pc, #192]	@ (8008494 <TIM_Base_SetConfig+0x120>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d013      	beq.n	80083fe <TIM_Base_SetConfig+0x8a>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a2f      	ldr	r2, [pc, #188]	@ (8008498 <TIM_Base_SetConfig+0x124>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d00f      	beq.n	80083fe <TIM_Base_SetConfig+0x8a>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a2e      	ldr	r2, [pc, #184]	@ (800849c <TIM_Base_SetConfig+0x128>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d00b      	beq.n	80083fe <TIM_Base_SetConfig+0x8a>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a2d      	ldr	r2, [pc, #180]	@ (80084a0 <TIM_Base_SetConfig+0x12c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d007      	beq.n	80083fe <TIM_Base_SetConfig+0x8a>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a2c      	ldr	r2, [pc, #176]	@ (80084a4 <TIM_Base_SetConfig+0x130>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d003      	beq.n	80083fe <TIM_Base_SetConfig+0x8a>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a2b      	ldr	r2, [pc, #172]	@ (80084a8 <TIM_Base_SetConfig+0x134>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d108      	bne.n	8008410 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	4313      	orrs	r3, r2
 800840e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	4313      	orrs	r3, r2
 800841c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	689a      	ldr	r2, [r3, #8]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a16      	ldr	r2, [pc, #88]	@ (8008490 <TIM_Base_SetConfig+0x11c>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d00f      	beq.n	800845c <TIM_Base_SetConfig+0xe8>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a17      	ldr	r2, [pc, #92]	@ (800849c <TIM_Base_SetConfig+0x128>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d00b      	beq.n	800845c <TIM_Base_SetConfig+0xe8>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a16      	ldr	r2, [pc, #88]	@ (80084a0 <TIM_Base_SetConfig+0x12c>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d007      	beq.n	800845c <TIM_Base_SetConfig+0xe8>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a15      	ldr	r2, [pc, #84]	@ (80084a4 <TIM_Base_SetConfig+0x130>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d003      	beq.n	800845c <TIM_Base_SetConfig+0xe8>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a14      	ldr	r2, [pc, #80]	@ (80084a8 <TIM_Base_SetConfig+0x134>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d103      	bne.n	8008464 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	691a      	ldr	r2, [r3, #16]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	2b01      	cmp	r3, #1
 8008474:	d105      	bne.n	8008482 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	f023 0201 	bic.w	r2, r3, #1
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	611a      	str	r2, [r3, #16]
  }
}
 8008482:	bf00      	nop
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	40012c00 	.word	0x40012c00
 8008494:	40000400 	.word	0x40000400
 8008498:	40000800 	.word	0x40000800
 800849c:	40013400 	.word	0x40013400
 80084a0:	40014000 	.word	0x40014000
 80084a4:	40014400 	.word	0x40014400
 80084a8:	40014800 	.word	0x40014800

080084ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b087      	sub	sp, #28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a1b      	ldr	r3, [r3, #32]
 80084c0:	f023 0201 	bic.w	r2, r3, #1
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f023 0303 	bic.w	r3, r3, #3
 80084e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f023 0302 	bic.w	r3, r3, #2
 80084f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	4313      	orrs	r3, r2
 8008502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a2c      	ldr	r2, [pc, #176]	@ (80085b8 <TIM_OC1_SetConfig+0x10c>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d00f      	beq.n	800852c <TIM_OC1_SetConfig+0x80>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a2b      	ldr	r2, [pc, #172]	@ (80085bc <TIM_OC1_SetConfig+0x110>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d00b      	beq.n	800852c <TIM_OC1_SetConfig+0x80>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a2a      	ldr	r2, [pc, #168]	@ (80085c0 <TIM_OC1_SetConfig+0x114>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d007      	beq.n	800852c <TIM_OC1_SetConfig+0x80>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a29      	ldr	r2, [pc, #164]	@ (80085c4 <TIM_OC1_SetConfig+0x118>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d003      	beq.n	800852c <TIM_OC1_SetConfig+0x80>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a28      	ldr	r2, [pc, #160]	@ (80085c8 <TIM_OC1_SetConfig+0x11c>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d10c      	bne.n	8008546 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	f023 0308 	bic.w	r3, r3, #8
 8008532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	4313      	orrs	r3, r2
 800853c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f023 0304 	bic.w	r3, r3, #4
 8008544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a1b      	ldr	r2, [pc, #108]	@ (80085b8 <TIM_OC1_SetConfig+0x10c>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d00f      	beq.n	800856e <TIM_OC1_SetConfig+0xc2>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a1a      	ldr	r2, [pc, #104]	@ (80085bc <TIM_OC1_SetConfig+0x110>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d00b      	beq.n	800856e <TIM_OC1_SetConfig+0xc2>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a19      	ldr	r2, [pc, #100]	@ (80085c0 <TIM_OC1_SetConfig+0x114>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d007      	beq.n	800856e <TIM_OC1_SetConfig+0xc2>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a18      	ldr	r2, [pc, #96]	@ (80085c4 <TIM_OC1_SetConfig+0x118>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d003      	beq.n	800856e <TIM_OC1_SetConfig+0xc2>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a17      	ldr	r2, [pc, #92]	@ (80085c8 <TIM_OC1_SetConfig+0x11c>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d111      	bne.n	8008592 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800857c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	693a      	ldr	r2, [r7, #16]
 8008584:	4313      	orrs	r3, r2
 8008586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	4313      	orrs	r3, r2
 8008590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	685a      	ldr	r2, [r3, #4]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	621a      	str	r2, [r3, #32]
}
 80085ac:	bf00      	nop
 80085ae:	371c      	adds	r7, #28
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	40012c00 	.word	0x40012c00
 80085bc:	40013400 	.word	0x40013400
 80085c0:	40014000 	.word	0x40014000
 80085c4:	40014400 	.word	0x40014400
 80085c8:	40014800 	.word	0x40014800

080085cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a1b      	ldr	r3, [r3, #32]
 80085e0:	f023 0210 	bic.w	r2, r3, #16
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	021b      	lsls	r3, r3, #8
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	4313      	orrs	r3, r2
 8008612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	f023 0320 	bic.w	r3, r3, #32
 800861a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	011b      	lsls	r3, r3, #4
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	4313      	orrs	r3, r2
 8008626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a28      	ldr	r2, [pc, #160]	@ (80086cc <TIM_OC2_SetConfig+0x100>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d003      	beq.n	8008638 <TIM_OC2_SetConfig+0x6c>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a27      	ldr	r2, [pc, #156]	@ (80086d0 <TIM_OC2_SetConfig+0x104>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d10d      	bne.n	8008654 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800863e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	011b      	lsls	r3, r3, #4
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4313      	orrs	r3, r2
 800864a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008652:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a1d      	ldr	r2, [pc, #116]	@ (80086cc <TIM_OC2_SetConfig+0x100>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d00f      	beq.n	800867c <TIM_OC2_SetConfig+0xb0>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a1c      	ldr	r2, [pc, #112]	@ (80086d0 <TIM_OC2_SetConfig+0x104>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d00b      	beq.n	800867c <TIM_OC2_SetConfig+0xb0>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a1b      	ldr	r2, [pc, #108]	@ (80086d4 <TIM_OC2_SetConfig+0x108>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d007      	beq.n	800867c <TIM_OC2_SetConfig+0xb0>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a1a      	ldr	r2, [pc, #104]	@ (80086d8 <TIM_OC2_SetConfig+0x10c>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d003      	beq.n	800867c <TIM_OC2_SetConfig+0xb0>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a19      	ldr	r2, [pc, #100]	@ (80086dc <TIM_OC2_SetConfig+0x110>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d113      	bne.n	80086a4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800868a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	695b      	ldr	r3, [r3, #20]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	4313      	orrs	r3, r2
 8008696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	697a      	ldr	r2, [r7, #20]
 80086bc:	621a      	str	r2, [r3, #32]
}
 80086be:	bf00      	nop
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	40012c00 	.word	0x40012c00
 80086d0:	40013400 	.word	0x40013400
 80086d4:	40014000 	.word	0x40014000
 80086d8:	40014400 	.word	0x40014400
 80086dc:	40014800 	.word	0x40014800

080086e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a1b      	ldr	r3, [r3, #32]
 80086f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800870e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 0303 	bic.w	r3, r3, #3
 800871a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	4313      	orrs	r3, r2
 8008724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800872c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	021b      	lsls	r3, r3, #8
 8008734:	697a      	ldr	r2, [r7, #20]
 8008736:	4313      	orrs	r3, r2
 8008738:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a27      	ldr	r2, [pc, #156]	@ (80087dc <TIM_OC3_SetConfig+0xfc>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d003      	beq.n	800874a <TIM_OC3_SetConfig+0x6a>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a26      	ldr	r2, [pc, #152]	@ (80087e0 <TIM_OC3_SetConfig+0x100>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d10d      	bne.n	8008766 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008750:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	021b      	lsls	r3, r3, #8
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	4313      	orrs	r3, r2
 800875c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a1c      	ldr	r2, [pc, #112]	@ (80087dc <TIM_OC3_SetConfig+0xfc>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d00f      	beq.n	800878e <TIM_OC3_SetConfig+0xae>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a1b      	ldr	r2, [pc, #108]	@ (80087e0 <TIM_OC3_SetConfig+0x100>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d00b      	beq.n	800878e <TIM_OC3_SetConfig+0xae>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a1a      	ldr	r2, [pc, #104]	@ (80087e4 <TIM_OC3_SetConfig+0x104>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d007      	beq.n	800878e <TIM_OC3_SetConfig+0xae>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a19      	ldr	r2, [pc, #100]	@ (80087e8 <TIM_OC3_SetConfig+0x108>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d003      	beq.n	800878e <TIM_OC3_SetConfig+0xae>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a18      	ldr	r2, [pc, #96]	@ (80087ec <TIM_OC3_SetConfig+0x10c>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d113      	bne.n	80087b6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800879c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	011b      	lsls	r3, r3, #4
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	011b      	lsls	r3, r3, #4
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	685a      	ldr	r2, [r3, #4]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	621a      	str	r2, [r3, #32]
}
 80087d0:	bf00      	nop
 80087d2:	371c      	adds	r7, #28
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr
 80087dc:	40012c00 	.word	0x40012c00
 80087e0:	40013400 	.word	0x40013400
 80087e4:	40014000 	.word	0x40014000
 80087e8:	40014400 	.word	0x40014400
 80087ec:	40014800 	.word	0x40014800

080087f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b087      	sub	sp, #28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a1b      	ldr	r3, [r3, #32]
 8008804:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800881e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800882a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	021b      	lsls	r3, r3, #8
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	4313      	orrs	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800883e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	031b      	lsls	r3, r3, #12
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	4313      	orrs	r3, r2
 800884a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a28      	ldr	r2, [pc, #160]	@ (80088f0 <TIM_OC4_SetConfig+0x100>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d003      	beq.n	800885c <TIM_OC4_SetConfig+0x6c>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a27      	ldr	r2, [pc, #156]	@ (80088f4 <TIM_OC4_SetConfig+0x104>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d10d      	bne.n	8008878 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	031b      	lsls	r3, r3, #12
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	4313      	orrs	r3, r2
 800886e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008876:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a1d      	ldr	r2, [pc, #116]	@ (80088f0 <TIM_OC4_SetConfig+0x100>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d00f      	beq.n	80088a0 <TIM_OC4_SetConfig+0xb0>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a1c      	ldr	r2, [pc, #112]	@ (80088f4 <TIM_OC4_SetConfig+0x104>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d00b      	beq.n	80088a0 <TIM_OC4_SetConfig+0xb0>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a1b      	ldr	r2, [pc, #108]	@ (80088f8 <TIM_OC4_SetConfig+0x108>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d007      	beq.n	80088a0 <TIM_OC4_SetConfig+0xb0>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a1a      	ldr	r2, [pc, #104]	@ (80088fc <TIM_OC4_SetConfig+0x10c>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d003      	beq.n	80088a0 <TIM_OC4_SetConfig+0xb0>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a19      	ldr	r2, [pc, #100]	@ (8008900 <TIM_OC4_SetConfig+0x110>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d113      	bne.n	80088c8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80088ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	695b      	ldr	r3, [r3, #20]
 80088b4:	019b      	lsls	r3, r3, #6
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	019b      	lsls	r3, r3, #6
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	685a      	ldr	r2, [r3, #4]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	621a      	str	r2, [r3, #32]
}
 80088e2:	bf00      	nop
 80088e4:	371c      	adds	r7, #28
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	40012c00 	.word	0x40012c00
 80088f4:	40013400 	.word	0x40013400
 80088f8:	40014000 	.word	0x40014000
 80088fc:	40014400 	.word	0x40014400
 8008900:	40014800 	.word	0x40014800

08008904 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008904:	b480      	push	{r7}
 8008906:	b087      	sub	sp, #28
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a1b      	ldr	r3, [r3, #32]
 8008918:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800892a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	4313      	orrs	r3, r2
 8008940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008948:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	041b      	lsls	r3, r3, #16
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	4313      	orrs	r3, r2
 8008954:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a17      	ldr	r2, [pc, #92]	@ (80089b8 <TIM_OC5_SetConfig+0xb4>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d00f      	beq.n	800897e <TIM_OC5_SetConfig+0x7a>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a16      	ldr	r2, [pc, #88]	@ (80089bc <TIM_OC5_SetConfig+0xb8>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d00b      	beq.n	800897e <TIM_OC5_SetConfig+0x7a>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a15      	ldr	r2, [pc, #84]	@ (80089c0 <TIM_OC5_SetConfig+0xbc>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d007      	beq.n	800897e <TIM_OC5_SetConfig+0x7a>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a14      	ldr	r2, [pc, #80]	@ (80089c4 <TIM_OC5_SetConfig+0xc0>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d003      	beq.n	800897e <TIM_OC5_SetConfig+0x7a>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a13      	ldr	r2, [pc, #76]	@ (80089c8 <TIM_OC5_SetConfig+0xc4>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d109      	bne.n	8008992 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008984:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	021b      	lsls	r3, r3, #8
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	4313      	orrs	r3, r2
 8008990:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	621a      	str	r2, [r3, #32]
}
 80089ac:	bf00      	nop
 80089ae:	371c      	adds	r7, #28
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr
 80089b8:	40012c00 	.word	0x40012c00
 80089bc:	40013400 	.word	0x40013400
 80089c0:	40014000 	.word	0x40014000
 80089c4:	40014400 	.word	0x40014400
 80089c8:	40014800 	.word	0x40014800

080089cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a1b      	ldr	r3, [r3, #32]
 80089e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80089fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	021b      	lsls	r3, r3, #8
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	051b      	lsls	r3, r3, #20
 8008a1a:	693a      	ldr	r2, [r7, #16]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a18      	ldr	r2, [pc, #96]	@ (8008a84 <TIM_OC6_SetConfig+0xb8>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d00f      	beq.n	8008a48 <TIM_OC6_SetConfig+0x7c>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a17      	ldr	r2, [pc, #92]	@ (8008a88 <TIM_OC6_SetConfig+0xbc>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d00b      	beq.n	8008a48 <TIM_OC6_SetConfig+0x7c>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a16      	ldr	r2, [pc, #88]	@ (8008a8c <TIM_OC6_SetConfig+0xc0>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d007      	beq.n	8008a48 <TIM_OC6_SetConfig+0x7c>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a15      	ldr	r2, [pc, #84]	@ (8008a90 <TIM_OC6_SetConfig+0xc4>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d003      	beq.n	8008a48 <TIM_OC6_SetConfig+0x7c>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a14      	ldr	r2, [pc, #80]	@ (8008a94 <TIM_OC6_SetConfig+0xc8>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d109      	bne.n	8008a5c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	029b      	lsls	r3, r3, #10
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	621a      	str	r2, [r3, #32]
}
 8008a76:	bf00      	nop
 8008a78:	371c      	adds	r7, #28
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	40012c00 	.word	0x40012c00
 8008a88:	40013400 	.word	0x40013400
 8008a8c:	40014000 	.word	0x40014000
 8008a90:	40014400 	.word	0x40014400
 8008a94:	40014800 	.word	0x40014800

08008a98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	f003 031f 	and.w	r3, r3, #31
 8008aaa:	2201      	movs	r2, #1
 8008aac:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6a1a      	ldr	r2, [r3, #32]
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	43db      	mvns	r3, r3
 8008aba:	401a      	ands	r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6a1a      	ldr	r2, [r3, #32]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f003 031f 	and.w	r3, r3, #31
 8008aca:	6879      	ldr	r1, [r7, #4]
 8008acc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad0:	431a      	orrs	r2, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	621a      	str	r2, [r3, #32]
}
 8008ad6:	bf00      	nop
 8008ad8:	371c      	adds	r7, #28
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
	...

08008ae4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d109      	bne.n	8008b08 <HAL_TIMEx_PWMN_Start+0x24>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	bf14      	ite	ne
 8008b00:	2301      	movne	r3, #1
 8008b02:	2300      	moveq	r3, #0
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	e022      	b.n	8008b4e <HAL_TIMEx_PWMN_Start+0x6a>
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	2b04      	cmp	r3, #4
 8008b0c:	d109      	bne.n	8008b22 <HAL_TIMEx_PWMN_Start+0x3e>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	bf14      	ite	ne
 8008b1a:	2301      	movne	r3, #1
 8008b1c:	2300      	moveq	r3, #0
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	e015      	b.n	8008b4e <HAL_TIMEx_PWMN_Start+0x6a>
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	2b08      	cmp	r3, #8
 8008b26:	d109      	bne.n	8008b3c <HAL_TIMEx_PWMN_Start+0x58>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	bf14      	ite	ne
 8008b34:	2301      	movne	r3, #1
 8008b36:	2300      	moveq	r3, #0
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	e008      	b.n	8008b4e <HAL_TIMEx_PWMN_Start+0x6a>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	bf14      	ite	ne
 8008b48:	2301      	movne	r3, #1
 8008b4a:	2300      	moveq	r3, #0
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e069      	b.n	8008c2a <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d104      	bne.n	8008b66 <HAL_TIMEx_PWMN_Start+0x82>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b64:	e013      	b.n	8008b8e <HAL_TIMEx_PWMN_Start+0xaa>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b04      	cmp	r3, #4
 8008b6a:	d104      	bne.n	8008b76 <HAL_TIMEx_PWMN_Start+0x92>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b74:	e00b      	b.n	8008b8e <HAL_TIMEx_PWMN_Start+0xaa>
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	d104      	bne.n	8008b86 <HAL_TIMEx_PWMN_Start+0xa2>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2202      	movs	r2, #2
 8008b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008b84:	e003      	b.n	8008b8e <HAL_TIMEx_PWMN_Start+0xaa>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2202      	movs	r2, #2
 8008b8a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2204      	movs	r2, #4
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 fa1d 	bl	8008fd6 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008baa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a20      	ldr	r2, [pc, #128]	@ (8008c34 <HAL_TIMEx_PWMN_Start+0x150>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d018      	beq.n	8008be8 <HAL_TIMEx_PWMN_Start+0x104>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bbe:	d013      	beq.n	8008be8 <HAL_TIMEx_PWMN_Start+0x104>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8008c38 <HAL_TIMEx_PWMN_Start+0x154>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d00e      	beq.n	8008be8 <HAL_TIMEx_PWMN_Start+0x104>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a1b      	ldr	r2, [pc, #108]	@ (8008c3c <HAL_TIMEx_PWMN_Start+0x158>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d009      	beq.n	8008be8 <HAL_TIMEx_PWMN_Start+0x104>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a19      	ldr	r2, [pc, #100]	@ (8008c40 <HAL_TIMEx_PWMN_Start+0x15c>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d004      	beq.n	8008be8 <HAL_TIMEx_PWMN_Start+0x104>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a18      	ldr	r2, [pc, #96]	@ (8008c44 <HAL_TIMEx_PWMN_Start+0x160>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d115      	bne.n	8008c14 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689a      	ldr	r2, [r3, #8]
 8008bee:	4b16      	ldr	r3, [pc, #88]	@ (8008c48 <HAL_TIMEx_PWMN_Start+0x164>)
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2b06      	cmp	r3, #6
 8008bf8:	d015      	beq.n	8008c26 <HAL_TIMEx_PWMN_Start+0x142>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c00:	d011      	beq.n	8008c26 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f042 0201 	orr.w	r2, r2, #1
 8008c10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c12:	e008      	b.n	8008c26 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f042 0201 	orr.w	r2, r2, #1
 8008c22:	601a      	str	r2, [r3, #0]
 8008c24:	e000      	b.n	8008c28 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	40012c00 	.word	0x40012c00
 8008c38:	40000400 	.word	0x40000400
 8008c3c:	40000800 	.word	0x40000800
 8008c40:	40013400 	.word	0x40013400
 8008c44:	40014000 	.word	0x40014000
 8008c48:	00010007 	.word	0x00010007

08008c4c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 f9b9 	bl	8008fd6 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6a1a      	ldr	r2, [r3, #32]
 8008c6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008c6e:	4013      	ands	r3, r2
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10f      	bne.n	8008c94 <HAL_TIMEx_PWMN_Stop+0x48>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6a1a      	ldr	r2, [r3, #32]
 8008c7a:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008c7e:	4013      	ands	r3, r2
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d107      	bne.n	8008c94 <HAL_TIMEx_PWMN_Stop+0x48>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008c92:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	6a1a      	ldr	r2, [r3, #32]
 8008c9a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10f      	bne.n	8008cc4 <HAL_TIMEx_PWMN_Stop+0x78>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6a1a      	ldr	r2, [r3, #32]
 8008caa:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008cae:	4013      	ands	r3, r2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d107      	bne.n	8008cc4 <HAL_TIMEx_PWMN_Stop+0x78>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f022 0201 	bic.w	r2, r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d104      	bne.n	8008cd4 <HAL_TIMEx_PWMN_Stop+0x88>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cd2:	e013      	b.n	8008cfc <HAL_TIMEx_PWMN_Stop+0xb0>
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	2b04      	cmp	r3, #4
 8008cd8:	d104      	bne.n	8008ce4 <HAL_TIMEx_PWMN_Stop+0x98>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ce2:	e00b      	b.n	8008cfc <HAL_TIMEx_PWMN_Stop+0xb0>
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2b08      	cmp	r3, #8
 8008ce8:	d104      	bne.n	8008cf4 <HAL_TIMEx_PWMN_Stop+0xa8>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008cf2:	e003      	b.n	8008cfc <HAL_TIMEx_PWMN_Stop+0xb0>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
	...

08008d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d101      	bne.n	8008d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d1c:	2302      	movs	r3, #2
 8008d1e:	e065      	b.n	8008dec <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a2c      	ldr	r2, [pc, #176]	@ (8008df8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d004      	beq.n	8008d54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a2b      	ldr	r2, [pc, #172]	@ (8008dfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d108      	bne.n	8008d66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008d5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008d6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a1b      	ldr	r2, [pc, #108]	@ (8008df8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d018      	beq.n	8008dc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d96:	d013      	beq.n	8008dc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a18      	ldr	r2, [pc, #96]	@ (8008e00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d00e      	beq.n	8008dc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a17      	ldr	r2, [pc, #92]	@ (8008e04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d009      	beq.n	8008dc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a12      	ldr	r2, [pc, #72]	@ (8008dfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d004      	beq.n	8008dc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a13      	ldr	r2, [pc, #76]	@ (8008e08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d10c      	bne.n	8008dda <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008dc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr
 8008df8:	40012c00 	.word	0x40012c00
 8008dfc:	40013400 	.word	0x40013400
 8008e00:	40000400 	.word	0x40000400
 8008e04:	40000800 	.word	0x40000800
 8008e08:	40014000 	.word	0x40014000

08008e0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e16:	2300      	movs	r3, #0
 8008e18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d101      	bne.n	8008e28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e24:	2302      	movs	r3, #2
 8008e26:	e073      	b.n	8008f10 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	695b      	ldr	r3, [r3, #20]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	041b      	lsls	r3, r3, #16
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	69db      	ldr	r3, [r3, #28]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a19      	ldr	r2, [pc, #100]	@ (8008f1c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d004      	beq.n	8008ec4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a18      	ldr	r2, [pc, #96]	@ (8008f20 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d11c      	bne.n	8008efe <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ece:	051b      	lsls	r3, r3, #20
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eec:	4313      	orrs	r3, r2
 8008eee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008efa:	4313      	orrs	r3, r2
 8008efc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	40012c00 	.word	0x40012c00
 8008f20:	40013400 	.word	0x40013400

08008f24 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008f3a:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	370c      	adds	r7, #12
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	b083      	sub	sp, #12
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f52:	bf00      	nop
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b083      	sub	sp, #12
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f66:	bf00      	nop
 8008f68:	370c      	adds	r7, #12
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b083      	sub	sp, #12
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f7a:	bf00      	nop
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008f86:	b480      	push	{r7}
 8008f88:	b083      	sub	sp, #12
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008f8e:	bf00      	nop
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr

08008f9a <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008f9a:	b480      	push	{r7}
 8008f9c:	b083      	sub	sp, #12
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008fa2:	bf00      	nop
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b083      	sub	sp, #12
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008fb6:	bf00      	nop
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008fc2:	b480      	push	{r7}
 8008fc4:	b083      	sub	sp, #12
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008fca:	bf00      	nop
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b087      	sub	sp, #28
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	f003 030f 	and.w	r3, r3, #15
 8008fe8:	2204      	movs	r2, #4
 8008fea:	fa02 f303 	lsl.w	r3, r2, r3
 8008fee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6a1a      	ldr	r2, [r3, #32]
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	43db      	mvns	r3, r3
 8008ff8:	401a      	ands	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6a1a      	ldr	r2, [r3, #32]
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	f003 030f 	and.w	r3, r3, #15
 8009008:	6879      	ldr	r1, [r7, #4]
 800900a:	fa01 f303 	lsl.w	r3, r1, r3
 800900e:	431a      	orrs	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	621a      	str	r2, [r3, #32]
}
 8009014:	bf00      	nop
 8009016:	371c      	adds	r7, #28
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d101      	bne.n	8009032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e042      	b.n	80090b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009038:	2b00      	cmp	r3, #0
 800903a:	d106      	bne.n	800904a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 f83b 	bl	80090c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2224      	movs	r2, #36	@ 0x24
 800904e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f022 0201 	bic.w	r2, r2, #1
 8009060:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fafe 	bl	800966c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f82f 	bl	80090d4 <UART_SetConfig>
 8009076:	4603      	mov	r3, r0
 8009078:	2b01      	cmp	r3, #1
 800907a:	d101      	bne.n	8009080 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e01b      	b.n	80090b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800908e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689a      	ldr	r2, [r3, #8]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800909e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f042 0201 	orr.w	r2, r2, #1
 80090ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 fb7d 	bl	80097b0 <UART_CheckIdleState>
 80090b6:	4603      	mov	r3, r0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090d8:	b08c      	sub	sp, #48	@ 0x30
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	689a      	ldr	r2, [r3, #8]
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	431a      	orrs	r2, r3
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	431a      	orrs	r2, r3
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	69db      	ldr	r3, [r3, #28]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	4bab      	ldr	r3, [pc, #684]	@ (80093b0 <UART_SetConfig+0x2dc>)
 8009104:	4013      	ands	r3, r2
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	6812      	ldr	r2, [r2, #0]
 800910a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800910c:	430b      	orrs	r3, r1
 800910e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	68da      	ldr	r2, [r3, #12]
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	430a      	orrs	r2, r1
 8009124:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4aa0      	ldr	r2, [pc, #640]	@ (80093b4 <UART_SetConfig+0x2e0>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d004      	beq.n	8009140 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	6a1b      	ldr	r3, [r3, #32]
 800913a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800913c:	4313      	orrs	r3, r2
 800913e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800914a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	6812      	ldr	r2, [r2, #0]
 8009152:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009154:	430b      	orrs	r3, r1
 8009156:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800915e:	f023 010f 	bic.w	r1, r3, #15
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	430a      	orrs	r2, r1
 800916c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a91      	ldr	r2, [pc, #580]	@ (80093b8 <UART_SetConfig+0x2e4>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d125      	bne.n	80091c4 <UART_SetConfig+0xf0>
 8009178:	4b90      	ldr	r3, [pc, #576]	@ (80093bc <UART_SetConfig+0x2e8>)
 800917a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800917e:	f003 0303 	and.w	r3, r3, #3
 8009182:	2b03      	cmp	r3, #3
 8009184:	d81a      	bhi.n	80091bc <UART_SetConfig+0xe8>
 8009186:	a201      	add	r2, pc, #4	@ (adr r2, 800918c <UART_SetConfig+0xb8>)
 8009188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918c:	0800919d 	.word	0x0800919d
 8009190:	080091ad 	.word	0x080091ad
 8009194:	080091a5 	.word	0x080091a5
 8009198:	080091b5 	.word	0x080091b5
 800919c:	2301      	movs	r3, #1
 800919e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091a2:	e0d6      	b.n	8009352 <UART_SetConfig+0x27e>
 80091a4:	2302      	movs	r3, #2
 80091a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091aa:	e0d2      	b.n	8009352 <UART_SetConfig+0x27e>
 80091ac:	2304      	movs	r3, #4
 80091ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091b2:	e0ce      	b.n	8009352 <UART_SetConfig+0x27e>
 80091b4:	2308      	movs	r3, #8
 80091b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091ba:	e0ca      	b.n	8009352 <UART_SetConfig+0x27e>
 80091bc:	2310      	movs	r3, #16
 80091be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091c2:	e0c6      	b.n	8009352 <UART_SetConfig+0x27e>
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a7d      	ldr	r2, [pc, #500]	@ (80093c0 <UART_SetConfig+0x2ec>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d138      	bne.n	8009240 <UART_SetConfig+0x16c>
 80091ce:	4b7b      	ldr	r3, [pc, #492]	@ (80093bc <UART_SetConfig+0x2e8>)
 80091d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091d4:	f003 030c 	and.w	r3, r3, #12
 80091d8:	2b0c      	cmp	r3, #12
 80091da:	d82d      	bhi.n	8009238 <UART_SetConfig+0x164>
 80091dc:	a201      	add	r2, pc, #4	@ (adr r2, 80091e4 <UART_SetConfig+0x110>)
 80091de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e2:	bf00      	nop
 80091e4:	08009219 	.word	0x08009219
 80091e8:	08009239 	.word	0x08009239
 80091ec:	08009239 	.word	0x08009239
 80091f0:	08009239 	.word	0x08009239
 80091f4:	08009229 	.word	0x08009229
 80091f8:	08009239 	.word	0x08009239
 80091fc:	08009239 	.word	0x08009239
 8009200:	08009239 	.word	0x08009239
 8009204:	08009221 	.word	0x08009221
 8009208:	08009239 	.word	0x08009239
 800920c:	08009239 	.word	0x08009239
 8009210:	08009239 	.word	0x08009239
 8009214:	08009231 	.word	0x08009231
 8009218:	2300      	movs	r3, #0
 800921a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800921e:	e098      	b.n	8009352 <UART_SetConfig+0x27e>
 8009220:	2302      	movs	r3, #2
 8009222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009226:	e094      	b.n	8009352 <UART_SetConfig+0x27e>
 8009228:	2304      	movs	r3, #4
 800922a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800922e:	e090      	b.n	8009352 <UART_SetConfig+0x27e>
 8009230:	2308      	movs	r3, #8
 8009232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009236:	e08c      	b.n	8009352 <UART_SetConfig+0x27e>
 8009238:	2310      	movs	r3, #16
 800923a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800923e:	e088      	b.n	8009352 <UART_SetConfig+0x27e>
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a5f      	ldr	r2, [pc, #380]	@ (80093c4 <UART_SetConfig+0x2f0>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d125      	bne.n	8009296 <UART_SetConfig+0x1c2>
 800924a:	4b5c      	ldr	r3, [pc, #368]	@ (80093bc <UART_SetConfig+0x2e8>)
 800924c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009250:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009254:	2b30      	cmp	r3, #48	@ 0x30
 8009256:	d016      	beq.n	8009286 <UART_SetConfig+0x1b2>
 8009258:	2b30      	cmp	r3, #48	@ 0x30
 800925a:	d818      	bhi.n	800928e <UART_SetConfig+0x1ba>
 800925c:	2b20      	cmp	r3, #32
 800925e:	d00a      	beq.n	8009276 <UART_SetConfig+0x1a2>
 8009260:	2b20      	cmp	r3, #32
 8009262:	d814      	bhi.n	800928e <UART_SetConfig+0x1ba>
 8009264:	2b00      	cmp	r3, #0
 8009266:	d002      	beq.n	800926e <UART_SetConfig+0x19a>
 8009268:	2b10      	cmp	r3, #16
 800926a:	d008      	beq.n	800927e <UART_SetConfig+0x1aa>
 800926c:	e00f      	b.n	800928e <UART_SetConfig+0x1ba>
 800926e:	2300      	movs	r3, #0
 8009270:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009274:	e06d      	b.n	8009352 <UART_SetConfig+0x27e>
 8009276:	2302      	movs	r3, #2
 8009278:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800927c:	e069      	b.n	8009352 <UART_SetConfig+0x27e>
 800927e:	2304      	movs	r3, #4
 8009280:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009284:	e065      	b.n	8009352 <UART_SetConfig+0x27e>
 8009286:	2308      	movs	r3, #8
 8009288:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800928c:	e061      	b.n	8009352 <UART_SetConfig+0x27e>
 800928e:	2310      	movs	r3, #16
 8009290:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009294:	e05d      	b.n	8009352 <UART_SetConfig+0x27e>
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a4b      	ldr	r2, [pc, #300]	@ (80093c8 <UART_SetConfig+0x2f4>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d125      	bne.n	80092ec <UART_SetConfig+0x218>
 80092a0:	4b46      	ldr	r3, [pc, #280]	@ (80093bc <UART_SetConfig+0x2e8>)
 80092a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80092aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80092ac:	d016      	beq.n	80092dc <UART_SetConfig+0x208>
 80092ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80092b0:	d818      	bhi.n	80092e4 <UART_SetConfig+0x210>
 80092b2:	2b80      	cmp	r3, #128	@ 0x80
 80092b4:	d00a      	beq.n	80092cc <UART_SetConfig+0x1f8>
 80092b6:	2b80      	cmp	r3, #128	@ 0x80
 80092b8:	d814      	bhi.n	80092e4 <UART_SetConfig+0x210>
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d002      	beq.n	80092c4 <UART_SetConfig+0x1f0>
 80092be:	2b40      	cmp	r3, #64	@ 0x40
 80092c0:	d008      	beq.n	80092d4 <UART_SetConfig+0x200>
 80092c2:	e00f      	b.n	80092e4 <UART_SetConfig+0x210>
 80092c4:	2300      	movs	r3, #0
 80092c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092ca:	e042      	b.n	8009352 <UART_SetConfig+0x27e>
 80092cc:	2302      	movs	r3, #2
 80092ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092d2:	e03e      	b.n	8009352 <UART_SetConfig+0x27e>
 80092d4:	2304      	movs	r3, #4
 80092d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092da:	e03a      	b.n	8009352 <UART_SetConfig+0x27e>
 80092dc:	2308      	movs	r3, #8
 80092de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092e2:	e036      	b.n	8009352 <UART_SetConfig+0x27e>
 80092e4:	2310      	movs	r3, #16
 80092e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092ea:	e032      	b.n	8009352 <UART_SetConfig+0x27e>
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a30      	ldr	r2, [pc, #192]	@ (80093b4 <UART_SetConfig+0x2e0>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d12a      	bne.n	800934c <UART_SetConfig+0x278>
 80092f6:	4b31      	ldr	r3, [pc, #196]	@ (80093bc <UART_SetConfig+0x2e8>)
 80092f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009300:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009304:	d01a      	beq.n	800933c <UART_SetConfig+0x268>
 8009306:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800930a:	d81b      	bhi.n	8009344 <UART_SetConfig+0x270>
 800930c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009310:	d00c      	beq.n	800932c <UART_SetConfig+0x258>
 8009312:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009316:	d815      	bhi.n	8009344 <UART_SetConfig+0x270>
 8009318:	2b00      	cmp	r3, #0
 800931a:	d003      	beq.n	8009324 <UART_SetConfig+0x250>
 800931c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009320:	d008      	beq.n	8009334 <UART_SetConfig+0x260>
 8009322:	e00f      	b.n	8009344 <UART_SetConfig+0x270>
 8009324:	2300      	movs	r3, #0
 8009326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800932a:	e012      	b.n	8009352 <UART_SetConfig+0x27e>
 800932c:	2302      	movs	r3, #2
 800932e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009332:	e00e      	b.n	8009352 <UART_SetConfig+0x27e>
 8009334:	2304      	movs	r3, #4
 8009336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800933a:	e00a      	b.n	8009352 <UART_SetConfig+0x27e>
 800933c:	2308      	movs	r3, #8
 800933e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009342:	e006      	b.n	8009352 <UART_SetConfig+0x27e>
 8009344:	2310      	movs	r3, #16
 8009346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800934a:	e002      	b.n	8009352 <UART_SetConfig+0x27e>
 800934c:	2310      	movs	r3, #16
 800934e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a17      	ldr	r2, [pc, #92]	@ (80093b4 <UART_SetConfig+0x2e0>)
 8009358:	4293      	cmp	r3, r2
 800935a:	f040 80a8 	bne.w	80094ae <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800935e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009362:	2b08      	cmp	r3, #8
 8009364:	d834      	bhi.n	80093d0 <UART_SetConfig+0x2fc>
 8009366:	a201      	add	r2, pc, #4	@ (adr r2, 800936c <UART_SetConfig+0x298>)
 8009368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936c:	08009391 	.word	0x08009391
 8009370:	080093d1 	.word	0x080093d1
 8009374:	08009399 	.word	0x08009399
 8009378:	080093d1 	.word	0x080093d1
 800937c:	0800939f 	.word	0x0800939f
 8009380:	080093d1 	.word	0x080093d1
 8009384:	080093d1 	.word	0x080093d1
 8009388:	080093d1 	.word	0x080093d1
 800938c:	080093a7 	.word	0x080093a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009390:	f7fd fee4 	bl	800715c <HAL_RCC_GetPCLK1Freq>
 8009394:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009396:	e021      	b.n	80093dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009398:	4b0c      	ldr	r3, [pc, #48]	@ (80093cc <UART_SetConfig+0x2f8>)
 800939a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800939c:	e01e      	b.n	80093dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800939e:	f7fd fe6f 	bl	8007080 <HAL_RCC_GetSysClockFreq>
 80093a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093a4:	e01a      	b.n	80093dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093ac:	e016      	b.n	80093dc <UART_SetConfig+0x308>
 80093ae:	bf00      	nop
 80093b0:	cfff69f3 	.word	0xcfff69f3
 80093b4:	40008000 	.word	0x40008000
 80093b8:	40013800 	.word	0x40013800
 80093bc:	40021000 	.word	0x40021000
 80093c0:	40004400 	.word	0x40004400
 80093c4:	40004800 	.word	0x40004800
 80093c8:	40004c00 	.word	0x40004c00
 80093cc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80093d0:	2300      	movs	r3, #0
 80093d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80093da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80093dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f000 812a 	beq.w	8009638 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e8:	4a9e      	ldr	r2, [pc, #632]	@ (8009664 <UART_SetConfig+0x590>)
 80093ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093ee:	461a      	mov	r2, r3
 80093f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80093f6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	4613      	mov	r3, r2
 80093fe:	005b      	lsls	r3, r3, #1
 8009400:	4413      	add	r3, r2
 8009402:	69ba      	ldr	r2, [r7, #24]
 8009404:	429a      	cmp	r2, r3
 8009406:	d305      	bcc.n	8009414 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800940e:	69ba      	ldr	r2, [r7, #24]
 8009410:	429a      	cmp	r2, r3
 8009412:	d903      	bls.n	800941c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800941a:	e10d      	b.n	8009638 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800941c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941e:	2200      	movs	r2, #0
 8009420:	60bb      	str	r3, [r7, #8]
 8009422:	60fa      	str	r2, [r7, #12]
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009428:	4a8e      	ldr	r2, [pc, #568]	@ (8009664 <UART_SetConfig+0x590>)
 800942a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800942e:	b29b      	uxth	r3, r3
 8009430:	2200      	movs	r2, #0
 8009432:	603b      	str	r3, [r7, #0]
 8009434:	607a      	str	r2, [r7, #4]
 8009436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800943a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800943e:	f7f6 feef 	bl	8000220 <__aeabi_uldivmod>
 8009442:	4602      	mov	r2, r0
 8009444:	460b      	mov	r3, r1
 8009446:	4610      	mov	r0, r2
 8009448:	4619      	mov	r1, r3
 800944a:	f04f 0200 	mov.w	r2, #0
 800944e:	f04f 0300 	mov.w	r3, #0
 8009452:	020b      	lsls	r3, r1, #8
 8009454:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009458:	0202      	lsls	r2, r0, #8
 800945a:	6979      	ldr	r1, [r7, #20]
 800945c:	6849      	ldr	r1, [r1, #4]
 800945e:	0849      	lsrs	r1, r1, #1
 8009460:	2000      	movs	r0, #0
 8009462:	460c      	mov	r4, r1
 8009464:	4605      	mov	r5, r0
 8009466:	eb12 0804 	adds.w	r8, r2, r4
 800946a:	eb43 0905 	adc.w	r9, r3, r5
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	469a      	mov	sl, r3
 8009476:	4693      	mov	fp, r2
 8009478:	4652      	mov	r2, sl
 800947a:	465b      	mov	r3, fp
 800947c:	4640      	mov	r0, r8
 800947e:	4649      	mov	r1, r9
 8009480:	f7f6 fece 	bl	8000220 <__aeabi_uldivmod>
 8009484:	4602      	mov	r2, r0
 8009486:	460b      	mov	r3, r1
 8009488:	4613      	mov	r3, r2
 800948a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009492:	d308      	bcc.n	80094a6 <UART_SetConfig+0x3d2>
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800949a:	d204      	bcs.n	80094a6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6a3a      	ldr	r2, [r7, #32]
 80094a2:	60da      	str	r2, [r3, #12]
 80094a4:	e0c8      	b.n	8009638 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80094ac:	e0c4      	b.n	8009638 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094b6:	d167      	bne.n	8009588 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80094b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80094bc:	2b08      	cmp	r3, #8
 80094be:	d828      	bhi.n	8009512 <UART_SetConfig+0x43e>
 80094c0:	a201      	add	r2, pc, #4	@ (adr r2, 80094c8 <UART_SetConfig+0x3f4>)
 80094c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c6:	bf00      	nop
 80094c8:	080094ed 	.word	0x080094ed
 80094cc:	080094f5 	.word	0x080094f5
 80094d0:	080094fd 	.word	0x080094fd
 80094d4:	08009513 	.word	0x08009513
 80094d8:	08009503 	.word	0x08009503
 80094dc:	08009513 	.word	0x08009513
 80094e0:	08009513 	.word	0x08009513
 80094e4:	08009513 	.word	0x08009513
 80094e8:	0800950b 	.word	0x0800950b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094ec:	f7fd fe36 	bl	800715c <HAL_RCC_GetPCLK1Freq>
 80094f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80094f2:	e014      	b.n	800951e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094f4:	f7fd fe48 	bl	8007188 <HAL_RCC_GetPCLK2Freq>
 80094f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80094fa:	e010      	b.n	800951e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094fc:	4b5a      	ldr	r3, [pc, #360]	@ (8009668 <UART_SetConfig+0x594>)
 80094fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009500:	e00d      	b.n	800951e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009502:	f7fd fdbd 	bl	8007080 <HAL_RCC_GetSysClockFreq>
 8009506:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009508:	e009      	b.n	800951e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800950a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800950e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009510:	e005      	b.n	800951e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009512:	2300      	movs	r3, #0
 8009514:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800951c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800951e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 8089 	beq.w	8009638 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800952a:	4a4e      	ldr	r2, [pc, #312]	@ (8009664 <UART_SetConfig+0x590>)
 800952c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009530:	461a      	mov	r2, r3
 8009532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009534:	fbb3 f3f2 	udiv	r3, r3, r2
 8009538:	005a      	lsls	r2, r3, #1
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	085b      	lsrs	r3, r3, #1
 8009540:	441a      	add	r2, r3
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	fbb2 f3f3 	udiv	r3, r2, r3
 800954a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800954c:	6a3b      	ldr	r3, [r7, #32]
 800954e:	2b0f      	cmp	r3, #15
 8009550:	d916      	bls.n	8009580 <UART_SetConfig+0x4ac>
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009558:	d212      	bcs.n	8009580 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800955a:	6a3b      	ldr	r3, [r7, #32]
 800955c:	b29b      	uxth	r3, r3
 800955e:	f023 030f 	bic.w	r3, r3, #15
 8009562:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009564:	6a3b      	ldr	r3, [r7, #32]
 8009566:	085b      	lsrs	r3, r3, #1
 8009568:	b29b      	uxth	r3, r3
 800956a:	f003 0307 	and.w	r3, r3, #7
 800956e:	b29a      	uxth	r2, r3
 8009570:	8bfb      	ldrh	r3, [r7, #30]
 8009572:	4313      	orrs	r3, r2
 8009574:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	8bfa      	ldrh	r2, [r7, #30]
 800957c:	60da      	str	r2, [r3, #12]
 800957e:	e05b      	b.n	8009638 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009586:	e057      	b.n	8009638 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009588:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800958c:	2b08      	cmp	r3, #8
 800958e:	d828      	bhi.n	80095e2 <UART_SetConfig+0x50e>
 8009590:	a201      	add	r2, pc, #4	@ (adr r2, 8009598 <UART_SetConfig+0x4c4>)
 8009592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009596:	bf00      	nop
 8009598:	080095bd 	.word	0x080095bd
 800959c:	080095c5 	.word	0x080095c5
 80095a0:	080095cd 	.word	0x080095cd
 80095a4:	080095e3 	.word	0x080095e3
 80095a8:	080095d3 	.word	0x080095d3
 80095ac:	080095e3 	.word	0x080095e3
 80095b0:	080095e3 	.word	0x080095e3
 80095b4:	080095e3 	.word	0x080095e3
 80095b8:	080095db 	.word	0x080095db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095bc:	f7fd fdce 	bl	800715c <HAL_RCC_GetPCLK1Freq>
 80095c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80095c2:	e014      	b.n	80095ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095c4:	f7fd fde0 	bl	8007188 <HAL_RCC_GetPCLK2Freq>
 80095c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80095ca:	e010      	b.n	80095ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095cc:	4b26      	ldr	r3, [pc, #152]	@ (8009668 <UART_SetConfig+0x594>)
 80095ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80095d0:	e00d      	b.n	80095ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095d2:	f7fd fd55 	bl	8007080 <HAL_RCC_GetSysClockFreq>
 80095d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80095d8:	e009      	b.n	80095ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80095e0:	e005      	b.n	80095ee <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80095e2:	2300      	movs	r3, #0
 80095e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80095ec:	bf00      	nop
    }

    if (pclk != 0U)
 80095ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d021      	beq.n	8009638 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f8:	4a1a      	ldr	r2, [pc, #104]	@ (8009664 <UART_SetConfig+0x590>)
 80095fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095fe:	461a      	mov	r2, r3
 8009600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009602:	fbb3 f2f2 	udiv	r2, r3, r2
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	085b      	lsrs	r3, r3, #1
 800960c:	441a      	add	r2, r3
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	fbb2 f3f3 	udiv	r3, r2, r3
 8009616:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009618:	6a3b      	ldr	r3, [r7, #32]
 800961a:	2b0f      	cmp	r3, #15
 800961c:	d909      	bls.n	8009632 <UART_SetConfig+0x55e>
 800961e:	6a3b      	ldr	r3, [r7, #32]
 8009620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009624:	d205      	bcs.n	8009632 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009626:	6a3b      	ldr	r3, [r7, #32]
 8009628:	b29a      	uxth	r2, r3
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	60da      	str	r2, [r3, #12]
 8009630:	e002      	b.n	8009638 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	2201      	movs	r2, #1
 800963c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	2201      	movs	r2, #1
 8009644:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	2200      	movs	r2, #0
 800964c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	2200      	movs	r2, #0
 8009652:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009654:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009658:	4618      	mov	r0, r3
 800965a:	3730      	adds	r7, #48	@ 0x30
 800965c:	46bd      	mov	sp, r7
 800965e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009662:	bf00      	nop
 8009664:	0800cc6c 	.word	0x0800cc6c
 8009668:	00f42400 	.word	0x00f42400

0800966c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009678:	f003 0308 	and.w	r3, r3, #8
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00a      	beq.n	8009696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	430a      	orrs	r2, r1
 8009694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00a      	beq.n	80096b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096bc:	f003 0302 	and.w	r3, r3, #2
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00a      	beq.n	80096da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	430a      	orrs	r2, r1
 80096d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096de:	f003 0304 	and.w	r3, r3, #4
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00a      	beq.n	80096fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	430a      	orrs	r2, r1
 80096fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009700:	f003 0310 	and.w	r3, r3, #16
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00a      	beq.n	800971e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009722:	f003 0320 	and.w	r3, r3, #32
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00a      	beq.n	8009740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	430a      	orrs	r2, r1
 800973e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009748:	2b00      	cmp	r3, #0
 800974a:	d01a      	beq.n	8009782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	430a      	orrs	r2, r1
 8009760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009766:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800976a:	d10a      	bne.n	8009782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	430a      	orrs	r2, r1
 8009780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00a      	beq.n	80097a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	430a      	orrs	r2, r1
 80097a2:	605a      	str	r2, [r3, #4]
  }
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b098      	sub	sp, #96	@ 0x60
 80097b4:	af02      	add	r7, sp, #8
 80097b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097c0:	f7fa f886 	bl	80038d0 <HAL_GetTick>
 80097c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0308 	and.w	r3, r3, #8
 80097d0:	2b08      	cmp	r3, #8
 80097d2:	d12f      	bne.n	8009834 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097dc:	2200      	movs	r2, #0
 80097de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f88e 	bl	8009904 <UART_WaitOnFlagUntilTimeout>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d022      	beq.n	8009834 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f6:	e853 3f00 	ldrex	r3, [r3]
 80097fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009802:	653b      	str	r3, [r7, #80]	@ 0x50
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	461a      	mov	r2, r3
 800980a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800980c:	647b      	str	r3, [r7, #68]	@ 0x44
 800980e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009810:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009814:	e841 2300 	strex	r3, r2, [r1]
 8009818:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800981a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1e6      	bne.n	80097ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2220      	movs	r2, #32
 8009824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009830:	2303      	movs	r3, #3
 8009832:	e063      	b.n	80098fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 0304 	and.w	r3, r3, #4
 800983e:	2b04      	cmp	r3, #4
 8009840:	d149      	bne.n	80098d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009842:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800984a:	2200      	movs	r2, #0
 800984c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f857 	bl	8009904 <UART_WaitOnFlagUntilTimeout>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d03c      	beq.n	80098d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009864:	e853 3f00 	ldrex	r3, [r3]
 8009868:	623b      	str	r3, [r7, #32]
   return(result);
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009870:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	461a      	mov	r2, r3
 8009878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800987a:	633b      	str	r3, [r7, #48]	@ 0x30
 800987c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009880:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009882:	e841 2300 	strex	r3, r2, [r1]
 8009886:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1e6      	bne.n	800985c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	3308      	adds	r3, #8
 8009894:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	e853 3f00 	ldrex	r3, [r3]
 800989c:	60fb      	str	r3, [r7, #12]
   return(result);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f023 0301 	bic.w	r3, r3, #1
 80098a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3308      	adds	r3, #8
 80098ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098ae:	61fa      	str	r2, [r7, #28]
 80098b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b2:	69b9      	ldr	r1, [r7, #24]
 80098b4:	69fa      	ldr	r2, [r7, #28]
 80098b6:	e841 2300 	strex	r3, r2, [r1]
 80098ba:	617b      	str	r3, [r7, #20]
   return(result);
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1e5      	bne.n	800988e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2220      	movs	r2, #32
 80098c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e012      	b.n	80098fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2220      	movs	r2, #32
 80098da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2220      	movs	r2, #32
 80098e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3758      	adds	r7, #88	@ 0x58
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	603b      	str	r3, [r7, #0]
 8009910:	4613      	mov	r3, r2
 8009912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009914:	e04f      	b.n	80099b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800991c:	d04b      	beq.n	80099b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800991e:	f7f9 ffd7 	bl	80038d0 <HAL_GetTick>
 8009922:	4602      	mov	r2, r0
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	69ba      	ldr	r2, [r7, #24]
 800992a:	429a      	cmp	r2, r3
 800992c:	d302      	bcc.n	8009934 <UART_WaitOnFlagUntilTimeout+0x30>
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d101      	bne.n	8009938 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e04e      	b.n	80099d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 0304 	and.w	r3, r3, #4
 8009942:	2b00      	cmp	r3, #0
 8009944:	d037      	beq.n	80099b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	2b80      	cmp	r3, #128	@ 0x80
 800994a:	d034      	beq.n	80099b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	2b40      	cmp	r3, #64	@ 0x40
 8009950:	d031      	beq.n	80099b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	69db      	ldr	r3, [r3, #28]
 8009958:	f003 0308 	and.w	r3, r3, #8
 800995c:	2b08      	cmp	r3, #8
 800995e:	d110      	bne.n	8009982 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2208      	movs	r2, #8
 8009966:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f000 f838 	bl	80099de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2208      	movs	r2, #8
 8009972:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e029      	b.n	80099d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800998c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009990:	d111      	bne.n	80099b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800999a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 f81e 	bl	80099de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2220      	movs	r2, #32
 80099a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80099b2:	2303      	movs	r3, #3
 80099b4:	e00f      	b.n	80099d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	69da      	ldr	r2, [r3, #28]
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	4013      	ands	r3, r2
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	bf0c      	ite	eq
 80099c6:	2301      	moveq	r3, #1
 80099c8:	2300      	movne	r3, #0
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	461a      	mov	r2, r3
 80099ce:	79fb      	ldrb	r3, [r7, #7]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d0a0      	beq.n	8009916 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099de:	b480      	push	{r7}
 80099e0:	b095      	sub	sp, #84	@ 0x54
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099ee:	e853 3f00 	ldrex	r3, [r3]
 80099f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	461a      	mov	r2, r3
 8009a02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a04:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a06:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a0c:	e841 2300 	strex	r3, r2, [r1]
 8009a10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1e6      	bne.n	80099e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3308      	adds	r3, #8
 8009a1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a20:	6a3b      	ldr	r3, [r7, #32]
 8009a22:	e853 3f00 	ldrex	r3, [r3]
 8009a26:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a2e:	f023 0301 	bic.w	r3, r3, #1
 8009a32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	3308      	adds	r3, #8
 8009a3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a44:	e841 2300 	strex	r3, r2, [r1]
 8009a48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1e3      	bne.n	8009a18 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d118      	bne.n	8009a8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	e853 3f00 	ldrex	r3, [r3]
 8009a64:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	f023 0310 	bic.w	r3, r3, #16
 8009a6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	461a      	mov	r2, r3
 8009a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a76:	61bb      	str	r3, [r7, #24]
 8009a78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7a:	6979      	ldr	r1, [r7, #20]
 8009a7c:	69ba      	ldr	r2, [r7, #24]
 8009a7e:	e841 2300 	strex	r3, r2, [r1]
 8009a82:	613b      	str	r3, [r7, #16]
   return(result);
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1e6      	bne.n	8009a58 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2220      	movs	r2, #32
 8009a8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009a9e:	bf00      	nop
 8009aa0:	3754      	adds	r7, #84	@ 0x54
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
	...

08009aac <__NVIC_SetPriority>:
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	6039      	str	r1, [r7, #0]
 8009ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	db0a      	blt.n	8009ad6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	490c      	ldr	r1, [pc, #48]	@ (8009af8 <__NVIC_SetPriority+0x4c>)
 8009ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009aca:	0112      	lsls	r2, r2, #4
 8009acc:	b2d2      	uxtb	r2, r2
 8009ace:	440b      	add	r3, r1
 8009ad0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009ad4:	e00a      	b.n	8009aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	4908      	ldr	r1, [pc, #32]	@ (8009afc <__NVIC_SetPriority+0x50>)
 8009adc:	79fb      	ldrb	r3, [r7, #7]
 8009ade:	f003 030f 	and.w	r3, r3, #15
 8009ae2:	3b04      	subs	r3, #4
 8009ae4:	0112      	lsls	r2, r2, #4
 8009ae6:	b2d2      	uxtb	r2, r2
 8009ae8:	440b      	add	r3, r1
 8009aea:	761a      	strb	r2, [r3, #24]
}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	e000e100 	.word	0xe000e100
 8009afc:	e000ed00 	.word	0xe000ed00

08009b00 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009b00:	b580      	push	{r7, lr}
 8009b02:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009b04:	4b05      	ldr	r3, [pc, #20]	@ (8009b1c <SysTick_Handler+0x1c>)
 8009b06:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009b08:	f001 fe94 	bl	800b834 <xTaskGetSchedulerState>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d001      	beq.n	8009b16 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009b12:	f002 fc89 	bl	800c428 <xPortSysTickHandler>
  }
}
 8009b16:	bf00      	nop
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	e000e010 	.word	0xe000e010

08009b20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009b20:	b580      	push	{r7, lr}
 8009b22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009b24:	2100      	movs	r1, #0
 8009b26:	f06f 0004 	mvn.w	r0, #4
 8009b2a:	f7ff ffbf 	bl	8009aac <__NVIC_SetPriority>
#endif
}
 8009b2e:	bf00      	nop
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b3a:	f3ef 8305 	mrs	r3, IPSR
 8009b3e:	603b      	str	r3, [r7, #0]
  return(result);
 8009b40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d003      	beq.n	8009b4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009b46:	f06f 0305 	mvn.w	r3, #5
 8009b4a:	607b      	str	r3, [r7, #4]
 8009b4c:	e00c      	b.n	8009b68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8009b78 <osKernelInitialize+0x44>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d105      	bne.n	8009b62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009b56:	4b08      	ldr	r3, [pc, #32]	@ (8009b78 <osKernelInitialize+0x44>)
 8009b58:	2201      	movs	r2, #1
 8009b5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	607b      	str	r3, [r7, #4]
 8009b60:	e002      	b.n	8009b68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009b62:	f04f 33ff 	mov.w	r3, #4294967295
 8009b66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b68:	687b      	ldr	r3, [r7, #4]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	370c      	adds	r7, #12
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	20000a28 	.word	0x20000a28

08009b7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b82:	f3ef 8305 	mrs	r3, IPSR
 8009b86:	603b      	str	r3, [r7, #0]
  return(result);
 8009b88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009b8e:	f06f 0305 	mvn.w	r3, #5
 8009b92:	607b      	str	r3, [r7, #4]
 8009b94:	e010      	b.n	8009bb8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009b96:	4b0b      	ldr	r3, [pc, #44]	@ (8009bc4 <osKernelStart+0x48>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d109      	bne.n	8009bb2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b9e:	f7ff ffbf 	bl	8009b20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009ba2:	4b08      	ldr	r3, [pc, #32]	@ (8009bc4 <osKernelStart+0x48>)
 8009ba4:	2202      	movs	r2, #2
 8009ba6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009ba8:	f001 f9ce 	bl	800af48 <vTaskStartScheduler>
      stat = osOK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	607b      	str	r3, [r7, #4]
 8009bb0:	e002      	b.n	8009bb8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009bb8:	687b      	ldr	r3, [r7, #4]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	20000a28 	.word	0x20000a28

08009bc8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bce:	f3ef 8305 	mrs	r3, IPSR
 8009bd2:	603b      	str	r3, [r7, #0]
  return(result);
 8009bd4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d003      	beq.n	8009be2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009bda:	f001 fae1 	bl	800b1a0 <xTaskGetTickCountFromISR>
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	e002      	b.n	8009be8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009be2:	f001 facd 	bl	800b180 <xTaskGetTickCount>
 8009be6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009be8:	687b      	ldr	r3, [r7, #4]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b08e      	sub	sp, #56	@ 0x38
 8009bf6:	af04      	add	r7, sp, #16
 8009bf8:	60f8      	str	r0, [r7, #12]
 8009bfa:	60b9      	str	r1, [r7, #8]
 8009bfc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c02:	f3ef 8305 	mrs	r3, IPSR
 8009c06:	617b      	str	r3, [r7, #20]
  return(result);
 8009c08:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d17e      	bne.n	8009d0c <osThreadNew+0x11a>
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d07b      	beq.n	8009d0c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009c14:	2380      	movs	r3, #128	@ 0x80
 8009c16:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009c18:	2318      	movs	r3, #24
 8009c1a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009c20:	f04f 33ff 	mov.w	r3, #4294967295
 8009c24:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d045      	beq.n	8009cb8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d002      	beq.n	8009c3a <osThreadNew+0x48>
        name = attr->name;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d002      	beq.n	8009c48 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d008      	beq.n	8009c60 <osThreadNew+0x6e>
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	2b38      	cmp	r3, #56	@ 0x38
 8009c52:	d805      	bhi.n	8009c60 <osThreadNew+0x6e>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	f003 0301 	and.w	r3, r3, #1
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d001      	beq.n	8009c64 <osThreadNew+0x72>
        return (NULL);
 8009c60:	2300      	movs	r3, #0
 8009c62:	e054      	b.n	8009d0e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	695b      	ldr	r3, [r3, #20]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d003      	beq.n	8009c74 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	695b      	ldr	r3, [r3, #20]
 8009c70:	089b      	lsrs	r3, r3, #2
 8009c72:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00e      	beq.n	8009c9a <osThreadNew+0xa8>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	2ba7      	cmp	r3, #167	@ 0xa7
 8009c82:	d90a      	bls.n	8009c9a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d006      	beq.n	8009c9a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	695b      	ldr	r3, [r3, #20]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d002      	beq.n	8009c9a <osThreadNew+0xa8>
        mem = 1;
 8009c94:	2301      	movs	r3, #1
 8009c96:	61bb      	str	r3, [r7, #24]
 8009c98:	e010      	b.n	8009cbc <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10c      	bne.n	8009cbc <osThreadNew+0xca>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d108      	bne.n	8009cbc <osThreadNew+0xca>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d104      	bne.n	8009cbc <osThreadNew+0xca>
          mem = 0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	61bb      	str	r3, [r7, #24]
 8009cb6:	e001      	b.n	8009cbc <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d110      	bne.n	8009ce4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009cca:	9202      	str	r2, [sp, #8]
 8009ccc:	9301      	str	r3, [sp, #4]
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	6a3a      	ldr	r2, [r7, #32]
 8009cd6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f000 fe4d 	bl	800a978 <xTaskCreateStatic>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	613b      	str	r3, [r7, #16]
 8009ce2:	e013      	b.n	8009d0c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d110      	bne.n	8009d0c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	f107 0310 	add.w	r3, r7, #16
 8009cf2:	9301      	str	r3, [sp, #4]
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	9300      	str	r3, [sp, #0]
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009cfc:	68f8      	ldr	r0, [r7, #12]
 8009cfe:	f000 fe9b 	bl	800aa38 <xTaskCreate>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d001      	beq.n	8009d0c <osThreadNew+0x11a>
            hTask = NULL;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009d0c:	693b      	ldr	r3, [r7, #16]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3728      	adds	r7, #40	@ 0x28
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8009d16:	b580      	push	{r7, lr}
 8009d18:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	f000 ffea 	bl	800acf4 <vTaskDelete>
#endif
  for (;;);
 8009d20:	bf00      	nop
 8009d22:	e7fd      	b.n	8009d20 <osThreadExit+0xa>

08009d24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d2c:	f3ef 8305 	mrs	r3, IPSR
 8009d30:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d003      	beq.n	8009d40 <osDelay+0x1c>
    stat = osErrorISR;
 8009d38:	f06f 0305 	mvn.w	r3, #5
 8009d3c:	60fb      	str	r3, [r7, #12]
 8009d3e:	e007      	b.n	8009d50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d002      	beq.n	8009d50 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f001 f8c6 	bl	800aedc <vTaskDelay>
    }
  }

  return (stat);
 8009d50:	68fb      	ldr	r3, [r7, #12]
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b086      	sub	sp, #24
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d62:	f3ef 8305 	mrs	r3, IPSR
 8009d66:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d68:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d003      	beq.n	8009d76 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8009d6e:	f06f 0305 	mvn.w	r3, #5
 8009d72:	617b      	str	r3, [r7, #20]
 8009d74:	e019      	b.n	8009daa <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8009d7a:	f001 fa01 	bl	800b180 <xTaskGetTickCount>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	1ad3      	subs	r3, r2, r3
 8009d88:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d009      	beq.n	8009da4 <osDelayUntil+0x4a>
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	db06      	blt.n	8009da4 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8009d96:	f107 0308 	add.w	r3, r7, #8
 8009d9a:	6939      	ldr	r1, [r7, #16]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f001 f81d 	bl	800addc <vTaskDelayUntil>
 8009da2:	e002      	b.n	8009daa <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009da4:	f06f 0303 	mvn.w	r3, #3
 8009da8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009daa:	697b      	ldr	r3, [r7, #20]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3718      	adds	r7, #24
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4a07      	ldr	r2, [pc, #28]	@ (8009de0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009dc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	4a06      	ldr	r2, [pc, #24]	@ (8009de4 <vApplicationGetIdleTaskMemory+0x30>)
 8009dca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2280      	movs	r2, #128	@ 0x80
 8009dd0:	601a      	str	r2, [r3, #0]
}
 8009dd2:	bf00      	nop
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	20000a2c 	.word	0x20000a2c
 8009de4:	20000ad4 	.word	0x20000ad4

08009de8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	4a07      	ldr	r2, [pc, #28]	@ (8009e14 <vApplicationGetTimerTaskMemory+0x2c>)
 8009df8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	4a06      	ldr	r2, [pc, #24]	@ (8009e18 <vApplicationGetTimerTaskMemory+0x30>)
 8009dfe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e06:	601a      	str	r2, [r3, #0]
}
 8009e08:	bf00      	nop
 8009e0a:	3714      	adds	r7, #20
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr
 8009e14:	20000cd4 	.word	0x20000cd4
 8009e18:	20000d7c 	.word	0x20000d7c

08009e1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f103 0208 	add.w	r2, r3, #8
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f04f 32ff 	mov.w	r2, #4294967295
 8009e34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f103 0208 	add.w	r2, r3, #8
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f103 0208 	add.w	r2, r3, #8
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e6a:	bf00      	nop
 8009e6c:	370c      	adds	r7, #12
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e76:	b480      	push	{r7}
 8009e78:	b085      	sub	sp, #20
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	689a      	ldr	r2, [r3, #8]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	683a      	ldr	r2, [r7, #0]
 8009ea0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	1c5a      	adds	r2, r3, #1
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	601a      	str	r2, [r3, #0]
}
 8009eb2:	bf00      	nop
 8009eb4:	3714      	adds	r7, #20
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b085      	sub	sp, #20
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed4:	d103      	bne.n	8009ede <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	60fb      	str	r3, [r7, #12]
 8009edc:	e00c      	b.n	8009ef8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	3308      	adds	r3, #8
 8009ee2:	60fb      	str	r3, [r7, #12]
 8009ee4:	e002      	b.n	8009eec <vListInsert+0x2e>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	60fb      	str	r3, [r7, #12]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d2f6      	bcs.n	8009ee6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	1c5a      	adds	r2, r3, #1
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	601a      	str	r2, [r3, #0]
}
 8009f24:	bf00      	nop
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	6892      	ldr	r2, [r2, #8]
 8009f46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	6852      	ldr	r2, [r2, #4]
 8009f50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d103      	bne.n	8009f64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	689a      	ldr	r2, [r3, #8]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	1e5a      	subs	r2, r3, #1
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10b      	bne.n	8009fb0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009faa:	bf00      	nop
 8009fac:	bf00      	nop
 8009fae:	e7fd      	b.n	8009fac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009fb0:	f002 f9aa 	bl	800c308 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fbc:	68f9      	ldr	r1, [r7, #12]
 8009fbe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009fc0:	fb01 f303 	mul.w	r3, r1, r3
 8009fc4:	441a      	add	r2, r3
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	68f9      	ldr	r1, [r7, #12]
 8009fe4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009fe6:	fb01 f303 	mul.w	r3, r1, r3
 8009fea:	441a      	add	r2, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	22ff      	movs	r2, #255	@ 0xff
 8009ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	22ff      	movs	r2, #255	@ 0xff
 8009ffc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d114      	bne.n	800a030 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d01a      	beq.n	800a044 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3310      	adds	r3, #16
 800a012:	4618      	mov	r0, r3
 800a014:	f001 fa48 	bl	800b4a8 <xTaskRemoveFromEventList>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d012      	beq.n	800a044 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a01e:	4b0d      	ldr	r3, [pc, #52]	@ (800a054 <xQueueGenericReset+0xd0>)
 800a020:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a024:	601a      	str	r2, [r3, #0]
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	e009      	b.n	800a044 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	3310      	adds	r3, #16
 800a034:	4618      	mov	r0, r3
 800a036:	f7ff fef1 	bl	8009e1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	3324      	adds	r3, #36	@ 0x24
 800a03e:	4618      	mov	r0, r3
 800a040:	f7ff feec 	bl	8009e1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a044:	f002 f992 	bl	800c36c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a048:	2301      	movs	r3, #1
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	e000ed04 	.word	0xe000ed04

0800a058 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b08e      	sub	sp, #56	@ 0x38
 800a05c:	af02      	add	r7, sp, #8
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10b      	bne.n	800a084 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a07e:	bf00      	nop
 800a080:	bf00      	nop
 800a082:	e7fd      	b.n	800a080 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10b      	bne.n	800a0a2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a08e:	f383 8811 	msr	BASEPRI, r3
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a09c:	bf00      	nop
 800a09e:	bf00      	nop
 800a0a0:	e7fd      	b.n	800a09e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <xQueueGenericCreateStatic+0x56>
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <xQueueGenericCreateStatic+0x5a>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e000      	b.n	800a0b4 <xQueueGenericCreateStatic+0x5c>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10b      	bne.n	800a0d0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	623b      	str	r3, [r7, #32]
}
 800a0ca:	bf00      	nop
 800a0cc:	bf00      	nop
 800a0ce:	e7fd      	b.n	800a0cc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d102      	bne.n	800a0dc <xQueueGenericCreateStatic+0x84>
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d101      	bne.n	800a0e0 <xQueueGenericCreateStatic+0x88>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e000      	b.n	800a0e2 <xQueueGenericCreateStatic+0x8a>
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10b      	bne.n	800a0fe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	61fb      	str	r3, [r7, #28]
}
 800a0f8:	bf00      	nop
 800a0fa:	bf00      	nop
 800a0fc:	e7fd      	b.n	800a0fa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0fe:	2350      	movs	r3, #80	@ 0x50
 800a100:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	2b50      	cmp	r3, #80	@ 0x50
 800a106:	d00b      	beq.n	800a120 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a10c:	f383 8811 	msr	BASEPRI, r3
 800a110:	f3bf 8f6f 	isb	sy
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	61bb      	str	r3, [r7, #24]
}
 800a11a:	bf00      	nop
 800a11c:	bf00      	nop
 800a11e:	e7fd      	b.n	800a11c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a120:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00d      	beq.n	800a148 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a134:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	4613      	mov	r3, r2
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	68b9      	ldr	r1, [r7, #8]
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f000 f805 	bl	800a152 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3730      	adds	r7, #48	@ 0x30
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b084      	sub	sp, #16
 800a156:	af00      	add	r7, sp, #0
 800a158:	60f8      	str	r0, [r7, #12]
 800a15a:	60b9      	str	r1, [r7, #8]
 800a15c:	607a      	str	r2, [r7, #4]
 800a15e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d103      	bne.n	800a16e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	69ba      	ldr	r2, [r7, #24]
 800a16a:	601a      	str	r2, [r3, #0]
 800a16c:	e002      	b.n	800a174 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a180:	2101      	movs	r1, #1
 800a182:	69b8      	ldr	r0, [r7, #24]
 800a184:	f7ff fefe 	bl	8009f84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	78fa      	ldrb	r2, [r7, #3]
 800a18c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a190:	bf00      	nop
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b08e      	sub	sp, #56	@ 0x38
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d10b      	bne.n	800a1cc <xQueueGenericSend+0x34>
	__asm volatile
 800a1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a1c6:	bf00      	nop
 800a1c8:	bf00      	nop
 800a1ca:	e7fd      	b.n	800a1c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d103      	bne.n	800a1da <xQueueGenericSend+0x42>
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d101      	bne.n	800a1de <xQueueGenericSend+0x46>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e000      	b.n	800a1e0 <xQueueGenericSend+0x48>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d10b      	bne.n	800a1fc <xQueueGenericSend+0x64>
	__asm volatile
 800a1e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e8:	f383 8811 	msr	BASEPRI, r3
 800a1ec:	f3bf 8f6f 	isb	sy
 800a1f0:	f3bf 8f4f 	dsb	sy
 800a1f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a1f6:	bf00      	nop
 800a1f8:	bf00      	nop
 800a1fa:	e7fd      	b.n	800a1f8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d103      	bne.n	800a20a <xQueueGenericSend+0x72>
 800a202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a206:	2b01      	cmp	r3, #1
 800a208:	d101      	bne.n	800a20e <xQueueGenericSend+0x76>
 800a20a:	2301      	movs	r3, #1
 800a20c:	e000      	b.n	800a210 <xQueueGenericSend+0x78>
 800a20e:	2300      	movs	r3, #0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10b      	bne.n	800a22c <xQueueGenericSend+0x94>
	__asm volatile
 800a214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	623b      	str	r3, [r7, #32]
}
 800a226:	bf00      	nop
 800a228:	bf00      	nop
 800a22a:	e7fd      	b.n	800a228 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a22c:	f001 fb02 	bl	800b834 <xTaskGetSchedulerState>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d102      	bne.n	800a23c <xQueueGenericSend+0xa4>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d101      	bne.n	800a240 <xQueueGenericSend+0xa8>
 800a23c:	2301      	movs	r3, #1
 800a23e:	e000      	b.n	800a242 <xQueueGenericSend+0xaa>
 800a240:	2300      	movs	r3, #0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10b      	bne.n	800a25e <xQueueGenericSend+0xc6>
	__asm volatile
 800a246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	61fb      	str	r3, [r7, #28]
}
 800a258:	bf00      	nop
 800a25a:	bf00      	nop
 800a25c:	e7fd      	b.n	800a25a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a25e:	f002 f853 	bl	800c308 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d302      	bcc.n	800a274 <xQueueGenericSend+0xdc>
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	2b02      	cmp	r3, #2
 800a272:	d129      	bne.n	800a2c8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a274:	683a      	ldr	r2, [r7, #0]
 800a276:	68b9      	ldr	r1, [r7, #8]
 800a278:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a27a:	f000 fa0f 	bl	800a69c <prvCopyDataToQueue>
 800a27e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a284:	2b00      	cmp	r3, #0
 800a286:	d010      	beq.n	800a2aa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28a:	3324      	adds	r3, #36	@ 0x24
 800a28c:	4618      	mov	r0, r3
 800a28e:	f001 f90b 	bl	800b4a8 <xTaskRemoveFromEventList>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d013      	beq.n	800a2c0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a298:	4b3f      	ldr	r3, [pc, #252]	@ (800a398 <xQueueGenericSend+0x200>)
 800a29a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a29e:	601a      	str	r2, [r3, #0]
 800a2a0:	f3bf 8f4f 	dsb	sy
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	e00a      	b.n	800a2c0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a2aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d007      	beq.n	800a2c0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a2b0:	4b39      	ldr	r3, [pc, #228]	@ (800a398 <xQueueGenericSend+0x200>)
 800a2b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2b6:	601a      	str	r2, [r3, #0]
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a2c0:	f002 f854 	bl	800c36c <vPortExitCritical>
				return pdPASS;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e063      	b.n	800a390 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d103      	bne.n	800a2d6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a2ce:	f002 f84d 	bl	800c36c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	e05c      	b.n	800a390 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d106      	bne.n	800a2ea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2dc:	f107 0314 	add.w	r3, r7, #20
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f001 f945 	bl	800b570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2ea:	f002 f83f 	bl	800c36c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2ee:	f000 fe9b 	bl	800b028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2f2:	f002 f809 	bl	800c308 <vPortEnterCritical>
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a2fc:	b25b      	sxtb	r3, r3
 800a2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a302:	d103      	bne.n	800a30c <xQueueGenericSend+0x174>
 800a304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a306:	2200      	movs	r2, #0
 800a308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a30e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a312:	b25b      	sxtb	r3, r3
 800a314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a318:	d103      	bne.n	800a322 <xQueueGenericSend+0x18a>
 800a31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a322:	f002 f823 	bl	800c36c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a326:	1d3a      	adds	r2, r7, #4
 800a328:	f107 0314 	add.w	r3, r7, #20
 800a32c:	4611      	mov	r1, r2
 800a32e:	4618      	mov	r0, r3
 800a330:	f001 f934 	bl	800b59c <xTaskCheckForTimeOut>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d124      	bne.n	800a384 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a33a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a33c:	f000 faa6 	bl	800a88c <prvIsQueueFull>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d018      	beq.n	800a378 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a348:	3310      	adds	r3, #16
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	4611      	mov	r1, r2
 800a34e:	4618      	mov	r0, r3
 800a350:	f001 f858 	bl	800b404 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a354:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a356:	f000 fa31 	bl	800a7bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a35a:	f000 fe73 	bl	800b044 <xTaskResumeAll>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	f47f af7c 	bne.w	800a25e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a366:	4b0c      	ldr	r3, [pc, #48]	@ (800a398 <xQueueGenericSend+0x200>)
 800a368:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a36c:	601a      	str	r2, [r3, #0]
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	e772      	b.n	800a25e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a378:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a37a:	f000 fa1f 	bl	800a7bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a37e:	f000 fe61 	bl	800b044 <xTaskResumeAll>
 800a382:	e76c      	b.n	800a25e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a384:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a386:	f000 fa19 	bl	800a7bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a38a:	f000 fe5b 	bl	800b044 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a38e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a390:	4618      	mov	r0, r3
 800a392:	3738      	adds	r7, #56	@ 0x38
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	e000ed04 	.word	0xe000ed04

0800a39c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b090      	sub	sp, #64	@ 0x40
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d10b      	bne.n	800a3cc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b8:	f383 8811 	msr	BASEPRI, r3
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a3c6:	bf00      	nop
 800a3c8:	bf00      	nop
 800a3ca:	e7fd      	b.n	800a3c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d103      	bne.n	800a3da <xQueueGenericSendFromISR+0x3e>
 800a3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d101      	bne.n	800a3de <xQueueGenericSendFromISR+0x42>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e000      	b.n	800a3e0 <xQueueGenericSendFromISR+0x44>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10b      	bne.n	800a3fc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e8:	f383 8811 	msr	BASEPRI, r3
 800a3ec:	f3bf 8f6f 	isb	sy
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a3f6:	bf00      	nop
 800a3f8:	bf00      	nop
 800a3fa:	e7fd      	b.n	800a3f8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d103      	bne.n	800a40a <xQueueGenericSendFromISR+0x6e>
 800a402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a406:	2b01      	cmp	r3, #1
 800a408:	d101      	bne.n	800a40e <xQueueGenericSendFromISR+0x72>
 800a40a:	2301      	movs	r3, #1
 800a40c:	e000      	b.n	800a410 <xQueueGenericSendFromISR+0x74>
 800a40e:	2300      	movs	r3, #0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d10b      	bne.n	800a42c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a418:	f383 8811 	msr	BASEPRI, r3
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f3bf 8f4f 	dsb	sy
 800a424:	623b      	str	r3, [r7, #32]
}
 800a426:	bf00      	nop
 800a428:	bf00      	nop
 800a42a:	e7fd      	b.n	800a428 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a42c:	f002 f84c 	bl	800c4c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a430:	f3ef 8211 	mrs	r2, BASEPRI
 800a434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	61fa      	str	r2, [r7, #28]
 800a446:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a448:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a44a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a454:	429a      	cmp	r2, r3
 800a456:	d302      	bcc.n	800a45e <xQueueGenericSendFromISR+0xc2>
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d12f      	bne.n	800a4be <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a460:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a464:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a46a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a46c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	68b9      	ldr	r1, [r7, #8]
 800a472:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a474:	f000 f912 	bl	800a69c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a478:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a480:	d112      	bne.n	800a4a8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a486:	2b00      	cmp	r3, #0
 800a488:	d016      	beq.n	800a4b8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a48a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48c:	3324      	adds	r3, #36	@ 0x24
 800a48e:	4618      	mov	r0, r3
 800a490:	f001 f80a 	bl	800b4a8 <xTaskRemoveFromEventList>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00e      	beq.n	800a4b8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00b      	beq.n	800a4b8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	601a      	str	r2, [r3, #0]
 800a4a6:	e007      	b.n	800a4b8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a4a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	b25a      	sxtb	r2, r3
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a4bc:	e001      	b.n	800a4c2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4c4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a4cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3740      	adds	r7, #64	@ 0x40
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b08c      	sub	sp, #48	@ 0x30
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10b      	bne.n	800a50a <xQueueReceive+0x32>
	__asm volatile
 800a4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f6:	f383 8811 	msr	BASEPRI, r3
 800a4fa:	f3bf 8f6f 	isb	sy
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	623b      	str	r3, [r7, #32]
}
 800a504:	bf00      	nop
 800a506:	bf00      	nop
 800a508:	e7fd      	b.n	800a506 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d103      	bne.n	800a518 <xQueueReceive+0x40>
 800a510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a514:	2b00      	cmp	r3, #0
 800a516:	d101      	bne.n	800a51c <xQueueReceive+0x44>
 800a518:	2301      	movs	r3, #1
 800a51a:	e000      	b.n	800a51e <xQueueReceive+0x46>
 800a51c:	2300      	movs	r3, #0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d10b      	bne.n	800a53a <xQueueReceive+0x62>
	__asm volatile
 800a522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a526:	f383 8811 	msr	BASEPRI, r3
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	61fb      	str	r3, [r7, #28]
}
 800a534:	bf00      	nop
 800a536:	bf00      	nop
 800a538:	e7fd      	b.n	800a536 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a53a:	f001 f97b 	bl	800b834 <xTaskGetSchedulerState>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d102      	bne.n	800a54a <xQueueReceive+0x72>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d101      	bne.n	800a54e <xQueueReceive+0x76>
 800a54a:	2301      	movs	r3, #1
 800a54c:	e000      	b.n	800a550 <xQueueReceive+0x78>
 800a54e:	2300      	movs	r3, #0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d10b      	bne.n	800a56c <xQueueReceive+0x94>
	__asm volatile
 800a554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a558:	f383 8811 	msr	BASEPRI, r3
 800a55c:	f3bf 8f6f 	isb	sy
 800a560:	f3bf 8f4f 	dsb	sy
 800a564:	61bb      	str	r3, [r7, #24]
}
 800a566:	bf00      	nop
 800a568:	bf00      	nop
 800a56a:	e7fd      	b.n	800a568 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a56c:	f001 fecc 	bl	800c308 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a574:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d01f      	beq.n	800a5bc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a57c:	68b9      	ldr	r1, [r7, #8]
 800a57e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a580:	f000 f8f6 	bl	800a770 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a586:	1e5a      	subs	r2, r3, #1
 800a588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00f      	beq.n	800a5b4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a596:	3310      	adds	r3, #16
 800a598:	4618      	mov	r0, r3
 800a59a:	f000 ff85 	bl	800b4a8 <xTaskRemoveFromEventList>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d007      	beq.n	800a5b4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a5a4:	4b3c      	ldr	r3, [pc, #240]	@ (800a698 <xQueueReceive+0x1c0>)
 800a5a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5aa:	601a      	str	r2, [r3, #0]
 800a5ac:	f3bf 8f4f 	dsb	sy
 800a5b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a5b4:	f001 feda 	bl	800c36c <vPortExitCritical>
				return pdPASS;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e069      	b.n	800a690 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d103      	bne.n	800a5ca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5c2:	f001 fed3 	bl	800c36c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	e062      	b.n	800a690 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d106      	bne.n	800a5de <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5d0:	f107 0310 	add.w	r3, r7, #16
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f000 ffcb 	bl	800b570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5de:	f001 fec5 	bl	800c36c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5e2:	f000 fd21 	bl	800b028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5e6:	f001 fe8f 	bl	800c308 <vPortEnterCritical>
 800a5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a5f0:	b25b      	sxtb	r3, r3
 800a5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f6:	d103      	bne.n	800a600 <xQueueReceive+0x128>
 800a5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a602:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a606:	b25b      	sxtb	r3, r3
 800a608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a60c:	d103      	bne.n	800a616 <xQueueReceive+0x13e>
 800a60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a610:	2200      	movs	r2, #0
 800a612:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a616:	f001 fea9 	bl	800c36c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a61a:	1d3a      	adds	r2, r7, #4
 800a61c:	f107 0310 	add.w	r3, r7, #16
 800a620:	4611      	mov	r1, r2
 800a622:	4618      	mov	r0, r3
 800a624:	f000 ffba 	bl	800b59c <xTaskCheckForTimeOut>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d123      	bne.n	800a676 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a62e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a630:	f000 f916 	bl	800a860 <prvIsQueueEmpty>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d017      	beq.n	800a66a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a63a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63c:	3324      	adds	r3, #36	@ 0x24
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	4611      	mov	r1, r2
 800a642:	4618      	mov	r0, r3
 800a644:	f000 fede 	bl	800b404 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a648:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a64a:	f000 f8b7 	bl	800a7bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a64e:	f000 fcf9 	bl	800b044 <xTaskResumeAll>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d189      	bne.n	800a56c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a658:	4b0f      	ldr	r3, [pc, #60]	@ (800a698 <xQueueReceive+0x1c0>)
 800a65a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	f3bf 8f6f 	isb	sy
 800a668:	e780      	b.n	800a56c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a66a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a66c:	f000 f8a6 	bl	800a7bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a670:	f000 fce8 	bl	800b044 <xTaskResumeAll>
 800a674:	e77a      	b.n	800a56c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a676:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a678:	f000 f8a0 	bl	800a7bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a67c:	f000 fce2 	bl	800b044 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a680:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a682:	f000 f8ed 	bl	800a860 <prvIsQueueEmpty>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f43f af6f 	beq.w	800a56c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a68e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a690:	4618      	mov	r0, r3
 800a692:	3730      	adds	r7, #48	@ 0x30
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	e000ed04 	.word	0xe000ed04

0800a69c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b086      	sub	sp, #24
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d10d      	bne.n	800a6d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d14d      	bne.n	800a75e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f001 f8d2 	bl	800b870 <xTaskPriorityDisinherit>
 800a6cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	609a      	str	r2, [r3, #8]
 800a6d4:	e043      	b.n	800a75e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d119      	bne.n	800a710 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6858      	ldr	r0, [r3, #4]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	68b9      	ldr	r1, [r7, #8]
 800a6e8:	f002 f9b0 	bl	800ca4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	685a      	ldr	r2, [r3, #4]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6f4:	441a      	add	r2, r3
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	685a      	ldr	r2, [r3, #4]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	429a      	cmp	r2, r3
 800a704:	d32b      	bcc.n	800a75e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	605a      	str	r2, [r3, #4]
 800a70e:	e026      	b.n	800a75e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	68d8      	ldr	r0, [r3, #12]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a718:	461a      	mov	r2, r3
 800a71a:	68b9      	ldr	r1, [r7, #8]
 800a71c:	f002 f996 	bl	800ca4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	68da      	ldr	r2, [r3, #12]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a728:	425b      	negs	r3, r3
 800a72a:	441a      	add	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	68da      	ldr	r2, [r3, #12]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d207      	bcs.n	800a74c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	689a      	ldr	r2, [r3, #8]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a744:	425b      	negs	r3, r3
 800a746:	441a      	add	r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d105      	bne.n	800a75e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d002      	beq.n	800a75e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	3b01      	subs	r3, #1
 800a75c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	1c5a      	adds	r2, r3, #1
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a766:	697b      	ldr	r3, [r7, #20]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3718      	adds	r7, #24
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d018      	beq.n	800a7b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	68da      	ldr	r2, [r3, #12]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a78a:	441a      	add	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	68da      	ldr	r2, [r3, #12]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d303      	bcc.n	800a7a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68d9      	ldr	r1, [r3, #12]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	6838      	ldr	r0, [r7, #0]
 800a7b0:	f002 f94c 	bl	800ca4c <memcpy>
	}
}
 800a7b4:	bf00      	nop
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a7c4:	f001 fda0 	bl	800c308 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7d0:	e011      	b.n	800a7f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d012      	beq.n	800a800 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	3324      	adds	r3, #36	@ 0x24
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f000 fe62 	bl	800b4a8 <xTaskRemoveFromEventList>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d001      	beq.n	800a7ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a7ea:	f000 ff3b 	bl	800b664 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	dce9      	bgt.n	800a7d2 <prvUnlockQueue+0x16>
 800a7fe:	e000      	b.n	800a802 <prvUnlockQueue+0x46>
					break;
 800a800:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	22ff      	movs	r2, #255	@ 0xff
 800a806:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a80a:	f001 fdaf 	bl	800c36c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a80e:	f001 fd7b 	bl	800c308 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a818:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a81a:	e011      	b.n	800a840 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d012      	beq.n	800a84a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	3310      	adds	r3, #16
 800a828:	4618      	mov	r0, r3
 800a82a:	f000 fe3d 	bl	800b4a8 <xTaskRemoveFromEventList>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d001      	beq.n	800a838 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a834:	f000 ff16 	bl	800b664 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a838:	7bbb      	ldrb	r3, [r7, #14]
 800a83a:	3b01      	subs	r3, #1
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a840:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a844:	2b00      	cmp	r3, #0
 800a846:	dce9      	bgt.n	800a81c <prvUnlockQueue+0x60>
 800a848:	e000      	b.n	800a84c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a84a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	22ff      	movs	r2, #255	@ 0xff
 800a850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a854:	f001 fd8a 	bl	800c36c <vPortExitCritical>
}
 800a858:	bf00      	nop
 800a85a:	3710      	adds	r7, #16
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a868:	f001 fd4e 	bl	800c308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a870:	2b00      	cmp	r3, #0
 800a872:	d102      	bne.n	800a87a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a874:	2301      	movs	r3, #1
 800a876:	60fb      	str	r3, [r7, #12]
 800a878:	e001      	b.n	800a87e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a87a:	2300      	movs	r3, #0
 800a87c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a87e:	f001 fd75 	bl	800c36c <vPortExitCritical>

	return xReturn;
 800a882:	68fb      	ldr	r3, [r7, #12]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a894:	f001 fd38 	bl	800c308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d102      	bne.n	800a8aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	60fb      	str	r3, [r7, #12]
 800a8a8:	e001      	b.n	800a8ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8ae:	f001 fd5d 	bl	800c36c <vPortExitCritical>

	return xReturn;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60fb      	str	r3, [r7, #12]
 800a8ca:	e014      	b.n	800a8f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a8cc:	4a0f      	ldr	r2, [pc, #60]	@ (800a90c <vQueueAddToRegistry+0x50>)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d10b      	bne.n	800a8f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a8d8:	490c      	ldr	r1, [pc, #48]	@ (800a90c <vQueueAddToRegistry+0x50>)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	683a      	ldr	r2, [r7, #0]
 800a8de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a8e2:	4a0a      	ldr	r2, [pc, #40]	@ (800a90c <vQueueAddToRegistry+0x50>)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	00db      	lsls	r3, r3, #3
 800a8e8:	4413      	add	r3, r2
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a8ee:	e006      	b.n	800a8fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	60fb      	str	r3, [r7, #12]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2b07      	cmp	r3, #7
 800a8fa:	d9e7      	bls.n	800a8cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a8fc:	bf00      	nop
 800a8fe:	bf00      	nop
 800a900:	3714      	adds	r7, #20
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	2000117c 	.word	0x2000117c

0800a910 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a920:	f001 fcf2 	bl	800c308 <vPortEnterCritical>
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a92a:	b25b      	sxtb	r3, r3
 800a92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a930:	d103      	bne.n	800a93a <vQueueWaitForMessageRestricted+0x2a>
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	2200      	movs	r2, #0
 800a936:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a940:	b25b      	sxtb	r3, r3
 800a942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a946:	d103      	bne.n	800a950 <vQueueWaitForMessageRestricted+0x40>
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a950:	f001 fd0c 	bl	800c36c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d106      	bne.n	800a96a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	3324      	adds	r3, #36	@ 0x24
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	68b9      	ldr	r1, [r7, #8]
 800a964:	4618      	mov	r0, r3
 800a966:	f000 fd73 	bl	800b450 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a96a:	6978      	ldr	r0, [r7, #20]
 800a96c:	f7ff ff26 	bl	800a7bc <prvUnlockQueue>
	}
 800a970:	bf00      	nop
 800a972:	3718      	adds	r7, #24
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08e      	sub	sp, #56	@ 0x38
 800a97c:	af04      	add	r7, sp, #16
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	607a      	str	r2, [r7, #4]
 800a984:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10b      	bne.n	800a9a4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	623b      	str	r3, [r7, #32]
}
 800a99e:	bf00      	nop
 800a9a0:	bf00      	nop
 800a9a2:	e7fd      	b.n	800a9a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d10b      	bne.n	800a9c2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a9aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ae:	f383 8811 	msr	BASEPRI, r3
 800a9b2:	f3bf 8f6f 	isb	sy
 800a9b6:	f3bf 8f4f 	dsb	sy
 800a9ba:	61fb      	str	r3, [r7, #28]
}
 800a9bc:	bf00      	nop
 800a9be:	bf00      	nop
 800a9c0:	e7fd      	b.n	800a9be <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a9c2:	23a8      	movs	r3, #168	@ 0xa8
 800a9c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	2ba8      	cmp	r3, #168	@ 0xa8
 800a9ca:	d00b      	beq.n	800a9e4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d0:	f383 8811 	msr	BASEPRI, r3
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	61bb      	str	r3, [r7, #24]
}
 800a9de:	bf00      	nop
 800a9e0:	bf00      	nop
 800a9e2:	e7fd      	b.n	800a9e0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a9e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d01e      	beq.n	800aa2a <xTaskCreateStatic+0xb2>
 800a9ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d01b      	beq.n	800aa2a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9fa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fe:	2202      	movs	r2, #2
 800aa00:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa04:	2300      	movs	r3, #0
 800aa06:	9303      	str	r3, [sp, #12]
 800aa08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0a:	9302      	str	r3, [sp, #8]
 800aa0c:	f107 0314 	add.w	r3, r7, #20
 800aa10:	9301      	str	r3, [sp, #4]
 800aa12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	68b9      	ldr	r1, [r7, #8]
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f000 f851 	bl	800aac4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aa24:	f000 f8f6 	bl	800ac14 <prvAddNewTaskToReadyList>
 800aa28:	e001      	b.n	800aa2e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa2e:	697b      	ldr	r3, [r7, #20]
	}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3728      	adds	r7, #40	@ 0x28
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b08c      	sub	sp, #48	@ 0x30
 800aa3c:	af04      	add	r7, sp, #16
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	603b      	str	r3, [r7, #0]
 800aa44:	4613      	mov	r3, r2
 800aa46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa48:	88fb      	ldrh	r3, [r7, #6]
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f001 fd7d 	bl	800c54c <pvPortMalloc>
 800aa52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00e      	beq.n	800aa78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa5a:	20a8      	movs	r0, #168	@ 0xa8
 800aa5c:	f001 fd76 	bl	800c54c <pvPortMalloc>
 800aa60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d003      	beq.n	800aa70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	697a      	ldr	r2, [r7, #20]
 800aa6c:	631a      	str	r2, [r3, #48]	@ 0x30
 800aa6e:	e005      	b.n	800aa7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa70:	6978      	ldr	r0, [r7, #20]
 800aa72:	f001 fe39 	bl	800c6e8 <vPortFree>
 800aa76:	e001      	b.n	800aa7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d017      	beq.n	800aab2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	2200      	movs	r2, #0
 800aa86:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa8a:	88fa      	ldrh	r2, [r7, #6]
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	9303      	str	r3, [sp, #12]
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	9302      	str	r3, [sp, #8]
 800aa94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa96:	9301      	str	r3, [sp, #4]
 800aa98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	68b9      	ldr	r1, [r7, #8]
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f000 f80f 	bl	800aac4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aaa6:	69f8      	ldr	r0, [r7, #28]
 800aaa8:	f000 f8b4 	bl	800ac14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aaac:	2301      	movs	r3, #1
 800aaae:	61bb      	str	r3, [r7, #24]
 800aab0:	e002      	b.n	800aab8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aab2:	f04f 33ff 	mov.w	r3, #4294967295
 800aab6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aab8:	69bb      	ldr	r3, [r7, #24]
	}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3720      	adds	r7, #32
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
	...

0800aac4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b088      	sub	sp, #32
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
 800aad0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	461a      	mov	r2, r3
 800aadc:	21a5      	movs	r1, #165	@ 0xa5
 800aade:	f001 ff23 	bl	800c928 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aaec:	3b01      	subs	r3, #1
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4413      	add	r3, r2
 800aaf2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	f023 0307 	bic.w	r3, r3, #7
 800aafa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	f003 0307 	and.w	r3, r3, #7
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d00b      	beq.n	800ab1e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ab06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab0a:	f383 8811 	msr	BASEPRI, r3
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f3bf 8f4f 	dsb	sy
 800ab16:	617b      	str	r3, [r7, #20]
}
 800ab18:	bf00      	nop
 800ab1a:	bf00      	nop
 800ab1c:	e7fd      	b.n	800ab1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d01f      	beq.n	800ab64 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab24:	2300      	movs	r3, #0
 800ab26:	61fb      	str	r3, [r7, #28]
 800ab28:	e012      	b.n	800ab50 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab2a:	68ba      	ldr	r2, [r7, #8]
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	4413      	add	r3, r2
 800ab30:	7819      	ldrb	r1, [r3, #0]
 800ab32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	4413      	add	r3, r2
 800ab38:	3334      	adds	r3, #52	@ 0x34
 800ab3a:	460a      	mov	r2, r1
 800ab3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	4413      	add	r3, r2
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d006      	beq.n	800ab58 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	61fb      	str	r3, [r7, #28]
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	2b0f      	cmp	r3, #15
 800ab54:	d9e9      	bls.n	800ab2a <prvInitialiseNewTask+0x66>
 800ab56:	e000      	b.n	800ab5a <prvInitialiseNewTask+0x96>
			{
				break;
 800ab58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ab62:	e003      	b.n	800ab6c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab66:	2200      	movs	r2, #0
 800ab68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab6e:	2b37      	cmp	r3, #55	@ 0x37
 800ab70:	d901      	bls.n	800ab76 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab72:	2337      	movs	r3, #55	@ 0x37
 800ab74:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab80:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ab82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab84:	2200      	movs	r2, #0
 800ab86:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7ff f965 	bl	8009e5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab94:	3318      	adds	r3, #24
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7ff f960 	bl	8009e5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aba0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abaa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800abac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abb0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800abb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb4:	2200      	movs	r2, #0
 800abb6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800abba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800abc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc4:	3354      	adds	r3, #84	@ 0x54
 800abc6:	224c      	movs	r2, #76	@ 0x4c
 800abc8:	2100      	movs	r1, #0
 800abca:	4618      	mov	r0, r3
 800abcc:	f001 feac 	bl	800c928 <memset>
 800abd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd2:	4a0d      	ldr	r2, [pc, #52]	@ (800ac08 <prvInitialiseNewTask+0x144>)
 800abd4:	659a      	str	r2, [r3, #88]	@ 0x58
 800abd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd8:	4a0c      	ldr	r2, [pc, #48]	@ (800ac0c <prvInitialiseNewTask+0x148>)
 800abda:	65da      	str	r2, [r3, #92]	@ 0x5c
 800abdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abde:	4a0c      	ldr	r2, [pc, #48]	@ (800ac10 <prvInitialiseNewTask+0x14c>)
 800abe0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800abe2:	683a      	ldr	r2, [r7, #0]
 800abe4:	68f9      	ldr	r1, [r7, #12]
 800abe6:	69b8      	ldr	r0, [r7, #24]
 800abe8:	f001 fa60 	bl	800c0ac <pxPortInitialiseStack>
 800abec:	4602      	mov	r2, r0
 800abee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800abf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d002      	beq.n	800abfe <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800abf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abfe:	bf00      	nop
 800ac00:	3720      	adds	r7, #32
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	20002410 	.word	0x20002410
 800ac0c:	20002478 	.word	0x20002478
 800ac10:	200024e0 	.word	0x200024e0

0800ac14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac1c:	f001 fb74 	bl	800c308 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac20:	4b2d      	ldr	r3, [pc, #180]	@ (800acd8 <prvAddNewTaskToReadyList+0xc4>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	3301      	adds	r3, #1
 800ac26:	4a2c      	ldr	r2, [pc, #176]	@ (800acd8 <prvAddNewTaskToReadyList+0xc4>)
 800ac28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac2a:	4b2c      	ldr	r3, [pc, #176]	@ (800acdc <prvAddNewTaskToReadyList+0xc8>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d109      	bne.n	800ac46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac32:	4a2a      	ldr	r2, [pc, #168]	@ (800acdc <prvAddNewTaskToReadyList+0xc8>)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac38:	4b27      	ldr	r3, [pc, #156]	@ (800acd8 <prvAddNewTaskToReadyList+0xc4>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d110      	bne.n	800ac62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac40:	f000 fd34 	bl	800b6ac <prvInitialiseTaskLists>
 800ac44:	e00d      	b.n	800ac62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac46:	4b26      	ldr	r3, [pc, #152]	@ (800ace0 <prvAddNewTaskToReadyList+0xcc>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d109      	bne.n	800ac62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac4e:	4b23      	ldr	r3, [pc, #140]	@ (800acdc <prvAddNewTaskToReadyList+0xc8>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d802      	bhi.n	800ac62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac5c:	4a1f      	ldr	r2, [pc, #124]	@ (800acdc <prvAddNewTaskToReadyList+0xc8>)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac62:	4b20      	ldr	r3, [pc, #128]	@ (800ace4 <prvAddNewTaskToReadyList+0xd0>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	3301      	adds	r3, #1
 800ac68:	4a1e      	ldr	r2, [pc, #120]	@ (800ace4 <prvAddNewTaskToReadyList+0xd0>)
 800ac6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ac6c:	4b1d      	ldr	r3, [pc, #116]	@ (800ace4 <prvAddNewTaskToReadyList+0xd0>)
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac78:	4b1b      	ldr	r3, [pc, #108]	@ (800ace8 <prvAddNewTaskToReadyList+0xd4>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d903      	bls.n	800ac88 <prvAddNewTaskToReadyList+0x74>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac84:	4a18      	ldr	r2, [pc, #96]	@ (800ace8 <prvAddNewTaskToReadyList+0xd4>)
 800ac86:	6013      	str	r3, [r2, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac8c:	4613      	mov	r3, r2
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	4413      	add	r3, r2
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4a15      	ldr	r2, [pc, #84]	@ (800acec <prvAddNewTaskToReadyList+0xd8>)
 800ac96:	441a      	add	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	3304      	adds	r3, #4
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	4610      	mov	r0, r2
 800aca0:	f7ff f8e9 	bl	8009e76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aca4:	f001 fb62 	bl	800c36c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aca8:	4b0d      	ldr	r3, [pc, #52]	@ (800ace0 <prvAddNewTaskToReadyList+0xcc>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00e      	beq.n	800acce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800acb0:	4b0a      	ldr	r3, [pc, #40]	@ (800acdc <prvAddNewTaskToReadyList+0xc8>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acba:	429a      	cmp	r2, r3
 800acbc:	d207      	bcs.n	800acce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800acbe:	4b0c      	ldr	r3, [pc, #48]	@ (800acf0 <prvAddNewTaskToReadyList+0xdc>)
 800acc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acc4:	601a      	str	r2, [r3, #0]
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acce:	bf00      	nop
 800acd0:	3708      	adds	r7, #8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	20001690 	.word	0x20001690
 800acdc:	200011bc 	.word	0x200011bc
 800ace0:	2000169c 	.word	0x2000169c
 800ace4:	200016ac 	.word	0x200016ac
 800ace8:	20001698 	.word	0x20001698
 800acec:	200011c0 	.word	0x200011c0
 800acf0:	e000ed04 	.word	0xe000ed04

0800acf4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800acfc:	f001 fb04 	bl	800c308 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d102      	bne.n	800ad0c <vTaskDelete+0x18>
 800ad06:	4b2d      	ldr	r3, [pc, #180]	@ (800adbc <vTaskDelete+0xc8>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	e000      	b.n	800ad0e <vTaskDelete+0x1a>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	3304      	adds	r3, #4
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7ff f90b 	bl	8009f30 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d004      	beq.n	800ad2c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	3318      	adds	r3, #24
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7ff f902 	bl	8009f30 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800ad2c:	4b24      	ldr	r3, [pc, #144]	@ (800adc0 <vTaskDelete+0xcc>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	3301      	adds	r3, #1
 800ad32:	4a23      	ldr	r2, [pc, #140]	@ (800adc0 <vTaskDelete+0xcc>)
 800ad34:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ad36:	4b21      	ldr	r3, [pc, #132]	@ (800adbc <vTaskDelete+0xc8>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d10b      	bne.n	800ad58 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	3304      	adds	r3, #4
 800ad44:	4619      	mov	r1, r3
 800ad46:	481f      	ldr	r0, [pc, #124]	@ (800adc4 <vTaskDelete+0xd0>)
 800ad48:	f7ff f895 	bl	8009e76 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ad4c:	4b1e      	ldr	r3, [pc, #120]	@ (800adc8 <vTaskDelete+0xd4>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	3301      	adds	r3, #1
 800ad52:	4a1d      	ldr	r2, [pc, #116]	@ (800adc8 <vTaskDelete+0xd4>)
 800ad54:	6013      	str	r3, [r2, #0]
 800ad56:	e009      	b.n	800ad6c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ad58:	4b1c      	ldr	r3, [pc, #112]	@ (800adcc <vTaskDelete+0xd8>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	3b01      	subs	r3, #1
 800ad5e:	4a1b      	ldr	r2, [pc, #108]	@ (800adcc <vTaskDelete+0xd8>)
 800ad60:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800ad62:	68f8      	ldr	r0, [r7, #12]
 800ad64:	f000 fd10 	bl	800b788 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ad68:	f000 fd44 	bl	800b7f4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800ad6c:	f001 fafe 	bl	800c36c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ad70:	4b17      	ldr	r3, [pc, #92]	@ (800add0 <vTaskDelete+0xdc>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d01c      	beq.n	800adb2 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800ad78:	4b10      	ldr	r3, [pc, #64]	@ (800adbc <vTaskDelete+0xc8>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d117      	bne.n	800adb2 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ad82:	4b14      	ldr	r3, [pc, #80]	@ (800add4 <vTaskDelete+0xe0>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d00b      	beq.n	800ada2 <vTaskDelete+0xae>
	__asm volatile
 800ad8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad8e:	f383 8811 	msr	BASEPRI, r3
 800ad92:	f3bf 8f6f 	isb	sy
 800ad96:	f3bf 8f4f 	dsb	sy
 800ad9a:	60bb      	str	r3, [r7, #8]
}
 800ad9c:	bf00      	nop
 800ad9e:	bf00      	nop
 800ada0:	e7fd      	b.n	800ad9e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800ada2:	4b0d      	ldr	r3, [pc, #52]	@ (800add8 <vTaskDelete+0xe4>)
 800ada4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ada8:	601a      	str	r2, [r3, #0]
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800adb2:	bf00      	nop
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	200011bc 	.word	0x200011bc
 800adc0:	200016ac 	.word	0x200016ac
 800adc4:	20001664 	.word	0x20001664
 800adc8:	20001678 	.word	0x20001678
 800adcc:	20001690 	.word	0x20001690
 800add0:	2000169c 	.word	0x2000169c
 800add4:	200016b8 	.word	0x200016b8
 800add8:	e000ed04 	.word	0xe000ed04

0800addc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800addc:	b580      	push	{r7, lr}
 800adde:	b08a      	sub	sp, #40	@ 0x28
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ade6:	2300      	movs	r3, #0
 800ade8:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d10b      	bne.n	800ae08 <vTaskDelayUntil+0x2c>
	__asm volatile
 800adf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf4:	f383 8811 	msr	BASEPRI, r3
 800adf8:	f3bf 8f6f 	isb	sy
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	617b      	str	r3, [r7, #20]
}
 800ae02:	bf00      	nop
 800ae04:	bf00      	nop
 800ae06:	e7fd      	b.n	800ae04 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d10b      	bne.n	800ae26 <vTaskDelayUntil+0x4a>
	__asm volatile
 800ae0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	613b      	str	r3, [r7, #16]
}
 800ae20:	bf00      	nop
 800ae22:	bf00      	nop
 800ae24:	e7fd      	b.n	800ae22 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800ae26:	4b2a      	ldr	r3, [pc, #168]	@ (800aed0 <vTaskDelayUntil+0xf4>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00b      	beq.n	800ae46 <vTaskDelayUntil+0x6a>
	__asm volatile
 800ae2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae32:	f383 8811 	msr	BASEPRI, r3
 800ae36:	f3bf 8f6f 	isb	sy
 800ae3a:	f3bf 8f4f 	dsb	sy
 800ae3e:	60fb      	str	r3, [r7, #12]
}
 800ae40:	bf00      	nop
 800ae42:	bf00      	nop
 800ae44:	e7fd      	b.n	800ae42 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800ae46:	f000 f8ef 	bl	800b028 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ae4a:	4b22      	ldr	r3, [pc, #136]	@ (800aed4 <vTaskDelayUntil+0xf8>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	683a      	ldr	r2, [r7, #0]
 800ae56:	4413      	add	r3, r2
 800ae58:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	6a3a      	ldr	r2, [r7, #32]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d20b      	bcs.n	800ae7c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	69fa      	ldr	r2, [r7, #28]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d211      	bcs.n	800ae92 <vTaskDelayUntil+0xb6>
 800ae6e:	69fa      	ldr	r2, [r7, #28]
 800ae70:	6a3b      	ldr	r3, [r7, #32]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d90d      	bls.n	800ae92 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800ae76:	2301      	movs	r3, #1
 800ae78:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae7a:	e00a      	b.n	800ae92 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	69fa      	ldr	r2, [r7, #28]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d303      	bcc.n	800ae8e <vTaskDelayUntil+0xb2>
 800ae86:	69fa      	ldr	r2, [r7, #28]
 800ae88:	6a3b      	ldr	r3, [r7, #32]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d901      	bls.n	800ae92 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	69fa      	ldr	r2, [r7, #28]
 800ae96:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ae98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d006      	beq.n	800aeac <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ae9e:	69fa      	ldr	r2, [r7, #28]
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	1ad3      	subs	r3, r2, r3
 800aea4:	2100      	movs	r1, #0
 800aea6:	4618      	mov	r0, r3
 800aea8:	f000 fd52 	bl	800b950 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800aeac:	f000 f8ca 	bl	800b044 <xTaskResumeAll>
 800aeb0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d107      	bne.n	800aec8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800aeb8:	4b07      	ldr	r3, [pc, #28]	@ (800aed8 <vTaskDelayUntil+0xfc>)
 800aeba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aebe:	601a      	str	r2, [r3, #0]
 800aec0:	f3bf 8f4f 	dsb	sy
 800aec4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aec8:	bf00      	nop
 800aeca:	3728      	adds	r7, #40	@ 0x28
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	200016b8 	.word	0x200016b8
 800aed4:	20001694 	.word	0x20001694
 800aed8:	e000ed04 	.word	0xe000ed04

0800aedc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aee4:	2300      	movs	r3, #0
 800aee6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d018      	beq.n	800af20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aeee:	4b14      	ldr	r3, [pc, #80]	@ (800af40 <vTaskDelay+0x64>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00b      	beq.n	800af0e <vTaskDelay+0x32>
	__asm volatile
 800aef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aefa:	f383 8811 	msr	BASEPRI, r3
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	f3bf 8f4f 	dsb	sy
 800af06:	60bb      	str	r3, [r7, #8]
}
 800af08:	bf00      	nop
 800af0a:	bf00      	nop
 800af0c:	e7fd      	b.n	800af0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800af0e:	f000 f88b 	bl	800b028 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af12:	2100      	movs	r1, #0
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fd1b 	bl	800b950 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af1a:	f000 f893 	bl	800b044 <xTaskResumeAll>
 800af1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d107      	bne.n	800af36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800af26:	4b07      	ldr	r3, [pc, #28]	@ (800af44 <vTaskDelay+0x68>)
 800af28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af2c:	601a      	str	r2, [r3, #0]
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af36:	bf00      	nop
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	200016b8 	.word	0x200016b8
 800af44:	e000ed04 	.word	0xe000ed04

0800af48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b08a      	sub	sp, #40	@ 0x28
 800af4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af4e:	2300      	movs	r3, #0
 800af50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af52:	2300      	movs	r3, #0
 800af54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af56:	463a      	mov	r2, r7
 800af58:	1d39      	adds	r1, r7, #4
 800af5a:	f107 0308 	add.w	r3, r7, #8
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fe ff28 	bl	8009db4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af64:	6839      	ldr	r1, [r7, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	9202      	str	r2, [sp, #8]
 800af6c:	9301      	str	r3, [sp, #4]
 800af6e:	2300      	movs	r3, #0
 800af70:	9300      	str	r3, [sp, #0]
 800af72:	2300      	movs	r3, #0
 800af74:	460a      	mov	r2, r1
 800af76:	4924      	ldr	r1, [pc, #144]	@ (800b008 <vTaskStartScheduler+0xc0>)
 800af78:	4824      	ldr	r0, [pc, #144]	@ (800b00c <vTaskStartScheduler+0xc4>)
 800af7a:	f7ff fcfd 	bl	800a978 <xTaskCreateStatic>
 800af7e:	4603      	mov	r3, r0
 800af80:	4a23      	ldr	r2, [pc, #140]	@ (800b010 <vTaskStartScheduler+0xc8>)
 800af82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af84:	4b22      	ldr	r3, [pc, #136]	@ (800b010 <vTaskStartScheduler+0xc8>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d002      	beq.n	800af92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af8c:	2301      	movs	r3, #1
 800af8e:	617b      	str	r3, [r7, #20]
 800af90:	e001      	b.n	800af96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af92:	2300      	movs	r3, #0
 800af94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d102      	bne.n	800afa2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800af9c:	f000 fd2c 	bl	800b9f8 <xTimerCreateTimerTask>
 800afa0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d11b      	bne.n	800afe0 <vTaskStartScheduler+0x98>
	__asm volatile
 800afa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afac:	f383 8811 	msr	BASEPRI, r3
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	613b      	str	r3, [r7, #16]
}
 800afba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800afbc:	4b15      	ldr	r3, [pc, #84]	@ (800b014 <vTaskStartScheduler+0xcc>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	3354      	adds	r3, #84	@ 0x54
 800afc2:	4a15      	ldr	r2, [pc, #84]	@ (800b018 <vTaskStartScheduler+0xd0>)
 800afc4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800afc6:	4b15      	ldr	r3, [pc, #84]	@ (800b01c <vTaskStartScheduler+0xd4>)
 800afc8:	f04f 32ff 	mov.w	r2, #4294967295
 800afcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800afce:	4b14      	ldr	r3, [pc, #80]	@ (800b020 <vTaskStartScheduler+0xd8>)
 800afd0:	2201      	movs	r2, #1
 800afd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800afd4:	4b13      	ldr	r3, [pc, #76]	@ (800b024 <vTaskStartScheduler+0xdc>)
 800afd6:	2200      	movs	r2, #0
 800afd8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800afda:	f001 f8f1 	bl	800c1c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800afde:	e00f      	b.n	800b000 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afe6:	d10b      	bne.n	800b000 <vTaskStartScheduler+0xb8>
	__asm volatile
 800afe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afec:	f383 8811 	msr	BASEPRI, r3
 800aff0:	f3bf 8f6f 	isb	sy
 800aff4:	f3bf 8f4f 	dsb	sy
 800aff8:	60fb      	str	r3, [r7, #12]
}
 800affa:	bf00      	nop
 800affc:	bf00      	nop
 800affe:	e7fd      	b.n	800affc <vTaskStartScheduler+0xb4>
}
 800b000:	bf00      	nop
 800b002:	3718      	adds	r7, #24
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	0800cb90 	.word	0x0800cb90
 800b00c:	0800b67d 	.word	0x0800b67d
 800b010:	200016b4 	.word	0x200016b4
 800b014:	200011bc 	.word	0x200011bc
 800b018:	20000204 	.word	0x20000204
 800b01c:	200016b0 	.word	0x200016b0
 800b020:	2000169c 	.word	0x2000169c
 800b024:	20001694 	.word	0x20001694

0800b028 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b028:	b480      	push	{r7}
 800b02a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b02c:	4b04      	ldr	r3, [pc, #16]	@ (800b040 <vTaskSuspendAll+0x18>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	3301      	adds	r3, #1
 800b032:	4a03      	ldr	r2, [pc, #12]	@ (800b040 <vTaskSuspendAll+0x18>)
 800b034:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b036:	bf00      	nop
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr
 800b040:	200016b8 	.word	0x200016b8

0800b044 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b04a:	2300      	movs	r3, #0
 800b04c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b04e:	2300      	movs	r3, #0
 800b050:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b052:	4b42      	ldr	r3, [pc, #264]	@ (800b15c <xTaskResumeAll+0x118>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d10b      	bne.n	800b072 <xTaskResumeAll+0x2e>
	__asm volatile
 800b05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05e:	f383 8811 	msr	BASEPRI, r3
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	603b      	str	r3, [r7, #0]
}
 800b06c:	bf00      	nop
 800b06e:	bf00      	nop
 800b070:	e7fd      	b.n	800b06e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b072:	f001 f949 	bl	800c308 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b076:	4b39      	ldr	r3, [pc, #228]	@ (800b15c <xTaskResumeAll+0x118>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	3b01      	subs	r3, #1
 800b07c:	4a37      	ldr	r2, [pc, #220]	@ (800b15c <xTaskResumeAll+0x118>)
 800b07e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b080:	4b36      	ldr	r3, [pc, #216]	@ (800b15c <xTaskResumeAll+0x118>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d162      	bne.n	800b14e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b088:	4b35      	ldr	r3, [pc, #212]	@ (800b160 <xTaskResumeAll+0x11c>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d05e      	beq.n	800b14e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b090:	e02f      	b.n	800b0f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b092:	4b34      	ldr	r3, [pc, #208]	@ (800b164 <xTaskResumeAll+0x120>)
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	3318      	adds	r3, #24
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7fe ff46 	bl	8009f30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	3304      	adds	r3, #4
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7fe ff41 	bl	8009f30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0b2:	4b2d      	ldr	r3, [pc, #180]	@ (800b168 <xTaskResumeAll+0x124>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d903      	bls.n	800b0c2 <xTaskResumeAll+0x7e>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0be:	4a2a      	ldr	r2, [pc, #168]	@ (800b168 <xTaskResumeAll+0x124>)
 800b0c0:	6013      	str	r3, [r2, #0]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	4413      	add	r3, r2
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	4a27      	ldr	r2, [pc, #156]	@ (800b16c <xTaskResumeAll+0x128>)
 800b0d0:	441a      	add	r2, r3
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	3304      	adds	r3, #4
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	4610      	mov	r0, r2
 800b0da:	f7fe fecc 	bl	8009e76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0e2:	4b23      	ldr	r3, [pc, #140]	@ (800b170 <xTaskResumeAll+0x12c>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d302      	bcc.n	800b0f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b0ec:	4b21      	ldr	r3, [pc, #132]	@ (800b174 <xTaskResumeAll+0x130>)
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0f2:	4b1c      	ldr	r3, [pc, #112]	@ (800b164 <xTaskResumeAll+0x120>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d1cb      	bne.n	800b092 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d001      	beq.n	800b104 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b100:	f000 fb78 	bl	800b7f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b104:	4b1c      	ldr	r3, [pc, #112]	@ (800b178 <xTaskResumeAll+0x134>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d010      	beq.n	800b132 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b110:	f000 f858 	bl	800b1c4 <xTaskIncrementTick>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d002      	beq.n	800b120 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b11a:	4b16      	ldr	r3, [pc, #88]	@ (800b174 <xTaskResumeAll+0x130>)
 800b11c:	2201      	movs	r2, #1
 800b11e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	3b01      	subs	r3, #1
 800b124:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1f1      	bne.n	800b110 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b12c:	4b12      	ldr	r3, [pc, #72]	@ (800b178 <xTaskResumeAll+0x134>)
 800b12e:	2200      	movs	r2, #0
 800b130:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b132:	4b10      	ldr	r3, [pc, #64]	@ (800b174 <xTaskResumeAll+0x130>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d009      	beq.n	800b14e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b13a:	2301      	movs	r3, #1
 800b13c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b13e:	4b0f      	ldr	r3, [pc, #60]	@ (800b17c <xTaskResumeAll+0x138>)
 800b140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b144:	601a      	str	r2, [r3, #0]
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b14e:	f001 f90d 	bl	800c36c <vPortExitCritical>

	return xAlreadyYielded;
 800b152:	68bb      	ldr	r3, [r7, #8]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3710      	adds	r7, #16
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	200016b8 	.word	0x200016b8
 800b160:	20001690 	.word	0x20001690
 800b164:	20001650 	.word	0x20001650
 800b168:	20001698 	.word	0x20001698
 800b16c:	200011c0 	.word	0x200011c0
 800b170:	200011bc 	.word	0x200011bc
 800b174:	200016a4 	.word	0x200016a4
 800b178:	200016a0 	.word	0x200016a0
 800b17c:	e000ed04 	.word	0xe000ed04

0800b180 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b186:	4b05      	ldr	r3, [pc, #20]	@ (800b19c <xTaskGetTickCount+0x1c>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b18c:	687b      	ldr	r3, [r7, #4]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	370c      	adds	r7, #12
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	20001694 	.word	0x20001694

0800b1a0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1a6:	f001 f98f 	bl	800c4c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b1ae:	4b04      	ldr	r3, [pc, #16]	@ (800b1c0 <xTaskGetTickCountFromISR+0x20>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b1b4:	683b      	ldr	r3, [r7, #0]
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	20001694 	.word	0x20001694

0800b1c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b086      	sub	sp, #24
 800b1c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1ce:	4b4f      	ldr	r3, [pc, #316]	@ (800b30c <xTaskIncrementTick+0x148>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f040 8090 	bne.w	800b2f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b1d8:	4b4d      	ldr	r3, [pc, #308]	@ (800b310 <xTaskIncrementTick+0x14c>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b1e0:	4a4b      	ldr	r2, [pc, #300]	@ (800b310 <xTaskIncrementTick+0x14c>)
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d121      	bne.n	800b230 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b1ec:	4b49      	ldr	r3, [pc, #292]	@ (800b314 <xTaskIncrementTick+0x150>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00b      	beq.n	800b20e <xTaskIncrementTick+0x4a>
	__asm volatile
 800b1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1fa:	f383 8811 	msr	BASEPRI, r3
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	603b      	str	r3, [r7, #0]
}
 800b208:	bf00      	nop
 800b20a:	bf00      	nop
 800b20c:	e7fd      	b.n	800b20a <xTaskIncrementTick+0x46>
 800b20e:	4b41      	ldr	r3, [pc, #260]	@ (800b314 <xTaskIncrementTick+0x150>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	60fb      	str	r3, [r7, #12]
 800b214:	4b40      	ldr	r3, [pc, #256]	@ (800b318 <xTaskIncrementTick+0x154>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a3e      	ldr	r2, [pc, #248]	@ (800b314 <xTaskIncrementTick+0x150>)
 800b21a:	6013      	str	r3, [r2, #0]
 800b21c:	4a3e      	ldr	r2, [pc, #248]	@ (800b318 <xTaskIncrementTick+0x154>)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	6013      	str	r3, [r2, #0]
 800b222:	4b3e      	ldr	r3, [pc, #248]	@ (800b31c <xTaskIncrementTick+0x158>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	3301      	adds	r3, #1
 800b228:	4a3c      	ldr	r2, [pc, #240]	@ (800b31c <xTaskIncrementTick+0x158>)
 800b22a:	6013      	str	r3, [r2, #0]
 800b22c:	f000 fae2 	bl	800b7f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b230:	4b3b      	ldr	r3, [pc, #236]	@ (800b320 <xTaskIncrementTick+0x15c>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	693a      	ldr	r2, [r7, #16]
 800b236:	429a      	cmp	r2, r3
 800b238:	d349      	bcc.n	800b2ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b23a:	4b36      	ldr	r3, [pc, #216]	@ (800b314 <xTaskIncrementTick+0x150>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d104      	bne.n	800b24e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b244:	4b36      	ldr	r3, [pc, #216]	@ (800b320 <xTaskIncrementTick+0x15c>)
 800b246:	f04f 32ff 	mov.w	r2, #4294967295
 800b24a:	601a      	str	r2, [r3, #0]
					break;
 800b24c:	e03f      	b.n	800b2ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b24e:	4b31      	ldr	r3, [pc, #196]	@ (800b314 <xTaskIncrementTick+0x150>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	429a      	cmp	r2, r3
 800b264:	d203      	bcs.n	800b26e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b266:	4a2e      	ldr	r2, [pc, #184]	@ (800b320 <xTaskIncrementTick+0x15c>)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b26c:	e02f      	b.n	800b2ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	3304      	adds	r3, #4
 800b272:	4618      	mov	r0, r3
 800b274:	f7fe fe5c 	bl	8009f30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d004      	beq.n	800b28a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	3318      	adds	r3, #24
 800b284:	4618      	mov	r0, r3
 800b286:	f7fe fe53 	bl	8009f30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b28e:	4b25      	ldr	r3, [pc, #148]	@ (800b324 <xTaskIncrementTick+0x160>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	429a      	cmp	r2, r3
 800b294:	d903      	bls.n	800b29e <xTaskIncrementTick+0xda>
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b29a:	4a22      	ldr	r2, [pc, #136]	@ (800b324 <xTaskIncrementTick+0x160>)
 800b29c:	6013      	str	r3, [r2, #0]
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	4413      	add	r3, r2
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	4a1f      	ldr	r2, [pc, #124]	@ (800b328 <xTaskIncrementTick+0x164>)
 800b2ac:	441a      	add	r2, r3
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	3304      	adds	r3, #4
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	4610      	mov	r0, r2
 800b2b6:	f7fe fdde 	bl	8009e76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2be:	4b1b      	ldr	r3, [pc, #108]	@ (800b32c <xTaskIncrementTick+0x168>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d3b8      	bcc.n	800b23a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2cc:	e7b5      	b.n	800b23a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2ce:	4b17      	ldr	r3, [pc, #92]	@ (800b32c <xTaskIncrementTick+0x168>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2d4:	4914      	ldr	r1, [pc, #80]	@ (800b328 <xTaskIncrementTick+0x164>)
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4413      	add	r3, r2
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	440b      	add	r3, r1
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d901      	bls.n	800b2ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b2ea:	4b11      	ldr	r3, [pc, #68]	@ (800b330 <xTaskIncrementTick+0x16c>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d007      	beq.n	800b302 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	617b      	str	r3, [r7, #20]
 800b2f6:	e004      	b.n	800b302 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b2f8:	4b0e      	ldr	r3, [pc, #56]	@ (800b334 <xTaskIncrementTick+0x170>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	4a0d      	ldr	r2, [pc, #52]	@ (800b334 <xTaskIncrementTick+0x170>)
 800b300:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b302:	697b      	ldr	r3, [r7, #20]
}
 800b304:	4618      	mov	r0, r3
 800b306:	3718      	adds	r7, #24
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	200016b8 	.word	0x200016b8
 800b310:	20001694 	.word	0x20001694
 800b314:	20001648 	.word	0x20001648
 800b318:	2000164c 	.word	0x2000164c
 800b31c:	200016a8 	.word	0x200016a8
 800b320:	200016b0 	.word	0x200016b0
 800b324:	20001698 	.word	0x20001698
 800b328:	200011c0 	.word	0x200011c0
 800b32c:	200011bc 	.word	0x200011bc
 800b330:	200016a4 	.word	0x200016a4
 800b334:	200016a0 	.word	0x200016a0

0800b338 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b338:	b480      	push	{r7}
 800b33a:	b085      	sub	sp, #20
 800b33c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b33e:	4b2b      	ldr	r3, [pc, #172]	@ (800b3ec <vTaskSwitchContext+0xb4>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d003      	beq.n	800b34e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b346:	4b2a      	ldr	r3, [pc, #168]	@ (800b3f0 <vTaskSwitchContext+0xb8>)
 800b348:	2201      	movs	r2, #1
 800b34a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b34c:	e047      	b.n	800b3de <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b34e:	4b28      	ldr	r3, [pc, #160]	@ (800b3f0 <vTaskSwitchContext+0xb8>)
 800b350:	2200      	movs	r2, #0
 800b352:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b354:	4b27      	ldr	r3, [pc, #156]	@ (800b3f4 <vTaskSwitchContext+0xbc>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	60fb      	str	r3, [r7, #12]
 800b35a:	e011      	b.n	800b380 <vTaskSwitchContext+0x48>
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d10b      	bne.n	800b37a <vTaskSwitchContext+0x42>
	__asm volatile
 800b362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	607b      	str	r3, [r7, #4]
}
 800b374:	bf00      	nop
 800b376:	bf00      	nop
 800b378:	e7fd      	b.n	800b376 <vTaskSwitchContext+0x3e>
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	3b01      	subs	r3, #1
 800b37e:	60fb      	str	r3, [r7, #12]
 800b380:	491d      	ldr	r1, [pc, #116]	@ (800b3f8 <vTaskSwitchContext+0xc0>)
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	4613      	mov	r3, r2
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	4413      	add	r3, r2
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	440b      	add	r3, r1
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d0e3      	beq.n	800b35c <vTaskSwitchContext+0x24>
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	4613      	mov	r3, r2
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	4413      	add	r3, r2
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	4a16      	ldr	r2, [pc, #88]	@ (800b3f8 <vTaskSwitchContext+0xc0>)
 800b3a0:	4413      	add	r3, r2
 800b3a2:	60bb      	str	r3, [r7, #8]
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	685a      	ldr	r2, [r3, #4]
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	605a      	str	r2, [r3, #4]
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	685a      	ldr	r2, [r3, #4]
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	3308      	adds	r3, #8
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d104      	bne.n	800b3c4 <vTaskSwitchContext+0x8c>
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	685a      	ldr	r2, [r3, #4]
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	605a      	str	r2, [r3, #4]
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	4a0c      	ldr	r2, [pc, #48]	@ (800b3fc <vTaskSwitchContext+0xc4>)
 800b3cc:	6013      	str	r3, [r2, #0]
 800b3ce:	4a09      	ldr	r2, [pc, #36]	@ (800b3f4 <vTaskSwitchContext+0xbc>)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b3d4:	4b09      	ldr	r3, [pc, #36]	@ (800b3fc <vTaskSwitchContext+0xc4>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	3354      	adds	r3, #84	@ 0x54
 800b3da:	4a09      	ldr	r2, [pc, #36]	@ (800b400 <vTaskSwitchContext+0xc8>)
 800b3dc:	6013      	str	r3, [r2, #0]
}
 800b3de:	bf00      	nop
 800b3e0:	3714      	adds	r7, #20
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	200016b8 	.word	0x200016b8
 800b3f0:	200016a4 	.word	0x200016a4
 800b3f4:	20001698 	.word	0x20001698
 800b3f8:	200011c0 	.word	0x200011c0
 800b3fc:	200011bc 	.word	0x200011bc
 800b400:	20000204 	.word	0x20000204

0800b404 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d10b      	bne.n	800b42c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b418:	f383 8811 	msr	BASEPRI, r3
 800b41c:	f3bf 8f6f 	isb	sy
 800b420:	f3bf 8f4f 	dsb	sy
 800b424:	60fb      	str	r3, [r7, #12]
}
 800b426:	bf00      	nop
 800b428:	bf00      	nop
 800b42a:	e7fd      	b.n	800b428 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b42c:	4b07      	ldr	r3, [pc, #28]	@ (800b44c <vTaskPlaceOnEventList+0x48>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3318      	adds	r3, #24
 800b432:	4619      	mov	r1, r3
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7fe fd42 	bl	8009ebe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b43a:	2101      	movs	r1, #1
 800b43c:	6838      	ldr	r0, [r7, #0]
 800b43e:	f000 fa87 	bl	800b950 <prvAddCurrentTaskToDelayedList>
}
 800b442:	bf00      	nop
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	200011bc 	.word	0x200011bc

0800b450 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d10b      	bne.n	800b47a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b466:	f383 8811 	msr	BASEPRI, r3
 800b46a:	f3bf 8f6f 	isb	sy
 800b46e:	f3bf 8f4f 	dsb	sy
 800b472:	617b      	str	r3, [r7, #20]
}
 800b474:	bf00      	nop
 800b476:	bf00      	nop
 800b478:	e7fd      	b.n	800b476 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b47a:	4b0a      	ldr	r3, [pc, #40]	@ (800b4a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	3318      	adds	r3, #24
 800b480:	4619      	mov	r1, r3
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f7fe fcf7 	bl	8009e76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d002      	beq.n	800b494 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b48e:	f04f 33ff 	mov.w	r3, #4294967295
 800b492:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b494:	6879      	ldr	r1, [r7, #4]
 800b496:	68b8      	ldr	r0, [r7, #8]
 800b498:	f000 fa5a 	bl	800b950 <prvAddCurrentTaskToDelayedList>
	}
 800b49c:	bf00      	nop
 800b49e:	3718      	adds	r7, #24
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	200011bc 	.word	0x200011bc

0800b4a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d10b      	bne.n	800b4d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c2:	f383 8811 	msr	BASEPRI, r3
 800b4c6:	f3bf 8f6f 	isb	sy
 800b4ca:	f3bf 8f4f 	dsb	sy
 800b4ce:	60fb      	str	r3, [r7, #12]
}
 800b4d0:	bf00      	nop
 800b4d2:	bf00      	nop
 800b4d4:	e7fd      	b.n	800b4d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	3318      	adds	r3, #24
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7fe fd28 	bl	8009f30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4e0:	4b1d      	ldr	r3, [pc, #116]	@ (800b558 <xTaskRemoveFromEventList+0xb0>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d11d      	bne.n	800b524 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	3304      	adds	r3, #4
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7fe fd1f 	bl	8009f30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4f6:	4b19      	ldr	r3, [pc, #100]	@ (800b55c <xTaskRemoveFromEventList+0xb4>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d903      	bls.n	800b506 <xTaskRemoveFromEventList+0x5e>
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b502:	4a16      	ldr	r2, [pc, #88]	@ (800b55c <xTaskRemoveFromEventList+0xb4>)
 800b504:	6013      	str	r3, [r2, #0]
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b50a:	4613      	mov	r3, r2
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	4413      	add	r3, r2
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	4a13      	ldr	r2, [pc, #76]	@ (800b560 <xTaskRemoveFromEventList+0xb8>)
 800b514:	441a      	add	r2, r3
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	3304      	adds	r3, #4
 800b51a:	4619      	mov	r1, r3
 800b51c:	4610      	mov	r0, r2
 800b51e:	f7fe fcaa 	bl	8009e76 <vListInsertEnd>
 800b522:	e005      	b.n	800b530 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	3318      	adds	r3, #24
 800b528:	4619      	mov	r1, r3
 800b52a:	480e      	ldr	r0, [pc, #56]	@ (800b564 <xTaskRemoveFromEventList+0xbc>)
 800b52c:	f7fe fca3 	bl	8009e76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b534:	4b0c      	ldr	r3, [pc, #48]	@ (800b568 <xTaskRemoveFromEventList+0xc0>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d905      	bls.n	800b54a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b53e:	2301      	movs	r3, #1
 800b540:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b542:	4b0a      	ldr	r3, [pc, #40]	@ (800b56c <xTaskRemoveFromEventList+0xc4>)
 800b544:	2201      	movs	r2, #1
 800b546:	601a      	str	r2, [r3, #0]
 800b548:	e001      	b.n	800b54e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b54a:	2300      	movs	r3, #0
 800b54c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b54e:	697b      	ldr	r3, [r7, #20]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3718      	adds	r7, #24
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	200016b8 	.word	0x200016b8
 800b55c:	20001698 	.word	0x20001698
 800b560:	200011c0 	.word	0x200011c0
 800b564:	20001650 	.word	0x20001650
 800b568:	200011bc 	.word	0x200011bc
 800b56c:	200016a4 	.word	0x200016a4

0800b570 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b578:	4b06      	ldr	r3, [pc, #24]	@ (800b594 <vTaskInternalSetTimeOutState+0x24>)
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b580:	4b05      	ldr	r3, [pc, #20]	@ (800b598 <vTaskInternalSetTimeOutState+0x28>)
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	605a      	str	r2, [r3, #4]
}
 800b588:	bf00      	nop
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr
 800b594:	200016a8 	.word	0x200016a8
 800b598:	20001694 	.word	0x20001694

0800b59c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b088      	sub	sp, #32
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10b      	bne.n	800b5c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b0:	f383 8811 	msr	BASEPRI, r3
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	f3bf 8f4f 	dsb	sy
 800b5bc:	613b      	str	r3, [r7, #16]
}
 800b5be:	bf00      	nop
 800b5c0:	bf00      	nop
 800b5c2:	e7fd      	b.n	800b5c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d10b      	bne.n	800b5e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ce:	f383 8811 	msr	BASEPRI, r3
 800b5d2:	f3bf 8f6f 	isb	sy
 800b5d6:	f3bf 8f4f 	dsb	sy
 800b5da:	60fb      	str	r3, [r7, #12]
}
 800b5dc:	bf00      	nop
 800b5de:	bf00      	nop
 800b5e0:	e7fd      	b.n	800b5de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b5e2:	f000 fe91 	bl	800c308 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b5e6:	4b1d      	ldr	r3, [pc, #116]	@ (800b65c <xTaskCheckForTimeOut+0xc0>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	69ba      	ldr	r2, [r7, #24]
 800b5f2:	1ad3      	subs	r3, r2, r3
 800b5f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5fe:	d102      	bne.n	800b606 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b600:	2300      	movs	r3, #0
 800b602:	61fb      	str	r3, [r7, #28]
 800b604:	e023      	b.n	800b64e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	4b15      	ldr	r3, [pc, #84]	@ (800b660 <xTaskCheckForTimeOut+0xc4>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d007      	beq.n	800b622 <xTaskCheckForTimeOut+0x86>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	69ba      	ldr	r2, [r7, #24]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d302      	bcc.n	800b622 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b61c:	2301      	movs	r3, #1
 800b61e:	61fb      	str	r3, [r7, #28]
 800b620:	e015      	b.n	800b64e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	697a      	ldr	r2, [r7, #20]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d20b      	bcs.n	800b644 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	1ad2      	subs	r2, r2, r3
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f7ff ff99 	bl	800b570 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b63e:	2300      	movs	r3, #0
 800b640:	61fb      	str	r3, [r7, #28]
 800b642:	e004      	b.n	800b64e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	2200      	movs	r2, #0
 800b648:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b64a:	2301      	movs	r3, #1
 800b64c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b64e:	f000 fe8d 	bl	800c36c <vPortExitCritical>

	return xReturn;
 800b652:	69fb      	ldr	r3, [r7, #28]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3720      	adds	r7, #32
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	20001694 	.word	0x20001694
 800b660:	200016a8 	.word	0x200016a8

0800b664 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b664:	b480      	push	{r7}
 800b666:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b668:	4b03      	ldr	r3, [pc, #12]	@ (800b678 <vTaskMissedYield+0x14>)
 800b66a:	2201      	movs	r2, #1
 800b66c:	601a      	str	r2, [r3, #0]
}
 800b66e:	bf00      	nop
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr
 800b678:	200016a4 	.word	0x200016a4

0800b67c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b684:	f000 f852 	bl	800b72c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b688:	4b06      	ldr	r3, [pc, #24]	@ (800b6a4 <prvIdleTask+0x28>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d9f9      	bls.n	800b684 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b690:	4b05      	ldr	r3, [pc, #20]	@ (800b6a8 <prvIdleTask+0x2c>)
 800b692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b696:	601a      	str	r2, [r3, #0]
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b6a0:	e7f0      	b.n	800b684 <prvIdleTask+0x8>
 800b6a2:	bf00      	nop
 800b6a4:	200011c0 	.word	0x200011c0
 800b6a8:	e000ed04 	.word	0xe000ed04

0800b6ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	607b      	str	r3, [r7, #4]
 800b6b6:	e00c      	b.n	800b6d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	4413      	add	r3, r2
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	4a12      	ldr	r2, [pc, #72]	@ (800b70c <prvInitialiseTaskLists+0x60>)
 800b6c4:	4413      	add	r3, r2
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fe fba8 	bl	8009e1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	607b      	str	r3, [r7, #4]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2b37      	cmp	r3, #55	@ 0x37
 800b6d6:	d9ef      	bls.n	800b6b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6d8:	480d      	ldr	r0, [pc, #52]	@ (800b710 <prvInitialiseTaskLists+0x64>)
 800b6da:	f7fe fb9f 	bl	8009e1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6de:	480d      	ldr	r0, [pc, #52]	@ (800b714 <prvInitialiseTaskLists+0x68>)
 800b6e0:	f7fe fb9c 	bl	8009e1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b6e4:	480c      	ldr	r0, [pc, #48]	@ (800b718 <prvInitialiseTaskLists+0x6c>)
 800b6e6:	f7fe fb99 	bl	8009e1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b6ea:	480c      	ldr	r0, [pc, #48]	@ (800b71c <prvInitialiseTaskLists+0x70>)
 800b6ec:	f7fe fb96 	bl	8009e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6f0:	480b      	ldr	r0, [pc, #44]	@ (800b720 <prvInitialiseTaskLists+0x74>)
 800b6f2:	f7fe fb93 	bl	8009e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b724 <prvInitialiseTaskLists+0x78>)
 800b6f8:	4a05      	ldr	r2, [pc, #20]	@ (800b710 <prvInitialiseTaskLists+0x64>)
 800b6fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b728 <prvInitialiseTaskLists+0x7c>)
 800b6fe:	4a05      	ldr	r2, [pc, #20]	@ (800b714 <prvInitialiseTaskLists+0x68>)
 800b700:	601a      	str	r2, [r3, #0]
}
 800b702:	bf00      	nop
 800b704:	3708      	adds	r7, #8
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	200011c0 	.word	0x200011c0
 800b710:	20001620 	.word	0x20001620
 800b714:	20001634 	.word	0x20001634
 800b718:	20001650 	.word	0x20001650
 800b71c:	20001664 	.word	0x20001664
 800b720:	2000167c 	.word	0x2000167c
 800b724:	20001648 	.word	0x20001648
 800b728:	2000164c 	.word	0x2000164c

0800b72c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b732:	e019      	b.n	800b768 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b734:	f000 fde8 	bl	800c308 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b738:	4b10      	ldr	r3, [pc, #64]	@ (800b77c <prvCheckTasksWaitingTermination+0x50>)
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	3304      	adds	r3, #4
 800b744:	4618      	mov	r0, r3
 800b746:	f7fe fbf3 	bl	8009f30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b74a:	4b0d      	ldr	r3, [pc, #52]	@ (800b780 <prvCheckTasksWaitingTermination+0x54>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3b01      	subs	r3, #1
 800b750:	4a0b      	ldr	r2, [pc, #44]	@ (800b780 <prvCheckTasksWaitingTermination+0x54>)
 800b752:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b754:	4b0b      	ldr	r3, [pc, #44]	@ (800b784 <prvCheckTasksWaitingTermination+0x58>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	3b01      	subs	r3, #1
 800b75a:	4a0a      	ldr	r2, [pc, #40]	@ (800b784 <prvCheckTasksWaitingTermination+0x58>)
 800b75c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b75e:	f000 fe05 	bl	800c36c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f810 	bl	800b788 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b768:	4b06      	ldr	r3, [pc, #24]	@ (800b784 <prvCheckTasksWaitingTermination+0x58>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1e1      	bne.n	800b734 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b770:	bf00      	nop
 800b772:	bf00      	nop
 800b774:	3708      	adds	r7, #8
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	20001664 	.word	0x20001664
 800b780:	20001690 	.word	0x20001690
 800b784:	20001678 	.word	0x20001678

0800b788 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	3354      	adds	r3, #84	@ 0x54
 800b794:	4618      	mov	r0, r3
 800b796:	f001 f8cf 	bl	800c938 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d108      	bne.n	800b7b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f000 ff9d 	bl	800c6e8 <vPortFree>
				vPortFree( pxTCB );
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 ff9a 	bl	800c6e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b7b4:	e019      	b.n	800b7ea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d103      	bne.n	800b7c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 ff91 	bl	800c6e8 <vPortFree>
	}
 800b7c6:	e010      	b.n	800b7ea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	d00b      	beq.n	800b7ea <prvDeleteTCB+0x62>
	__asm volatile
 800b7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7d6:	f383 8811 	msr	BASEPRI, r3
 800b7da:	f3bf 8f6f 	isb	sy
 800b7de:	f3bf 8f4f 	dsb	sy
 800b7e2:	60fb      	str	r3, [r7, #12]
}
 800b7e4:	bf00      	nop
 800b7e6:	bf00      	nop
 800b7e8:	e7fd      	b.n	800b7e6 <prvDeleteTCB+0x5e>
	}
 800b7ea:	bf00      	nop
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
	...

0800b7f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7fa:	4b0c      	ldr	r3, [pc, #48]	@ (800b82c <prvResetNextTaskUnblockTime+0x38>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d104      	bne.n	800b80e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b804:	4b0a      	ldr	r3, [pc, #40]	@ (800b830 <prvResetNextTaskUnblockTime+0x3c>)
 800b806:	f04f 32ff 	mov.w	r2, #4294967295
 800b80a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b80c:	e008      	b.n	800b820 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b80e:	4b07      	ldr	r3, [pc, #28]	@ (800b82c <prvResetNextTaskUnblockTime+0x38>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	4a04      	ldr	r2, [pc, #16]	@ (800b830 <prvResetNextTaskUnblockTime+0x3c>)
 800b81e:	6013      	str	r3, [r2, #0]
}
 800b820:	bf00      	nop
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr
 800b82c:	20001648 	.word	0x20001648
 800b830:	200016b0 	.word	0x200016b0

0800b834 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b83a:	4b0b      	ldr	r3, [pc, #44]	@ (800b868 <xTaskGetSchedulerState+0x34>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d102      	bne.n	800b848 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b842:	2301      	movs	r3, #1
 800b844:	607b      	str	r3, [r7, #4]
 800b846:	e008      	b.n	800b85a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b848:	4b08      	ldr	r3, [pc, #32]	@ (800b86c <xTaskGetSchedulerState+0x38>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d102      	bne.n	800b856 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b850:	2302      	movs	r3, #2
 800b852:	607b      	str	r3, [r7, #4]
 800b854:	e001      	b.n	800b85a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b856:	2300      	movs	r3, #0
 800b858:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b85a:	687b      	ldr	r3, [r7, #4]
	}
 800b85c:	4618      	mov	r0, r3
 800b85e:	370c      	adds	r7, #12
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr
 800b868:	2000169c 	.word	0x2000169c
 800b86c:	200016b8 	.word	0x200016b8

0800b870 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b870:	b580      	push	{r7, lr}
 800b872:	b086      	sub	sp, #24
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b87c:	2300      	movs	r3, #0
 800b87e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d058      	beq.n	800b938 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b886:	4b2f      	ldr	r3, [pc, #188]	@ (800b944 <xTaskPriorityDisinherit+0xd4>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	693a      	ldr	r2, [r7, #16]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d00b      	beq.n	800b8a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b894:	f383 8811 	msr	BASEPRI, r3
 800b898:	f3bf 8f6f 	isb	sy
 800b89c:	f3bf 8f4f 	dsb	sy
 800b8a0:	60fb      	str	r3, [r7, #12]
}
 800b8a2:	bf00      	nop
 800b8a4:	bf00      	nop
 800b8a6:	e7fd      	b.n	800b8a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d10b      	bne.n	800b8c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b8b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b4:	f383 8811 	msr	BASEPRI, r3
 800b8b8:	f3bf 8f6f 	isb	sy
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	60bb      	str	r3, [r7, #8]
}
 800b8c2:	bf00      	nop
 800b8c4:	bf00      	nop
 800b8c6:	e7fd      	b.n	800b8c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8cc:	1e5a      	subs	r2, r3, #1
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d02c      	beq.n	800b938 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d128      	bne.n	800b938 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	3304      	adds	r3, #4
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fe fb20 	bl	8009f30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b908:	4b0f      	ldr	r3, [pc, #60]	@ (800b948 <xTaskPriorityDisinherit+0xd8>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d903      	bls.n	800b918 <xTaskPriorityDisinherit+0xa8>
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b914:	4a0c      	ldr	r2, [pc, #48]	@ (800b948 <xTaskPriorityDisinherit+0xd8>)
 800b916:	6013      	str	r3, [r2, #0]
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b91c:	4613      	mov	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4413      	add	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	4a09      	ldr	r2, [pc, #36]	@ (800b94c <xTaskPriorityDisinherit+0xdc>)
 800b926:	441a      	add	r2, r3
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	3304      	adds	r3, #4
 800b92c:	4619      	mov	r1, r3
 800b92e:	4610      	mov	r0, r2
 800b930:	f7fe faa1 	bl	8009e76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b934:	2301      	movs	r3, #1
 800b936:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b938:	697b      	ldr	r3, [r7, #20]
	}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3718      	adds	r7, #24
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	200011bc 	.word	0x200011bc
 800b948:	20001698 	.word	0x20001698
 800b94c:	200011c0 	.word	0x200011c0

0800b950 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b95a:	4b21      	ldr	r3, [pc, #132]	@ (800b9e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b960:	4b20      	ldr	r3, [pc, #128]	@ (800b9e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	3304      	adds	r3, #4
 800b966:	4618      	mov	r0, r3
 800b968:	f7fe fae2 	bl	8009f30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b972:	d10a      	bne.n	800b98a <prvAddCurrentTaskToDelayedList+0x3a>
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d007      	beq.n	800b98a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b97a:	4b1a      	ldr	r3, [pc, #104]	@ (800b9e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	3304      	adds	r3, #4
 800b980:	4619      	mov	r1, r3
 800b982:	4819      	ldr	r0, [pc, #100]	@ (800b9e8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b984:	f7fe fa77 	bl	8009e76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b988:	e026      	b.n	800b9d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b98a:	68fa      	ldr	r2, [r7, #12]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4413      	add	r3, r2
 800b990:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b992:	4b14      	ldr	r3, [pc, #80]	@ (800b9e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	68ba      	ldr	r2, [r7, #8]
 800b998:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d209      	bcs.n	800b9b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9a2:	4b12      	ldr	r3, [pc, #72]	@ (800b9ec <prvAddCurrentTaskToDelayedList+0x9c>)
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b9e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	3304      	adds	r3, #4
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	f7fe fa85 	bl	8009ebe <vListInsert>
}
 800b9b4:	e010      	b.n	800b9d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9b6:	4b0e      	ldr	r3, [pc, #56]	@ (800b9f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	4b0a      	ldr	r3, [pc, #40]	@ (800b9e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	3304      	adds	r3, #4
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	4610      	mov	r0, r2
 800b9c4:	f7fe fa7b 	bl	8009ebe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b9c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b9f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d202      	bcs.n	800b9d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b9d2:	4a08      	ldr	r2, [pc, #32]	@ (800b9f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	6013      	str	r3, [r2, #0]
}
 800b9d8:	bf00      	nop
 800b9da:	3710      	adds	r7, #16
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	20001694 	.word	0x20001694
 800b9e4:	200011bc 	.word	0x200011bc
 800b9e8:	2000167c 	.word	0x2000167c
 800b9ec:	2000164c 	.word	0x2000164c
 800b9f0:	20001648 	.word	0x20001648
 800b9f4:	200016b0 	.word	0x200016b0

0800b9f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b08a      	sub	sp, #40	@ 0x28
 800b9fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ba02:	f000 fb13 	bl	800c02c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ba06:	4b1d      	ldr	r3, [pc, #116]	@ (800ba7c <xTimerCreateTimerTask+0x84>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d021      	beq.n	800ba52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ba12:	2300      	movs	r3, #0
 800ba14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ba16:	1d3a      	adds	r2, r7, #4
 800ba18:	f107 0108 	add.w	r1, r7, #8
 800ba1c:	f107 030c 	add.w	r3, r7, #12
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7fe f9e1 	bl	8009de8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ba26:	6879      	ldr	r1, [r7, #4]
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	68fa      	ldr	r2, [r7, #12]
 800ba2c:	9202      	str	r2, [sp, #8]
 800ba2e:	9301      	str	r3, [sp, #4]
 800ba30:	2302      	movs	r3, #2
 800ba32:	9300      	str	r3, [sp, #0]
 800ba34:	2300      	movs	r3, #0
 800ba36:	460a      	mov	r2, r1
 800ba38:	4911      	ldr	r1, [pc, #68]	@ (800ba80 <xTimerCreateTimerTask+0x88>)
 800ba3a:	4812      	ldr	r0, [pc, #72]	@ (800ba84 <xTimerCreateTimerTask+0x8c>)
 800ba3c:	f7fe ff9c 	bl	800a978 <xTaskCreateStatic>
 800ba40:	4603      	mov	r3, r0
 800ba42:	4a11      	ldr	r2, [pc, #68]	@ (800ba88 <xTimerCreateTimerTask+0x90>)
 800ba44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ba46:	4b10      	ldr	r3, [pc, #64]	@ (800ba88 <xTimerCreateTimerTask+0x90>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d001      	beq.n	800ba52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d10b      	bne.n	800ba70 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ba58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba5c:	f383 8811 	msr	BASEPRI, r3
 800ba60:	f3bf 8f6f 	isb	sy
 800ba64:	f3bf 8f4f 	dsb	sy
 800ba68:	613b      	str	r3, [r7, #16]
}
 800ba6a:	bf00      	nop
 800ba6c:	bf00      	nop
 800ba6e:	e7fd      	b.n	800ba6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ba70:	697b      	ldr	r3, [r7, #20]
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3718      	adds	r7, #24
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	200016ec 	.word	0x200016ec
 800ba80:	0800cb98 	.word	0x0800cb98
 800ba84:	0800bbc5 	.word	0x0800bbc5
 800ba88:	200016f0 	.word	0x200016f0

0800ba8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b08a      	sub	sp, #40	@ 0x28
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
 800ba98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10b      	bne.n	800babc <xTimerGenericCommand+0x30>
	__asm volatile
 800baa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa8:	f383 8811 	msr	BASEPRI, r3
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	623b      	str	r3, [r7, #32]
}
 800bab6:	bf00      	nop
 800bab8:	bf00      	nop
 800baba:	e7fd      	b.n	800bab8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800babc:	4b19      	ldr	r3, [pc, #100]	@ (800bb24 <xTimerGenericCommand+0x98>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d02a      	beq.n	800bb1a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	2b05      	cmp	r3, #5
 800bad4:	dc18      	bgt.n	800bb08 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bad6:	f7ff fead 	bl	800b834 <xTaskGetSchedulerState>
 800bada:	4603      	mov	r3, r0
 800badc:	2b02      	cmp	r3, #2
 800bade:	d109      	bne.n	800baf4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bae0:	4b10      	ldr	r3, [pc, #64]	@ (800bb24 <xTimerGenericCommand+0x98>)
 800bae2:	6818      	ldr	r0, [r3, #0]
 800bae4:	f107 0110 	add.w	r1, r7, #16
 800bae8:	2300      	movs	r3, #0
 800baea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800baec:	f7fe fb54 	bl	800a198 <xQueueGenericSend>
 800baf0:	6278      	str	r0, [r7, #36]	@ 0x24
 800baf2:	e012      	b.n	800bb1a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800baf4:	4b0b      	ldr	r3, [pc, #44]	@ (800bb24 <xTimerGenericCommand+0x98>)
 800baf6:	6818      	ldr	r0, [r3, #0]
 800baf8:	f107 0110 	add.w	r1, r7, #16
 800bafc:	2300      	movs	r3, #0
 800bafe:	2200      	movs	r2, #0
 800bb00:	f7fe fb4a 	bl	800a198 <xQueueGenericSend>
 800bb04:	6278      	str	r0, [r7, #36]	@ 0x24
 800bb06:	e008      	b.n	800bb1a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb08:	4b06      	ldr	r3, [pc, #24]	@ (800bb24 <xTimerGenericCommand+0x98>)
 800bb0a:	6818      	ldr	r0, [r3, #0]
 800bb0c:	f107 0110 	add.w	r1, r7, #16
 800bb10:	2300      	movs	r3, #0
 800bb12:	683a      	ldr	r2, [r7, #0]
 800bb14:	f7fe fc42 	bl	800a39c <xQueueGenericSendFromISR>
 800bb18:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3728      	adds	r7, #40	@ 0x28
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	200016ec 	.word	0x200016ec

0800bb28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b088      	sub	sp, #32
 800bb2c:	af02      	add	r7, sp, #8
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb32:	4b23      	ldr	r3, [pc, #140]	@ (800bbc0 <prvProcessExpiredTimer+0x98>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	3304      	adds	r3, #4
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7fe f9f5 	bl	8009f30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb4c:	f003 0304 	and.w	r3, r3, #4
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d023      	beq.n	800bb9c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	699a      	ldr	r2, [r3, #24]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	18d1      	adds	r1, r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	683a      	ldr	r2, [r7, #0]
 800bb60:	6978      	ldr	r0, [r7, #20]
 800bb62:	f000 f8d5 	bl	800bd10 <prvInsertTimerInActiveList>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d020      	beq.n	800bbae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	9300      	str	r3, [sp, #0]
 800bb70:	2300      	movs	r3, #0
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	2100      	movs	r1, #0
 800bb76:	6978      	ldr	r0, [r7, #20]
 800bb78:	f7ff ff88 	bl	800ba8c <xTimerGenericCommand>
 800bb7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d114      	bne.n	800bbae <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bb84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb88:	f383 8811 	msr	BASEPRI, r3
 800bb8c:	f3bf 8f6f 	isb	sy
 800bb90:	f3bf 8f4f 	dsb	sy
 800bb94:	60fb      	str	r3, [r7, #12]
}
 800bb96:	bf00      	nop
 800bb98:	bf00      	nop
 800bb9a:	e7fd      	b.n	800bb98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bba2:	f023 0301 	bic.w	r3, r3, #1
 800bba6:	b2da      	uxtb	r2, r3
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	6a1b      	ldr	r3, [r3, #32]
 800bbb2:	6978      	ldr	r0, [r7, #20]
 800bbb4:	4798      	blx	r3
}
 800bbb6:	bf00      	nop
 800bbb8:	3718      	adds	r7, #24
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	200016e4 	.word	0x200016e4

0800bbc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbcc:	f107 0308 	add.w	r3, r7, #8
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f000 f859 	bl	800bc88 <prvGetNextExpireTime>
 800bbd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	4619      	mov	r1, r3
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f000 f805 	bl	800bbec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bbe2:	f000 f8d7 	bl	800bd94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbe6:	bf00      	nop
 800bbe8:	e7f0      	b.n	800bbcc <prvTimerTask+0x8>
	...

0800bbec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b084      	sub	sp, #16
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bbf6:	f7ff fa17 	bl	800b028 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbfa:	f107 0308 	add.w	r3, r7, #8
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f000 f866 	bl	800bcd0 <prvSampleTimeNow>
 800bc04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d130      	bne.n	800bc6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d10a      	bne.n	800bc28 <prvProcessTimerOrBlockTask+0x3c>
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d806      	bhi.n	800bc28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bc1a:	f7ff fa13 	bl	800b044 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bc1e:	68f9      	ldr	r1, [r7, #12]
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f7ff ff81 	bl	800bb28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc26:	e024      	b.n	800bc72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d008      	beq.n	800bc40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc2e:	4b13      	ldr	r3, [pc, #76]	@ (800bc7c <prvProcessTimerOrBlockTask+0x90>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d101      	bne.n	800bc3c <prvProcessTimerOrBlockTask+0x50>
 800bc38:	2301      	movs	r3, #1
 800bc3a:	e000      	b.n	800bc3e <prvProcessTimerOrBlockTask+0x52>
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc40:	4b0f      	ldr	r3, [pc, #60]	@ (800bc80 <prvProcessTimerOrBlockTask+0x94>)
 800bc42:	6818      	ldr	r0, [r3, #0]
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	683a      	ldr	r2, [r7, #0]
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	f7fe fe5f 	bl	800a910 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc52:	f7ff f9f7 	bl	800b044 <xTaskResumeAll>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10a      	bne.n	800bc72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc5c:	4b09      	ldr	r3, [pc, #36]	@ (800bc84 <prvProcessTimerOrBlockTask+0x98>)
 800bc5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc62:	601a      	str	r2, [r3, #0]
 800bc64:	f3bf 8f4f 	dsb	sy
 800bc68:	f3bf 8f6f 	isb	sy
}
 800bc6c:	e001      	b.n	800bc72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc6e:	f7ff f9e9 	bl	800b044 <xTaskResumeAll>
}
 800bc72:	bf00      	nop
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	200016e8 	.word	0x200016e8
 800bc80:	200016ec 	.word	0x200016ec
 800bc84:	e000ed04 	.word	0xe000ed04

0800bc88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b085      	sub	sp, #20
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc90:	4b0e      	ldr	r3, [pc, #56]	@ (800bccc <prvGetNextExpireTime+0x44>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d101      	bne.n	800bc9e <prvGetNextExpireTime+0x16>
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	e000      	b.n	800bca0 <prvGetNextExpireTime+0x18>
 800bc9e:	2200      	movs	r2, #0
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d105      	bne.n	800bcb8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bcac:	4b07      	ldr	r3, [pc, #28]	@ (800bccc <prvGetNextExpireTime+0x44>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	68db      	ldr	r3, [r3, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	60fb      	str	r3, [r7, #12]
 800bcb6:	e001      	b.n	800bcbc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3714      	adds	r7, #20
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	200016e4 	.word	0x200016e4

0800bcd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bcd8:	f7ff fa52 	bl	800b180 <xTaskGetTickCount>
 800bcdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bcde:	4b0b      	ldr	r3, [pc, #44]	@ (800bd0c <prvSampleTimeNow+0x3c>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d205      	bcs.n	800bcf4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bce8:	f000 f93a 	bl	800bf60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	601a      	str	r2, [r3, #0]
 800bcf2:	e002      	b.n	800bcfa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bcfa:	4a04      	ldr	r2, [pc, #16]	@ (800bd0c <prvSampleTimeNow+0x3c>)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bd00:	68fb      	ldr	r3, [r7, #12]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	200016f4 	.word	0x200016f4

0800bd10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	607a      	str	r2, [r7, #4]
 800bd1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	68ba      	ldr	r2, [r7, #8]
 800bd26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	68fa      	ldr	r2, [r7, #12]
 800bd2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd2e:	68ba      	ldr	r2, [r7, #8]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d812      	bhi.n	800bd5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	1ad2      	subs	r2, r2, r3
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	699b      	ldr	r3, [r3, #24]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d302      	bcc.n	800bd4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd44:	2301      	movs	r3, #1
 800bd46:	617b      	str	r3, [r7, #20]
 800bd48:	e01b      	b.n	800bd82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd4a:	4b10      	ldr	r3, [pc, #64]	@ (800bd8c <prvInsertTimerInActiveList+0x7c>)
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	3304      	adds	r3, #4
 800bd52:	4619      	mov	r1, r3
 800bd54:	4610      	mov	r0, r2
 800bd56:	f7fe f8b2 	bl	8009ebe <vListInsert>
 800bd5a:	e012      	b.n	800bd82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d206      	bcs.n	800bd72 <prvInsertTimerInActiveList+0x62>
 800bd64:	68ba      	ldr	r2, [r7, #8]
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d302      	bcc.n	800bd72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	617b      	str	r3, [r7, #20]
 800bd70:	e007      	b.n	800bd82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd72:	4b07      	ldr	r3, [pc, #28]	@ (800bd90 <prvInsertTimerInActiveList+0x80>)
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	3304      	adds	r3, #4
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	f7fe f89e 	bl	8009ebe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd82:	697b      	ldr	r3, [r7, #20]
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3718      	adds	r7, #24
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	200016e8 	.word	0x200016e8
 800bd90:	200016e4 	.word	0x200016e4

0800bd94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b08e      	sub	sp, #56	@ 0x38
 800bd98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd9a:	e0ce      	b.n	800bf3a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	da19      	bge.n	800bdd6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bda2:	1d3b      	adds	r3, r7, #4
 800bda4:	3304      	adds	r3, #4
 800bda6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10b      	bne.n	800bdc6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	61fb      	str	r3, [r7, #28]
}
 800bdc0:	bf00      	nop
 800bdc2:	bf00      	nop
 800bdc4:	e7fd      	b.n	800bdc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bdc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdcc:	6850      	ldr	r0, [r2, #4]
 800bdce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdd0:	6892      	ldr	r2, [r2, #8]
 800bdd2:	4611      	mov	r1, r2
 800bdd4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	f2c0 80ae 	blt.w	800bf3a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bde4:	695b      	ldr	r3, [r3, #20]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d004      	beq.n	800bdf4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdec:	3304      	adds	r3, #4
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7fe f89e 	bl	8009f30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bdf4:	463b      	mov	r3, r7
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7ff ff6a 	bl	800bcd0 <prvSampleTimeNow>
 800bdfc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2b09      	cmp	r3, #9
 800be02:	f200 8097 	bhi.w	800bf34 <prvProcessReceivedCommands+0x1a0>
 800be06:	a201      	add	r2, pc, #4	@ (adr r2, 800be0c <prvProcessReceivedCommands+0x78>)
 800be08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be0c:	0800be35 	.word	0x0800be35
 800be10:	0800be35 	.word	0x0800be35
 800be14:	0800be35 	.word	0x0800be35
 800be18:	0800beab 	.word	0x0800beab
 800be1c:	0800bebf 	.word	0x0800bebf
 800be20:	0800bf0b 	.word	0x0800bf0b
 800be24:	0800be35 	.word	0x0800be35
 800be28:	0800be35 	.word	0x0800be35
 800be2c:	0800beab 	.word	0x0800beab
 800be30:	0800bebf 	.word	0x0800bebf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be3a:	f043 0301 	orr.w	r3, r3, #1
 800be3e:	b2da      	uxtb	r2, r3
 800be40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be46:	68ba      	ldr	r2, [r7, #8]
 800be48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be4a:	699b      	ldr	r3, [r3, #24]
 800be4c:	18d1      	adds	r1, r2, r3
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be54:	f7ff ff5c 	bl	800bd10 <prvInsertTimerInActiveList>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d06c      	beq.n	800bf38 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be60:	6a1b      	ldr	r3, [r3, #32]
 800be62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be6c:	f003 0304 	and.w	r3, r3, #4
 800be70:	2b00      	cmp	r3, #0
 800be72:	d061      	beq.n	800bf38 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be74:	68ba      	ldr	r2, [r7, #8]
 800be76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be78:	699b      	ldr	r3, [r3, #24]
 800be7a:	441a      	add	r2, r3
 800be7c:	2300      	movs	r3, #0
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	2300      	movs	r3, #0
 800be82:	2100      	movs	r1, #0
 800be84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be86:	f7ff fe01 	bl	800ba8c <xTimerGenericCommand>
 800be8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800be8c:	6a3b      	ldr	r3, [r7, #32]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d152      	bne.n	800bf38 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800be92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be96:	f383 8811 	msr	BASEPRI, r3
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	f3bf 8f4f 	dsb	sy
 800bea2:	61bb      	str	r3, [r7, #24]
}
 800bea4:	bf00      	nop
 800bea6:	bf00      	nop
 800bea8:	e7fd      	b.n	800bea6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800beaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800beb0:	f023 0301 	bic.w	r3, r3, #1
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bebc:	e03d      	b.n	800bf3a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bec0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bec4:	f043 0301 	orr.w	r3, r3, #1
 800bec8:	b2da      	uxtb	r2, r3
 800beca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800becc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bed0:	68ba      	ldr	r2, [r7, #8]
 800bed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bed4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bed8:	699b      	ldr	r3, [r3, #24]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d10b      	bne.n	800bef6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee2:	f383 8811 	msr	BASEPRI, r3
 800bee6:	f3bf 8f6f 	isb	sy
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	617b      	str	r3, [r7, #20]
}
 800bef0:	bf00      	nop
 800bef2:	bf00      	nop
 800bef4:	e7fd      	b.n	800bef2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bef8:	699a      	ldr	r2, [r3, #24]
 800befa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befc:	18d1      	adds	r1, r2, r3
 800befe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf04:	f7ff ff04 	bl	800bd10 <prvInsertTimerInActiveList>
					break;
 800bf08:	e017      	b.n	800bf3a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bf0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf10:	f003 0302 	and.w	r3, r3, #2
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d103      	bne.n	800bf20 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bf18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf1a:	f000 fbe5 	bl	800c6e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf1e:	e00c      	b.n	800bf3a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf26:	f023 0301 	bic.w	r3, r3, #1
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bf32:	e002      	b.n	800bf3a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bf34:	bf00      	nop
 800bf36:	e000      	b.n	800bf3a <prvProcessReceivedCommands+0x1a6>
					break;
 800bf38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf3a:	4b08      	ldr	r3, [pc, #32]	@ (800bf5c <prvProcessReceivedCommands+0x1c8>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	1d39      	adds	r1, r7, #4
 800bf40:	2200      	movs	r2, #0
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7fe fac8 	bl	800a4d8 <xQueueReceive>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f47f af26 	bne.w	800bd9c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bf50:	bf00      	nop
 800bf52:	bf00      	nop
 800bf54:	3730      	adds	r7, #48	@ 0x30
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	200016ec 	.word	0x200016ec

0800bf60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b088      	sub	sp, #32
 800bf64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf66:	e049      	b.n	800bffc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf68:	4b2e      	ldr	r3, [pc, #184]	@ (800c024 <prvSwitchTimerLists+0xc4>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf72:	4b2c      	ldr	r3, [pc, #176]	@ (800c024 <prvSwitchTimerLists+0xc4>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	3304      	adds	r3, #4
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7fd ffd5 	bl	8009f30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf94:	f003 0304 	and.w	r3, r3, #4
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d02f      	beq.n	800bffc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	699b      	ldr	r3, [r3, #24]
 800bfa0:	693a      	ldr	r2, [r7, #16]
 800bfa2:	4413      	add	r3, r2
 800bfa4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d90e      	bls.n	800bfcc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	68ba      	ldr	r2, [r7, #8]
 800bfb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	68fa      	ldr	r2, [r7, #12]
 800bfb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfba:	4b1a      	ldr	r3, [pc, #104]	@ (800c024 <prvSwitchTimerLists+0xc4>)
 800bfbc:	681a      	ldr	r2, [r3, #0]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	3304      	adds	r3, #4
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	4610      	mov	r0, r2
 800bfc6:	f7fd ff7a 	bl	8009ebe <vListInsert>
 800bfca:	e017      	b.n	800bffc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfcc:	2300      	movs	r3, #0
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	693a      	ldr	r2, [r7, #16]
 800bfd4:	2100      	movs	r1, #0
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f7ff fd58 	bl	800ba8c <xTimerGenericCommand>
 800bfdc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d10b      	bne.n	800bffc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bfe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfe8:	f383 8811 	msr	BASEPRI, r3
 800bfec:	f3bf 8f6f 	isb	sy
 800bff0:	f3bf 8f4f 	dsb	sy
 800bff4:	603b      	str	r3, [r7, #0]
}
 800bff6:	bf00      	nop
 800bff8:	bf00      	nop
 800bffa:	e7fd      	b.n	800bff8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bffc:	4b09      	ldr	r3, [pc, #36]	@ (800c024 <prvSwitchTimerLists+0xc4>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d1b0      	bne.n	800bf68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c006:	4b07      	ldr	r3, [pc, #28]	@ (800c024 <prvSwitchTimerLists+0xc4>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c00c:	4b06      	ldr	r3, [pc, #24]	@ (800c028 <prvSwitchTimerLists+0xc8>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a04      	ldr	r2, [pc, #16]	@ (800c024 <prvSwitchTimerLists+0xc4>)
 800c012:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c014:	4a04      	ldr	r2, [pc, #16]	@ (800c028 <prvSwitchTimerLists+0xc8>)
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	6013      	str	r3, [r2, #0]
}
 800c01a:	bf00      	nop
 800c01c:	3718      	adds	r7, #24
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	200016e4 	.word	0x200016e4
 800c028:	200016e8 	.word	0x200016e8

0800c02c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c032:	f000 f969 	bl	800c308 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c036:	4b15      	ldr	r3, [pc, #84]	@ (800c08c <prvCheckForValidListAndQueue+0x60>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d120      	bne.n	800c080 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c03e:	4814      	ldr	r0, [pc, #80]	@ (800c090 <prvCheckForValidListAndQueue+0x64>)
 800c040:	f7fd feec 	bl	8009e1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c044:	4813      	ldr	r0, [pc, #76]	@ (800c094 <prvCheckForValidListAndQueue+0x68>)
 800c046:	f7fd fee9 	bl	8009e1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c04a:	4b13      	ldr	r3, [pc, #76]	@ (800c098 <prvCheckForValidListAndQueue+0x6c>)
 800c04c:	4a10      	ldr	r2, [pc, #64]	@ (800c090 <prvCheckForValidListAndQueue+0x64>)
 800c04e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c050:	4b12      	ldr	r3, [pc, #72]	@ (800c09c <prvCheckForValidListAndQueue+0x70>)
 800c052:	4a10      	ldr	r2, [pc, #64]	@ (800c094 <prvCheckForValidListAndQueue+0x68>)
 800c054:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c056:	2300      	movs	r3, #0
 800c058:	9300      	str	r3, [sp, #0]
 800c05a:	4b11      	ldr	r3, [pc, #68]	@ (800c0a0 <prvCheckForValidListAndQueue+0x74>)
 800c05c:	4a11      	ldr	r2, [pc, #68]	@ (800c0a4 <prvCheckForValidListAndQueue+0x78>)
 800c05e:	2110      	movs	r1, #16
 800c060:	200a      	movs	r0, #10
 800c062:	f7fd fff9 	bl	800a058 <xQueueGenericCreateStatic>
 800c066:	4603      	mov	r3, r0
 800c068:	4a08      	ldr	r2, [pc, #32]	@ (800c08c <prvCheckForValidListAndQueue+0x60>)
 800c06a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c06c:	4b07      	ldr	r3, [pc, #28]	@ (800c08c <prvCheckForValidListAndQueue+0x60>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d005      	beq.n	800c080 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c074:	4b05      	ldr	r3, [pc, #20]	@ (800c08c <prvCheckForValidListAndQueue+0x60>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	490b      	ldr	r1, [pc, #44]	@ (800c0a8 <prvCheckForValidListAndQueue+0x7c>)
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7fe fc1e 	bl	800a8bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c080:	f000 f974 	bl	800c36c <vPortExitCritical>
}
 800c084:	bf00      	nop
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
 800c08a:	bf00      	nop
 800c08c:	200016ec 	.word	0x200016ec
 800c090:	200016bc 	.word	0x200016bc
 800c094:	200016d0 	.word	0x200016d0
 800c098:	200016e4 	.word	0x200016e4
 800c09c:	200016e8 	.word	0x200016e8
 800c0a0:	20001798 	.word	0x20001798
 800c0a4:	200016f8 	.word	0x200016f8
 800c0a8:	0800cba0 	.word	0x0800cba0

0800c0ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	60b9      	str	r1, [r7, #8]
 800c0b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	3b04      	subs	r3, #4
 800c0bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c0c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	3b04      	subs	r3, #4
 800c0ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	f023 0201 	bic.w	r2, r3, #1
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	3b04      	subs	r3, #4
 800c0da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0dc:	4a0c      	ldr	r2, [pc, #48]	@ (800c110 <pxPortInitialiseStack+0x64>)
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	3b14      	subs	r3, #20
 800c0e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	3b04      	subs	r3, #4
 800c0f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f06f 0202 	mvn.w	r2, #2
 800c0fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	3b20      	subs	r3, #32
 800c100:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c102:	68fb      	ldr	r3, [r7, #12]
}
 800c104:	4618      	mov	r0, r3
 800c106:	3714      	adds	r7, #20
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr
 800c110:	0800c115 	.word	0x0800c115

0800c114 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c11a:	2300      	movs	r3, #0
 800c11c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c11e:	4b13      	ldr	r3, [pc, #76]	@ (800c16c <prvTaskExitError+0x58>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c126:	d00b      	beq.n	800c140 <prvTaskExitError+0x2c>
	__asm volatile
 800c128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c12c:	f383 8811 	msr	BASEPRI, r3
 800c130:	f3bf 8f6f 	isb	sy
 800c134:	f3bf 8f4f 	dsb	sy
 800c138:	60fb      	str	r3, [r7, #12]
}
 800c13a:	bf00      	nop
 800c13c:	bf00      	nop
 800c13e:	e7fd      	b.n	800c13c <prvTaskExitError+0x28>
	__asm volatile
 800c140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c144:	f383 8811 	msr	BASEPRI, r3
 800c148:	f3bf 8f6f 	isb	sy
 800c14c:	f3bf 8f4f 	dsb	sy
 800c150:	60bb      	str	r3, [r7, #8]
}
 800c152:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c154:	bf00      	nop
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d0fc      	beq.n	800c156 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c15c:	bf00      	nop
 800c15e:	bf00      	nop
 800c160:	3714      	adds	r7, #20
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr
 800c16a:	bf00      	nop
 800c16c:	20000200 	.word	0x20000200

0800c170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c170:	4b07      	ldr	r3, [pc, #28]	@ (800c190 <pxCurrentTCBConst2>)
 800c172:	6819      	ldr	r1, [r3, #0]
 800c174:	6808      	ldr	r0, [r1, #0]
 800c176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c17a:	f380 8809 	msr	PSP, r0
 800c17e:	f3bf 8f6f 	isb	sy
 800c182:	f04f 0000 	mov.w	r0, #0
 800c186:	f380 8811 	msr	BASEPRI, r0
 800c18a:	4770      	bx	lr
 800c18c:	f3af 8000 	nop.w

0800c190 <pxCurrentTCBConst2>:
 800c190:	200011bc 	.word	0x200011bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c194:	bf00      	nop
 800c196:	bf00      	nop

0800c198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c198:	4808      	ldr	r0, [pc, #32]	@ (800c1bc <prvPortStartFirstTask+0x24>)
 800c19a:	6800      	ldr	r0, [r0, #0]
 800c19c:	6800      	ldr	r0, [r0, #0]
 800c19e:	f380 8808 	msr	MSP, r0
 800c1a2:	f04f 0000 	mov.w	r0, #0
 800c1a6:	f380 8814 	msr	CONTROL, r0
 800c1aa:	b662      	cpsie	i
 800c1ac:	b661      	cpsie	f
 800c1ae:	f3bf 8f4f 	dsb	sy
 800c1b2:	f3bf 8f6f 	isb	sy
 800c1b6:	df00      	svc	0
 800c1b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c1ba:	bf00      	nop
 800c1bc:	e000ed08 	.word	0xe000ed08

0800c1c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c1c6:	4b47      	ldr	r3, [pc, #284]	@ (800c2e4 <xPortStartScheduler+0x124>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a47      	ldr	r2, [pc, #284]	@ (800c2e8 <xPortStartScheduler+0x128>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d10b      	bne.n	800c1e8 <xPortStartScheduler+0x28>
	__asm volatile
 800c1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d4:	f383 8811 	msr	BASEPRI, r3
 800c1d8:	f3bf 8f6f 	isb	sy
 800c1dc:	f3bf 8f4f 	dsb	sy
 800c1e0:	60fb      	str	r3, [r7, #12]
}
 800c1e2:	bf00      	nop
 800c1e4:	bf00      	nop
 800c1e6:	e7fd      	b.n	800c1e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c1e8:	4b3e      	ldr	r3, [pc, #248]	@ (800c2e4 <xPortStartScheduler+0x124>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a3f      	ldr	r2, [pc, #252]	@ (800c2ec <xPortStartScheduler+0x12c>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d10b      	bne.n	800c20a <xPortStartScheduler+0x4a>
	__asm volatile
 800c1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f6:	f383 8811 	msr	BASEPRI, r3
 800c1fa:	f3bf 8f6f 	isb	sy
 800c1fe:	f3bf 8f4f 	dsb	sy
 800c202:	613b      	str	r3, [r7, #16]
}
 800c204:	bf00      	nop
 800c206:	bf00      	nop
 800c208:	e7fd      	b.n	800c206 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c20a:	4b39      	ldr	r3, [pc, #228]	@ (800c2f0 <xPortStartScheduler+0x130>)
 800c20c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	b2db      	uxtb	r3, r3
 800c214:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	22ff      	movs	r2, #255	@ 0xff
 800c21a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	b2db      	uxtb	r3, r3
 800c222:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c224:	78fb      	ldrb	r3, [r7, #3]
 800c226:	b2db      	uxtb	r3, r3
 800c228:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	4b31      	ldr	r3, [pc, #196]	@ (800c2f4 <xPortStartScheduler+0x134>)
 800c230:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c232:	4b31      	ldr	r3, [pc, #196]	@ (800c2f8 <xPortStartScheduler+0x138>)
 800c234:	2207      	movs	r2, #7
 800c236:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c238:	e009      	b.n	800c24e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c23a:	4b2f      	ldr	r3, [pc, #188]	@ (800c2f8 <xPortStartScheduler+0x138>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	3b01      	subs	r3, #1
 800c240:	4a2d      	ldr	r2, [pc, #180]	@ (800c2f8 <xPortStartScheduler+0x138>)
 800c242:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c244:	78fb      	ldrb	r3, [r7, #3]
 800c246:	b2db      	uxtb	r3, r3
 800c248:	005b      	lsls	r3, r3, #1
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c24e:	78fb      	ldrb	r3, [r7, #3]
 800c250:	b2db      	uxtb	r3, r3
 800c252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c256:	2b80      	cmp	r3, #128	@ 0x80
 800c258:	d0ef      	beq.n	800c23a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c25a:	4b27      	ldr	r3, [pc, #156]	@ (800c2f8 <xPortStartScheduler+0x138>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f1c3 0307 	rsb	r3, r3, #7
 800c262:	2b04      	cmp	r3, #4
 800c264:	d00b      	beq.n	800c27e <xPortStartScheduler+0xbe>
	__asm volatile
 800c266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c26a:	f383 8811 	msr	BASEPRI, r3
 800c26e:	f3bf 8f6f 	isb	sy
 800c272:	f3bf 8f4f 	dsb	sy
 800c276:	60bb      	str	r3, [r7, #8]
}
 800c278:	bf00      	nop
 800c27a:	bf00      	nop
 800c27c:	e7fd      	b.n	800c27a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c27e:	4b1e      	ldr	r3, [pc, #120]	@ (800c2f8 <xPortStartScheduler+0x138>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	021b      	lsls	r3, r3, #8
 800c284:	4a1c      	ldr	r2, [pc, #112]	@ (800c2f8 <xPortStartScheduler+0x138>)
 800c286:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c288:	4b1b      	ldr	r3, [pc, #108]	@ (800c2f8 <xPortStartScheduler+0x138>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c290:	4a19      	ldr	r2, [pc, #100]	@ (800c2f8 <xPortStartScheduler+0x138>)
 800c292:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	b2da      	uxtb	r2, r3
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c29c:	4b17      	ldr	r3, [pc, #92]	@ (800c2fc <xPortStartScheduler+0x13c>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a16      	ldr	r2, [pc, #88]	@ (800c2fc <xPortStartScheduler+0x13c>)
 800c2a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c2a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c2a8:	4b14      	ldr	r3, [pc, #80]	@ (800c2fc <xPortStartScheduler+0x13c>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4a13      	ldr	r2, [pc, #76]	@ (800c2fc <xPortStartScheduler+0x13c>)
 800c2ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c2b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c2b4:	f000 f8da 	bl	800c46c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c2b8:	4b11      	ldr	r3, [pc, #68]	@ (800c300 <xPortStartScheduler+0x140>)
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c2be:	f000 f8f9 	bl	800c4b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c2c2:	4b10      	ldr	r3, [pc, #64]	@ (800c304 <xPortStartScheduler+0x144>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4a0f      	ldr	r2, [pc, #60]	@ (800c304 <xPortStartScheduler+0x144>)
 800c2c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c2cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c2ce:	f7ff ff63 	bl	800c198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c2d2:	f7ff f831 	bl	800b338 <vTaskSwitchContext>
	prvTaskExitError();
 800c2d6:	f7ff ff1d 	bl	800c114 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2da:	2300      	movs	r3, #0
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3718      	adds	r7, #24
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	e000ed00 	.word	0xe000ed00
 800c2e8:	410fc271 	.word	0x410fc271
 800c2ec:	410fc270 	.word	0x410fc270
 800c2f0:	e000e400 	.word	0xe000e400
 800c2f4:	200017e8 	.word	0x200017e8
 800c2f8:	200017ec 	.word	0x200017ec
 800c2fc:	e000ed20 	.word	0xe000ed20
 800c300:	20000200 	.word	0x20000200
 800c304:	e000ef34 	.word	0xe000ef34

0800c308 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
	__asm volatile
 800c30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c312:	f383 8811 	msr	BASEPRI, r3
 800c316:	f3bf 8f6f 	isb	sy
 800c31a:	f3bf 8f4f 	dsb	sy
 800c31e:	607b      	str	r3, [r7, #4]
}
 800c320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c322:	4b10      	ldr	r3, [pc, #64]	@ (800c364 <vPortEnterCritical+0x5c>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	3301      	adds	r3, #1
 800c328:	4a0e      	ldr	r2, [pc, #56]	@ (800c364 <vPortEnterCritical+0x5c>)
 800c32a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c32c:	4b0d      	ldr	r3, [pc, #52]	@ (800c364 <vPortEnterCritical+0x5c>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2b01      	cmp	r3, #1
 800c332:	d110      	bne.n	800c356 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c334:	4b0c      	ldr	r3, [pc, #48]	@ (800c368 <vPortEnterCritical+0x60>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00b      	beq.n	800c356 <vPortEnterCritical+0x4e>
	__asm volatile
 800c33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c342:	f383 8811 	msr	BASEPRI, r3
 800c346:	f3bf 8f6f 	isb	sy
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	603b      	str	r3, [r7, #0]
}
 800c350:	bf00      	nop
 800c352:	bf00      	nop
 800c354:	e7fd      	b.n	800c352 <vPortEnterCritical+0x4a>
	}
}
 800c356:	bf00      	nop
 800c358:	370c      	adds	r7, #12
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop
 800c364:	20000200 	.word	0x20000200
 800c368:	e000ed04 	.word	0xe000ed04

0800c36c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c372:	4b12      	ldr	r3, [pc, #72]	@ (800c3bc <vPortExitCritical+0x50>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d10b      	bne.n	800c392 <vPortExitCritical+0x26>
	__asm volatile
 800c37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37e:	f383 8811 	msr	BASEPRI, r3
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	607b      	str	r3, [r7, #4]
}
 800c38c:	bf00      	nop
 800c38e:	bf00      	nop
 800c390:	e7fd      	b.n	800c38e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c392:	4b0a      	ldr	r3, [pc, #40]	@ (800c3bc <vPortExitCritical+0x50>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	3b01      	subs	r3, #1
 800c398:	4a08      	ldr	r2, [pc, #32]	@ (800c3bc <vPortExitCritical+0x50>)
 800c39a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c39c:	4b07      	ldr	r3, [pc, #28]	@ (800c3bc <vPortExitCritical+0x50>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d105      	bne.n	800c3b0 <vPortExitCritical+0x44>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	f383 8811 	msr	BASEPRI, r3
}
 800c3ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c3b0:	bf00      	nop
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr
 800c3bc:	20000200 	.word	0x20000200

0800c3c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c3c0:	f3ef 8009 	mrs	r0, PSP
 800c3c4:	f3bf 8f6f 	isb	sy
 800c3c8:	4b15      	ldr	r3, [pc, #84]	@ (800c420 <pxCurrentTCBConst>)
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	f01e 0f10 	tst.w	lr, #16
 800c3d0:	bf08      	it	eq
 800c3d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c3d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3da:	6010      	str	r0, [r2, #0]
 800c3dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c3e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c3e4:	f380 8811 	msr	BASEPRI, r0
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	f7fe ffa2 	bl	800b338 <vTaskSwitchContext>
 800c3f4:	f04f 0000 	mov.w	r0, #0
 800c3f8:	f380 8811 	msr	BASEPRI, r0
 800c3fc:	bc09      	pop	{r0, r3}
 800c3fe:	6819      	ldr	r1, [r3, #0]
 800c400:	6808      	ldr	r0, [r1, #0]
 800c402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c406:	f01e 0f10 	tst.w	lr, #16
 800c40a:	bf08      	it	eq
 800c40c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c410:	f380 8809 	msr	PSP, r0
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	4770      	bx	lr
 800c41a:	bf00      	nop
 800c41c:	f3af 8000 	nop.w

0800c420 <pxCurrentTCBConst>:
 800c420:	200011bc 	.word	0x200011bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c424:	bf00      	nop
 800c426:	bf00      	nop

0800c428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
	__asm volatile
 800c42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c432:	f383 8811 	msr	BASEPRI, r3
 800c436:	f3bf 8f6f 	isb	sy
 800c43a:	f3bf 8f4f 	dsb	sy
 800c43e:	607b      	str	r3, [r7, #4]
}
 800c440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c442:	f7fe febf 	bl	800b1c4 <xTaskIncrementTick>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d003      	beq.n	800c454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c44c:	4b06      	ldr	r3, [pc, #24]	@ (800c468 <xPortSysTickHandler+0x40>)
 800c44e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c452:	601a      	str	r2, [r3, #0]
 800c454:	2300      	movs	r3, #0
 800c456:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	f383 8811 	msr	BASEPRI, r3
}
 800c45e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c460:	bf00      	nop
 800c462:	3708      	adds	r7, #8
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	e000ed04 	.word	0xe000ed04

0800c46c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c46c:	b480      	push	{r7}
 800c46e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c470:	4b0b      	ldr	r3, [pc, #44]	@ (800c4a0 <vPortSetupTimerInterrupt+0x34>)
 800c472:	2200      	movs	r2, #0
 800c474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c476:	4b0b      	ldr	r3, [pc, #44]	@ (800c4a4 <vPortSetupTimerInterrupt+0x38>)
 800c478:	2200      	movs	r2, #0
 800c47a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c47c:	4b0a      	ldr	r3, [pc, #40]	@ (800c4a8 <vPortSetupTimerInterrupt+0x3c>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a0a      	ldr	r2, [pc, #40]	@ (800c4ac <vPortSetupTimerInterrupt+0x40>)
 800c482:	fba2 2303 	umull	r2, r3, r2, r3
 800c486:	099b      	lsrs	r3, r3, #6
 800c488:	4a09      	ldr	r2, [pc, #36]	@ (800c4b0 <vPortSetupTimerInterrupt+0x44>)
 800c48a:	3b01      	subs	r3, #1
 800c48c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c48e:	4b04      	ldr	r3, [pc, #16]	@ (800c4a0 <vPortSetupTimerInterrupt+0x34>)
 800c490:	2207      	movs	r2, #7
 800c492:	601a      	str	r2, [r3, #0]
}
 800c494:	bf00      	nop
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr
 800c49e:	bf00      	nop
 800c4a0:	e000e010 	.word	0xe000e010
 800c4a4:	e000e018 	.word	0xe000e018
 800c4a8:	20000000 	.word	0x20000000
 800c4ac:	10624dd3 	.word	0x10624dd3
 800c4b0:	e000e014 	.word	0xe000e014

0800c4b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c4b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c4c4 <vPortEnableVFP+0x10>
 800c4b8:	6801      	ldr	r1, [r0, #0]
 800c4ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c4be:	6001      	str	r1, [r0, #0]
 800c4c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c4c2:	bf00      	nop
 800c4c4:	e000ed88 	.word	0xe000ed88

0800c4c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c4ce:	f3ef 8305 	mrs	r3, IPSR
 800c4d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2b0f      	cmp	r3, #15
 800c4d8:	d915      	bls.n	800c506 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4da:	4a18      	ldr	r2, [pc, #96]	@ (800c53c <vPortValidateInterruptPriority+0x74>)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	4413      	add	r3, r2
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c4e4:	4b16      	ldr	r3, [pc, #88]	@ (800c540 <vPortValidateInterruptPriority+0x78>)
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	7afa      	ldrb	r2, [r7, #11]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d20b      	bcs.n	800c506 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	607b      	str	r3, [r7, #4]
}
 800c500:	bf00      	nop
 800c502:	bf00      	nop
 800c504:	e7fd      	b.n	800c502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c506:	4b0f      	ldr	r3, [pc, #60]	@ (800c544 <vPortValidateInterruptPriority+0x7c>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c50e:	4b0e      	ldr	r3, [pc, #56]	@ (800c548 <vPortValidateInterruptPriority+0x80>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	429a      	cmp	r2, r3
 800c514:	d90b      	bls.n	800c52e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c51a:	f383 8811 	msr	BASEPRI, r3
 800c51e:	f3bf 8f6f 	isb	sy
 800c522:	f3bf 8f4f 	dsb	sy
 800c526:	603b      	str	r3, [r7, #0]
}
 800c528:	bf00      	nop
 800c52a:	bf00      	nop
 800c52c:	e7fd      	b.n	800c52a <vPortValidateInterruptPriority+0x62>
	}
 800c52e:	bf00      	nop
 800c530:	3714      	adds	r7, #20
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	e000e3f0 	.word	0xe000e3f0
 800c540:	200017e8 	.word	0x200017e8
 800c544:	e000ed0c 	.word	0xe000ed0c
 800c548:	200017ec 	.word	0x200017ec

0800c54c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b08a      	sub	sp, #40	@ 0x28
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c554:	2300      	movs	r3, #0
 800c556:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c558:	f7fe fd66 	bl	800b028 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c55c:	4b5c      	ldr	r3, [pc, #368]	@ (800c6d0 <pvPortMalloc+0x184>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d101      	bne.n	800c568 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c564:	f000 f924 	bl	800c7b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c568:	4b5a      	ldr	r3, [pc, #360]	@ (800c6d4 <pvPortMalloc+0x188>)
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4013      	ands	r3, r2
 800c570:	2b00      	cmp	r3, #0
 800c572:	f040 8095 	bne.w	800c6a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d01e      	beq.n	800c5ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c57c:	2208      	movs	r2, #8
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4413      	add	r3, r2
 800c582:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f003 0307 	and.w	r3, r3, #7
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d015      	beq.n	800c5ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f023 0307 	bic.w	r3, r3, #7
 800c594:	3308      	adds	r3, #8
 800c596:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f003 0307 	and.w	r3, r3, #7
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d00b      	beq.n	800c5ba <pvPortMalloc+0x6e>
	__asm volatile
 800c5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a6:	f383 8811 	msr	BASEPRI, r3
 800c5aa:	f3bf 8f6f 	isb	sy
 800c5ae:	f3bf 8f4f 	dsb	sy
 800c5b2:	617b      	str	r3, [r7, #20]
}
 800c5b4:	bf00      	nop
 800c5b6:	bf00      	nop
 800c5b8:	e7fd      	b.n	800c5b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d06f      	beq.n	800c6a0 <pvPortMalloc+0x154>
 800c5c0:	4b45      	ldr	r3, [pc, #276]	@ (800c6d8 <pvPortMalloc+0x18c>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d86a      	bhi.n	800c6a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c5ca:	4b44      	ldr	r3, [pc, #272]	@ (800c6dc <pvPortMalloc+0x190>)
 800c5cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c5ce:	4b43      	ldr	r3, [pc, #268]	@ (800c6dc <pvPortMalloc+0x190>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5d4:	e004      	b.n	800c5e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d903      	bls.n	800c5f2 <pvPortMalloc+0xa6>
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1f1      	bne.n	800c5d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c5f2:	4b37      	ldr	r3, [pc, #220]	@ (800c6d0 <pvPortMalloc+0x184>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d051      	beq.n	800c6a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c5fc:	6a3b      	ldr	r3, [r7, #32]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2208      	movs	r2, #8
 800c602:	4413      	add	r3, r2
 800c604:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	6a3b      	ldr	r3, [r7, #32]
 800c60c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c610:	685a      	ldr	r2, [r3, #4]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	1ad2      	subs	r2, r2, r3
 800c616:	2308      	movs	r3, #8
 800c618:	005b      	lsls	r3, r3, #1
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d920      	bls.n	800c660 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c61e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	4413      	add	r3, r2
 800c624:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	f003 0307 	and.w	r3, r3, #7
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d00b      	beq.n	800c648 <pvPortMalloc+0xfc>
	__asm volatile
 800c630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c634:	f383 8811 	msr	BASEPRI, r3
 800c638:	f3bf 8f6f 	isb	sy
 800c63c:	f3bf 8f4f 	dsb	sy
 800c640:	613b      	str	r3, [r7, #16]
}
 800c642:	bf00      	nop
 800c644:	bf00      	nop
 800c646:	e7fd      	b.n	800c644 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c64a:	685a      	ldr	r2, [r3, #4]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	1ad2      	subs	r2, r2, r3
 800c650:	69bb      	ldr	r3, [r7, #24]
 800c652:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c65a:	69b8      	ldr	r0, [r7, #24]
 800c65c:	f000 f90a 	bl	800c874 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c660:	4b1d      	ldr	r3, [pc, #116]	@ (800c6d8 <pvPortMalloc+0x18c>)
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	4a1b      	ldr	r2, [pc, #108]	@ (800c6d8 <pvPortMalloc+0x18c>)
 800c66c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c66e:	4b1a      	ldr	r3, [pc, #104]	@ (800c6d8 <pvPortMalloc+0x18c>)
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	4b1b      	ldr	r3, [pc, #108]	@ (800c6e0 <pvPortMalloc+0x194>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	429a      	cmp	r2, r3
 800c678:	d203      	bcs.n	800c682 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c67a:	4b17      	ldr	r3, [pc, #92]	@ (800c6d8 <pvPortMalloc+0x18c>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	4a18      	ldr	r2, [pc, #96]	@ (800c6e0 <pvPortMalloc+0x194>)
 800c680:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c684:	685a      	ldr	r2, [r3, #4]
 800c686:	4b13      	ldr	r3, [pc, #76]	@ (800c6d4 <pvPortMalloc+0x188>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	431a      	orrs	r2, r3
 800c68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c692:	2200      	movs	r2, #0
 800c694:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c696:	4b13      	ldr	r3, [pc, #76]	@ (800c6e4 <pvPortMalloc+0x198>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	3301      	adds	r3, #1
 800c69c:	4a11      	ldr	r2, [pc, #68]	@ (800c6e4 <pvPortMalloc+0x198>)
 800c69e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c6a0:	f7fe fcd0 	bl	800b044 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	f003 0307 	and.w	r3, r3, #7
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00b      	beq.n	800c6c6 <pvPortMalloc+0x17a>
	__asm volatile
 800c6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b2:	f383 8811 	msr	BASEPRI, r3
 800c6b6:	f3bf 8f6f 	isb	sy
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	60fb      	str	r3, [r7, #12]
}
 800c6c0:	bf00      	nop
 800c6c2:	bf00      	nop
 800c6c4:	e7fd      	b.n	800c6c2 <pvPortMalloc+0x176>
	return pvReturn;
 800c6c6:	69fb      	ldr	r3, [r7, #28]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3728      	adds	r7, #40	@ 0x28
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	200023f8 	.word	0x200023f8
 800c6d4:	2000240c 	.word	0x2000240c
 800c6d8:	200023fc 	.word	0x200023fc
 800c6dc:	200023f0 	.word	0x200023f0
 800c6e0:	20002400 	.word	0x20002400
 800c6e4:	20002404 	.word	0x20002404

0800c6e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b086      	sub	sp, #24
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d04f      	beq.n	800c79a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c6fa:	2308      	movs	r3, #8
 800c6fc:	425b      	negs	r3, r3
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	4413      	add	r3, r2
 800c702:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	685a      	ldr	r2, [r3, #4]
 800c70c:	4b25      	ldr	r3, [pc, #148]	@ (800c7a4 <vPortFree+0xbc>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4013      	ands	r3, r2
 800c712:	2b00      	cmp	r3, #0
 800c714:	d10b      	bne.n	800c72e <vPortFree+0x46>
	__asm volatile
 800c716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c71a:	f383 8811 	msr	BASEPRI, r3
 800c71e:	f3bf 8f6f 	isb	sy
 800c722:	f3bf 8f4f 	dsb	sy
 800c726:	60fb      	str	r3, [r7, #12]
}
 800c728:	bf00      	nop
 800c72a:	bf00      	nop
 800c72c:	e7fd      	b.n	800c72a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d00b      	beq.n	800c74e <vPortFree+0x66>
	__asm volatile
 800c736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c73a:	f383 8811 	msr	BASEPRI, r3
 800c73e:	f3bf 8f6f 	isb	sy
 800c742:	f3bf 8f4f 	dsb	sy
 800c746:	60bb      	str	r3, [r7, #8]
}
 800c748:	bf00      	nop
 800c74a:	bf00      	nop
 800c74c:	e7fd      	b.n	800c74a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	685a      	ldr	r2, [r3, #4]
 800c752:	4b14      	ldr	r3, [pc, #80]	@ (800c7a4 <vPortFree+0xbc>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4013      	ands	r3, r2
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d01e      	beq.n	800c79a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d11a      	bne.n	800c79a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	685a      	ldr	r2, [r3, #4]
 800c768:	4b0e      	ldr	r3, [pc, #56]	@ (800c7a4 <vPortFree+0xbc>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	43db      	mvns	r3, r3
 800c76e:	401a      	ands	r2, r3
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c774:	f7fe fc58 	bl	800b028 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	685a      	ldr	r2, [r3, #4]
 800c77c:	4b0a      	ldr	r3, [pc, #40]	@ (800c7a8 <vPortFree+0xc0>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4413      	add	r3, r2
 800c782:	4a09      	ldr	r2, [pc, #36]	@ (800c7a8 <vPortFree+0xc0>)
 800c784:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c786:	6938      	ldr	r0, [r7, #16]
 800c788:	f000 f874 	bl	800c874 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c78c:	4b07      	ldr	r3, [pc, #28]	@ (800c7ac <vPortFree+0xc4>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	3301      	adds	r3, #1
 800c792:	4a06      	ldr	r2, [pc, #24]	@ (800c7ac <vPortFree+0xc4>)
 800c794:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c796:	f7fe fc55 	bl	800b044 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c79a:	bf00      	nop
 800c79c:	3718      	adds	r7, #24
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	2000240c 	.word	0x2000240c
 800c7a8:	200023fc 	.word	0x200023fc
 800c7ac:	20002408 	.word	0x20002408

0800c7b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c7b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800c7ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c7bc:	4b27      	ldr	r3, [pc, #156]	@ (800c85c <prvHeapInit+0xac>)
 800c7be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f003 0307 	and.w	r3, r3, #7
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00c      	beq.n	800c7e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	3307      	adds	r3, #7
 800c7ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f023 0307 	bic.w	r3, r3, #7
 800c7d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7d8:	68ba      	ldr	r2, [r7, #8]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	1ad3      	subs	r3, r2, r3
 800c7de:	4a1f      	ldr	r2, [pc, #124]	@ (800c85c <prvHeapInit+0xac>)
 800c7e0:	4413      	add	r3, r2
 800c7e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7e8:	4a1d      	ldr	r2, [pc, #116]	@ (800c860 <prvHeapInit+0xb0>)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c7ee:	4b1c      	ldr	r3, [pc, #112]	@ (800c860 <prvHeapInit+0xb0>)
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	68ba      	ldr	r2, [r7, #8]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c7fc:	2208      	movs	r2, #8
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	1a9b      	subs	r3, r3, r2
 800c802:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f023 0307 	bic.w	r3, r3, #7
 800c80a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	4a15      	ldr	r2, [pc, #84]	@ (800c864 <prvHeapInit+0xb4>)
 800c810:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c812:	4b14      	ldr	r3, [pc, #80]	@ (800c864 <prvHeapInit+0xb4>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	2200      	movs	r2, #0
 800c818:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c81a:	4b12      	ldr	r3, [pc, #72]	@ (800c864 <prvHeapInit+0xb4>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2200      	movs	r2, #0
 800c820:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	68fa      	ldr	r2, [r7, #12]
 800c82a:	1ad2      	subs	r2, r2, r3
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c830:	4b0c      	ldr	r3, [pc, #48]	@ (800c864 <prvHeapInit+0xb4>)
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	4a0a      	ldr	r2, [pc, #40]	@ (800c868 <prvHeapInit+0xb8>)
 800c83e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	4a09      	ldr	r2, [pc, #36]	@ (800c86c <prvHeapInit+0xbc>)
 800c846:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c848:	4b09      	ldr	r3, [pc, #36]	@ (800c870 <prvHeapInit+0xc0>)
 800c84a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c84e:	601a      	str	r2, [r3, #0]
}
 800c850:	bf00      	nop
 800c852:	3714      	adds	r7, #20
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr
 800c85c:	200017f0 	.word	0x200017f0
 800c860:	200023f0 	.word	0x200023f0
 800c864:	200023f8 	.word	0x200023f8
 800c868:	20002400 	.word	0x20002400
 800c86c:	200023fc 	.word	0x200023fc
 800c870:	2000240c 	.word	0x2000240c

0800c874 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c874:	b480      	push	{r7}
 800c876:	b085      	sub	sp, #20
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c87c:	4b28      	ldr	r3, [pc, #160]	@ (800c920 <prvInsertBlockIntoFreeList+0xac>)
 800c87e:	60fb      	str	r3, [r7, #12]
 800c880:	e002      	b.n	800c888 <prvInsertBlockIntoFreeList+0x14>
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	60fb      	str	r3, [r7, #12]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d8f7      	bhi.n	800c882 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	68ba      	ldr	r2, [r7, #8]
 800c89c:	4413      	add	r3, r2
 800c89e:	687a      	ldr	r2, [r7, #4]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d108      	bne.n	800c8b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	685a      	ldr	r2, [r3, #4]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	441a      	add	r2, r3
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	685b      	ldr	r3, [r3, #4]
 800c8be:	68ba      	ldr	r2, [r7, #8]
 800c8c0:	441a      	add	r2, r3
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d118      	bne.n	800c8fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	4b15      	ldr	r3, [pc, #84]	@ (800c924 <prvInsertBlockIntoFreeList+0xb0>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d00d      	beq.n	800c8f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	685a      	ldr	r2, [r3, #4]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	441a      	add	r2, r3
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	601a      	str	r2, [r3, #0]
 800c8f0:	e008      	b.n	800c904 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c8f2:	4b0c      	ldr	r3, [pc, #48]	@ (800c924 <prvInsertBlockIntoFreeList+0xb0>)
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	601a      	str	r2, [r3, #0]
 800c8fa:	e003      	b.n	800c904 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c904:	68fa      	ldr	r2, [r7, #12]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d002      	beq.n	800c912 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c912:	bf00      	nop
 800c914:	3714      	adds	r7, #20
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	200023f0 	.word	0x200023f0
 800c924:	200023f8 	.word	0x200023f8

0800c928 <memset>:
 800c928:	4402      	add	r2, r0
 800c92a:	4603      	mov	r3, r0
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d100      	bne.n	800c932 <memset+0xa>
 800c930:	4770      	bx	lr
 800c932:	f803 1b01 	strb.w	r1, [r3], #1
 800c936:	e7f9      	b.n	800c92c <memset+0x4>

0800c938 <_reclaim_reent>:
 800c938:	4b2d      	ldr	r3, [pc, #180]	@ (800c9f0 <_reclaim_reent+0xb8>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4283      	cmp	r3, r0
 800c93e:	b570      	push	{r4, r5, r6, lr}
 800c940:	4604      	mov	r4, r0
 800c942:	d053      	beq.n	800c9ec <_reclaim_reent+0xb4>
 800c944:	69c3      	ldr	r3, [r0, #28]
 800c946:	b31b      	cbz	r3, 800c990 <_reclaim_reent+0x58>
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	b163      	cbz	r3, 800c966 <_reclaim_reent+0x2e>
 800c94c:	2500      	movs	r5, #0
 800c94e:	69e3      	ldr	r3, [r4, #28]
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	5959      	ldr	r1, [r3, r5]
 800c954:	b9b1      	cbnz	r1, 800c984 <_reclaim_reent+0x4c>
 800c956:	3504      	adds	r5, #4
 800c958:	2d80      	cmp	r5, #128	@ 0x80
 800c95a:	d1f8      	bne.n	800c94e <_reclaim_reent+0x16>
 800c95c:	69e3      	ldr	r3, [r4, #28]
 800c95e:	4620      	mov	r0, r4
 800c960:	68d9      	ldr	r1, [r3, #12]
 800c962:	f000 f881 	bl	800ca68 <_free_r>
 800c966:	69e3      	ldr	r3, [r4, #28]
 800c968:	6819      	ldr	r1, [r3, #0]
 800c96a:	b111      	cbz	r1, 800c972 <_reclaim_reent+0x3a>
 800c96c:	4620      	mov	r0, r4
 800c96e:	f000 f87b 	bl	800ca68 <_free_r>
 800c972:	69e3      	ldr	r3, [r4, #28]
 800c974:	689d      	ldr	r5, [r3, #8]
 800c976:	b15d      	cbz	r5, 800c990 <_reclaim_reent+0x58>
 800c978:	4629      	mov	r1, r5
 800c97a:	4620      	mov	r0, r4
 800c97c:	682d      	ldr	r5, [r5, #0]
 800c97e:	f000 f873 	bl	800ca68 <_free_r>
 800c982:	e7f8      	b.n	800c976 <_reclaim_reent+0x3e>
 800c984:	680e      	ldr	r6, [r1, #0]
 800c986:	4620      	mov	r0, r4
 800c988:	f000 f86e 	bl	800ca68 <_free_r>
 800c98c:	4631      	mov	r1, r6
 800c98e:	e7e1      	b.n	800c954 <_reclaim_reent+0x1c>
 800c990:	6961      	ldr	r1, [r4, #20]
 800c992:	b111      	cbz	r1, 800c99a <_reclaim_reent+0x62>
 800c994:	4620      	mov	r0, r4
 800c996:	f000 f867 	bl	800ca68 <_free_r>
 800c99a:	69e1      	ldr	r1, [r4, #28]
 800c99c:	b111      	cbz	r1, 800c9a4 <_reclaim_reent+0x6c>
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f000 f862 	bl	800ca68 <_free_r>
 800c9a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c9a6:	b111      	cbz	r1, 800c9ae <_reclaim_reent+0x76>
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	f000 f85d 	bl	800ca68 <_free_r>
 800c9ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9b0:	b111      	cbz	r1, 800c9b8 <_reclaim_reent+0x80>
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	f000 f858 	bl	800ca68 <_free_r>
 800c9b8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c9ba:	b111      	cbz	r1, 800c9c2 <_reclaim_reent+0x8a>
 800c9bc:	4620      	mov	r0, r4
 800c9be:	f000 f853 	bl	800ca68 <_free_r>
 800c9c2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c9c4:	b111      	cbz	r1, 800c9cc <_reclaim_reent+0x94>
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f000 f84e 	bl	800ca68 <_free_r>
 800c9cc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c9ce:	b111      	cbz	r1, 800c9d6 <_reclaim_reent+0x9e>
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	f000 f849 	bl	800ca68 <_free_r>
 800c9d6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c9d8:	b111      	cbz	r1, 800c9e0 <_reclaim_reent+0xa8>
 800c9da:	4620      	mov	r0, r4
 800c9dc:	f000 f844 	bl	800ca68 <_free_r>
 800c9e0:	6a23      	ldr	r3, [r4, #32]
 800c9e2:	b11b      	cbz	r3, 800c9ec <_reclaim_reent+0xb4>
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c9ea:	4718      	bx	r3
 800c9ec:	bd70      	pop	{r4, r5, r6, pc}
 800c9ee:	bf00      	nop
 800c9f0:	20000204 	.word	0x20000204

0800c9f4 <__errno>:
 800c9f4:	4b01      	ldr	r3, [pc, #4]	@ (800c9fc <__errno+0x8>)
 800c9f6:	6818      	ldr	r0, [r3, #0]
 800c9f8:	4770      	bx	lr
 800c9fa:	bf00      	nop
 800c9fc:	20000204 	.word	0x20000204

0800ca00 <__libc_init_array>:
 800ca00:	b570      	push	{r4, r5, r6, lr}
 800ca02:	4d0d      	ldr	r5, [pc, #52]	@ (800ca38 <__libc_init_array+0x38>)
 800ca04:	4c0d      	ldr	r4, [pc, #52]	@ (800ca3c <__libc_init_array+0x3c>)
 800ca06:	1b64      	subs	r4, r4, r5
 800ca08:	10a4      	asrs	r4, r4, #2
 800ca0a:	2600      	movs	r6, #0
 800ca0c:	42a6      	cmp	r6, r4
 800ca0e:	d109      	bne.n	800ca24 <__libc_init_array+0x24>
 800ca10:	4d0b      	ldr	r5, [pc, #44]	@ (800ca40 <__libc_init_array+0x40>)
 800ca12:	4c0c      	ldr	r4, [pc, #48]	@ (800ca44 <__libc_init_array+0x44>)
 800ca14:	f000 f8a0 	bl	800cb58 <_init>
 800ca18:	1b64      	subs	r4, r4, r5
 800ca1a:	10a4      	asrs	r4, r4, #2
 800ca1c:	2600      	movs	r6, #0
 800ca1e:	42a6      	cmp	r6, r4
 800ca20:	d105      	bne.n	800ca2e <__libc_init_array+0x2e>
 800ca22:	bd70      	pop	{r4, r5, r6, pc}
 800ca24:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca28:	4798      	blx	r3
 800ca2a:	3601      	adds	r6, #1
 800ca2c:	e7ee      	b.n	800ca0c <__libc_init_array+0xc>
 800ca2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca32:	4798      	blx	r3
 800ca34:	3601      	adds	r6, #1
 800ca36:	e7f2      	b.n	800ca1e <__libc_init_array+0x1e>
 800ca38:	0800cc8c 	.word	0x0800cc8c
 800ca3c:	0800cc8c 	.word	0x0800cc8c
 800ca40:	0800cc8c 	.word	0x0800cc8c
 800ca44:	0800cc90 	.word	0x0800cc90

0800ca48 <__retarget_lock_acquire_recursive>:
 800ca48:	4770      	bx	lr

0800ca4a <__retarget_lock_release_recursive>:
 800ca4a:	4770      	bx	lr

0800ca4c <memcpy>:
 800ca4c:	440a      	add	r2, r1
 800ca4e:	4291      	cmp	r1, r2
 800ca50:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca54:	d100      	bne.n	800ca58 <memcpy+0xc>
 800ca56:	4770      	bx	lr
 800ca58:	b510      	push	{r4, lr}
 800ca5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca62:	4291      	cmp	r1, r2
 800ca64:	d1f9      	bne.n	800ca5a <memcpy+0xe>
 800ca66:	bd10      	pop	{r4, pc}

0800ca68 <_free_r>:
 800ca68:	b538      	push	{r3, r4, r5, lr}
 800ca6a:	4605      	mov	r5, r0
 800ca6c:	2900      	cmp	r1, #0
 800ca6e:	d041      	beq.n	800caf4 <_free_r+0x8c>
 800ca70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca74:	1f0c      	subs	r4, r1, #4
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	bfb8      	it	lt
 800ca7a:	18e4      	addlt	r4, r4, r3
 800ca7c:	f000 f83e 	bl	800cafc <__malloc_lock>
 800ca80:	4a1d      	ldr	r2, [pc, #116]	@ (800caf8 <_free_r+0x90>)
 800ca82:	6813      	ldr	r3, [r2, #0]
 800ca84:	b933      	cbnz	r3, 800ca94 <_free_r+0x2c>
 800ca86:	6063      	str	r3, [r4, #4]
 800ca88:	6014      	str	r4, [r2, #0]
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca90:	f000 b83a 	b.w	800cb08 <__malloc_unlock>
 800ca94:	42a3      	cmp	r3, r4
 800ca96:	d908      	bls.n	800caaa <_free_r+0x42>
 800ca98:	6820      	ldr	r0, [r4, #0]
 800ca9a:	1821      	adds	r1, r4, r0
 800ca9c:	428b      	cmp	r3, r1
 800ca9e:	bf01      	itttt	eq
 800caa0:	6819      	ldreq	r1, [r3, #0]
 800caa2:	685b      	ldreq	r3, [r3, #4]
 800caa4:	1809      	addeq	r1, r1, r0
 800caa6:	6021      	streq	r1, [r4, #0]
 800caa8:	e7ed      	b.n	800ca86 <_free_r+0x1e>
 800caaa:	461a      	mov	r2, r3
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	b10b      	cbz	r3, 800cab4 <_free_r+0x4c>
 800cab0:	42a3      	cmp	r3, r4
 800cab2:	d9fa      	bls.n	800caaa <_free_r+0x42>
 800cab4:	6811      	ldr	r1, [r2, #0]
 800cab6:	1850      	adds	r0, r2, r1
 800cab8:	42a0      	cmp	r0, r4
 800caba:	d10b      	bne.n	800cad4 <_free_r+0x6c>
 800cabc:	6820      	ldr	r0, [r4, #0]
 800cabe:	4401      	add	r1, r0
 800cac0:	1850      	adds	r0, r2, r1
 800cac2:	4283      	cmp	r3, r0
 800cac4:	6011      	str	r1, [r2, #0]
 800cac6:	d1e0      	bne.n	800ca8a <_free_r+0x22>
 800cac8:	6818      	ldr	r0, [r3, #0]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	6053      	str	r3, [r2, #4]
 800cace:	4408      	add	r0, r1
 800cad0:	6010      	str	r0, [r2, #0]
 800cad2:	e7da      	b.n	800ca8a <_free_r+0x22>
 800cad4:	d902      	bls.n	800cadc <_free_r+0x74>
 800cad6:	230c      	movs	r3, #12
 800cad8:	602b      	str	r3, [r5, #0]
 800cada:	e7d6      	b.n	800ca8a <_free_r+0x22>
 800cadc:	6820      	ldr	r0, [r4, #0]
 800cade:	1821      	adds	r1, r4, r0
 800cae0:	428b      	cmp	r3, r1
 800cae2:	bf04      	itt	eq
 800cae4:	6819      	ldreq	r1, [r3, #0]
 800cae6:	685b      	ldreq	r3, [r3, #4]
 800cae8:	6063      	str	r3, [r4, #4]
 800caea:	bf04      	itt	eq
 800caec:	1809      	addeq	r1, r1, r0
 800caee:	6021      	streq	r1, [r4, #0]
 800caf0:	6054      	str	r4, [r2, #4]
 800caf2:	e7ca      	b.n	800ca8a <_free_r+0x22>
 800caf4:	bd38      	pop	{r3, r4, r5, pc}
 800caf6:	bf00      	nop
 800caf8:	2000254c 	.word	0x2000254c

0800cafc <__malloc_lock>:
 800cafc:	4801      	ldr	r0, [pc, #4]	@ (800cb04 <__malloc_lock+0x8>)
 800cafe:	f7ff bfa3 	b.w	800ca48 <__retarget_lock_acquire_recursive>
 800cb02:	bf00      	nop
 800cb04:	20002548 	.word	0x20002548

0800cb08 <__malloc_unlock>:
 800cb08:	4801      	ldr	r0, [pc, #4]	@ (800cb10 <__malloc_unlock+0x8>)
 800cb0a:	f7ff bf9e 	b.w	800ca4a <__retarget_lock_release_recursive>
 800cb0e:	bf00      	nop
 800cb10:	20002548 	.word	0x20002548

0800cb14 <sqrtf>:
 800cb14:	b508      	push	{r3, lr}
 800cb16:	ed2d 8b02 	vpush	{d8}
 800cb1a:	eeb0 8a40 	vmov.f32	s16, s0
 800cb1e:	f000 f817 	bl	800cb50 <__ieee754_sqrtf>
 800cb22:	eeb4 8a48 	vcmp.f32	s16, s16
 800cb26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb2a:	d60c      	bvs.n	800cb46 <sqrtf+0x32>
 800cb2c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800cb4c <sqrtf+0x38>
 800cb30:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cb34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb38:	d505      	bpl.n	800cb46 <sqrtf+0x32>
 800cb3a:	f7ff ff5b 	bl	800c9f4 <__errno>
 800cb3e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cb42:	2321      	movs	r3, #33	@ 0x21
 800cb44:	6003      	str	r3, [r0, #0]
 800cb46:	ecbd 8b02 	vpop	{d8}
 800cb4a:	bd08      	pop	{r3, pc}
 800cb4c:	00000000 	.word	0x00000000

0800cb50 <__ieee754_sqrtf>:
 800cb50:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cb54:	4770      	bx	lr
	...

0800cb58 <_init>:
 800cb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb5a:	bf00      	nop
 800cb5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb5e:	bc08      	pop	{r3}
 800cb60:	469e      	mov	lr, r3
 800cb62:	4770      	bx	lr

0800cb64 <_fini>:
 800cb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb66:	bf00      	nop
 800cb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb6a:	bc08      	pop	{r3}
 800cb6c:	469e      	mov	lr, r3
 800cb6e:	4770      	bx	lr
