
motor_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000caa0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800cc80  0800cc80  0000dc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd94  0800cd94  0000e254  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cd94  0800cd94  0000dd94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd9c  0800cd9c  0000e254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd9c  0800cd9c  0000dd9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cda0  0800cda0  0000dda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000254  20000000  0800cda4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022d8  20000254  0800cff8  0000e254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000252c  0800cff8  0000e52c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e254  2**0
                  CONTENTS, READONLY
 12 .debug_info   000349fe  00000000  00000000  0000e284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000075d4  00000000  00000000  00042c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002758  00000000  00000000  0004a258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e44  00000000  00000000  0004c9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc51  00000000  00000000  0004e7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00039393  00000000  00000000  0007a445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f45c7  00000000  00000000  000b37d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a7d9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a6e4  00000000  00000000  001a7de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b24c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000254 	.word	0x20000254
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cc68 	.word	0x0800cc68

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000258 	.word	0x20000258
 800021c:	0800cc68 	.word	0x0800cc68

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08c      	sub	sp, #48	@ 0x30
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2220      	movs	r2, #32
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f00c fa67 	bl	800ca38 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800056a:	4b3f      	ldr	r3, [pc, #252]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800056c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000570:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000572:	4b3d      	ldr	r3, [pc, #244]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000574:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000578:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800057a:	4b3b      	ldr	r3, [pc, #236]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000580:	4b39      	ldr	r3, [pc, #228]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000586:	4b38      	ldr	r3, [pc, #224]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800058c:	4b36      	ldr	r3, [pc, #216]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800058e:	2201      	movs	r2, #1
 8000590:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000592:	4b35      	ldr	r3, [pc, #212]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000594:	2204      	movs	r2, #4
 8000596:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000598:	4b33      	ldr	r3, [pc, #204]	@ (8000668 <MX_ADC1_Init+0x11c>)
 800059a:	2200      	movs	r2, #0
 800059c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800059e:	4b32      	ldr	r3, [pc, #200]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80005a4:	4b30      	ldr	r3, [pc, #192]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005a6:	2203      	movs	r2, #3
 80005a8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 80005b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005b4:	f44f 62a8 	mov.w	r2, #1344	@ 0x540
 80005b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005c2:	4b29      	ldr	r3, [pc, #164]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ca:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005d0:	4b25      	ldr	r3, [pc, #148]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d8:	4823      	ldr	r0, [pc, #140]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005da:	f003 fc25 	bl	8003e28 <HAL_ADC_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80005e4:	f000 fc60 	bl	8000ea8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005e8:	2300      	movs	r3, #0
 80005ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f0:	4619      	mov	r1, r3
 80005f2:	481d      	ldr	r0, [pc, #116]	@ (8000668 <MX_ADC1_Init+0x11c>)
 80005f4:	f004 fb9e 	bl	8004d34 <HAL_ADCEx_MultiModeConfigChannel>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80005fe:	f000 fc53 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000602:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <MX_ADC1_Init+0x120>)
 8000604:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000606:	2306      	movs	r3, #6
 8000608:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800060e:	237f      	movs	r3, #127	@ 0x7f
 8000610:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000612:	2304      	movs	r3, #4
 8000614:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	4619      	mov	r1, r3
 800061e:	4812      	ldr	r0, [pc, #72]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000620:	f003 fe58 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800062a:	f000 fc3d 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800062e:	230c      	movs	r3, #12
 8000630:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	480c      	ldr	r0, [pc, #48]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000638:	f003 fe4c 	bl	80042d4 <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000642:	f000 fc31 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000646:	2312      	movs	r3, #18
 8000648:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	4619      	mov	r1, r3
 800064e:	4806      	ldr	r0, [pc, #24]	@ (8000668 <MX_ADC1_Init+0x11c>)
 8000650:	f003 fe40 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 800065a:	f000 fc25 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	3730      	adds	r7, #48	@ 0x30
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000270 	.word	0x20000270
 800066c:	2e300800 	.word	0x2e300800

08000670 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b09a      	sub	sp, #104	@ 0x68
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	2244      	movs	r2, #68	@ 0x44
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f00c f9d1 	bl	800ca38 <memset>
  if(adcHandle->Instance==ADC1)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800069e:	d160      	bne.n	8000762 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4618      	mov	r0, r3
 80006b2:	f006 fe79 	bl	80073a8 <HAL_RCCEx_PeriphCLKConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006bc:	f000 fbf4 	bl	8000ea8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006c0:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c4:	4a29      	ldr	r2, [pc, #164]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006cc:	4b27      	ldr	r3, [pc, #156]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d8:	4b24      	ldr	r3, [pc, #144]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006dc:	4a23      	ldr	r2, [pc, #140]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e4:	4b21      	ldr	r3, [pc, #132]	@ (800076c <HAL_ADC_MspInit+0xfc>)
 80006e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e8:	f003 0302 	and.w	r3, r3, #2
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 80006f0:	f641 0302 	movw	r3, #6146	@ 0x1802
 80006f4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f6:	2303      	movs	r3, #3
 80006f8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000702:	4619      	mov	r1, r3
 8000704:	481a      	ldr	r0, [pc, #104]	@ (8000770 <HAL_ADC_MspInit+0x100>)
 8000706:	f005 fd57 	bl	80061b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800070c:	4a1a      	ldr	r2, [pc, #104]	@ (8000778 <HAL_ADC_MspInit+0x108>)
 800070e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000712:	2205      	movs	r2, #5
 8000714:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000724:	2280      	movs	r2, #128	@ 0x80
 8000726:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800072a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800072e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000730:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000732:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000736:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800073a:	2220      	movs	r2, #32
 800073c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800073e:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000740:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000744:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000746:	480b      	ldr	r0, [pc, #44]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 8000748:	f004 fdb2 	bl	80052b0 <HAL_DMA_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8000752:	f000 fba9 	bl	8000ea8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a06      	ldr	r2, [pc, #24]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800075a:	655a      	str	r2, [r3, #84]	@ 0x54
 800075c:	4a05      	ldr	r2, [pc, #20]	@ (8000774 <HAL_ADC_MspInit+0x104>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000762:	bf00      	nop
 8000764:	3768      	adds	r7, #104	@ 0x68
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000
 8000770:	48000400 	.word	0x48000400
 8000774:	200002dc 	.word	0x200002dc
 8000778:	40020408 	.word	0x40020408

0800077c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000780:	4a0c      	ldr	r2, [pc, #48]	@ (80007b4 <MX_FREERTOS_Init+0x38>)
 8000782:	2100      	movs	r1, #0
 8000784:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <MX_FREERTOS_Init+0x3c>)
 8000786:	f009 fab6 	bl	8009cf6 <osThreadNew>
 800078a:	4603      	mov	r3, r0
 800078c:	4a0b      	ldr	r2, [pc, #44]	@ (80007bc <MX_FREERTOS_Init+0x40>)
 800078e:	6013      	str	r3, [r2, #0]

  /* creation of motorTask */
  motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8000790:	4a0b      	ldr	r2, [pc, #44]	@ (80007c0 <MX_FREERTOS_Init+0x44>)
 8000792:	2100      	movs	r1, #0
 8000794:	480b      	ldr	r0, [pc, #44]	@ (80007c4 <MX_FREERTOS_Init+0x48>)
 8000796:	f009 faae 	bl	8009cf6 <osThreadNew>
 800079a:	4603      	mov	r3, r0
 800079c:	4a0a      	ldr	r2, [pc, #40]	@ (80007c8 <MX_FREERTOS_Init+0x4c>)
 800079e:	6013      	str	r3, [r2, #0]

  /* creation of adcTask */
  adcTaskHandle = osThreadNew(StartAdcTask, NULL, &adcTask_attributes);
 80007a0:	4a0a      	ldr	r2, [pc, #40]	@ (80007cc <MX_FREERTOS_Init+0x50>)
 80007a2:	2100      	movs	r1, #0
 80007a4:	480a      	ldr	r0, [pc, #40]	@ (80007d0 <MX_FREERTOS_Init+0x54>)
 80007a6:	f009 faa6 	bl	8009cf6 <osThreadNew>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4a09      	ldr	r2, [pc, #36]	@ (80007d4 <MX_FREERTOS_Init+0x58>)
 80007ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	0800ccb8 	.word	0x0800ccb8
 80007b8:	080019f9 	.word	0x080019f9
 80007bc:	2000033c 	.word	0x2000033c
 80007c0:	0800ccdc 	.word	0x0800ccdc
 80007c4:	080030bd 	.word	0x080030bd
 80007c8:	20000340 	.word	0x20000340
 80007cc:	0800cd00 	.word	0x0800cd00
 80007d0:	080015c9 	.word	0x080015c9
 80007d4:	20000344 	.word	0x20000344

080007d8 <MX_CORDIC_Init>:
DMA_HandleTypeDef hdma_cordic_read;
DMA_HandleTypeDef hdma_cordic_write;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_CORDIC_Init+0x20>)
 80007de:	4a07      	ldr	r2, [pc, #28]	@ (80007fc <MX_CORDIC_Init+0x24>)
 80007e0:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_CORDIC_Init+0x20>)
 80007e4:	f004 fb4a 	bl	8004e7c <HAL_CORDIC_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80007ee:	f000 fb5b 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000348 	.word	0x20000348
 80007fc:	40020c00 	.word	0x40020c00

08000800 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a34      	ldr	r2, [pc, #208]	@ (80008e0 <HAL_CORDIC_MspInit+0xe0>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d161      	bne.n	80008d6 <HAL_CORDIC_MspInit+0xd6>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000812:	4b34      	ldr	r3, [pc, #208]	@ (80008e4 <HAL_CORDIC_MspInit+0xe4>)
 8000814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000816:	4a33      	ldr	r2, [pc, #204]	@ (80008e4 <HAL_CORDIC_MspInit+0xe4>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6493      	str	r3, [r2, #72]	@ 0x48
 800081e:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <HAL_CORDIC_MspInit+0xe4>)
 8000820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]

    /* CORDIC DMA Init */
    /* CORDIC_READ Init */
    hdma_cordic_read.Instance = DMA2_Channel2;
 800082a:	4b2f      	ldr	r3, [pc, #188]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 800082c:	4a2f      	ldr	r2, [pc, #188]	@ (80008ec <HAL_CORDIC_MspInit+0xec>)
 800082e:	601a      	str	r2, [r3, #0]
    hdma_cordic_read.Init.Request = DMA_REQUEST_CORDIC_READ;
 8000830:	4b2d      	ldr	r3, [pc, #180]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000832:	2270      	movs	r2, #112	@ 0x70
 8000834:	605a      	str	r2, [r3, #4]
    hdma_cordic_read.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000836:	4b2c      	ldr	r3, [pc, #176]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
    hdma_cordic_read.Init.PeriphInc = DMA_PINC_DISABLE;
 800083c:	4b2a      	ldr	r3, [pc, #168]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
    hdma_cordic_read.Init.MemInc = DMA_MINC_ENABLE;
 8000842:	4b29      	ldr	r3, [pc, #164]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000844:	2280      	movs	r2, #128	@ 0x80
 8000846:	611a      	str	r2, [r3, #16]
    hdma_cordic_read.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000848:	4b27      	ldr	r3, [pc, #156]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 800084a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800084e:	615a      	str	r2, [r3, #20]
    hdma_cordic_read.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000850:	4b25      	ldr	r3, [pc, #148]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000852:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000856:	619a      	str	r2, [r3, #24]
    hdma_cordic_read.Init.Mode = DMA_NORMAL;
 8000858:	4b23      	ldr	r3, [pc, #140]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
    hdma_cordic_read.Init.Priority = DMA_PRIORITY_LOW;
 800085e:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_cordic_read) != HAL_OK)
 8000864:	4820      	ldr	r0, [pc, #128]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000866:	f004 fd23 	bl	80052b0 <HAL_DMA_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <HAL_CORDIC_MspInit+0x74>
    {
      Error_Handler();
 8000870:	f000 fb1a 	bl	8000ea8 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaOut,hdma_cordic_read);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a1c      	ldr	r2, [pc, #112]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 8000878:	61da      	str	r2, [r3, #28]
 800087a:	4a1b      	ldr	r2, [pc, #108]	@ (80008e8 <HAL_CORDIC_MspInit+0xe8>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* CORDIC_WRITE Init */
    hdma_cordic_write.Instance = DMA2_Channel3;
 8000880:	4b1b      	ldr	r3, [pc, #108]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 8000882:	4a1c      	ldr	r2, [pc, #112]	@ (80008f4 <HAL_CORDIC_MspInit+0xf4>)
 8000884:	601a      	str	r2, [r3, #0]
    hdma_cordic_write.Init.Request = DMA_REQUEST_CORDIC_WRITE;
 8000886:	4b1a      	ldr	r3, [pc, #104]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 8000888:	2271      	movs	r2, #113	@ 0x71
 800088a:	605a      	str	r2, [r3, #4]
    hdma_cordic_write.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800088c:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 800088e:	2210      	movs	r2, #16
 8000890:	609a      	str	r2, [r3, #8]
    hdma_cordic_write.Init.PeriphInc = DMA_PINC_DISABLE;
 8000892:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
    hdma_cordic_write.Init.MemInc = DMA_MINC_ENABLE;
 8000898:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 800089a:	2280      	movs	r2, #128	@ 0x80
 800089c:	611a      	str	r2, [r3, #16]
    hdma_cordic_write.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800089e:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008a4:	615a      	str	r2, [r3, #20]
    hdma_cordic_write.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008a6:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008ac:	619a      	str	r2, [r3, #24]
    hdma_cordic_write.Init.Mode = DMA_NORMAL;
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
    hdma_cordic_write.Init.Priority = DMA_PRIORITY_LOW;
 80008b4:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_cordic_write) != HAL_OK)
 80008ba:	480d      	ldr	r0, [pc, #52]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008bc:	f004 fcf8 	bl	80052b0 <HAL_DMA_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <HAL_CORDIC_MspInit+0xca>
    {
      Error_Handler();
 80008c6:	f000 faef 	bl	8000ea8 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaIn,hdma_cordic_write);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008ce:	619a      	str	r2, [r3, #24]
 80008d0:	4a07      	ldr	r2, [pc, #28]	@ (80008f0 <HAL_CORDIC_MspInit+0xf0>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	40021000 	.word	0x40021000
 80008e8:	20000370 	.word	0x20000370
 80008ec:	4002041c 	.word	0x4002041c
 80008f0:	200003d0 	.word	0x200003d0
 80008f4:	40020430 	.word	0x40020430

080008f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <MX_DMA_Init+0x70>)
 8000900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000902:	4a19      	ldr	r2, [pc, #100]	@ (8000968 <MX_DMA_Init+0x70>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6493      	str	r3, [r2, #72]	@ 0x48
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <MX_DMA_Init+0x70>)
 800090c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_DMA_Init+0x70>)
 8000918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800091a:	4a13      	ldr	r2, [pc, #76]	@ (8000968 <MX_DMA_Init+0x70>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6493      	str	r3, [r2, #72]	@ 0x48
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_DMA_Init+0x70>)
 8000924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2105      	movs	r1, #5
 8000932:	2038      	movs	r0, #56	@ 0x38
 8000934:	f004 fc94 	bl	8005260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000938:	2038      	movs	r0, #56	@ 0x38
 800093a:	f004 fcab 	bl	8005294 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2105      	movs	r1, #5
 8000942:	2039      	movs	r0, #57	@ 0x39
 8000944:	f004 fc8c 	bl	8005260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000948:	2039      	movs	r0, #57	@ 0x39
 800094a:	f004 fca3 	bl	8005294 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2105      	movs	r1, #5
 8000952:	203a      	movs	r0, #58	@ 0x3a
 8000954:	f004 fc84 	bl	8005260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000958:	203a      	movs	r0, #58	@ 0x3a
 800095a:	f004 fc9b 	bl	8005294 <HAL_NVIC_EnableIRQ>

}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000

0800096c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000970:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 8000972:	4a20      	ldr	r2, [pc, #128]	@ (80009f4 <MX_FDCAN1_Init+0x88>)
 8000974:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000976:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800097c:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000982:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000988:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 800098a:	2200      	movs	r2, #0
 800098c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800098e:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 8000990:	2200      	movs	r2, #0
 8000992:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000994:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 8000996:	2200      	movs	r2, #0
 8000998:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 800099c:	2214      	movs	r2, #20
 800099e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80009a0:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80009a6:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009a8:	220e      	movs	r2, #14
 80009aa:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80009ac:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009ae:	2202      	movs	r2, #2
 80009b0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80009b8:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 80009be:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009c0:	220e      	movs	r2, #14
 80009c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009c6:	2202      	movs	r2, #2
 80009c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = FDCAN_STD_FILTER_NBR;
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009d0:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009d8:	2200      	movs	r2, #0
 80009da:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_FDCAN1_Init+0x84>)
 80009de:	f004 ff3b 	bl	8005858 <HAL_FDCAN_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80009e8:	f000 fa5e 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000430 	.word	0x20000430
 80009f4:	40006400 	.word	0x40006400

080009f8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b09a      	sub	sp, #104	@ 0x68
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	2244      	movs	r2, #68	@ 0x44
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f00c f80d 	bl	800ca38 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a28      	ldr	r2, [pc, #160]	@ (8000ac4 <HAL_FDCAN_MspInit+0xcc>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d149      	bne.n	8000abc <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a2c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a32:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f006 fcb5 	bl	80073a8 <HAL_RCCEx_PeriphCLKConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a44:	f000 fa30 	bl	8000ea8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac8 <HAL_FDCAN_MspInit+0xd0>)
 8000a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac8 <HAL_FDCAN_MspInit+0xd0>)
 8000a4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a52:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac8 <HAL_FDCAN_MspInit+0xd0>)
 8000a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <HAL_FDCAN_MspInit+0xd0>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a64:	4a18      	ldr	r2, [pc, #96]	@ (8000ac8 <HAL_FDCAN_MspInit+0xd0>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <HAL_FDCAN_MspInit+0xd0>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a78:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a7c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a8a:	2309      	movs	r3, #9
 8000a8c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a92:	4619      	mov	r1, r3
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a98:	f005 fb8e 	bl	80061b8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2105      	movs	r1, #5
 8000aa0:	2015      	movs	r0, #21
 8000aa2:	f004 fbdd 	bl	8005260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000aa6:	2015      	movs	r0, #21
 8000aa8:	f004 fbf4 	bl	8005294 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2105      	movs	r1, #5
 8000ab0:	2016      	movs	r0, #22
 8000ab2:	f004 fbd5 	bl	8005260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000ab6:	2016      	movs	r0, #22
 8000ab8:	f004 fbec 	bl	8005294 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000abc:	bf00      	nop
 8000abe:	3768      	adds	r7, #104	@ 0x68
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40006400 	.word	0x40006400
 8000ac8:	40021000 	.word	0x40021000

08000acc <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4b42      	ldr	r3, [pc, #264]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae6:	4a41      	ldr	r2, [pc, #260]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aee:	4b3f      	ldr	r3, [pc, #252]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000afa:	4b3c      	ldr	r3, [pc, #240]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afe:	4a3b      	ldr	r2, [pc, #236]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000b00:	f043 0320 	orr.w	r3, r3, #32
 8000b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b06:	4b39      	ldr	r3, [pc, #228]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	f003 0320 	and.w	r3, r3, #32
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b36      	ldr	r3, [pc, #216]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	4a35      	ldr	r2, [pc, #212]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1e:	4b33      	ldr	r3, [pc, #204]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b30      	ldr	r3, [pc, #192]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	4a2f      	ldr	r2, [pc, #188]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b36:	4b2d      	ldr	r3, [pc, #180]	@ (8000bec <MX_GPIO_Init+0x120>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2120      	movs	r1, #32
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b4a:	f005 fcb7 	bl	80064bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8000b54:	4826      	ldr	r0, [pc, #152]	@ (8000bf0 <MX_GPIO_Init+0x124>)
 8000b56:	f005 fcb1 	bl	80064bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b5a:	230c      	movs	r3, #12
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b6a:	230c      	movs	r3, #12
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b78:	f005 fb1e 	bl	80061b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b7c:	2320      	movs	r3, #32
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b96:	f005 fb0f 	bl	80061b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8000b9a:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480f      	ldr	r0, [pc, #60]	@ (8000bf0 <MX_GPIO_Init+0x124>)
 8000bb4:	f005 fb00 	bl	80061b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000bb8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000bbe:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4809      	ldr	r0, [pc, #36]	@ (8000bf4 <MX_GPIO_Init+0x128>)
 8000bd0:	f005 faf2 	bl	80061b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2105      	movs	r1, #5
 8000bd8:	2028      	movs	r0, #40	@ 0x28
 8000bda:	f004 fb41 	bl	8005260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bde:	2028      	movs	r0, #40	@ 0x28
 8000be0:	f004 fb58 	bl	8005294 <HAL_NVIC_EnableIRQ>

}
 8000be4:	bf00      	nop
 8000be6:	3728      	adds	r7, #40	@ 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	48000400 	.word	0x48000400
 8000bf4:	48000800 	.word	0x48000800

08000bf8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8000c70 <MX_I2C1_Init+0x78>)
 8000c00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c04:	4a1b      	ldr	r2, [pc, #108]	@ (8000c74 <MX_I2C1_Init+0x7c>)
 8000c06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c08:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c14:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c32:	480e      	ldr	r0, [pc, #56]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c34:	f005 fc72 	bl	800651c <HAL_I2C_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c3e:	f000 f933 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4809      	ldr	r0, [pc, #36]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c46:	f005 fd04 	bl	8006652 <HAL_I2CEx_ConfigAnalogFilter>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c50:	f000 f92a 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c54:	2100      	movs	r1, #0
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c58:	f005 fd46 	bl	80066e8 <HAL_I2CEx_ConfigDigitalFilter>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c62:	f000 f921 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000494 	.word	0x20000494
 8000c70:	40005400 	.word	0x40005400
 8000c74:	40b285c2 	.word	0x40b285c2

08000c78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b09c      	sub	sp, #112	@ 0x70
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c90:	f107 0318 	add.w	r3, r7, #24
 8000c94:	2244      	movs	r2, #68	@ 0x44
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f00b fecd 	bl	800ca38 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a2d      	ldr	r2, [pc, #180]	@ (8000d58 <HAL_I2C_MspInit+0xe0>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d153      	bne.n	8000d50 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ca8:	2340      	movs	r3, #64	@ 0x40
 8000caa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb0:	f107 0318 	add.w	r3, r7, #24
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f006 fb77 	bl	80073a8 <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000cc0:	f000 f8f2 	bl	8000ea8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b25      	ldr	r3, [pc, #148]	@ (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc8:	4a24      	ldr	r2, [pc, #144]	@ (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd0:	4b22      	ldr	r3, [pc, #136]	@ (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000ce2:	f043 0302 	orr.w	r3, r3, #2
 8000ce6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cf4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cfa:	2312      	movs	r3, #18
 8000cfc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d06:	2304      	movs	r3, #4
 8000d08:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d14:	f005 fa50 	bl	80061b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d18:	2380      	movs	r3, #128	@ 0x80
 8000d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1c:	2312      	movs	r3, #18
 8000d1e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d30:	4619      	mov	r1, r3
 8000d32:	480b      	ldr	r0, [pc, #44]	@ (8000d60 <HAL_I2C_MspInit+0xe8>)
 8000d34:	f005 fa40 	bl	80061b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3c:	4a07      	ldr	r2, [pc, #28]	@ (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000d3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d42:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <HAL_I2C_MspInit+0xe4>)
 8000d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d50:	bf00      	nop
 8000d52:	3770      	adds	r7, #112	@ 0x70
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	48000400 	.word	0x48000400

08000d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d68:	f002 fe0a 	bl	8003980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6c:	f000 f83c 	bl	8000de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d70:	f7ff feac 	bl	8000acc <MX_GPIO_Init>
  MX_DMA_Init();
 8000d74:	f7ff fdc0 	bl	80008f8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d78:	f7ff fbe8 	bl	800054c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000d7c:	f7ff fdf6 	bl	800096c <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000d80:	f000 f9b6 	bl	80010f0 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000d84:	f7ff ff38 	bl	8000bf8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000d88:	f000 fa64 	bl	8001254 <MX_TIM2_Init>
  MX_CORDIC_Init();
 8000d8c:	f7ff fd24 	bl	80007d8 <MX_CORDIC_Init>
  MX_TIM3_Init();
 8000d90:	f000 fab6 	bl	8001300 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d94:	f008 ff50 	bl	8009c38 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d98:	f7ff fcf0 	bl	800077c <MX_FREERTOS_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f002 fc77 	bl	8003690 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000da2:	2101      	movs	r1, #1
 8000da4:	2000      	movs	r0, #0
 8000da6:	f002 fca9 	bl	80036fc <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <main+0x80>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000db0:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <main+0x80>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <main+0x80>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <main+0x80>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <main+0x80>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000dca:	4906      	ldr	r1, [pc, #24]	@ (8000de4 <main+0x80>)
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f002 fd21 	bl	8003814 <BSP_COM_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <main+0x78>
  {
    Error_Handler();
 8000dd8:	f000 f866 	bl	8000ea8 <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 8000ddc:	f008 ff50 	bl	8009c80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <main+0x7c>
 8000de4:	200004e8 	.word	0x200004e8

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b094      	sub	sp, #80	@ 0x50
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0318 	add.w	r3, r7, #24
 8000df2:	2238      	movs	r2, #56	@ 0x38
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f00b fe1e 	bl	800ca38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f005 fcb8 	bl	8006780 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1a:	2340      	movs	r3, #64	@ 0x40
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e22:	2302      	movs	r3, #2
 8000e24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e26:	2304      	movs	r3, #4
 8000e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e2a:	2355      	movs	r3, #85	@ 0x55
 8000e2c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e32:	2302      	movs	r3, #2
 8000e34:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3a:	f107 0318 	add.w	r3, r7, #24
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f005 fd52 	bl	80068e8 <HAL_RCC_OscConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e4a:	f000 f82d 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4e:	230f      	movs	r3, #15
 8000e50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e52:	2303      	movs	r3, #3
 8000e54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2104      	movs	r1, #4
 8000e66:	4618      	mov	r0, r3
 8000e68:	f006 f850 	bl	8006f0c <HAL_RCC_ClockConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e72:	f000 f819 	bl	8000ea8 <Error_Handler>
  }
}
 8000e76:	bf00      	nop
 8000e78:	3750      	adds	r7, #80	@ 0x50
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a05      	ldr	r2, [pc, #20]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e92:	f002 fd8d 	bl	80039b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  HAL_TIM_PeriodElapsedCallback_OWN(htim);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f000 fd9c 	bl	80019d4 <HAL_TIM_PeriodElapsedCallback_OWN>
  /* USER CODE END Callback 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40001000 	.word	0x40001000

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <Error_Handler+0x8>

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <HAL_MspInit+0x50>)
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ebe:	4a11      	ldr	r2, [pc, #68]	@ (8000f04 <HAL_MspInit+0x50>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <HAL_MspInit+0x50>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <HAL_MspInit+0x50>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	@ (8000f04 <HAL_MspInit+0x50>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000edc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ede:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <HAL_MspInit+0x50>)
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	210f      	movs	r1, #15
 8000eee:	f06f 0001 	mvn.w	r0, #1
 8000ef2:	f004 f9b5 	bl	8005260 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ef6:	f005 fce7 	bl	80068c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000

08000f08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	@ 0x30
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f18:	4b2c      	ldr	r3, [pc, #176]	@ (8000fcc <HAL_InitTick+0xc4>)
 8000f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8000fcc <HAL_InitTick+0xc4>)
 8000f1e:	f043 0310 	orr.w	r3, r3, #16
 8000f22:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f24:	4b29      	ldr	r3, [pc, #164]	@ (8000fcc <HAL_InitTick+0xc4>)
 8000f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f28:	f003 0310 	and.w	r3, r3, #16
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f30:	f107 020c 	add.w	r2, r7, #12
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f006 f9bc 	bl	80072b8 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f40:	f006 f98e 	bl	8007260 <HAL_RCC_GetPCLK1Freq>
 8000f44:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f48:	4a21      	ldr	r2, [pc, #132]	@ (8000fd0 <HAL_InitTick+0xc8>)
 8000f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4e:	0c9b      	lsrs	r3, r3, #18
 8000f50:	3b01      	subs	r3, #1
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f54:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <HAL_InitTick+0xcc>)
 8000f56:	4a20      	ldr	r2, [pc, #128]	@ (8000fd8 <HAL_InitTick+0xd0>)
 8000f58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <HAL_InitTick+0xcc>)
 8000f5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f60:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f62:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd4 <HAL_InitTick+0xcc>)
 8000f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f66:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <HAL_InitTick+0xcc>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <HAL_InitTick+0xcc>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000f74:	4817      	ldr	r0, [pc, #92]	@ (8000fd4 <HAL_InitTick+0xcc>)
 8000f76:	f006 fc07 	bl	8007788 <HAL_TIM_Base_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d11b      	bne.n	8000fc0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f88:	4812      	ldr	r0, [pc, #72]	@ (8000fd4 <HAL_InitTick+0xcc>)
 8000f8a:	f006 fcc1 	bl	8007910 <HAL_TIM_Base_Start_IT>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d111      	bne.n	8000fc0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f9c:	2036      	movs	r0, #54	@ 0x36
 8000f9e:	f004 f979 	bl	8005294 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d808      	bhi.n	8000fba <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	2036      	movs	r0, #54	@ 0x36
 8000fae:	f004 f957 	bl	8005260 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <HAL_InitTick+0xd4>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	e002      	b.n	8000fc0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3730      	adds	r7, #48	@ 0x30
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	431bde83 	.word	0x431bde83
 8000fd4:	200004f8 	.word	0x200004f8
 8000fd8:	40001000 	.word	0x40001000
 8000fdc:	200001f8 	.word	0x200001f8

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <UsageFault_Handler+0x4>

08001008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <FDCAN1_IT0_IRQHandler+0x10>)
 800101e:	f004 ff05 	bl	8005e2c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000430 	.word	0x20000430

0800102c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <FDCAN1_IT1_IRQHandler+0x10>)
 8001032:	f004 fefb 	bl	8005e2c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000430 	.word	0x20000430

08001040 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001046:	f006 ff11 	bl	8007e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000544 	.word	0x20000544

08001054 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001058:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800105c:	f005 fa46 	bl	80064ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001060:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001064:	f005 fa42 	bl	80064ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001068:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800106c:	f005 fa3e 	bl	80064ec <HAL_GPIO_EXTI_IRQHandler>
  BSP_PB_IRQHandler(BUTTON_USER);
 8001070:	2000      	movs	r0, #0
 8001072:	f002 fbb1 	bl	80037d8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <TIM6_DAC_IRQHandler+0x10>)
 8001082:	f006 fef3 	bl	8007e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200004f8 	.word	0x200004f8

08001090 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <DMA2_Channel1_IRQHandler+0x10>)
 8001096:	f004 fa2e 	bl	80054f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200002dc 	.word	0x200002dc

080010a4 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_read);
 80010a8:	4802      	ldr	r0, [pc, #8]	@ (80010b4 <DMA2_Channel2_IRQHandler+0x10>)
 80010aa:	f004 fa24 	bl	80054f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000370 	.word	0x20000370

080010b8 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_write);
 80010bc:	4802      	ldr	r0, [pc, #8]	@ (80010c8 <DMA2_Channel3_IRQHandler+0x10>)
 80010be:	f004 fa1a 	bl	80054f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200003d0 	.word	0x200003d0

080010cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <SystemInit+0x20>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010d6:	4a05      	ldr	r2, [pc, #20]	@ (80010ec <SystemInit+0x20>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b098      	sub	sp, #96	@ 0x60
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001102:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]
 8001112:	615a      	str	r2, [r3, #20]
 8001114:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2234      	movs	r2, #52	@ 0x34
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f00b fc8b 	bl	800ca38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001122:	4b4a      	ldr	r3, [pc, #296]	@ (800124c <MX_TIM1_Init+0x15c>)
 8001124:	4a4a      	ldr	r2, [pc, #296]	@ (8001250 <MX_TIM1_Init+0x160>)
 8001126:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC;
 8001128:	4b48      	ldr	r3, [pc, #288]	@ (800124c <MX_TIM1_Init+0x15c>)
 800112a:	2210      	movs	r2, #16
 800112c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800112e:	4b47      	ldr	r3, [pc, #284]	@ (800124c <MX_TIM1_Init+0x15c>)
 8001130:	2220      	movs	r2, #32
 8001132:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR;
 8001134:	4b45      	ldr	r3, [pc, #276]	@ (800124c <MX_TIM1_Init+0x15c>)
 8001136:	22fa      	movs	r2, #250	@ 0xfa
 8001138:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113a:	4b44      	ldr	r3, [pc, #272]	@ (800124c <MX_TIM1_Init+0x15c>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001140:	4b42      	ldr	r3, [pc, #264]	@ (800124c <MX_TIM1_Init+0x15c>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001146:	4b41      	ldr	r3, [pc, #260]	@ (800124c <MX_TIM1_Init+0x15c>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800114c:	483f      	ldr	r0, [pc, #252]	@ (800124c <MX_TIM1_Init+0x15c>)
 800114e:	f006 fca0 	bl	8007a92 <HAL_TIM_PWM_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001158:	f7ff fea6 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 8001160:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001164:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800116a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800116e:	4619      	mov	r1, r3
 8001170:	4836      	ldr	r0, [pc, #216]	@ (800124c <MX_TIM1_Init+0x15c>)
 8001172:	f007 fe4b 	bl	8008e0c <HAL_TIMEx_MasterConfigSynchronization>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800117c:	f7ff fe94 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001180:	2360      	movs	r3, #96	@ 0x60
 8001182:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001188:	2302      	movs	r3, #2
 800118a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800118c:	2300      	movs	r3, #0
 800118e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001194:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001198:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800119e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011a2:	2200      	movs	r2, #0
 80011a4:	4619      	mov	r1, r3
 80011a6:	4829      	ldr	r0, [pc, #164]	@ (800124c <MX_TIM1_Init+0x15c>)
 80011a8:	f007 f82a 	bl	8008200 <HAL_TIM_PWM_ConfigChannel>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80011b2:	f7ff fe79 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011ba:	2204      	movs	r2, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	4823      	ldr	r0, [pc, #140]	@ (800124c <MX_TIM1_Init+0x15c>)
 80011c0:	f007 f81e 	bl	8008200 <HAL_TIM_PWM_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80011ca:	f7ff fe6d 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011d2:	2208      	movs	r2, #8
 80011d4:	4619      	mov	r1, r3
 80011d6:	481d      	ldr	r0, [pc, #116]	@ (800124c <MX_TIM1_Init+0x15c>)
 80011d8:	f007 f812 	bl	8008200 <HAL_TIM_PWM_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80011e2:	f7ff fe61 	bl	8000ea8 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80011e6:	4819      	ldr	r0, [pc, #100]	@ (800124c <MX_TIM1_Init+0x15c>)
 80011e8:	f007 ff1e 	bl	8009028 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80011ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80011f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = TIM_DTG_200ns;
 80011fc:	2322      	movs	r3, #34	@ 0x22
 80011fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001204:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001208:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800120e:	2300      	movs	r3, #0
 8001210:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001216:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800121a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4807      	ldr	r0, [pc, #28]	@ (800124c <MX_TIM1_Init+0x15c>)
 800122e:	f007 fe6f 	bl	8008f10 <HAL_TIMEx_ConfigBreakDeadTime>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8001238:	f7ff fe36 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800123c:	4803      	ldr	r0, [pc, #12]	@ (800124c <MX_TIM1_Init+0x15c>)
 800123e:	f000 f90f 	bl	8001460 <HAL_TIM_MspPostInit>

}
 8001242:	bf00      	nop
 8001244:	3760      	adds	r7, #96	@ 0x60
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000544 	.word	0x20000544
 8001250:	40012c00 	.word	0x40012c00

08001254 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	@ 0x28
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001266:	463b      	mov	r3, r7
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
 8001274:	615a      	str	r2, [r3, #20]
 8001276:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001278:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <MX_TIM2_Init+0xa8>)
 800127a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800127e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PSC;
 8001280:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <MX_TIM2_Init+0xa8>)
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <MX_TIM2_Init+0xa8>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_ARR;
 800128c:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <MX_TIM2_Init+0xa8>)
 800128e:	f04f 32ff 	mov.w	r2, #4294967295
 8001292:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001294:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <MX_TIM2_Init+0xa8>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129a:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <MX_TIM2_Init+0xa8>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80012a0:	4816      	ldr	r0, [pc, #88]	@ (80012fc <MX_TIM2_Init+0xa8>)
 80012a2:	f006 fb9f 	bl	80079e4 <HAL_TIM_OC_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80012ac:	f7ff fdfc 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	480f      	ldr	r0, [pc, #60]	@ (80012fc <MX_TIM2_Init+0xa8>)
 80012c0:	f007 fda4 	bl	8008e0c <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80012ca:	f7ff fded 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	@ (80012fc <MX_TIM2_Init+0xa8>)
 80012e6:	f006 ff11 	bl	800810c <HAL_TIM_OC_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80012f0:	f7ff fdda 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	@ 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000590 	.word	0x20000590

08001300 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001312:	463b      	mov	r3, r7
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
 8001320:	615a      	str	r2, [r3, #20]
 8001322:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001324:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 8001326:	4a21      	ldr	r2, [pc, #132]	@ (80013ac <MX_TIM3_Init+0xac>)
 8001328:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = TIM3_PSC;
 800132a:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 800132c:	2210      	movs	r2, #16
 800132e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001330:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR;
 8001336:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 8001338:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800133c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133e:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001344:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800134a:	4817      	ldr	r0, [pc, #92]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 800134c:	f006 fb4a 	bl	80079e4 <HAL_TIM_OC_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001356:	f7ff fda7 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	480f      	ldr	r0, [pc, #60]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 800136a:	f007 fd4f 	bl	8008e0c <HAL_TIMEx_MasterConfigSynchronization>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001374:	f7ff fd98 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001378:	2300      	movs	r3, #0
 800137a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	2200      	movs	r2, #0
 800138c:	4619      	mov	r1, r3
 800138e:	4806      	ldr	r0, [pc, #24]	@ (80013a8 <MX_TIM3_Init+0xa8>)
 8001390:	f006 febc 	bl	800810c <HAL_TIM_OC_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800139a:	f7ff fd85 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	@ 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200005dc 	.word	0x200005dc
 80013ac:	40000400 	.word	0x40000400

080013b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0d      	ldr	r2, [pc, #52]	@ (80013f4 <HAL_TIM_PWM_MspInit+0x44>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d113      	bne.n	80013ea <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013c2:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <HAL_TIM_PWM_MspInit+0x48>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c6:	4a0c      	ldr	r2, [pc, #48]	@ (80013f8 <HAL_TIM_PWM_MspInit+0x48>)
 80013c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80013ce:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <HAL_TIM_PWM_MspInit+0x48>)
 80013d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2105      	movs	r1, #5
 80013de:	2019      	movs	r0, #25
 80013e0:	f003 ff3e 	bl	8005260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013e4:	2019      	movs	r0, #25
 80013e6:	f003 ff55 	bl	8005294 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40012c00 	.word	0x40012c00
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800140c:	d10c      	bne.n	8001428 <HAL_TIM_OC_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800140e:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <HAL_TIM_OC_MspInit+0x5c>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001412:	4a11      	ldr	r2, [pc, #68]	@ (8001458 <HAL_TIM_OC_MspInit+0x5c>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6593      	str	r3, [r2, #88]	@ 0x58
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <HAL_TIM_OC_MspInit+0x5c>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001426:	e010      	b.n	800144a <HAL_TIM_OC_MspInit+0x4e>
  else if(tim_ocHandle->Instance==TIM3)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0b      	ldr	r2, [pc, #44]	@ (800145c <HAL_TIM_OC_MspInit+0x60>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d10b      	bne.n	800144a <HAL_TIM_OC_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <HAL_TIM_OC_MspInit+0x5c>)
 8001434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001436:	4a08      	ldr	r2, [pc, #32]	@ (8001458 <HAL_TIM_OC_MspInit+0x5c>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	6593      	str	r3, [r2, #88]	@ 0x58
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_TIM_OC_MspInit+0x5c>)
 8001440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000
 800145c:	40000400 	.word	0x40000400

08001460 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a28      	ldr	r2, [pc, #160]	@ (8001520 <HAL_TIM_MspPostInit+0xc0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d149      	bne.n	8001516 <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001482:	4b28      	ldr	r3, [pc, #160]	@ (8001524 <HAL_TIM_MspPostInit+0xc4>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	4a27      	ldr	r2, [pc, #156]	@ (8001524 <HAL_TIM_MspPostInit+0xc4>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148e:	4b25      	ldr	r3, [pc, #148]	@ (8001524 <HAL_TIM_MspPostInit+0xc4>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	4b22      	ldr	r3, [pc, #136]	@ (8001524 <HAL_TIM_MspPostInit+0xc4>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	4a21      	ldr	r2, [pc, #132]	@ (8001524 <HAL_TIM_MspPostInit+0xc4>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <HAL_TIM_MspPostInit+0xc4>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80014b2:	2307      	movs	r3, #7
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80014c2:	2302      	movs	r3, #2
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4816      	ldr	r0, [pc, #88]	@ (8001528 <HAL_TIM_MspPostInit+0xc8>)
 80014ce:	f004 fe73 	bl	80061b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80014d2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014e4:	2306      	movs	r3, #6
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	480f      	ldr	r0, [pc, #60]	@ (800152c <HAL_TIM_MspPostInit+0xcc>)
 80014f0:	f004 fe62 	bl	80061b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001506:	2304      	movs	r3, #4
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	4806      	ldr	r0, [pc, #24]	@ (800152c <HAL_TIM_MspPostInit+0xcc>)
 8001512:	f004 fe51 	bl	80061b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001516:	bf00      	nop
 8001518:	3728      	adds	r7, #40	@ 0x28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40012c00 	.word	0x40012c00
 8001524:	40021000 	.word	0x40021000
 8001528:	48000800 	.word	0x48000800
 800152c:	48000400 	.word	0x48000400

08001530 <average>:
    }
    return RESULT_OK(NULL);
}

static void average(uint8_t adc_id, float32_t *adc_store)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	71fb      	strb	r3, [r7, #7]
    uint16_t i;
    float32_t total = 0;
 800153c:	f04f 0300 	mov.w	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < ADC_NEED_LEN; i++)
 8001542:	2300      	movs	r3, #0
 8001544:	81fb      	strh	r3, [r7, #14]
 8001546:	e015      	b.n	8001574 <average+0x44>
    {
        total += ADC_Values[i * ADC_COUNT + adc_id];
 8001548:	89fa      	ldrh	r2, [r7, #14]
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	441a      	add	r2, r3
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	4413      	add	r3, r2
 8001554:	4a10      	ldr	r2, [pc, #64]	@ (8001598 <average+0x68>)
 8001556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800155a:	ee07 3a90 	vmov	s15, r3
 800155e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001562:	ed97 7a02 	vldr	s14, [r7, #8]
 8001566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156a:	edc7 7a02 	vstr	s15, [r7, #8]
    for (i = 0; i < ADC_NEED_LEN; i++)
 800156e:	89fb      	ldrh	r3, [r7, #14]
 8001570:	3301      	adds	r3, #1
 8001572:	81fb      	strh	r3, [r7, #14]
 8001574:	89fb      	ldrh	r3, [r7, #14]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d9e6      	bls.n	8001548 <average+0x18>
    }
    *adc_store = total / (float32_t)ADC_NEED_LEN;
 800157a:	ed97 7a02 	vldr	s14, [r7, #8]
 800157e:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001582:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	edc3 7a00 	vstr	s15, [r3]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	20000628 	.word	0x20000628

0800159c <renew_adc>:
{
    *adc_store += ALPHA * ((float32_t)ADC_Values[adc_id] - *adc_store);
}

Result renew_adc(uint8_t adc_id, float32_t *adc_store)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	460b      	mov	r3, r1
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	72fb      	strb	r3, [r7, #11]
    average(adc_id, adc_store);
 80015aa:	7afb      	ldrb	r3, [r7, #11]
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ffbe 	bl	8001530 <average>
    return RESULT_OK(NULL);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	605a      	str	r2, [r3, #4]
}
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <StartAdcTask>:

void StartAdcTask(void *argument)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Values, ADC_COUNT * ADC_NEED_LEN);
 80015d0:	2209      	movs	r2, #9
 80015d2:	4903      	ldr	r1, [pc, #12]	@ (80015e0 <StartAdcTask+0x18>)
 80015d4:	4803      	ldr	r0, [pc, #12]	@ (80015e4 <StartAdcTask+0x1c>)
 80015d6:	f002 fdab 	bl	8004130 <HAL_ADC_Start_DMA>
    StopTask();
 80015da:	f008 fc1e 	bl	8009e1a <osThreadExit>
 80015de:	bf00      	nop
 80015e0:	20000628 	.word	0x20000628
 80015e4:	20000270 	.word	0x20000270

080015e8 <fdcan_pkt_get_byte>:
bool fdcan_bus_off = false;

FncState fdacn_data_store = FNC_DISABLE;

Result fdcan_pkt_get_byte(FdcanPkt* pkt, uint8_t id, uint8_t* container)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	@ 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	71fb      	strb	r3, [r7, #7]
    if (pkt->len <= id) return RESULT_ERROR(RES_ERR_NOT_FOUND);
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	7b1b      	ldrb	r3, [r3, #12]
 80015fc:	79fa      	ldrb	r2, [r7, #7]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d308      	bcc.n	8001614 <fdcan_pkt_get_byte+0x2c>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	461a      	mov	r2, r3
 8001606:	2300      	movs	r3, #0
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	6053      	str	r3, [r2, #4]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2208      	movs	r2, #8
 8001610:	711a      	strb	r2, [r3, #4]
 8001612:	e00b      	b.n	800162c <fdcan_pkt_get_byte+0x44>
    *container = pkt->data[id];
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	4413      	add	r3, r2
 800161a:	791a      	ldrb	r2, [r3, #4]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	701a      	strb	r2, [r3, #0]
    return RESULT_OK(container);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	605a      	str	r2, [r3, #4]
}
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	3724      	adds	r7, #36	@ 0x24
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <fdcan_pkt_pool_alloc>:
    }
    fdcan_pkt_pool.remain = FDCAN_PKT_POOL_CAP;
}

Result fdcan_pkt_pool_alloc(void)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	@ 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
    if (fdcan_pkt_pool.head == NULL) {
 8001640:	4b16      	ldr	r3, [pc, #88]	@ (800169c <fdcan_pkt_pool_alloc+0x64>)
 8001642:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8001646:	2b00      	cmp	r3, #0
 8001648:	d108      	bne.n	800165c <fdcan_pkt_pool_alloc+0x24>
        return RESULT_ERROR(RES_ERR_EMPTY);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	461a      	mov	r2, r3
 800164e:	2300      	movs	r3, #0
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	6053      	str	r3, [r2, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2205      	movs	r2, #5
 8001658:	711a      	strb	r2, [r3, #4]
    FdcanPkt* pkt = fdcan_pkt_pool.head;
    fdcan_pkt_pool.head = pkt->next;
    pkt->next = NULL;
    fdcan_pkt_pool.remain--;
    return RESULT_OK(pkt);
}
 800165a:	e019      	b.n	8001690 <fdcan_pkt_pool_alloc+0x58>
    FdcanPkt* pkt = fdcan_pkt_pool.head;
 800165c:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <fdcan_pkt_pool_alloc+0x64>)
 800165e:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8001662:	61fb      	str	r3, [r7, #28]
    fdcan_pkt_pool.head = pkt->next;
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	4a0c      	ldr	r2, [pc, #48]	@ (800169c <fdcan_pkt_pool_alloc+0x64>)
 800166a:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    pkt->next = NULL;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.remain--;
 8001674:	4b09      	ldr	r3, [pc, #36]	@ (800169c <fdcan_pkt_pool_alloc+0x64>)
 8001676:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 800167a:	3b01      	subs	r3, #1
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b07      	ldr	r3, [pc, #28]	@ (800169c <fdcan_pkt_pool_alloc+0x64>)
 8001680:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
    return RESULT_OK(pkt);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69fa      	ldr	r2, [r7, #28]
 800168e:	605a      	str	r2, [r3, #4]
}
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	3724      	adds	r7, #36	@ 0x24
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	2000063c 	.word	0x2000063c

080016a0 <fdcan_pkt_pool_free>:

void fdcan_pkt_pool_free(FdcanPkt* pkt)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
    memset(pkt->data, 0, sizeof(pkt->data));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3304      	adds	r3, #4
 80016ac:	2208      	movs	r2, #8
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00b f9c1 	bl	800ca38 <memset>
    pkt->len = 0;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	731a      	strb	r2, [r3, #12]
    pkt->next = fdcan_pkt_pool.head;
 80016bc:	4b0a      	ldr	r3, [pc, #40]	@ (80016e8 <fdcan_pkt_pool_free+0x48>)
 80016be:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.head = pkt;
 80016c6:	4a08      	ldr	r2, [pc, #32]	@ (80016e8 <fdcan_pkt_pool_free+0x48>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    fdcan_pkt_pool.remain++;
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <fdcan_pkt_pool_free+0x48>)
 80016d0:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 80016d4:	3301      	adds	r3, #1
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	4b03      	ldr	r3, [pc, #12]	@ (80016e8 <fdcan_pkt_pool_free+0x48>)
 80016da:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000063c 	.word	0x2000063c

080016ec <fdcan_pkt_buf_push>:
    .buf = recv_pkt_buf,
    .cap = FDCAN_RECV_BUF_CAP,
};

Result fdcan_pkt_buf_push(FdcanPktBuf* self, FdcanPkt* pkt)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b08b      	sub	sp, #44	@ 0x2c
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
    if (self->len >= self->cap) return RESULT_ERROR(RES_ERR_OVERFLOW);
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	429a      	cmp	r2, r3
 8001702:	d308      	bcc.n	8001716 <fdcan_pkt_buf_push+0x2a>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	461a      	mov	r2, r3
 8001708:	2300      	movs	r3, #0
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	6053      	str	r3, [r2, #4]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2207      	movs	r2, #7
 8001712:	711a      	strb	r2, [r3, #4]
 8001714:	e01e      	b.n	8001754 <fdcan_pkt_buf_push+0x68>
    size_t tail = (self->head + self->len) % self->cap;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	4413      	add	r3, r2
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	68d2      	ldr	r2, [r2, #12]
 8001724:	fbb3 f1f2 	udiv	r1, r3, r2
 8001728:	fb01 f202 	mul.w	r2, r1, r2
 800172c:	1a9b      	subs	r3, r3, r2
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
    self->buf[tail] = pkt;
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	601a      	str	r2, [r3, #0]
    self->len++;
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	609a      	str	r2, [r3, #8]
    return RESULT_OK(self);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	605a      	str	r2, [r3, #4]
}
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	372c      	adds	r7, #44	@ 0x2c
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <HAL_FDCAN_ErrorStatusCallback>:
#include "connectivity/fdcan/callback.h"
#include "fdcan.h"
#include "connectivity/fdcan/main.h"

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
    if (hfdcan == &hfdcan1)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a08      	ldr	r2, [pc, #32]	@ (8001790 <HAL_FDCAN_ErrorStatusCallback+0x30>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d107      	bne.n	8001782 <HAL_FDCAN_ErrorStatusCallback+0x22>
    {
        if (ITS_CHECK(ErrorStatusITs, FDCAN_IT_BUS_OFF))
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <HAL_FDCAN_ErrorStatusCallback+0x22>
        {
            fdcan_bus_off = true;
 800177c:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <HAL_FDCAN_ErrorStatusCallback+0x34>)
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000430 	.word	0x20000430
 8001794:	200008c4 	.word	0x200008c4

08001798 <HAL_FDCAN_TxEventFifoCallback>:

void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08c      	sub	sp, #48	@ 0x30
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_NEW_DATA))
    {
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_FULL))
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_FDCAN_TxEventFifoCallback+0x20>
    {
        FDCAN_TxEventFifoTypeDef txEvent;
        HAL_FDCAN_GetTxEvent(hfdcan, &txEvent);
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	4619      	mov	r1, r3
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f004 fab2 	bl	8005d1c <HAL_FDCAN_GetTxEvent>
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_ELT_LOST))
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_FDCAN_TxEventFifoCallback+0x2e>
    {
        Error_Handler();
 80017c2:	f7ff fb71 	bl	8000ea8 <Error_Handler>
    }
}
 80017c6:	bf00      	nop
 80017c8:	3730      	adds	r7, #48	@ 0x30
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_FDCAN_TxBufferCompleteCallback>:

void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_FDCAN_RxFifo0Callback>:

FDCAN_RxHeaderTypeDef RxHeader0 = {0};
FDCAN_RxHeaderTypeDef RxHeader1 = {0};
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	@ 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
    if(ITS_CHECK(RxFifo0ITs, FDCAN_IT_RX_FIFO0_NEW_MESSAGE))
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d05b      	beq.n	80018b0 <HAL_FDCAN_RxFifo0Callback+0xcc>
    {
        FdcanPkt* pkt = RESULT_UNWRAP_HANDLE(fdcan_pkt_pool_alloc());
 80017f8:	f107 0318 	add.w	r3, r7, #24
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff1b 	bl	8001638 <fdcan_pkt_pool_alloc>
 8001802:	7e3b      	ldrb	r3, [r7, #24]
 8001804:	f083 0301 	eor.w	r3, r3, #1
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d005      	beq.n	800181a <HAL_FDCAN_RxFifo0Callback+0x36>
 800180e:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8001812:	4b29      	ldr	r3, [pc, #164]	@ (80018b8 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8001814:	701a      	strb	r2, [r3, #0]
 8001816:	f7ff fb47 	bl	8000ea8 <Error_Handler>
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
        ERROR_CHECK_HAL_HANDLE(HAL_FDCAN_GetRxMessage(
 800181e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001820:	3304      	adds	r3, #4
 8001822:	4a26      	ldr	r2, [pc, #152]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8001824:	2140      	movs	r1, #64	@ 0x40
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f004 f970 	bl	8005b0c <HAL_FDCAN_GetRxMessage>
 800182c:	4603      	mov	r3, r0
 800182e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001832:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_FDCAN_RxFifo0Callback+0x62>
 800183a:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 800183e:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8001840:	701a      	strb	r2, [r3, #0]
 8001842:	f7ff fb31 	bl	8000ea8 <Error_Handler>
            hfdcan, FDCAN_RX_FIFO0, &RxHeader0, pkt->data));
        pkt->id = RxHeader0.Identifier;
 8001846:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	601a      	str	r2, [r3, #0]
        pkt->len = RxHeader0.DataLength;
 800184e:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001856:	731a      	strb	r2, [r3, #12]
        if (pkt->id >= FDCAN_FILTER0_ID_MIN && pkt->id <= FDCAN_FILTER0_ID_MAX)
 8001858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b1f      	cmp	r3, #31
 800185e:	d90c      	bls.n	800187a <HAL_FDCAN_RxFifo0Callback+0x96>
 8001860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b21      	cmp	r3, #33	@ 0x21
 8001866:	d808      	bhi.n	800187a <HAL_FDCAN_RxFifo0Callback+0x96>
        {
            instant_recv_proc(pkt);
 8001868:	463b      	mov	r3, r7
 800186a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800186c:	4618      	mov	r0, r3
 800186e:	f000 f849 	bl	8001904 <instant_recv_proc>
            fdcan_pkt_pool_free(pkt);
 8001872:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001874:	f7ff ff14 	bl	80016a0 <fdcan_pkt_pool_free>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
        }
        else
        {}
    }
}
 8001878:	e01a      	b.n	80018b0 <HAL_FDCAN_RxFifo0Callback+0xcc>
        else if (pkt->id >= FDCAN_FILTER1_ID_MIN && pkt->id <= FDCAN_FILTER1_ID_MAX)
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b21      	cmp	r3, #33	@ 0x21
 8001880:	d916      	bls.n	80018b0 <HAL_FDCAN_RxFifo0Callback+0xcc>
 8001882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b23      	cmp	r3, #35	@ 0x23
 8001888:	d812      	bhi.n	80018b0 <HAL_FDCAN_RxFifo0Callback+0xcc>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
 800188a:	f107 0310 	add.w	r3, r7, #16
 800188e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001890:	490b      	ldr	r1, [pc, #44]	@ (80018c0 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff ff2a 	bl	80016ec <fdcan_pkt_buf_push>
 8001898:	7c3b      	ldrb	r3, [r7, #16]
 800189a:	f083 0301 	eor.w	r3, r3, #1
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_FDCAN_RxFifo0Callback+0xcc>
 80018a4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80018a8:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 80018aa:	701a      	strb	r2, [r3, #0]
 80018ac:	f7ff fafc 	bl	8000ea8 <Error_Handler>
}
 80018b0:	bf00      	nop
 80018b2:	3728      	adds	r7, #40	@ 0x28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000918 	.word	0x20000918
 80018bc:	200008f0 	.word	0x200008f0
 80018c0:	20000004 	.word	0x20000004

080018c4 <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
        //     hfdcan, FDCAN_RX_FIFO1, &RxHeader1, pkt->data));
        // pkt->id = RxHeader1.Identifier;
        // pkt->len = RxHeader1.DataLength;
        // RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
    }
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <instant_recv_proc_inner>:
#include "fdcan.h"
#include "connectivity/cmds.h"
#include "connectivity/fdcan/pkt_write.h"

__weak Result instant_recv_proc_inner(FdcanPkt* pkt, uint8_t byte0)
{
 80018da:	b480      	push	{r7}
 80018dc:	b087      	sub	sp, #28
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	4613      	mov	r3, r2
 80018e6:	71fb      	strb	r3, [r7, #7]
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	461a      	mov	r2, r3
 80018ec:	2300      	movs	r3, #0
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	6053      	str	r3, [r2, #4]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2208      	movs	r2, #8
 80018f6:	711a      	strb	r2, [r3, #4]
}
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	371c      	adds	r7, #28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <instant_recv_proc>:
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
}
#endif

Result instant_recv_proc(FdcanPkt* pkt)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	@ 0x28
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
    uint8_t code;
    RESULT_CHECK_RET_RES(fdcan_pkt_get_byte(pkt, 0, &code));
 800190e:	f107 001c 	add.w	r0, r7, #28
 8001912:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8001916:	2200      	movs	r2, #0
 8001918:	6839      	ldr	r1, [r7, #0]
 800191a:	f7ff fe65 	bl	80015e8 <fdcan_pkt_get_byte>
 800191e:	7f3b      	ldrb	r3, [r7, #28]
 8001920:	f083 0301 	eor.w	r3, r3, #1
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00c      	beq.n	8001944 <instant_recv_proc+0x40>
 800192a:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800192e:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <instant_recv_proc+0x8c>)
 8001930:	701a      	strb	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	461a      	mov	r2, r3
 8001936:	f107 031c 	add.w	r3, r7, #28
 800193a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800193e:	e882 0003 	stmia.w	r2, {r0, r1}
            fdacn_data_store = FNC_ENABLE;
            return RESULT_OK(NULL);
        }
        default: return instant_recv_proc_inner(pkt, code);
    }
}
 8001942:	e021      	b.n	8001988 <instant_recv_proc+0x84>
    switch (code)
 8001944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001948:	2b11      	cmp	r3, #17
 800194a:	d002      	beq.n	8001952 <instant_recv_proc+0x4e>
 800194c:	2b12      	cmp	r3, #18
 800194e:	d00a      	beq.n	8001966 <instant_recv_proc+0x62>
 8001950:	e013      	b.n	800197a <instant_recv_proc+0x76>
            fdacn_data_store = FNC_DISABLE;
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <instant_recv_proc+0x90>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	605a      	str	r2, [r3, #4]
}
 8001964:	e010      	b.n	8001988 <instant_recv_proc+0x84>
            fdacn_data_store = FNC_ENABLE;
 8001966:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <instant_recv_proc+0x90>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	605a      	str	r2, [r3, #4]
}
 8001978:	e006      	b.n	8001988 <instant_recv_proc+0x84>
        default: return instant_recv_proc_inner(pkt, code);
 800197a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6839      	ldr	r1, [r7, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ffa9 	bl	80018da <instant_recv_proc_inner>
}
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	3728      	adds	r7, #40	@ 0x28
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000918 	.word	0x20000918
 8001994:	200008c5 	.word	0x200008c5

08001998 <HAL_GPIO_EXTI_Callback>:
#include "main/main.h"
#include "motor/main.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	80fb      	strh	r3, [r7, #6]
    if (
           (GPIO_Pin == motor_h.const_h.Hall_GPIO_Pin_x[0])
 80019a2:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0x38>)
 80019a4:	8a1b      	ldrh	r3, [r3, #16]
    if (
 80019a6:	88fa      	ldrh	r2, [r7, #6]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d009      	beq.n	80019c0 <HAL_GPIO_EXTI_Callback+0x28>
        || (GPIO_Pin == motor_h.const_h.Hall_GPIO_Pin_x[1])
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0x38>)
 80019ae:	8a5b      	ldrh	r3, [r3, #18]
 80019b0:	88fa      	ldrh	r2, [r7, #6]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d004      	beq.n	80019c0 <HAL_GPIO_EXTI_Callback+0x28>
        || (GPIO_Pin == motor_h.const_h.Hall_GPIO_Pin_x[2])
 80019b6:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0x38>)
 80019b8:	8a9b      	ldrh	r3, [r3, #20]
 80019ba:	88fa      	ldrh	r2, [r7, #6]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d102      	bne.n	80019c6 <HAL_GPIO_EXTI_Callback+0x2e>
    ) {
        motor_hall_exti(&motor_h);
 80019c0:	4803      	ldr	r0, [pc, #12]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0x38>)
 80019c2:	f001 fac5 	bl	8002f50 <motor_hall_exti>
    }
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000014 	.word	0x20000014

080019d4 <HAL_TIM_PeriodElapsedCallback_OWN>:

inline void HAL_TIM_PeriodElapsedCallback_OWN(TIM_HandleTypeDef *htim)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
    if (htim == motor_h.const_h.htimx)
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <HAL_TIM_PeriodElapsedCallback_OWN+0x20>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d102      	bne.n	80019ec <HAL_TIM_PeriodElapsedCallback_OWN+0x18>
    {
        motor_pwm_pulse(&motor_h);
 80019e6:	4803      	ldr	r0, [pc, #12]	@ (80019f4 <HAL_TIM_PeriodElapsedCallback_OWN+0x20>)
 80019e8:	f001 fb50 	bl	800308c <motor_pwm_pulse>
    }
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000014 	.word	0x20000014

080019f8 <StartDefaultTask>:

#define DEFALT_TASK_DELAY_MS 50
uint32_t defalt_running;
void StartDefaultTask(void *argument)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
    const uint32_t osPeriod = pdMS_TO_TICKS(DEFALT_TASK_DELAY_MS);
 8001a00:	2332      	movs	r3, #50	@ 0x32
 8001a02:	60bb      	str	r3, [r7, #8]
    uint32_t next_wake = osKernelGetTickCount() + osPeriod;
 8001a04:	f008 f962 	bl	8009ccc <osKernelGetTickCount>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
    for(;;)
    {
        defalt_running = HAL_GetTick();
 8001a10:	f001 ffe0 	bl	80039d4 <HAL_GetTick>
 8001a14:	4603      	mov	r3, r0
 8001a16:	4a05      	ldr	r2, [pc, #20]	@ (8001a2c <StartDefaultTask+0x34>)
 8001a18:	6013      	str	r3, [r2, #0]
        osDelayUntil(next_wake);
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f008 fa1f 	bl	8009e5e <osDelayUntil>
        next_wake += osPeriod;
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	4413      	add	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
        defalt_running = HAL_GetTick();
 8001a28:	bf00      	nop
 8001a2a:	e7f1      	b.n	8001a10 <StartDefaultTask+0x18>
 8001a2c:	2000091c 	.word	0x2000091c

08001a30 <motor_hall_to_angle>:
    },
    .pwm_it_angle_acc = 0.0f,
};

inline Result motor_hall_to_angle(uint8_t hall, volatile float32_t *angle)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	@ 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	72fb      	strb	r3, [r7, #11]
    switch(hall)
 8001a3e:	7afb      	ldrb	r3, [r7, #11]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	2b05      	cmp	r3, #5
 8001a44:	d827      	bhi.n	8001a96 <motor_hall_to_angle+0x66>
 8001a46:	a201      	add	r2, pc, #4	@ (adr r2, 8001a4c <motor_hall_to_angle+0x1c>)
 8001a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4c:	08001a7f 	.word	0x08001a7f
 8001a50:	08001a6f 	.word	0x08001a6f
 8001a54:	08001a77 	.word	0x08001a77
 8001a58:	08001a8f 	.word	0x08001a8f
 8001a5c:	08001a87 	.word	0x08001a87
 8001a60:	08001a65 	.word	0x08001a65
    {
        case 6:
        {
            *angle = 0.0f * DEG_TO_RAD;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
            break;
 8001a6c:	e01c      	b.n	8001aa8 <motor_hall_to_angle+0x78>
        }
        case 2:
        {
            *angle = 60.0f * DEG_TO_RAD;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a13      	ldr	r2, [pc, #76]	@ (8001ac0 <motor_hall_to_angle+0x90>)
 8001a72:	601a      	str	r2, [r3, #0]
            break;
 8001a74:	e018      	b.n	8001aa8 <motor_hall_to_angle+0x78>
        }
        case 3:
        {
            *angle = 120.0f * DEG_TO_RAD;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a12      	ldr	r2, [pc, #72]	@ (8001ac4 <motor_hall_to_angle+0x94>)
 8001a7a:	601a      	str	r2, [r3, #0]
            break;
 8001a7c:	e014      	b.n	8001aa8 <motor_hall_to_angle+0x78>
        }
        case 1:
        {
            *angle = 180.0f * DEG_TO_RAD;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a11      	ldr	r2, [pc, #68]	@ (8001ac8 <motor_hall_to_angle+0x98>)
 8001a82:	601a      	str	r2, [r3, #0]
            break;
 8001a84:	e010      	b.n	8001aa8 <motor_hall_to_angle+0x78>
        }
        case 5:
        {
            *angle = 240.0f * DEG_TO_RAD;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a10      	ldr	r2, [pc, #64]	@ (8001acc <motor_hall_to_angle+0x9c>)
 8001a8a:	601a      	str	r2, [r3, #0]
            break;
 8001a8c:	e00c      	b.n	8001aa8 <motor_hall_to_angle+0x78>
        }
        case 4:
        {
            *angle = 300.0f * DEG_TO_RAD;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad0 <motor_hall_to_angle+0xa0>)
 8001a92:	601a      	str	r2, [r3, #0]
            break;
 8001a94:	e008      	b.n	8001aa8 <motor_hall_to_angle+0x78>
        }
        default: return RESULT_ERROR(RES_ERR_NOT_FOUND);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	6053      	str	r3, [r2, #4]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	711a      	strb	r2, [r3, #4]
    }
    return RESULT_OK(NULL);
}
 8001aa6:	e005      	b.n	8001ab4 <motor_hall_to_angle+0x84>
    return RESULT_OK(NULL);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	605a      	str	r2, [r3, #4]
}
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	3724      	adds	r7, #36	@ 0x24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	3f860a92 	.word	0x3f860a92
 8001ac4:	40060a92 	.word	0x40060a92
 8001ac8:	40490fdb 	.word	0x40490fdb
 8001acc:	40860a92 	.word	0x40860a92
 8001ad0:	40a78d36 	.word	0x40a78d36

08001ad4 <clampf>:

inline float32_t clampf(float32_t val, float32_t min, float32_t max)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ade:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ae2:	ed87 1a01 	vstr	s2, [r7, #4]
    if (val > max) return max;
 8001ae6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001aea:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af6:	dd01      	ble.n	8001afc <clampf+0x28>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	e00b      	b.n	8001b14 <clampf+0x40>
    if (val < min) return min;
 8001afc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b00:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0c:	d501      	bpl.n	8001b12 <clampf+0x3e>
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	e000      	b.n	8001b14 <clampf+0x40>
    return val;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	ee07 3a90 	vmov	s15, r3
 8001b18:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <wrap_0_2pi>:

inline float32_t wrap_0_2pi(float32_t x)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t n = (int32_t)(x / MUL_2_PI);
 8001b32:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b36:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001b98 <wrap_0_2pi+0x70>
 8001b3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b42:	ee17 3a90 	vmov	r3, s15
 8001b46:	60fb      	str	r3, [r7, #12]
    x -= (float32_t)n * MUL_2_PI;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b52:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001b98 <wrap_0_2pi+0x70>
 8001b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b62:	edc7 7a01 	vstr	s15, [r7, #4]
    if (x < 0) x += MUL_2_PI;
 8001b66:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b72:	d507      	bpl.n	8001b84 <wrap_0_2pi+0x5c>
 8001b74:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b78:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001b98 <wrap_0_2pi+0x70>
 8001b7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b80:	edc7 7a01 	vstr	s15, [r7, #4]
    return x;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	ee07 3a90 	vmov	s15, r3
}
 8001b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	40c90fdb 	.word	0x40c90fdb

08001b9c <wrap_m1_1pi>:

inline float32_t wrap_m1_1pi(float32_t x)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t n = (int32_t)(x / MUL_2_PI);
 8001ba6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001baa:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001c34 <wrap_m1_1pi+0x98>
 8001bae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bb6:	ee17 3a90 	vmov	r3, s15
 8001bba:	60fb      	str	r3, [r7, #12]
    x -= (float32_t)n * MUL_2_PI;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001c34 <wrap_m1_1pi+0x98>
 8001bca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bce:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd6:	edc7 7a01 	vstr	s15, [r7, #4]
    if      (x < -PI) x += MUL_2_PI;
 8001bda:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bde:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001c38 <wrap_m1_1pi+0x9c>
 8001be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bea:	d508      	bpl.n	8001bfe <wrap_m1_1pi+0x62>
 8001bec:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bf0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001c34 <wrap_m1_1pi+0x98>
 8001bf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bf8:	edc7 7a01 	vstr	s15, [r7, #4]
 8001bfc:	e010      	b.n	8001c20 <wrap_m1_1pi+0x84>
    else if (x >= PI) x -= MUL_2_PI;
 8001bfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c02:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001c3c <wrap_m1_1pi+0xa0>
 8001c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0e:	db07      	blt.n	8001c20 <wrap_m1_1pi+0x84>
 8001c10:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c14:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001c34 <wrap_m1_1pi+0x98>
 8001c18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c1c:	edc7 7a01 	vstr	s15, [r7, #4]
    return x;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	ee07 3a90 	vmov	s15, r3
}
 8001c26:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	40c90fdb 	.word	0x40c90fdb
 8001c38:	c0490fdb 	.word	0xc0490fdb
 8001c3c:	40490fdb 	.word	0x40490fdb

08001c40 <fast_fabsf>:

inline float32_t fast_fabsf(float32_t x)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	ed87 0a01 	vstr	s0, [r7, #4]
    union {
        float32_t f;
        uint32_t u;
    } v = { x };
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]
    v.u &= 0x7FFFFFFF;  // 清除最高位 sign bit
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c54:	60fb      	str	r3, [r7, #12]
    return v.f;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	ee07 3a90 	vmov	s15, r3
}
 8001c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <CLARKE_run_ideal>:
#include "motor/clarke.h"
#include "motor/basic.h"

inline void CLARKE_run_ideal(volatile CLARKE *clarke)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    clarke->Alpha = clarke->As;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	60da      	str	r2, [r3, #12]
    clarke->Beta = (clarke->As + clarke->Bs * 2.0f) * ONEbySQRT3;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	ed93 7a00 	vldr	s14, [r3]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c90:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001cac <CLARKE_run_ideal+0x40>
 8001c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	3f13cd3a 	.word	0x3f13cd3a

08001cb0 <motor_120_hall_update>:
};
static const uint8_t motor_seq_index[] = {0xFF, 5, 3, 4, 1, 0, 2, 0xFF};

// 120 deg cntrol
void motor_120_hall_update(const MotorParameter *motor)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
    uint8_t idx = motor_seq_index[motor->exti_hall_curt];
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b8e      	ldr	r3, [pc, #568]	@ (8001efc <motor_120_hall_update+0x24c>)
 8001cc4:	5c9b      	ldrb	r3, [r3, r2]
 8001cc6:	73fb      	strb	r3, [r7, #15]
    if (motor->reverse) idx = (idx + 3) % 6; // CCW
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00d      	beq.n	8001cee <motor_120_hall_update+0x3e>
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	1cda      	adds	r2, r3, #3
 8001cd6:	4b8a      	ldr	r3, [pc, #552]	@ (8001f00 <motor_120_hall_update+0x250>)
 8001cd8:	fb83 3102 	smull	r3, r1, r3, r2
 8001cdc:	17d3      	asrs	r3, r2, #31
 8001cde:	1ac9      	subs	r1, r1, r3
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	440b      	add	r3, r1
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	1ad1      	subs	r1, r2, r3
 8001cea:	460b      	mov	r3, r1
 8001cec:	73fb      	strb	r3, [r7, #15]
    // idx = 5;
    uint8_t i;
    uint32_t compare = (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_u);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8001cf4:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8001f04 <motor_120_hall_update+0x254>
 8001cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d00:	ee17 3a90 	vmov	r3, s15
 8001d04:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < 3; i++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	73bb      	strb	r3, [r7, #14]
 8001d0a:	e0ed      	b.n	8001ee8 <motor_120_hall_update+0x238>
    {
        switch (motor_seq_map[idx][i])
 8001d0c:	7bfa      	ldrb	r2, [r7, #15]
 8001d0e:	7bb9      	ldrb	r1, [r7, #14]
 8001d10:	487d      	ldr	r0, [pc, #500]	@ (8001f08 <motor_120_hall_update+0x258>)
 8001d12:	4613      	mov	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	4403      	add	r3, r0
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f993 3000 	ldrsb.w	r3, [r3]
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d064      	beq.n	8001df0 <motor_120_hall_update+0x140>
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	f040 80c4 	bne.w	8001eb4 <motor_120_hall_update+0x204>
        {
            case HIGH_PASS:
            {
                __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i], compare);
 8001d2c:	7bbb      	ldrb	r3, [r7, #14]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	3306      	adds	r3, #6
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d105      	bne.n	8001d48 <motor_120_hall_update+0x98>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d46:	e03c      	b.n	8001dc2 <motor_120_hall_update+0x112>
 8001d48:	7bbb      	ldrb	r3, [r7, #14]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	3306      	adds	r3, #6
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d105      	bne.n	8001d64 <motor_120_hall_update+0xb4>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d62:	e02e      	b.n	8001dc2 <motor_120_hall_update+0x112>
 8001d64:	7bbb      	ldrb	r3, [r7, #14]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	3306      	adds	r3, #6
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d105      	bne.n	8001d80 <motor_120_hall_update+0xd0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001d7e:	e020      	b.n	8001dc2 <motor_120_hall_update+0x112>
 8001d80:	7bbb      	ldrb	r3, [r7, #14]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	3306      	adds	r3, #6
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b0c      	cmp	r3, #12
 8001d8e:	d105      	bne.n	8001d9c <motor_120_hall_update+0xec>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9a:	e012      	b.n	8001dc2 <motor_120_hall_update+0x112>
 8001d9c:	7bbb      	ldrb	r3, [r7, #14]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	3306      	adds	r3, #6
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b10      	cmp	r3, #16
 8001daa:	d105      	bne.n	8001db8 <motor_120_hall_update+0x108>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001db6:	e004      	b.n	8001dc2 <motor_120_hall_update+0x112>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
                HAL_TIM_PWM_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6998      	ldr	r0, [r3, #24]
 8001dc6:	7bbb      	ldrb	r3, [r7, #14]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	3306      	adds	r3, #6
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f005 feb4 	bl	8007b40 <HAL_TIM_PWM_Start>
                HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6998      	ldr	r0, [r3, #24]
 8001ddc:	7bbb      	ldrb	r3, [r7, #14]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	3306      	adds	r3, #6
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4619      	mov	r1, r3
 8001dea:	f006 ffb1 	bl	8008d50 <HAL_TIMEx_PWMN_Stop>
                // HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
                break;
 8001dee:	e078      	b.n	8001ee2 <motor_120_hall_update+0x232>
            }
            case LOW_PASS:
            {
                HAL_TIM_PWM_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6998      	ldr	r0, [r3, #24]
 8001df4:	7bbb      	ldrb	r3, [r7, #14]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	3306      	adds	r3, #6
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	4619      	mov	r1, r3
 8001e02:	f005 ff9d 	bl	8007d40 <HAL_TIM_PWM_Stop>
                __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i], TIM1_ARR);
 8001e06:	7bbb      	ldrb	r3, [r7, #14]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	3306      	adds	r3, #6
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d105      	bne.n	8001e22 <motor_120_hall_update+0x172>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	22fa      	movs	r2, #250	@ 0xfa
 8001e1e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e20:	e03c      	b.n	8001e9c <motor_120_hall_update+0x1ec>
 8001e22:	7bbb      	ldrb	r3, [r7, #14]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	3306      	adds	r3, #6
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d105      	bne.n	8001e3e <motor_120_hall_update+0x18e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	23fa      	movs	r3, #250	@ 0xfa
 8001e3a:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e3c:	e02e      	b.n	8001e9c <motor_120_hall_update+0x1ec>
 8001e3e:	7bbb      	ldrb	r3, [r7, #14]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	3306      	adds	r3, #6
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d105      	bne.n	8001e5a <motor_120_hall_update+0x1aa>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	23fa      	movs	r3, #250	@ 0xfa
 8001e56:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001e58:	e020      	b.n	8001e9c <motor_120_hall_update+0x1ec>
 8001e5a:	7bbb      	ldrb	r3, [r7, #14]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	3306      	adds	r3, #6
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b0c      	cmp	r3, #12
 8001e68:	d105      	bne.n	8001e76 <motor_120_hall_update+0x1c6>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	23fa      	movs	r3, #250	@ 0xfa
 8001e72:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e74:	e012      	b.n	8001e9c <motor_120_hall_update+0x1ec>
 8001e76:	7bbb      	ldrb	r3, [r7, #14]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	3306      	adds	r3, #6
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b10      	cmp	r3, #16
 8001e84:	d105      	bne.n	8001e92 <motor_120_hall_update+0x1e2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	23fa      	movs	r3, #250	@ 0xfa
 8001e8e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e90:	e004      	b.n	8001e9c <motor_120_hall_update+0x1ec>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	23fa      	movs	r3, #250	@ 0xfa
 8001e9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
                HAL_TIMEx_PWMN_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6998      	ldr	r0, [r3, #24]
 8001ea0:	7bbb      	ldrb	r3, [r7, #14]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	3306      	adds	r3, #6
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4619      	mov	r1, r3
 8001eae:	f006 fe9b 	bl	8008be8 <HAL_TIMEx_PWMN_Start>
                // HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_SET);
                break;
 8001eb2:	e016      	b.n	8001ee2 <motor_120_hall_update+0x232>
            }
            default:
            {
                HAL_TIM_PWM_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6998      	ldr	r0, [r3, #24]
 8001eb8:	7bbb      	ldrb	r3, [r7, #14]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	3306      	adds	r3, #6
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f005 ff3b 	bl	8007d40 <HAL_TIM_PWM_Stop>
                HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6998      	ldr	r0, [r3, #24]
 8001ece:	7bbb      	ldrb	r3, [r7, #14]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	3306      	adds	r3, #6
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4619      	mov	r1, r3
 8001edc:	f006 ff38 	bl	8008d50 <HAL_TIMEx_PWMN_Stop>
                // HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
                break;
 8001ee0:	bf00      	nop
    for (i = 0; i < 3; i++)
 8001ee2:	7bbb      	ldrb	r3, [r7, #14]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	73bb      	strb	r3, [r7, #14]
 8001ee8:	7bbb      	ldrb	r3, [r7, #14]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	f67f af0e 	bls.w	8001d0c <motor_120_hall_update+0x5c>
            }
        }
    }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	0800cd60 	.word	0x0800cd60
 8001f00:	2aaaaaab 	.word	0x2aaaaaab
 8001f04:	437a0000 	.word	0x437a0000
 8001f08:	0800cd4c 	.word	0x0800cd4c

08001f0c <motor_120_ctrl_stop>:

void motor_120_ctrl_stop(const MotorParameter *motor)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for (i = 0; i < 3; i++)
 8001f14:	2300      	movs	r3, #0
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	e018      	b.n	8001f4c <motor_120_ctrl_stop+0x40>
    {
        HAL_TIM_PWM_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6998      	ldr	r0, [r3, #24]
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	3306      	adds	r3, #6
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f005 ff08 	bl	8007d40 <HAL_TIM_PWM_Stop>
        HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6998      	ldr	r0, [r3, #24]
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	3306      	adds	r3, #6
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	4619      	mov	r1, r3
 8001f42:	f006 ff05 	bl	8008d50 <HAL_TIMEx_PWMN_Stop>
    for (i = 0; i < 3; i++)
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d9e3      	bls.n	8001f1a <motor_120_ctrl_stop+0xe>
        // HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
    }
}
 8001f52:	bf00      	nop
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <motor_foc_tim_setup>:
#include "analog/adc1/main.h"

uint32_t cycle[16] = {0};

Result motor_foc_tim_setup(const MotorParameter *motor)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[0]);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	699a      	ldr	r2, [r3, #24]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4610      	mov	r0, r2
 8001f72:	f005 fde5 	bl	8007b40 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[1]);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4610      	mov	r0, r2
 8001f82:	f005 fddd 	bl	8007b40 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[2]);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4610      	mov	r0, r2
 8001f92:	f005 fdd5 	bl	8007b40 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[0]);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	699a      	ldr	r2, [r3, #24]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	f006 fe21 	bl	8008be8 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[1]);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	699a      	ldr	r2, [r3, #24]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	f006 fe19 	bl	8008be8 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[2]);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	f006 fe11 	bl	8008be8 <HAL_TIMEx_PWMN_Start>
    HAL_TIM_Base_Start(motor->const_h.ELE_htimx);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f005 fc3e 	bl	800784c <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim2);
 8001fd0:	4806      	ldr	r0, [pc, #24]	@ (8001fec <motor_foc_tim_setup+0x90>)
 8001fd2:	f005 fc3b 	bl	800784c <HAL_TIM_Base_Start>
    return RESULT_OK(NULL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	605a      	str	r2, [r3, #4]
}
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000590 	.word	0x20000590

08001ff0 <motor_foc_hall_update>:

// Thread - hallExti - 0
Result motor_foc_hall_update(MotorParameter *motor)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
    float32_t htim_cnt = (float32_t)__HAL_TIM_GET_COUNTER(motor->const_h.ELE_htimx);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002002:	ee07 3a90 	vmov	s15, r3
 8002006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800200a:	edc7 7a05 	vstr	s15, [r7, #20]
    __HAL_TIM_SET_COUNTER(motor->const_h.ELE_htimx, 0);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2200      	movs	r2, #0
 8002016:	625a      	str	r2, [r3, #36]	@ 0x24
    motor->rpm_fbk_hall = 100000000.0f / htim_cnt;
 8002018:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 80020cc <motor_foc_hall_update+0xdc>
 800201c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    uint16_t expected = (!motor->reverse)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8002030:	f083 0301 	eor.w	r3, r3, #1
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d006      	beq.n	8002048 <motor_foc_hall_update+0x58>
        ? hall_seq_clw[motor->exti_hall_last]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002040:	461a      	mov	r2, r3
 8002042:	4b23      	ldr	r3, [pc, #140]	@ (80020d0 <motor_foc_hall_update+0xe0>)
 8002044:	5c9b      	ldrb	r3, [r3, r2]
 8002046:	e005      	b.n	8002054 <motor_foc_hall_update+0x64>
        : hall_seq_ccw[motor->exti_hall_last];
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800204e:	461a      	mov	r2, r3
 8002050:	4b20      	ldr	r3, [pc, #128]	@ (80020d4 <motor_foc_hall_update+0xe4>)
 8002052:	5c9b      	ldrb	r3, [r3, r2]
    uint16_t expected = (!motor->reverse)
 8002054:	827b      	strh	r3, [r7, #18]
    // if (hall_last == 0) // ? CHECK
    // {
    //     hall_last = expected;
    // }
    if (motor->exti_hall_curt == expected)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	8a7b      	ldrh	r3, [r7, #18]
 8002062:	4293      	cmp	r3, r2
 8002064:	d107      	bne.n	8002076 <motor_foc_hall_update+0x86>
    {
        // rotated
        motor->hall_angle_acc = 0;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	659a      	str	r2, [r3, #88]	@ 0x58
        motor->pwm_it_angle_acc = 0;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	665a      	str	r2, [r3, #100]	@ 0x64

    // ? check
    // 電氣週期算轉速，分鐘[3G=50,000,000 (計數轉秒)*60(秒轉分鐘)] / 轉速
    // calculate speed every hall instead of  6 times
    // agv gear ratio MOTOR_42BLF01_GEAR
    motor->pi_speed.Fbk = (6000000.0f / (htim_cnt * (MOTOR_42BLF01_POLE / 2))) / 6 / MOTOR_42BLF01_GEAR;
 8002076:	edd7 7a05 	vldr	s15, [r7, #20]
 800207a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800207e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002082:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80020d8 <motor_foc_hall_update+0xe8>
 8002086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800208a:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800208e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002092:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80020dc <motor_foc_hall_update+0xec>
 8002096:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
    // 單次PWM中斷時的角度變化 50us*60/(0.1us*CNT)
    motor->pwm_per_it_angle_itpl = 30000.0f * DEG_TO_RAD / htim_cnt;
 80020a0:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80020e0 <motor_foc_hall_update+0xf0>
 80020a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80020a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

    return RESULT_OK(NULL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	605a      	str	r2, [r3, #4]
}
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	371c      	adds	r7, #28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	4cbebc20 	.word	0x4cbebc20
 80020d0:	0800cd3c 	.word	0x0800cd3c
 80020d4:	0800cd44 	.word	0x0800cd44
 80020d8:	4ab71b00 	.word	0x4ab71b00
 80020dc:	408ccccd 	.word	0x408ccccd
 80020e0:	4402e652 	.word	0x4402e652

080020e4 <stop_check>:

static inline void stop_check(MotorParameter *motor)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    // 停轉判斷
    // 現在與上一個霍爾的總和與之前的總和相同，視為馬達靜止不動
    uint8_t hall_current = motor->exti_hall_curt;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80020f2:	73fb      	strb	r3, [r7, #15]
    uint16_t hall_total = motor->pwm_hall_last*10 + hall_current;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80020fa:	461a      	mov	r2, r3
 80020fc:	0092      	lsls	r2, r2, #2
 80020fe:	4413      	add	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	b29a      	uxth	r2, r3
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	b29b      	uxth	r3, r3
 8002108:	4413      	add	r3, r2
 800210a:	81bb      	strh	r3, [r7, #12]
    if(hall_total == motor->pwm_hall_acc)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002112:	b29b      	uxth	r3, r3
 8002114:	89ba      	ldrh	r2, [r7, #12]
 8002116:	429a      	cmp	r2, r3
 8002118:	d123      	bne.n	8002162 <stop_check+0x7e>
    {
        motor->spin_stop_acc++;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8002120:	3301      	adds	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        if (motor->spin_stop_acc >= 50)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8002130:	2b31      	cmp	r3, #49	@ 0x31
 8002132:	d91a      	bls.n	800216a <stop_check+0x86>
        {
            motor->spin_stop_acc = 0;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            // timerclockvalue_onecycle_electric = 0;   // 歸零一電氣週期之時間
            motor->pi_speed.i1 = 0;                     // 重置i控制舊值
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
            motor->pi_speed.Fbk = 0;                    // 歸零速度實際值
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	67da      	str	r2, [r3, #124]	@ 0x7c
            motor->pi_Iq.Out=0;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
            motor->pwm_it_angle_acc = 0.0f;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	665a      	str	r2, [r3, #100]	@ 0x64
 8002160:	e003      	b.n	800216a <stop_check+0x86>
        }
    }
    else
    {
        motor->spin_stop_acc = 0;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    motor->pwm_hall_acc = hall_total;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	89ba      	ldrh	r2, [r7, #12]
 800216e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    motor->pwm_hall_last = hall_current;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <pi_speed>:

static inline void pi_speed(MotorParameter *motor)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
    // 計算 速度PI (每100個PWM中斷)
    // if(Speed.Fbk>0 && stop_flag==0)
    PI_run(&motor->pi_speed);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3378      	adds	r3, #120	@ 0x78
 8002194:	4618      	mov	r0, r3
 8002196:	f001 f82b 	bl	80031f0 <PI_run>
    motor->pi_speed_cmd = clampf((motor->pi_speed_cmd + motor->pi_speed.Out), 0.15f, 0.2f);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	ed93 7a2b 	vldr	s14, [r3, #172]	@ 0xac
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 80021a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021aa:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 80021cc <pi_speed+0x44>
 80021ae:	eddf 0a08 	vldr	s1, [pc, #32]	@ 80021d0 <pi_speed+0x48>
 80021b2:	eeb0 0a67 	vmov.f32	s0, s15
 80021b6:	f7ff fc8d 	bl	8001ad4 <clampf>
 80021ba:	eef0 7a40 	vmov.f32	s15, s0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac
    // else if(Speed.Fbk==0 | stop_flag==1)
    //     motor->pi_speed_cmd=0.18;
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	3e4ccccd 	.word	0x3e4ccccd
 80021d0:	3e19999a 	.word	0x3e19999a

080021d4 <angal_cal>:

static inline void angal_cal(MotorParameter *motor)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
    // ?
    if((motor->hall_angle_acc + motor->pwm_per_it_angle_itpl) < 60)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80021e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ec:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002250 <angal_cal+0x7c>
 80021f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f8:	d51a      	bpl.n	8002230 <angal_cal+0x5c>
    {
        motor->hall_angle_acc += motor->pwm_per_it_angle_itpl;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
        motor->hall_angle_acc = clampf(motor->hall_angle_acc, 0.0f, 60.0f);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002216:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 8002250 <angal_cal+0x7c>
 800221a:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8002254 <angal_cal+0x80>
 800221e:	eeb0 0a67 	vmov.f32	s0, s15
 8002222:	f7ff fc57 	bl	8001ad4 <clampf>
 8002226:	eef0 7a40 	vmov.f32	s15, s0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    }
    motor->pwm_it_angle_acc += motor->pwm_per_it_angle_itpl;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800223c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	42700000 	.word	0x42700000
 8002254:	00000000 	.word	0x00000000

08002258 <vec_ctrl_clarke>:

#define ADC_TO_CURRENT (3.3f / 4095.0f / 0.185f ) // ~ 0.004356 A/LSB
static inline Result vec_ctrl_clarke(MotorParameter *motor)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08c      	sub	sp, #48	@ 0x30
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
    // I alpha = 2/3Ia - 1/3Ib - 1/3Ic
    // I bata = (根號3/3)Ib - (根號3/3)Ic
    // (根號3/3) = 0.57735

    // 三相電流向量
    RESULT_CHECK_RET_RES(renew_adc(motor->const_h.adc_u_id, &motor->adc_u));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	7819      	ldrb	r1, [r3, #0]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 800226c:	f107 031c 	add.w	r3, r7, #28
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff f993 	bl	800159c <renew_adc>
 8002276:	7f3b      	ldrb	r3, [r7, #28]
 8002278:	f083 0301 	eor.w	r3, r3, #1
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00c      	beq.n	800229c <vec_ctrl_clarke+0x44>
 8002282:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8002286:	4b49      	ldr	r3, [pc, #292]	@ (80023ac <vec_ctrl_clarke+0x154>)
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	461a      	mov	r2, r3
 800228e:	f107 031c 	add.w	r3, r7, #28
 8002292:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002296:	e882 0003 	stmia.w	r2, {r0, r1}
    // PeriodFilter_w = (float32_t)PeriodStateVar_w;//0.9
    // motor->clarke.Cs =PeriodFilter_w;

    CLARKE_run_ideal(&motor->clarke);//Id.Out=CLAMP((Id.Out + Id.delta), 0.1, 0)
    return RESULT_OK(NULL);
}
 800229a:	e082      	b.n	80023a2 <vec_ctrl_clarke+0x14a>
    RESULT_CHECK_RET_RES(renew_adc(motor->const_h.adc_v_id, &motor->adc_v));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	7859      	ldrb	r1, [r3, #1]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff f976 	bl	800159c <renew_adc>
 80022b0:	7d3b      	ldrb	r3, [r7, #20]
 80022b2:	f083 0301 	eor.w	r3, r3, #1
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00c      	beq.n	80022d6 <vec_ctrl_clarke+0x7e>
 80022bc:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80022c0:	4b3a      	ldr	r3, [pc, #232]	@ (80023ac <vec_ctrl_clarke+0x154>)
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	461a      	mov	r2, r3
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022d0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80022d4:	e065      	b.n	80023a2 <vec_ctrl_clarke+0x14a>
    RESULT_CHECK_RET_RES(renew_adc(motor->const_h.adc_w_id, &motor->adc_w));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	7899      	ldrb	r1, [r3, #2]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f103 0274 	add.w	r2, r3, #116	@ 0x74
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff f959 	bl	800159c <renew_adc>
 80022ea:	7b3b      	ldrb	r3, [r7, #12]
 80022ec:	f083 0301 	eor.w	r3, r3, #1
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00c      	beq.n	8002310 <vec_ctrl_clarke+0xb8>
 80022f6:	f997 2010 	ldrsb.w	r2, [r7, #16]
 80022fa:	4b2c      	ldr	r3, [pc, #176]	@ (80023ac <vec_ctrl_clarke+0x154>)
 80022fc:	701a      	strb	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	461a      	mov	r2, r3
 8002302:	f107 030c 	add.w	r3, r7, #12
 8002306:	e893 0003 	ldmia.w	r3, {r0, r1}
 800230a:	e882 0003 	stmia.w	r2, {r0, r1}
 800230e:	e048      	b.n	80023a2 <vec_ctrl_clarke+0x14a>
    float32_t adc_zero = (motor->adc_u + motor->adc_v + motor->adc_w) / 3.0f ;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 800231c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8002326:	ee37 7a27 	vadd.f32	s14, s14, s15
 800232a:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800232e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002332:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    motor->clarke.As = (motor->adc_u - adc_zero) * ADC_TO_CURRENT;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 800233c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002344:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80023b0 <vec_ctrl_clarke+0x158>
 8002348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
    motor->clarke.Bs = (motor->adc_v - adc_zero) * ADC_TO_CURRENT;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 8002358:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800235c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002360:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80023b0 <vec_ctrl_clarke+0x158>
 8002364:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
    motor->clarke.Cs = (motor->adc_w - adc_zero) * ADC_TO_CURRENT;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 8002374:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800237c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80023b0 <vec_ctrl_clarke+0x158>
 8002380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120
    CLARKE_run_ideal(&motor->clarke);//Id.Out=CLAMP((Id.Out + Id.delta), 0.1, 0)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fc6b 	bl	8001c6c <CLARKE_run_ideal>
    return RESULT_OK(NULL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	605a      	str	r2, [r3, #4]
}
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	3730      	adds	r7, #48	@ 0x30
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000918 	.word	0x20000918
 80023b0:	3b8ebcd0 	.word	0x3b8ebcd0

080023b4 <vec_ctrl_park>:

static inline Result vec_ctrl_park(MotorParameter *motor)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
    // park
    // Id = I alpha cos(theta) + I bata sin(theta)
    motor->park.Alpha = motor->clarke.Alpha;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    motor->park.Beta = motor->clarke.Beta;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    RESULT_CHECK_RET_RES(trigo_sin_cosf(
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80023e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e6:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002450 <vec_ctrl_park+0x9c>
 80023ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	f503 71a0 	add.w	r1, r3, #320	@ 0x140
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 80023fa:	f107 0308 	add.w	r3, r7, #8
 80023fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002402:	4618      	mov	r0, r3
 8002404:	f000 ffcc 	bl	80033a0 <trigo_sin_cosf>
 8002408:	7a3b      	ldrb	r3, [r7, #8]
 800240a:	f083 0301 	eor.w	r3, r3, #1
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00c      	beq.n	800242e <vec_ctrl_park+0x7a>
 8002414:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8002418:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <vec_ctrl_park+0xa0>)
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	461a      	mov	r2, r3
 8002420:	f107 0308 	add.w	r3, r7, #8
 8002424:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002428:	e882 0003 	stmia.w	r2, {r0, r1}
 800242c:	e00b      	b.n	8002446 <vec_ctrl_park+0x92>
        motor->exti_hall_angal + motor->pwm_it_angle_acc + DIV_PI_2 * 3.0f,
        &motor->park.Sine, &motor->park.Cosine
    ));
    PARK_run(&motor->park);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8002434:	4618      	mov	r0, r3
 8002436:	f000 fe73 	bl	8003120 <PARK_run>
    // motor->park.Ds = PeriodFilter_id;
        
    // PeriodStateVar_iq += ( ( (float32_t)motor->park.Qs - (float32_t)PeriodFilter_iq)*(float32_t)PeriodKFilter );
    // PeriodFilter_iq = (float32_t)PeriodStateVar_iq;
    // motor->park.Qs = PeriodFilter_iq;
    return RESULT_OK(NULL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	605a      	str	r2, [r3, #4]
}
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	4096cbe4 	.word	0x4096cbe4
 8002454:	20000918 	.word	0x20000918

08002458 <vec_ctrl_pi_id_iq>:

#define IQ_REF_ADD 0.0f
static inline void vec_ctrl_pi_id_iq(MotorParameter *motor)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
    // Id、Iq 之 PI 控制
    if(motor->pi_speed.Fbk > 0)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 8002466:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246e:	dd3f      	ble.n	80024f0 <vec_ctrl_pi_id_iq+0x98>
    {
        motor->pi_Id.Ref = 0;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        motor->pi_Id.Fbk = motor->park.Ds;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        
        // Id.Fbk=CLAMP(( motor->park.Ds), 0.1, -0.1);
        
        PI_run(&motor->pi_Id); 
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	33e4      	adds	r3, #228	@ 0xe4
 800248a:	4618      	mov	r0, r3
 800248c:	f000 feb0 	bl	80031f0 <PI_run>
        // if(Id.Ref > Id.Fbk)
        //     Id.delta = 0.002;
        // else
        //     Id.delta = -0.002;
        
        motor->pi_Id.Out = clampf(motor->pi_Id.Out, -0.01f, 0.01f);//限制最大與最小參數
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 8002496:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8002500 <vec_ctrl_pi_id_iq+0xa8>
 800249a:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8002504 <vec_ctrl_pi_id_iq+0xac>
 800249e:	eeb0 0a67 	vmov.f32	s0, s15
 80024a2:	f7ff fb17 	bl	8001ad4 <clampf>
 80024a6:	eef0 7a40 	vmov.f32	s15, s0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	edc3 7a3b 	vstr	s15, [r3, #236]	@ 0xec
        // motor->pi_Iq.delta = (motor->pi_Iq.Ref - motor->pi_Iq.Fbk) * (motor->pi_Iq.Kp);
        // motor->pi_Iq.delta = CLAMP((motor->pi_Iq.delta), 0.1, -0.1);//限制最大與最小參數
        // motor->pi_Iq.Out = CLAMP((motor->pi_Iq.Ref + motor->pi_Iq.delta), 0.75, 0);//限制最大與最小參數

        // motor->pi_Iq.Ref = motor->pi_speed_cmd + IQ_REF_ADD;  // 外環給轉矩命令
        motor->pi_Iq.Ref = 0.3f;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a15      	ldr	r2, [pc, #84]	@ (8002508 <vec_ctrl_pi_id_iq+0xb0>)
 80024b4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        motor->pi_Iq.Fbk = motor->park.Qs;                    // q 軸量測
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        PI_run(&motor->pi_Iq);                                // 統一用 PI_run + anti-windup
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	33b0      	adds	r3, #176	@ 0xb0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fe91 	bl	80031f0 <PI_run>
        // 視匯流排/過調制上限，做一次幅值限幅（可留在這或放到 Vqref 指派前）
        motor->pi_Iq.Out = clampf(motor->pi_Iq.Out, 0.0f, 0.75f);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	edd3 7a2e 	vldr	s15, [r3, #184]	@ 0xb8
 80024d4:	eeb6 1a08 	vmov.f32	s2, #104	@ 0x3f400000  0.750
 80024d8:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 800250c <vec_ctrl_pi_id_iq+0xb4>
 80024dc:	eeb0 0a67 	vmov.f32	s0, s15
 80024e0:	f7ff faf8 	bl	8001ad4 <clampf>
 80024e4:	eef0 7a40 	vmov.f32	s15, s0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	edc3 7a2e 	vstr	s15, [r3, #184]	@ 0xb8
    }
    else
    {
        motor->pi_Iq.Out = 0.18;
    }
}
 80024ee:	e003      	b.n	80024f8 <vec_ctrl_pi_id_iq+0xa0>
        motor->pi_Iq.Out = 0.18;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a07      	ldr	r2, [pc, #28]	@ (8002510 <vec_ctrl_pi_id_iq+0xb8>)
 80024f4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	3c23d70a 	.word	0x3c23d70a
 8002504:	bc23d70a 	.word	0xbc23d70a
 8002508:	3e99999a 	.word	0x3e99999a
 800250c:	00000000 	.word	0x00000000
 8002510:	3e3851ec 	.word	0x3e3851ec

08002514 <vec_ctrl_ipark>:

static inline Result vec_ctrl_ipark(MotorParameter *motor)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
    // ipark
    // V alpha = Vd cos(theta) - Vq sin(theta)
    // V bata = Vd sin(theta) + Vq cos(theta)
    // ?
    motor->ipark.Vdref = clampf(motor->ipark.Vdref + motor->pi_Id.Out, -0.06f, 0.06f);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	ed93 7a55 	vldr	s14, [r3, #340]	@ 0x154
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 800252a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800252e:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 8002604 <vec_ctrl_ipark+0xf0>
 8002532:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8002608 <vec_ctrl_ipark+0xf4>
 8002536:	eeb0 0a67 	vmov.f32	s0, s15
 800253a:	f7ff facb 	bl	8001ad4 <clampf>
 800253e:	eef0 7a40 	vmov.f32	s15, s0
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	edc3 7a55 	vstr	s15, [r3, #340]	@ 0x154
    motor->ipark.Vqref = motor->pi_Iq.Out;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
    motor->ipark.Sine = motor->park.Sine;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    motor->ipark.Cosine = motor->park.Cosine;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    IPARK_run(&motor->ipark);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8002572:	4618      	mov	r0, r3
 8002574:	f000 fe08 	bl	8003188 <IPARK_run>
    RESULT_CHECK_RET_RES(trigo_atan(motor->ipark.Alpha, motor->ipark.Beta, &motor->elec_theta_rad));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	edd3 7a52 	vldr	s15, [r3, #328]	@ 0x148
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	ed93 7a53 	vldr	s14, [r3, #332]	@ 0x14c
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	f503 72be 	add.w	r2, r3, #380	@ 0x17c
 800258a:	f107 0308 	add.w	r3, r7, #8
 800258e:	4611      	mov	r1, r2
 8002590:	eef0 0a47 	vmov.f32	s1, s14
 8002594:	eeb0 0a67 	vmov.f32	s0, s15
 8002598:	4618      	mov	r0, r3
 800259a:	f000 ff89 	bl	80034b0 <trigo_atan>
 800259e:	7a3b      	ldrb	r3, [r7, #8]
 80025a0:	f083 0301 	eor.w	r3, r3, #1
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00c      	beq.n	80025c4 <vec_ctrl_ipark+0xb0>
 80025aa:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80025ae:	4b17      	ldr	r3, [pc, #92]	@ (800260c <vec_ctrl_ipark+0xf8>)
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	461a      	mov	r2, r3
 80025b6:	f107 0308 	add.w	r3, r7, #8
 80025ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025be:	e882 0003 	stmia.w	r2, {r0, r1}
 80025c2:	e01b      	b.n	80025fc <vec_ctrl_ipark+0xe8>
    motor->elec_theta_rad = wrap_0_2pi(motor->elec_theta_rad);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	edd3 7a5f 	vldr	s15, [r3, #380]	@ 0x17c
 80025ca:	eeb0 0a67 	vmov.f32	s0, s15
 80025ce:	f7ff faab 	bl	8001b28 <wrap_0_2pi>
 80025d2:	eef0 7a40 	vmov.f32	s15, s0
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	edc3 7a5f 	vstr	s15, [r3, #380]	@ 0x17c
    motor->elec_theta_deg = motor->elec_theta_rad * RAD_TO_DEG;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	edd3 7a5f 	vldr	s15, [r3, #380]	@ 0x17c
 80025e2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002610 <vec_ctrl_ipark+0xfc>
 80025e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	edc3 7a60 	vstr	s15, [r3, #384]	@ 0x180
    return RESULT_OK(NULL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	701a      	strb	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	605a      	str	r2, [r3, #4]
}
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	3d75c28f 	.word	0x3d75c28f
 8002608:	bd75c28f 	.word	0xbd75c28f
 800260c:	20000918 	.word	0x20000918
 8002610:	42652ee1 	.word	0x42652ee1

08002614 <vec_ctrl_svgen>:

static inline void vec_ctrl_svgen(MotorParameter *motor)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
    motor->svgendq.Ualpha = motor->ipark.Alpha;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
    motor->svgendq.Ubeta = motor->ipark.Beta;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
    SVGEN_run(&motor->svgendq);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fe48 	bl	80032d0 <SVGEN_run>
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <vec_ctrl_vref>:

static inline Result vec_ctrl_vref(MotorParameter *motor)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	@ 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
    //     else
    //         motor->svpwm_Vref=0;
    //     }
    // else
    arm_status status = arm_sqrt_f32(
        motor->svgendq.Ualpha * motor->svgendq.Ualpha 
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	ed93 7a59 	vldr	s14, [r3, #356]	@ 0x164
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	edd3 7a59 	vldr	s15, [r3, #356]	@ 0x164
 800265e:	ee27 7a27 	vmul.f32	s14, s14, s15
            + motor->svgendq.Ubeta * motor->svgendq.Ubeta,
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	edd3 6a5a 	vldr	s13, [r3, #360]	@ 0x168
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	edd3 7a5a 	vldr	s15, [r3, #360]	@ 0x168
 800266e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    arm_status status = arm_sqrt_f32(
 8002672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800267c:	edc7 7a08 	vstr	s15, [r7, #32]
 8002680:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8002682:	edd7 7a08 	vldr	s15, [r7, #32]
 8002686:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268e:	db0a      	blt.n	80026a6 <vec_ctrl_vref+0x5e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8002690:	ed97 0a08 	vldr	s0, [r7, #32]
 8002694:	f00a fac6 	bl	800cc24 <sqrtf>
 8002698:	eef0 7a40 	vmov.f32	s15, s0
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 80026a2:	2300      	movs	r3, #0
 80026a4:	e005      	b.n	80026b2 <vec_ctrl_vref+0x6a>
    }
    else
    {
      *pOut = 0.0f;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
 80026b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        &motor->svpwm_Vref
    );
    if (status != ARM_MATH_SUCCESS) return RESULT_ERROR(RES_ERR_FAIL);
 80026b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <vec_ctrl_vref+0x88>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	461a      	mov	r2, r3
 80026c2:	2300      	movs	r3, #0
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	6053      	str	r3, [r2, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	711a      	strb	r2, [r3, #4]
 80026ce:	e005      	b.n	80026dc <vec_ctrl_vref+0x94>
    //		motor->elec_theta_deg      =  (int)motor_angle % 60;
    
    /*
        svpwm_interval = ((int)cmd_deg / 60) % 6;
        motor->elec_theta_deg      =  (int)cmd_deg % 60;*/
    return RESULT_OK(NULL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	605a      	str	r2, [r3, #4]
}
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	3728      	adds	r7, #40	@ 0x28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <vec_ctrl_svpwm>:

float32_t thete_t[6];
static inline Result vec_ctrl_svpwm(MotorParameter *motor)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b092      	sub	sp, #72	@ 0x48
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
    float32_t theta = motor->elec_theta_rad;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 80026f4:	647b      	str	r3, [r7, #68]	@ 0x44
    int32_t n = (int32_t)(theta / DIV_PI_3);
 80026f6:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80026fa:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002a3c <vec_ctrl_svpwm+0x358>
 80026fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002702:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002706:	ee17 3a90 	vmov	r3, s15
 800270a:	643b      	str	r3, [r7, #64]	@ 0x40
    theta -= (float32_t)n * DIV_PI_3;
 800270c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800270e:	ee07 3a90 	vmov	s15, r3
 8002712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002716:	ed9f 7ac9 	vldr	s14, [pc, #804]	@ 8002a3c <vec_ctrl_svpwm+0x358>
 800271a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800271e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002726:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    if (theta < 0) theta += DIV_PI_3;
 800272a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800272e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002736:	d507      	bpl.n	8002748 <vec_ctrl_svpwm+0x64>
 8002738:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800273c:	ed9f 7abf 	vldr	s14, [pc, #764]	@ 8002a3c <vec_ctrl_svpwm+0x358>
 8002740:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002744:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    // ? CHECK
    float32_t T1, T2;
    if(!motor->reverse)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 800274e:	f083 0301 	eor.w	r3, r3, #1
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d040      	beq.n	80027da <vec_ctrl_svpwm+0xf6>
    {
        RESULT_CHECK_RET_RES(trigo_sin_cosf(DIV_PI_3 - theta, &T1, NULL));
 8002758:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8002a3c <vec_ctrl_svpwm+0x358>
 800275c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002768:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800276c:	2200      	movs	r2, #0
 800276e:	eeb0 0a67 	vmov.f32	s0, s15
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fe14 	bl	80033a0 <trigo_sin_cosf>
 8002778:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800277c:	f083 0301 	eor.w	r3, r3, #1
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00c      	beq.n	80027a0 <vec_ctrl_svpwm+0xbc>
 8002786:	f997 2028 	ldrsb.w	r2, [r7, #40]	@ 0x28
 800278a:	4bad      	ldr	r3, [pc, #692]	@ (8002a40 <vec_ctrl_svpwm+0x35c>)
 800278c:	701a      	strb	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	461a      	mov	r2, r3
 8002792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002796:	e893 0003 	ldmia.w	r3, {r0, r1}
 800279a:	e882 0003 	stmia.w	r2, {r0, r1}
    }
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[0], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_u));
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[1], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_v));
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[2], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_w));
    return RESULT_OK(NULL);
}
 800279e:	e28a      	b.n	8002cb6 <vec_ctrl_svpwm+0x5d2>
        RESULT_CHECK_RET_RES(trigo_sin_cosf(theta, &T2, NULL));
 80027a0:	f107 031c 	add.w	r3, r7, #28
 80027a4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80027a8:	2200      	movs	r2, #0
 80027aa:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fdf6 	bl	80033a0 <trigo_sin_cosf>
 80027b4:	7f3b      	ldrb	r3, [r7, #28]
 80027b6:	f083 0301 	eor.w	r3, r3, #1
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d04c      	beq.n	800285a <vec_ctrl_svpwm+0x176>
 80027c0:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80027c4:	4b9e      	ldr	r3, [pc, #632]	@ (8002a40 <vec_ctrl_svpwm+0x35c>)
 80027c6:	701a      	strb	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	461a      	mov	r2, r3
 80027cc:	f107 031c 	add.w	r3, r7, #28
 80027d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80027d4:	e882 0003 	stmia.w	r2, {r0, r1}
 80027d8:	e26d      	b.n	8002cb6 <vec_ctrl_svpwm+0x5d2>
        RESULT_CHECK_RET_RES(trigo_sin_cosf(theta, &T1, NULL));
 80027da:	f107 0314 	add.w	r3, r7, #20
 80027de:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80027e2:	2200      	movs	r2, #0
 80027e4:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fdd9 	bl	80033a0 <trigo_sin_cosf>
 80027ee:	7d3b      	ldrb	r3, [r7, #20]
 80027f0:	f083 0301 	eor.w	r3, r3, #1
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00c      	beq.n	8002814 <vec_ctrl_svpwm+0x130>
 80027fa:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80027fe:	4b90      	ldr	r3, [pc, #576]	@ (8002a40 <vec_ctrl_svpwm+0x35c>)
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	461a      	mov	r2, r3
 8002806:	f107 0314 	add.w	r3, r7, #20
 800280a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800280e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002812:	e250      	b.n	8002cb6 <vec_ctrl_svpwm+0x5d2>
        RESULT_CHECK_RET_RES(trigo_sin_cosf(DIV_PI_3 - theta, &T2, NULL));
 8002814:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8002a3c <vec_ctrl_svpwm+0x358>
 8002818:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800281c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002820:	f107 030c 	add.w	r3, r7, #12
 8002824:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002828:	2200      	movs	r2, #0
 800282a:	eeb0 0a67 	vmov.f32	s0, s15
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fdb6 	bl	80033a0 <trigo_sin_cosf>
 8002834:	7b3b      	ldrb	r3, [r7, #12]
 8002836:	f083 0301 	eor.w	r3, r3, #1
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00c      	beq.n	800285a <vec_ctrl_svpwm+0x176>
 8002840:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8002844:	4b7e      	ldr	r3, [pc, #504]	@ (8002a40 <vec_ctrl_svpwm+0x35c>)
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	461a      	mov	r2, r3
 800284c:	f107 030c 	add.w	r3, r7, #12
 8002850:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002854:	e882 0003 	stmia.w	r2, {r0, r1}
 8002858:	e22d      	b.n	8002cb6 <vec_ctrl_svpwm+0x5d2>
    float32_t T0div2 = (1 - (T1 + T2)) / 2;
 800285a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800285e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002866:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800286a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800286e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002872:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002876:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    switch(motor->svgendq.Sector)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	f8b3 3178 	ldrh.w	r3, [r3, #376]	@ 0x178
 8002880:	3b01      	subs	r3, #1
 8002882:	2b05      	cmp	r3, #5
 8002884:	f200 80b2 	bhi.w	80029ec <vec_ctrl_svpwm+0x308>
 8002888:	a201      	add	r2, pc, #4	@ (adr r2, 8002890 <vec_ctrl_svpwm+0x1ac>)
 800288a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288e:	bf00      	nop
 8002890:	0800294b 	.word	0x0800294b
 8002894:	080028df 	.word	0x080028df
 8002898:	08002915 	.word	0x08002915
 800289c:	080029b7 	.word	0x080029b7
 80028a0:	08002981 	.word	0x08002981
 80028a4:	080028a9 	.word	0x080028a9
            motor->pwm_duty_u = T0div2;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028ac:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            motor->pwm_duty_v = T0div2 + T1;
 80028b0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80028b4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80028b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            motor->pwm_duty_w = T0div2 + T1 + T2;
 80028c2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80028c6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80028ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ce:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80028d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	edc3 7a64 	vstr	s15, [r3, #400]	@ 0x190
            break;
 80028dc:	e086      	b.n	80029ec <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2 + T2;
 80028de:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80028e2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80028e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_v = T0div2;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028f4:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
            motor->pwm_duty_w = T0div2 + T1 + T2;
 80028f8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80028fc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002900:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002904:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	edc3 7a64 	vstr	s15, [r3, #400]	@ 0x190
            break;
 8002912:	e06b      	b.n	80029ec <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2 + T1 + T2;
 8002914:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002918:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800291c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002920:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_v = T0div2;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002932:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
            motor->pwm_duty_w = T0div2 + T1;
 8002936:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800293a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800293e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	edc3 7a64 	vstr	s15, [r3, #400]	@ 0x190
            break;
 8002948:	e050      	b.n	80029ec <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2 + T1 + T2;
 800294a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800294e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002952:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002956:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800295a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_v = T0div2 + T2;
 8002964:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002968:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800296c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            motor->pwm_duty_w = T0div2;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800297a:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
            break;
 800297e:	e035      	b.n	80029ec <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2 + T1;
 8002980:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002984:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
            motor->pwm_duty_v = T0div2 + T1 + T2;
 8002992:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002996:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800299a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800299e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80029a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            motor->pwm_duty_w = T0div2;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029b0:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
            break;
 80029b4:	e01a      	b.n	80029ec <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029ba:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            motor->pwm_duty_v = T0div2 + T1 + T2;
 80029be:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80029c2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80029c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80029ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
            motor->pwm_duty_w = T0div2 + T2;
 80029d8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80029dc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80029e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	edc3 7a64 	vstr	s15, [r3, #400]	@ 0x190
            break;
 80029ea:	bf00      	nop
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[0], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_u));
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10f      	bne.n	8002a14 <vec_ctrl_svpwm+0x330>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 80029fa:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002a44 <vec_ctrl_svpwm+0x360>
 80029fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a0c:	ee17 2a90 	vmov	r2, s15
 8002a10:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a12:	e064      	b.n	8002ade <vec_ctrl_svpwm+0x3fa>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d115      	bne.n	8002a48 <vec_ctrl_svpwm+0x364>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002a22:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002a44 <vec_ctrl_svpwm+0x360>
 8002a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a34:	ee17 3a90 	vmov	r3, s15
 8002a38:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a3a:	e050      	b.n	8002ade <vec_ctrl_svpwm+0x3fa>
 8002a3c:	3f860a92 	.word	0x3f860a92
 8002a40:	20000918 	.word	0x20000918
 8002a44:	437a0000 	.word	0x437a0000
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d10f      	bne.n	8002a70 <vec_ctrl_svpwm+0x38c>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002a56:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8002a44 <vec_ctrl_svpwm+0x360>
 8002a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a68:	ee17 3a90 	vmov	r3, s15
 8002a6c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002a6e:	e036      	b.n	8002ade <vec_ctrl_svpwm+0x3fa>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	2b0c      	cmp	r3, #12
 8002a76:	d10f      	bne.n	8002a98 <vec_ctrl_svpwm+0x3b4>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002a7e:	ed1f 7a0f 	vldr	s14, [pc, #-60]	@ 8002a44 <vec_ctrl_svpwm+0x360>
 8002a82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a90:	ee17 3a90 	vmov	r3, s15
 8002a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a96:	e022      	b.n	8002ade <vec_ctrl_svpwm+0x3fa>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	2b10      	cmp	r3, #16
 8002a9e:	d10f      	bne.n	8002ac0 <vec_ctrl_svpwm+0x3dc>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002aa6:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 8002a44 <vec_ctrl_svpwm+0x360>
 8002aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ab8:	ee17 3a90 	vmov	r3, s15
 8002abc:	6493      	str	r3, [r2, #72]	@ 0x48
 8002abe:	e00e      	b.n	8002ade <vec_ctrl_svpwm+0x3fa>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8002ac6:	ed1f 7a21 	vldr	s14, [pc, #-132]	@ 8002a44 <vec_ctrl_svpwm+0x360>
 8002aca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ad8:	ee17 3a90 	vmov	r3, s15
 8002adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[1], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_v));
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10f      	bne.n	8002b06 <vec_ctrl_svpwm+0x422>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002aec:	ed1f 7a2b 	vldr	s14, [pc, #-172]	@ 8002a44 <vec_ctrl_svpwm+0x360>
 8002af0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002afe:	ee17 2a90 	vmov	r2, s15
 8002b02:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b04:	e05e      	b.n	8002bc4 <vec_ctrl_svpwm+0x4e0>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d10f      	bne.n	8002b2e <vec_ctrl_svpwm+0x44a>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002b14:	ed1f 7a35 	vldr	s14, [pc, #-212]	@ 8002a44 <vec_ctrl_svpwm+0x360>
 8002b18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b26:	ee17 3a90 	vmov	r3, s15
 8002b2a:	6393      	str	r3, [r2, #56]	@ 0x38
 8002b2c:	e04a      	b.n	8002bc4 <vec_ctrl_svpwm+0x4e0>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d10f      	bne.n	8002b56 <vec_ctrl_svpwm+0x472>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002b3c:	ed1f 7a3f 	vldr	s14, [pc, #-252]	@ 8002a44 <vec_ctrl_svpwm+0x360>
 8002b40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b4e:	ee17 3a90 	vmov	r3, s15
 8002b52:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002b54:	e036      	b.n	8002bc4 <vec_ctrl_svpwm+0x4e0>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	2b0c      	cmp	r3, #12
 8002b5c:	d10f      	bne.n	8002b7e <vec_ctrl_svpwm+0x49a>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002b64:	ed1f 7a49 	vldr	s14, [pc, #-292]	@ 8002a44 <vec_ctrl_svpwm+0x360>
 8002b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b76:	ee17 3a90 	vmov	r3, s15
 8002b7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b7c:	e022      	b.n	8002bc4 <vec_ctrl_svpwm+0x4e0>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	2b10      	cmp	r3, #16
 8002b84:	d10f      	bne.n	8002ba6 <vec_ctrl_svpwm+0x4c2>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002b8c:	ed1f 7a53 	vldr	s14, [pc, #-332]	@ 8002a44 <vec_ctrl_svpwm+0x360>
 8002b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b9e:	ee17 3a90 	vmov	r3, s15
 8002ba2:	6493      	str	r3, [r2, #72]	@ 0x48
 8002ba4:	e00e      	b.n	8002bc4 <vec_ctrl_svpwm+0x4e0>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	edd3 7a63 	vldr	s15, [r3, #396]	@ 0x18c
 8002bac:	ed1f 7a5b 	vldr	s14, [pc, #-364]	@ 8002a44 <vec_ctrl_svpwm+0x360>
 8002bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bbe:	ee17 3a90 	vmov	r3, s15
 8002bc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_TIM_SET_COMPARE(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[2], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_w));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10f      	bne.n	8002bec <vec_ctrl_svpwm+0x508>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002bd2:	ed1f 7a64 	vldr	s14, [pc, #-400]	@ 8002a44 <vec_ctrl_svpwm+0x360>
 8002bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002be4:	ee17 2a90 	vmov	r2, s15
 8002be8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bea:	e05e      	b.n	8002caa <vec_ctrl_svpwm+0x5c6>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d10f      	bne.n	8002c14 <vec_ctrl_svpwm+0x530>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002bfa:	ed1f 7a6e 	vldr	s14, [pc, #-440]	@ 8002a44 <vec_ctrl_svpwm+0x360>
 8002bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c0c:	ee17 3a90 	vmov	r3, s15
 8002c10:	6393      	str	r3, [r2, #56]	@ 0x38
 8002c12:	e04a      	b.n	8002caa <vec_ctrl_svpwm+0x5c6>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d10f      	bne.n	8002c3c <vec_ctrl_svpwm+0x558>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002c22:	ed1f 7a78 	vldr	s14, [pc, #-480]	@ 8002a44 <vec_ctrl_svpwm+0x360>
 8002c26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c34:	ee17 3a90 	vmov	r3, s15
 8002c38:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002c3a:	e036      	b.n	8002caa <vec_ctrl_svpwm+0x5c6>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c40:	2b0c      	cmp	r3, #12
 8002c42:	d10f      	bne.n	8002c64 <vec_ctrl_svpwm+0x580>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002c4a:	ed1f 7a82 	vldr	s14, [pc, #-520]	@ 8002a44 <vec_ctrl_svpwm+0x360>
 8002c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c5c:	ee17 3a90 	vmov	r3, s15
 8002c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c62:	e022      	b.n	8002caa <vec_ctrl_svpwm+0x5c6>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d10f      	bne.n	8002c8c <vec_ctrl_svpwm+0x5a8>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002c72:	ed1f 7a8c 	vldr	s14, [pc, #-560]	@ 8002a44 <vec_ctrl_svpwm+0x360>
 8002c76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c84:	ee17 3a90 	vmov	r3, s15
 8002c88:	6493      	str	r3, [r2, #72]	@ 0x48
 8002c8a:	e00e      	b.n	8002caa <vec_ctrl_svpwm+0x5c6>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002c92:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 8002a44 <vec_ctrl_svpwm+0x360>
 8002c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ca4:	ee17 3a90 	vmov	r3, s15
 8002ca8:	64d3      	str	r3, [r2, #76]	@ 0x4c
    return RESULT_OK(NULL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	605a      	str	r2, [r3, #4]
}
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	3748      	adds	r7, #72	@ 0x48
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop

08002cc0 <motor_foc_pwm_pulse>:

#define CYCLE_CNT(id) ({cycle[id] = __HAL_TIM_GET_COUNTER(&htim2) - cycle[id-1];})
// FOC 20kHz
// Thread - pwmIt - 0
Result motor_foc_pwm_pulse(MotorParameter *motor)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08e      	sub	sp, #56	@ 0x38
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002cca:	4b9c      	ldr	r3, [pc, #624]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (motor->pwm_count % 100 == 0)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8002cd8:	4a99      	ldr	r2, [pc, #612]	@ (8002f40 <motor_foc_pwm_pulse+0x280>)
 8002cda:	fba2 1203 	umull	r1, r2, r2, r3
 8002cde:	0952      	lsrs	r2, r2, #5
 8002ce0:	2164      	movs	r1, #100	@ 0x64
 8002ce2:	fb01 f202 	mul.w	r2, r1, r2
 8002ce6:	1a9b      	subs	r3, r3, r2
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d11e      	bne.n	8002d2c <motor_foc_pwm_pulse+0x6c>
    {
        __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002cee:	4b93      	ldr	r3, [pc, #588]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	625a      	str	r2, [r3, #36]	@ 0x24
        cycle[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8002cf6:	4b91      	ldr	r3, [pc, #580]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfc:	4a91      	ldr	r2, [pc, #580]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002cfe:	6013      	str	r3, [r2, #0]
        // Thread - pwmIt(100) - 1
        stop_check(motor);
 8002d00:	6838      	ldr	r0, [r7, #0]
 8002d02:	f7ff f9ef 	bl	80020e4 <stop_check>
        CYCLE_CNT(1);
 8002d06:	4b8d      	ldr	r3, [pc, #564]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d0c:	4b8d      	ldr	r3, [pc, #564]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	4a8c      	ldr	r2, [pc, #560]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002d14:	6053      	str	r3, [r2, #4]
        // Thread - pwmIt(100) - 2
        pi_speed(motor); // !
 8002d16:	6838      	ldr	r0, [r7, #0]
 8002d18:	f7ff fa36 	bl	8002188 <pi_speed>
        CYCLE_CNT(2);
 8002d1c:	4b87      	ldr	r3, [pc, #540]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d22:	4b88      	ldr	r3, [pc, #544]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	4a86      	ldr	r2, [pc, #536]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002d2a:	6093      	str	r3, [r2, #8]
    }
    if (motor->pwm_count % 2 == 0)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f040 80d0 	bne.w	8002ede <motor_foc_pwm_pulse+0x21e>
    {
        CYCLE_CNT(3);
 8002d3e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d44:	4b7f      	ldr	r3, [pc, #508]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	4a7e      	ldr	r2, [pc, #504]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002d4c:	60d3      	str	r3, [r2, #12]
        // Thread - pwmIt - 1
        angal_cal(motor);
 8002d4e:	6838      	ldr	r0, [r7, #0]
 8002d50:	f7ff fa40 	bl	80021d4 <angal_cal>
        CYCLE_CNT(4);
 8002d54:	4b79      	ldr	r3, [pc, #484]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d5a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	4a78      	ldr	r2, [pc, #480]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002d62:	6113      	str	r3, [r2, #16]
        // Thread - pwmIt - 2
        RESULT_CHECK_RET_RES(vec_ctrl_clarke(motor));
 8002d64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d68:	6839      	ldr	r1, [r7, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fa74 	bl	8002258 <vec_ctrl_clarke>
 8002d70:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d74:	f083 0301 	eor.w	r3, r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00c      	beq.n	8002d98 <motor_foc_pwm_pulse+0xd8>
 8002d7e:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 8002d82:	4b71      	ldr	r3, [pc, #452]	@ (8002f48 <motor_foc_pwm_pulse+0x288>)
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d92:	e882 0003 	stmia.w	r2, {r0, r1}
        motor->rpm_fbk_htim = motor->exti_hall_cnt * 200.0f;
        motor->exti_hall_cnt = 0;
    }
    motor->pwm_count++;
    return RESULT_OK(NULL);
}
 8002d96:	e0cd      	b.n	8002f34 <motor_foc_pwm_pulse+0x274>
        CYCLE_CNT(5);
 8002d98:	4b68      	ldr	r3, [pc, #416]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d9e:	4b69      	ldr	r3, [pc, #420]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	4a67      	ldr	r2, [pc, #412]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002da6:	6153      	str	r3, [r2, #20]
        RESULT_CHECK_RET_RES(vec_ctrl_park(motor));
 8002da8:	f107 0320 	add.w	r3, r7, #32
 8002dac:	6839      	ldr	r1, [r7, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fb00 	bl	80023b4 <vec_ctrl_park>
 8002db4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002db8:	f083 0301 	eor.w	r3, r3, #1
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00c      	beq.n	8002ddc <motor_foc_pwm_pulse+0x11c>
 8002dc2:	f997 2024 	ldrsb.w	r2, [r7, #36]	@ 0x24
 8002dc6:	4b60      	ldr	r3, [pc, #384]	@ (8002f48 <motor_foc_pwm_pulse+0x288>)
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f107 0320 	add.w	r3, r7, #32
 8002dd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002dd6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002dda:	e0ab      	b.n	8002f34 <motor_foc_pwm_pulse+0x274>
        CYCLE_CNT(6);
 8002ddc:	4b57      	ldr	r3, [pc, #348]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002de2:	4b58      	ldr	r3, [pc, #352]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	4a56      	ldr	r2, [pc, #344]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002dea:	6193      	str	r3, [r2, #24]
        vec_ctrl_pi_id_iq(motor);
 8002dec:	6838      	ldr	r0, [r7, #0]
 8002dee:	f7ff fb33 	bl	8002458 <vec_ctrl_pi_id_iq>
        CYCLE_CNT(7);
 8002df2:	4b52      	ldr	r3, [pc, #328]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002df8:	4b52      	ldr	r3, [pc, #328]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	4a51      	ldr	r2, [pc, #324]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002e00:	61d3      	str	r3, [r2, #28]
        RESULT_CHECK_RET_RES(vec_ctrl_ipark(motor)); // !
 8002e02:	f107 0318 	add.w	r3, r7, #24
 8002e06:	6839      	ldr	r1, [r7, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fb83 	bl	8002514 <vec_ctrl_ipark>
 8002e0e:	7e3b      	ldrb	r3, [r7, #24]
 8002e10:	f083 0301 	eor.w	r3, r3, #1
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00c      	beq.n	8002e34 <motor_foc_pwm_pulse+0x174>
 8002e1a:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8002e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f48 <motor_foc_pwm_pulse+0x288>)
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	461a      	mov	r2, r3
 8002e26:	f107 0318 	add.w	r3, r7, #24
 8002e2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e2e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002e32:	e07f      	b.n	8002f34 <motor_foc_pwm_pulse+0x274>
        CYCLE_CNT(8);
 8002e34:	4b41      	ldr	r3, [pc, #260]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e3a:	4b42      	ldr	r3, [pc, #264]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	4a40      	ldr	r2, [pc, #256]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002e42:	6213      	str	r3, [r2, #32]
        vec_ctrl_svgen(motor);
 8002e44:	6838      	ldr	r0, [r7, #0]
 8002e46:	f7ff fbe5 	bl	8002614 <vec_ctrl_svgen>
        CYCLE_CNT(9);
 8002e4a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e50:	4b3c      	ldr	r3, [pc, #240]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	4a3b      	ldr	r2, [pc, #236]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002e58:	6253      	str	r3, [r2, #36]	@ 0x24
        RESULT_CHECK_RET_RES(vec_ctrl_vref(motor));  // !
 8002e5a:	f107 0310 	add.w	r3, r7, #16
 8002e5e:	6839      	ldr	r1, [r7, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fbf1 	bl	8002648 <vec_ctrl_vref>
 8002e66:	7c3b      	ldrb	r3, [r7, #16]
 8002e68:	f083 0301 	eor.w	r3, r3, #1
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00c      	beq.n	8002e8c <motor_foc_pwm_pulse+0x1cc>
 8002e72:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002e76:	4b34      	ldr	r3, [pc, #208]	@ (8002f48 <motor_foc_pwm_pulse+0x288>)
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f107 0310 	add.w	r3, r7, #16
 8002e82:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e86:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002e8a:	e053      	b.n	8002f34 <motor_foc_pwm_pulse+0x274>
        CYCLE_CNT(10);
 8002e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e92:	4b2c      	ldr	r3, [pc, #176]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	4a2a      	ldr	r2, [pc, #168]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002e9a:	6293      	str	r3, [r2, #40]	@ 0x28
        RESULT_CHECK_RET_RES(vec_ctrl_svpwm(motor));
 8002e9c:	f107 0308 	add.w	r3, r7, #8
 8002ea0:	6839      	ldr	r1, [r7, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fc1e 	bl	80026e4 <vec_ctrl_svpwm>
 8002ea8:	7a3b      	ldrb	r3, [r7, #8]
 8002eaa:	f083 0301 	eor.w	r3, r3, #1
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00c      	beq.n	8002ece <motor_foc_pwm_pulse+0x20e>
 8002eb4:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8002eb8:	4b23      	ldr	r3, [pc, #140]	@ (8002f48 <motor_foc_pwm_pulse+0x288>)
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f107 0308 	add.w	r3, r7, #8
 8002ec4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ec8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002ecc:	e032      	b.n	8002f34 <motor_foc_pwm_pulse+0x274>
        CYCLE_CNT(11);
 8002ece:	4b1b      	ldr	r3, [pc, #108]	@ (8002f3c <motor_foc_pwm_pulse+0x27c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	4a1a      	ldr	r2, [pc, #104]	@ (8002f44 <motor_foc_pwm_pulse+0x284>)
 8002edc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (motor->pwm_count >= 1000)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8002ee4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ee8:	d316      	bcc.n	8002f18 <motor_foc_pwm_pulse+0x258>
        motor->pwm_count = 0;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        motor->rpm_fbk_htim = motor->exti_hall_cnt * 200.0f;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	ee07 3a90 	vmov	s15, r3
 8002efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f02:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002f4c <motor_foc_pwm_pulse+0x28c>
 8002f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
        motor->exti_hall_cnt = 0;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    motor->pwm_count++;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8002f1e:	3301      	adds	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    return RESULT_OK(NULL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	605a      	str	r2, [r3, #4]
}
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	3738      	adds	r7, #56	@ 0x38
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20000590 	.word	0x20000590
 8002f40:	51eb851f 	.word	0x51eb851f
 8002f44:	20000920 	.word	0x20000920
 8002f48:	20000918 	.word	0x20000918
 8002f4c:	43480000 	.word	0x43480000

08002f50 <motor_hall_exti>:
#include "motor/ctrl_foc.h"
#include "analog/adc1/main.h"
#include "motor/trigonometric.h"

void motor_hall_exti(MotorParameter *motor)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
    motor->exti_hall_cnt++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3301      	adds	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    uint8_t hall_last = motor->exti_hall_curt;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002f70:	77bb      	strb	r3, [r7, #30]
    uint8_t hall_current =
          ((motor->const_h.Hall_GPIOx[0]->IDR & motor->const_h.Hall_GPIO_Pin_x[0]) ? 4U : 0U)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	8a12      	ldrh	r2, [r2, #16]
 8002f7c:	4013      	ands	r3, r2
        | ((motor->const_h.Hall_GPIOx[1]->IDR & motor->const_h.Hall_GPIO_Pin_x[1]) ? 2U : 0U)
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <motor_hall_exti+0x36>
 8002f82:	2204      	movs	r2, #4
 8002f84:	e000      	b.n	8002f88 <motor_hall_exti+0x38>
 8002f86:	2200      	movs	r2, #0
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	68f9      	ldr	r1, [r7, #12]
 8002f90:	8a49      	ldrh	r1, [r1, #18]
 8002f92:	400b      	ands	r3, r1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <motor_hall_exti+0x4c>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e000      	b.n	8002f9e <motor_hall_exti+0x4e>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	b2db      	uxtb	r3, r3
        | ((motor->const_h.Hall_GPIOx[2]->IDR & motor->const_h.Hall_GPIO_Pin_x[2]) ? 1U : 0U);
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	68d2      	ldr	r2, [r2, #12]
 8002fa6:	6912      	ldr	r2, [r2, #16]
 8002fa8:	68f9      	ldr	r1, [r7, #12]
 8002faa:	8a89      	ldrh	r1, [r1, #20]
 8002fac:	400a      	ands	r2, r1
 8002fae:	2a00      	cmp	r2, #0
 8002fb0:	d001      	beq.n	8002fb6 <motor_hall_exti+0x66>
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	e000      	b.n	8002fb8 <motor_hall_exti+0x68>
 8002fb6:	2200      	movs	r2, #0
    uint8_t hall_current =
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	777b      	strb	r3, [r7, #29]
    motor->exti_hall_last = hall_last;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	7fba      	ldrb	r2, [r7, #30]
 8002fc0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    motor->exti_hall_curt = hall_current;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	7f7a      	ldrb	r2, [r7, #29]
 8002fc8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    if (hall_current == 0 || hall_current == 7) 
 8002fcc:	7f7b      	ldrb	r3, [r7, #29]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <motor_hall_exti+0x88>
 8002fd2:	7f7b      	ldrb	r3, [r7, #29]
 8002fd4:	2b07      	cmp	r3, #7
 8002fd6:	d12e      	bne.n	8003036 <motor_hall_exti+0xe6>
    {
        uint8_t i;
        for (i = 0; i < 3; i++)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	77fb      	strb	r3, [r7, #31]
 8002fdc:	e027      	b.n	800302e <motor_hall_exti+0xde>
        {
            HAL_TIM_PWM_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6998      	ldr	r0, [r3, #24]
 8002fe2:	7ffb      	ldrb	r3, [r7, #31]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	3306      	adds	r3, #6
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	f004 fea6 	bl	8007d40 <HAL_TIM_PWM_Stop>
            HAL_TIMEx_PWMN_Stop(motor->const_h.htimx, motor->const_h.TIM_CHANNEL_x[i]);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6998      	ldr	r0, [r3, #24]
 8002ff8:	7ffb      	ldrb	r3, [r7, #31]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	3306      	adds	r3, #6
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4619      	mov	r1, r3
 8003006:	f005 fea3 	bl	8008d50 <HAL_TIMEx_PWMN_Stop>
            HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
 800300a:	7ffa      	ldrb	r2, [r7, #31]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	320a      	adds	r2, #10
 8003010:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003014:	7ffb      	ldrb	r3, [r7, #31]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	3318      	adds	r3, #24
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	889b      	ldrh	r3, [r3, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	4619      	mov	r1, r3
 8003024:	f003 fa4a 	bl	80064bc <HAL_GPIO_WritePin>
        for (i = 0; i < 3; i++)
 8003028:	7ffb      	ldrb	r3, [r7, #31]
 800302a:	3301      	adds	r3, #1
 800302c:	77fb      	strb	r3, [r7, #31]
 800302e:	7ffb      	ldrb	r3, [r7, #31]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d9d4      	bls.n	8002fde <motor_hall_exti+0x8e>
        }
        return;
 8003034:	e025      	b.n	8003082 <motor_hall_exti+0x132>
    }
    RESULT_CHECK_RET_VOID(motor_hall_to_angle(hall_current, &motor->exti_hall_angal));
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800303c:	f107 0314 	add.w	r3, r7, #20
 8003040:	7f79      	ldrb	r1, [r7, #29]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe fcf4 	bl	8001a30 <motor_hall_to_angle>
 8003048:	7d3b      	ldrb	r3, [r7, #20]
 800304a:	f083 0301 	eor.w	r3, r3, #1
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d004      	beq.n	800305e <motor_hall_exti+0x10e>
 8003054:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8003058:	4b0b      	ldr	r3, [pc, #44]	@ (8003088 <motor_hall_exti+0x138>)
 800305a:	701a      	strb	r2, [r3, #0]
 800305c:	e011      	b.n	8003082 <motor_hall_exti+0x132>
    switch (motor->mode)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <motor_hall_exti+0x11e>
 8003068:	2b01      	cmp	r3, #1
 800306a:	d004      	beq.n	8003076 <motor_hall_exti+0x126>
 800306c:	e009      	b.n	8003082 <motor_hall_exti+0x132>
    {
        case MOTOR_CTRL_120:
        {
            motor_120_hall_update(motor);
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f7fe fe1e 	bl	8001cb0 <motor_120_hall_update>
            break;
 8003074:	e005      	b.n	8003082 <motor_hall_exti+0x132>
        }
        case MOTOR_CTRL_FOC:
        {
            motor_foc_hall_update(motor);
 8003076:	463b      	mov	r3, r7
 8003078:	68f9      	ldr	r1, [r7, #12]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe ffb8 	bl	8001ff0 <motor_foc_hall_update>
            break;
 8003080:	bf00      	nop
        }
    }
}
 8003082:	3720      	adds	r7, #32
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000918 	.word	0x20000918

0800308c <motor_pwm_pulse>:

void motor_pwm_pulse(MotorParameter *motor)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
    switch (motor->mode)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <motor_pwm_pulse+0x24>
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d000      	beq.n	80030a4 <motor_pwm_pulse+0x18>
        {
            motor_foc_pwm_pulse(motor);
            break;
        }
    }
}
 80030a2:	e006      	b.n	80030b2 <motor_pwm_pulse+0x26>
            motor_foc_pwm_pulse(motor);
 80030a4:	463b      	mov	r3, r7
 80030a6:	68f9      	ldr	r1, [r7, #12]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fe09 	bl	8002cc0 <motor_foc_pwm_pulse>
            break;
 80030ae:	e000      	b.n	80030b2 <motor_pwm_pulse+0x26>
            break;
 80030b0:	bf00      	nop
}
 80030b2:	bf00      	nop
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <StartMotorTask>:

void StartMotorTask(void *argument)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
    motor_h.pi_speed.Ref = 80.0f;
 80030c4:	4b14      	ldr	r3, [pc, #80]	@ (8003118 <StartMotorTask+0x5c>)
 80030c6:	4a15      	ldr	r2, [pc, #84]	@ (800311c <StartMotorTask+0x60>)
 80030c8:	679a      	str	r2, [r3, #120]	@ 0x78
    motor_h.pwm_duty_u = 1.0f;
 80030ca:	4b13      	ldr	r3, [pc, #76]	@ (8003118 <StartMotorTask+0x5c>)
 80030cc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80030d0:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    // motor_h.reverse = true;
    HAL_TIM_Base_Start_IT(motor_h.const_h.htimx);
 80030d4:	4b10      	ldr	r3, [pc, #64]	@ (8003118 <StartMotorTask+0x5c>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	4618      	mov	r0, r3
 80030da:	f004 fc19 	bl	8007910 <HAL_TIM_Base_Start_IT>
    
    motor_h.mode = MOTOR_CTRL_120;
 80030de:	4b0e      	ldr	r3, [pc, #56]	@ (8003118 <StartMotorTask+0x5c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    motor_hall_exti(&motor_h);
 80030e6:	480c      	ldr	r0, [pc, #48]	@ (8003118 <StartMotorTask+0x5c>)
 80030e8:	f7ff ff32 	bl	8002f50 <motor_hall_exti>
    osDelay(3000);
 80030ec:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80030f0:	f006 fe9a 	bl	8009e28 <osDelay>
    motor_120_ctrl_stop(&motor_h);
 80030f4:	4808      	ldr	r0, [pc, #32]	@ (8003118 <StartMotorTask+0x5c>)
 80030f6:	f7fe ff09 	bl	8001f0c <motor_120_ctrl_stop>

    motor_h.mode = MOTOR_CTRL_FOC;
 80030fa:	4b07      	ldr	r3, [pc, #28]	@ (8003118 <StartMotorTask+0x5c>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    motor_foc_tim_setup(&motor_h);
 8003102:	463b      	mov	r3, r7
 8003104:	4904      	ldr	r1, [pc, #16]	@ (8003118 <StartMotorTask+0x5c>)
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe ff28 	bl	8001f5c <motor_foc_tim_setup>
    motor_hall_exti(&motor_h);
 800310c:	4802      	ldr	r0, [pc, #8]	@ (8003118 <StartMotorTask+0x5c>)
 800310e:	f7ff ff1f 	bl	8002f50 <motor_hall_exti>

    StopTask();
 8003112:	f006 fe82 	bl	8009e1a <osThreadExit>
 8003116:	bf00      	nop
 8003118:	20000014 	.word	0x20000014
 800311c:	42a00000 	.word	0x42a00000

08003120 <PARK_run>:
#include "motor/park.h"

inline void PARK_run(volatile PARK *park)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
    park->Ds = (park->Alpha * park->Cosine) + (park->Beta  * park->Sine);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	ed93 7a00 	vldr	s14, [r3]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	edd3 7a06 	vldr	s15, [r3, #24]
 8003134:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	edd3 6a01 	vldr	s13, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	edd3 7a05 	vldr	s15, [r3, #20]
 8003144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	edc3 7a03 	vstr	s15, [r3, #12]
    park->Qs = (park->Beta  * park->Cosine) - (park->Alpha * park->Sine);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	ed93 7a01 	vldr	s14, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	edd3 7a06 	vldr	s15, [r3, #24]
 800315e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	edd3 6a00 	vldr	s13, [r3]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	edd3 7a05 	vldr	s15, [r3, #20]
 800316e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	edc3 7a04 	vstr	s15, [r3, #16]
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <IPARK_run>:

inline void IPARK_run(volatile IPARK *ipark)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
    ipark->Alpha = (ipark->Vdref * ipark->Cosine) - (ipark->Vqref * ipark->Sine);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	ed93 7a03 	vldr	s14, [r3, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	edd3 7a06 	vldr	s15, [r3, #24]
 800319c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	edd3 6a04 	vldr	s13, [r3, #16]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80031ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	edc3 7a00 	vstr	s15, [r3]
    ipark->Beta  = (ipark->Vqref * ipark->Cosine) + (ipark->Vdref * ipark->Sine);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	ed93 7a04 	vldr	s14, [r3, #16]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80031c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	edd3 6a03 	vldr	s13, [r3, #12]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	edd3 7a05 	vldr	s15, [r3, #20]
 80031d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <PI_run>:
#include "motor/pi.h"
#include "motor/basic.h"

void PI_run(volatile PI_CTRL *pi)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
    pi->up = pi->Kp * (pi->Ref - pi->Fbk);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	ed93 7a03 	vldr	s14, [r3, #12]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	edd3 6a00 	vldr	s13, [r3]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	edd3 7a01 	vldr	s15, [r3, #4]
 800320a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	edc3 7a07 	vstr	s15, [r3, #28]

    if (pi->Out == pi->v1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	ed93 7a02 	vldr	s14, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003224:	eeb4 7a67 	vcmp.f32	s14, s15
 8003228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322c:	d110      	bne.n	8003250 <PI_run+0x60>
    {
        pi->ui = pi->Ki * pi->up + pi->i1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	ed93 7a04 	vldr	s14, [r3, #16]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	edd3 7a07 	vldr	s15, [r3, #28]
 800323a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	edc3 7a08 	vstr	s15, [r3, #32]
 800324e:	e003      	b.n	8003258 <PI_run+0x68>
    }
    else
    {
        pi->ui = pi->i1;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	621a      	str	r2, [r3, #32]
    }
    pi->i1 = pi->ui;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1a      	ldr	r2, [r3, #32]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	629a      	str	r2, [r3, #40]	@ 0x28
    pi->v1 = pi->up + pi->ui;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	ed93 7a07 	vldr	s14, [r3, #28]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	edd3 7a08 	vldr	s15, [r3, #32]
 800326c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    pi->Out = clampf(pi->v1, pi->Umin, pi->Umax);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	edd3 6a05 	vldr	s13, [r3, #20]
 8003288:	eeb0 1a66 	vmov.f32	s2, s13
 800328c:	eef0 0a47 	vmov.f32	s1, s14
 8003290:	eeb0 0a67 	vmov.f32	s0, s15
 8003294:	f7fe fc1e 	bl	8001ad4 <clampf>
 8003298:	eef0 7a40 	vmov.f32	s15, s0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	edc3 7a02 	vstr	s15, [r3, #8]
    pi->w1 = (pi->Out == pi->v1) ? 1.0f : 0.0f;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80032ae:	eeb4 7a67 	vcmp.f32	s14, s15
 80032b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b6:	d102      	bne.n	80032be <PI_run+0xce>
 80032b8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80032bc:	e001      	b.n	80032c2 <PI_run+0xd2>
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <SVGEN_run>:
#include "motor/svgendq.h"

inline void SVGEN_run(volatile SVGENDQ *svgq)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
    float32_t t1 = svgq->Ubeta * 0.5f;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	edd3 7a01 	vldr	s15, [r3, #4]
 80032de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80032e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032e6:	edc7 7a03 	vstr	s15, [r7, #12]
    float32_t t2 = 0.8660254f * svgq->Ualpha;   // sqrt(3)/2
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	edd3 7a00 	vldr	s15, [r3]
 80032f0:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800339c <SVGEN_run+0xcc>
 80032f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f8:	edc7 7a02 	vstr	s15, [r7, #8]
    // Inverse clarke transformation
    svgq->Va = svgq->Ubeta;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	609a      	str	r2, [r3, #8]
    svgq->Vb = -t1 + t2;
 8003304:	ed97 7a02 	vldr	s14, [r7, #8]
 8003308:	edd7 7a03 	vldr	s15, [r7, #12]
 800330c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	edc3 7a03 	vstr	s15, [r3, #12]
    svgq->Vc = -t1 - t2;
 8003316:	edd7 7a03 	vldr	s15, [r7, #12]
 800331a:	eeb1 7a67 	vneg.f32	s14, s15
 800331e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	edc3 7a04 	vstr	s15, [r3, #16]
    // 60 degree Sector determination
    svgq->Sector = 0;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	829a      	strh	r2, [r3, #20]
    if (svgq->Va > 0.0f) svgq->Sector += 2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	edd3 7a02 	vldr	s15, [r3, #8]
 8003338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800333c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003340:	dd06      	ble.n	8003350 <SVGEN_run+0x80>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	8a9b      	ldrh	r3, [r3, #20]
 8003346:	b29b      	uxth	r3, r3
 8003348:	3302      	adds	r3, #2
 800334a:	b29a      	uxth	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	829a      	strh	r2, [r3, #20]
    if (svgq->Vb > 0.0f) svgq->Sector += 4;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	edd3 7a03 	vldr	s15, [r3, #12]
 8003356:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800335a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335e:	dd06      	ble.n	800336e <SVGEN_run+0x9e>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	8a9b      	ldrh	r3, [r3, #20]
 8003364:	b29b      	uxth	r3, r3
 8003366:	3304      	adds	r3, #4
 8003368:	b29a      	uxth	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	829a      	strh	r2, [r3, #20]
    if (svgq->Vc > 0.0f) svgq->Sector += 1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	edd3 7a04 	vldr	s15, [r3, #16]
 8003374:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337c:	dc00      	bgt.n	8003380 <SVGEN_run+0xb0>
    // Sector 0: this is special case for (Ualpha,Ubeta) = (0,0)
}
 800337e:	e006      	b.n	800338e <SVGEN_run+0xbe>
    if (svgq->Vc > 0.0f) svgq->Sector += 1;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	8a9b      	ldrh	r3, [r3, #20]
 8003384:	b29b      	uxth	r3, r3
 8003386:	3301      	adds	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	829a      	strh	r2, [r3, #20]
}
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	3f5db3d7 	.word	0x3f5db3d7

080033a0 <trigo_sin_cosf>:
    .OutSize    = CORDIC_OUTSIZE_32BITS,
};
static CORDIC_ConfigTypeDef *cordic_currunt;

Result trigo_sin_cosf(float32_t theta, float32_t *sin, float32_t *cos)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b092      	sub	sp, #72	@ 0x48
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80033ac:	6079      	str	r1, [r7, #4]
 80033ae:	603a      	str	r2, [r7, #0]
    if (cordic_currunt != &cordic_cfg_sin_cos)
 80033b0:	4b3a      	ldr	r3, [pc, #232]	@ (800349c <trigo_sin_cosf+0xfc>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a3a      	ldr	r2, [pc, #232]	@ (80034a0 <trigo_sin_cosf+0x100>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d01a      	beq.n	80033f0 <trigo_sin_cosf+0x50>
    {
        cordic_currunt = &cordic_cfg_sin_cos;
 80033ba:	4b38      	ldr	r3, [pc, #224]	@ (800349c <trigo_sin_cosf+0xfc>)
 80033bc:	4a38      	ldr	r2, [pc, #224]	@ (80034a0 <trigo_sin_cosf+0x100>)
 80033be:	601a      	str	r2, [r3, #0]
        ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Configure(&hcordic, cordic_currunt));
 80033c0:	4b36      	ldr	r3, [pc, #216]	@ (800349c <trigo_sin_cosf+0xfc>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4619      	mov	r1, r3
 80033c6:	4837      	ldr	r0, [pc, #220]	@ (80034a4 <trigo_sin_cosf+0x104>)
 80033c8:	f001 fd8a 	bl	8004ee0 <HAL_CORDIC_Configure>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80033d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <trigo_sin_cosf+0x50>
 80033da:	f997 103f 	ldrsb.w	r1, [r7, #63]	@ 0x3f
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	461a      	mov	r2, r3
 80033e2:	2300      	movs	r3, #0
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	6053      	str	r3, [r2, #4]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	460a      	mov	r2, r1
 80033ec:	711a      	strb	r2, [r3, #4]
 80033ee:	e050      	b.n	8003492 <trigo_sin_cosf+0xf2>
    }
    int32_t in[2];
    in[0] = (int32_t)((wrap_m1_1pi(theta) / PI) * 2147483648.0f);
 80033f0:	ed97 0a02 	vldr	s0, [r7, #8]
 80033f4:	f7fe fbd2 	bl	8001b9c <wrap_m1_1pi>
 80033f8:	eeb0 7a40 	vmov.f32	s14, s0
 80033fc:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80034a8 <trigo_sin_cosf+0x108>
 8003400:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003404:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80034ac <trigo_sin_cosf+0x10c>
 8003408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800340c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003410:	ee17 3a90 	vmov	r3, s15
 8003414:	637b      	str	r3, [r7, #52]	@ 0x34
    in[1] = 0x7FFFFFFF;
 8003416:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800341a:	63bb      	str	r3, [r7, #56]	@ 0x38
    int32_t out[2];
    ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Calculate(&hcordic, in, out, 1, HAL_MAX_DELAY));
 800341c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003420:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8003424:	f04f 33ff 	mov.w	r3, #4294967295
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	2301      	movs	r3, #1
 800342c:	481d      	ldr	r0, [pc, #116]	@ (80034a4 <trigo_sin_cosf+0x104>)
 800342e:	f001 fd93 	bl	8004f58 <HAL_CORDIC_Calculate>
 8003432:	4603      	mov	r3, r0
 8003434:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8003438:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <trigo_sin_cosf+0xb6>
 8003440:	f997 103e 	ldrsb.w	r1, [r7, #62]	@ 0x3e
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	461a      	mov	r2, r3
 8003448:	2300      	movs	r3, #0
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	6053      	str	r3, [r2, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	460a      	mov	r2, r1
 8003452:	711a      	strb	r2, [r3, #4]
 8003454:	e01d      	b.n	8003492 <trigo_sin_cosf+0xf2>
    *sin = (float32_t)out[0] / 2147483648.0f;
 8003456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003458:	ee07 3a90 	vmov	s15, r3
 800345c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003460:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80034ac <trigo_sin_cosf+0x10c>
 8003464:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	edc3 7a00 	vstr	s15, [r3]
    *cos = (float32_t)out[1] / 2147483648.0f;
 800346e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003470:	ee07 3a90 	vmov	s15, r3
 8003474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003478:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80034ac <trigo_sin_cosf+0x10c>
 800347c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	edc3 7a00 	vstr	s15, [r3]
    return RESULT_OK(NULL);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	701a      	strb	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	605a      	str	r2, [r3, #4]
}
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	3740      	adds	r7, #64	@ 0x40
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20000960 	.word	0x20000960
 80034a0:	200001ac 	.word	0x200001ac
 80034a4:	20000348 	.word	0x20000348
 80034a8:	40490fdb 	.word	0x40490fdb
 80034ac:	4f000000 	.word	0x4f000000

080034b0 <trigo_atan>:

Result trigo_atan(float32_t x, float32_t y, float32_t *theta)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b098      	sub	sp, #96	@ 0x60
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80034bc:	edc7 0a01 	vstr	s1, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
    if (cordic_currunt != &cordic_cfg_atan)
 80034c2:	4b59      	ldr	r3, [pc, #356]	@ (8003628 <trigo_atan+0x178>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a59      	ldr	r2, [pc, #356]	@ (800362c <trigo_atan+0x17c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d01a      	beq.n	8003502 <trigo_atan+0x52>
    {
        cordic_currunt = &cordic_cfg_atan;
 80034cc:	4b56      	ldr	r3, [pc, #344]	@ (8003628 <trigo_atan+0x178>)
 80034ce:	4a57      	ldr	r2, [pc, #348]	@ (800362c <trigo_atan+0x17c>)
 80034d0:	601a      	str	r2, [r3, #0]
        ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Configure(&hcordic, cordic_currunt));
 80034d2:	4b55      	ldr	r3, [pc, #340]	@ (8003628 <trigo_atan+0x178>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4619      	mov	r1, r3
 80034d8:	4855      	ldr	r0, [pc, #340]	@ (8003630 <trigo_atan+0x180>)
 80034da:	f001 fd01 	bl	8004ee0 <HAL_CORDIC_Configure>
 80034de:	4603      	mov	r3, r0
 80034e0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80034e4:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <trigo_atan+0x52>
 80034ec:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	461a      	mov	r2, r3
 80034f4:	2300      	movs	r3, #0
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	6053      	str	r3, [r2, #4]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	460a      	mov	r2, r1
 80034fe:	711a      	strb	r2, [r3, #4]
 8003500:	e08e      	b.n	8003620 <trigo_atan+0x170>
    }
    float32_t ax = fast_fabsf(x);
 8003502:	ed97 0a02 	vldr	s0, [r7, #8]
 8003506:	f7fe fb9b 	bl	8001c40 <fast_fabsf>
 800350a:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
    float32_t ay = fast_fabsf(y);
 800350e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003512:	f7fe fb95 	bl	8001c40 <fast_fabsf>
 8003516:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    float32_t norm = (ax > ay) ? ax : ay;
 800351a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800351e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352a:	dd01      	ble.n	8003530 <trigo_atan+0x80>
 800352c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800352e:	e000      	b.n	8003532 <trigo_atan+0x82>
 8003530:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003532:	647b      	str	r3, [r7, #68]	@ 0x44
    if (norm == 0.0f) return RESULT_ERROR(RES_ERR_DIV_0);
 8003534:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003538:	eef5 7a40 	vcmp.f32	s15, #0.0
 800353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003540:	d108      	bne.n	8003554 <trigo_atan+0xa4>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	461a      	mov	r2, r3
 8003546:	2300      	movs	r3, #0
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	6053      	str	r3, [r2, #4]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	220b      	movs	r2, #11
 8003550:	711a      	strb	r2, [r3, #4]
 8003552:	e065      	b.n	8003620 <trigo_atan+0x170>
    x /= norm;
 8003554:	edd7 6a02 	vldr	s13, [r7, #8]
 8003558:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800355c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003560:	edc7 7a02 	vstr	s15, [r7, #8]
    y /= norm;
 8003564:	edd7 6a01 	vldr	s13, [r7, #4]
 8003568:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800356c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003570:	edc7 7a01 	vstr	s15, [r7, #4]
    int32_t in[2], out;
    in[0] = (int32_t)(x * 2147483648.0f);  
 8003574:	edd7 7a02 	vldr	s15, [r7, #8]
 8003578:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8003634 <trigo_atan+0x184>
 800357c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003584:	ee17 3a90 	vmov	r3, s15
 8003588:	63bb      	str	r3, [r7, #56]	@ 0x38
    in[1] = (int32_t)(y * 2147483648.0f);
 800358a:	edd7 7a01 	vldr	s15, [r7, #4]
 800358e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8003634 <trigo_atan+0x184>
 8003592:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003596:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800359a:	ee17 3a90 	vmov	r3, s15
 800359e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Calculate(&hcordic, in, &out, 1, HAL_MAX_DELAY));
 80035a0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80035a4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	2301      	movs	r3, #1
 80035b0:	481f      	ldr	r0, [pc, #124]	@ (8003630 <trigo_atan+0x180>)
 80035b2:	f001 fcd1 	bl	8004f58 <HAL_CORDIC_Calculate>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <trigo_atan+0x12a>
 80035c4:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	461a      	mov	r2, r3
 80035cc:	2300      	movs	r3, #0
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	6053      	str	r3, [r2, #4]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	460a      	mov	r2, r1
 80035d6:	711a      	strb	r2, [r3, #4]
 80035d8:	e022      	b.n	8003620 <trigo_atan+0x170>
    float32_t angle = (float32_t)out / 2147483648.0f; // [-π, π)
 80035da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035dc:	ee07 3a90 	vmov	s15, r3
 80035e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035e4:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8003634 <trigo_atan+0x184>
 80035e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035ec:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    if (angle < 0) angle += MUL_2_PI;
 80035f0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80035f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035fc:	d507      	bpl.n	800360e <trigo_atan+0x15e>
 80035fe:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003602:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003638 <trigo_atan+0x188>
 8003606:	ee77 7a87 	vadd.f32	s15, s15, s14
 800360a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    *theta = angle;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003612:	601a      	str	r2, [r3, #0]
    return RESULT_OK(NULL);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	605a      	str	r2, [r3, #4]
}
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	3758      	adds	r7, #88	@ 0x58
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20000960 	.word	0x20000960
 800362c:	200001c8 	.word	0x200001c8
 8003630:	20000348 	.word	0x20000348
 8003634:	4f000000 	.word	0x4f000000
 8003638:	40c90fdb 	.word	0x40c90fdb

0800363c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800363c:	480d      	ldr	r0, [pc, #52]	@ (8003674 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800363e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003640:	f7fd fd44 	bl	80010cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003644:	480c      	ldr	r0, [pc, #48]	@ (8003678 <LoopForever+0x6>)
  ldr r1, =_edata
 8003646:	490d      	ldr	r1, [pc, #52]	@ (800367c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003648:	4a0d      	ldr	r2, [pc, #52]	@ (8003680 <LoopForever+0xe>)
  movs r3, #0
 800364a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800364c:	e002      	b.n	8003654 <LoopCopyDataInit>

0800364e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800364e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003652:	3304      	adds	r3, #4

08003654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003658:	d3f9      	bcc.n	800364e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800365a:	4a0a      	ldr	r2, [pc, #40]	@ (8003684 <LoopForever+0x12>)
  ldr r4, =_ebss
 800365c:	4c0a      	ldr	r4, [pc, #40]	@ (8003688 <LoopForever+0x16>)
  movs r3, #0
 800365e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003660:	e001      	b.n	8003666 <LoopFillZerobss>

08003662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003664:	3204      	adds	r2, #4

08003666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003668:	d3fb      	bcc.n	8003662 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800366a:	f009 fa51 	bl	800cb10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800366e:	f7fd fb79 	bl	8000d64 <main>

08003672 <LoopForever>:

LoopForever:
    b LoopForever
 8003672:	e7fe      	b.n	8003672 <LoopForever>
  ldr   r0, =_estack
 8003674:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800367c:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8003680:	0800cda4 	.word	0x0800cda4
  ldr r2, =_sbss
 8003684:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8003688:	2000252c 	.word	0x2000252c

0800368c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800368c:	e7fe      	b.n	800368c <ADC1_2_IRQHandler>
	...

08003690 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 800369a:	4b16      	ldr	r3, [pc, #88]	@ (80036f4 <BSP_LED_Init+0x64>)
 800369c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369e:	4a15      	ldr	r2, [pc, #84]	@ (80036f4 <BSP_LED_Init+0x64>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036a6:	4b13      	ldr	r3, [pc, #76]	@ (80036f4 <BSP_LED_Init+0x64>)
 80036a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	60bb      	str	r3, [r7, #8]
 80036b0:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80036b2:	2320      	movs	r3, #32
 80036b4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80036b6:	2301      	movs	r3, #1
 80036b8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036be:	2303      	movs	r3, #3
 80036c0:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	4a0c      	ldr	r2, [pc, #48]	@ (80036f8 <BSP_LED_Init+0x68>)
 80036c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ca:	f107 020c 	add.w	r2, r7, #12
 80036ce:	4611      	mov	r1, r2
 80036d0:	4618      	mov	r0, r3
 80036d2:	f002 fd71 	bl	80061b8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	4a07      	ldr	r2, [pc, #28]	@ (80036f8 <BSP_LED_Init+0x68>)
 80036da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036de:	2120      	movs	r1, #32
 80036e0:	2200      	movs	r2, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f002 feea 	bl	80064bc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3720      	adds	r7, #32
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40021000 	.word	0x40021000
 80036f8:	200001e4 	.word	0x200001e4

080036fc <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	460a      	mov	r2, r1
 8003706:	71fb      	strb	r3, [r7, #7]
 8003708:	4613      	mov	r3, r2
 800370a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 800370c:	4b2c      	ldr	r3, [pc, #176]	@ (80037c0 <BSP_PB_Init+0xc4>)
 800370e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003710:	4a2b      	ldr	r2, [pc, #172]	@ (80037c0 <BSP_PB_Init+0xc4>)
 8003712:	f043 0304 	orr.w	r3, r3, #4
 8003716:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003718:	4b29      	ldr	r3, [pc, #164]	@ (80037c0 <BSP_PB_Init+0xc4>)
 800371a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003724:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003728:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800372a:	2302      	movs	r3, #2
 800372c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800372e:	2302      	movs	r3, #2
 8003730:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8003732:	79bb      	ldrb	r3, [r7, #6]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10c      	bne.n	8003752 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003738:	2300      	movs	r3, #0
 800373a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	4a21      	ldr	r2, [pc, #132]	@ (80037c4 <BSP_PB_Init+0xc8>)
 8003740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003744:	f107 020c 	add.w	r2, r7, #12
 8003748:	4611      	mov	r1, r2
 800374a:	4618      	mov	r0, r3
 800374c:	f002 fd34 	bl	80061b8 <HAL_GPIO_Init>
 8003750:	e031      	b.n	80037b6 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003752:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003756:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	4a1a      	ldr	r2, [pc, #104]	@ (80037c4 <BSP_PB_Init+0xc8>)
 800375c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003760:	f107 020c 	add.w	r2, r7, #12
 8003764:	4611      	mov	r1, r2
 8003766:	4618      	mov	r0, r3
 8003768:	f002 fd26 	bl	80061b8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4a15      	ldr	r2, [pc, #84]	@ (80037c8 <BSP_PB_Init+0xcc>)
 8003772:	441a      	add	r2, r3
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	4915      	ldr	r1, [pc, #84]	@ (80037cc <BSP_PB_Init+0xd0>)
 8003778:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800377c:	4619      	mov	r1, r3
 800377e:	4610      	mov	r0, r2
 8003780:	f002 f825 	bl	80057ce <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4a0f      	ldr	r2, [pc, #60]	@ (80037c8 <BSP_PB_Init+0xcc>)
 800378a:	1898      	adds	r0, r3, r2
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	4a10      	ldr	r2, [pc, #64]	@ (80037d0 <BSP_PB_Init+0xd4>)
 8003790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003794:	461a      	mov	r2, r3
 8003796:	2100      	movs	r1, #0
 8003798:	f001 fffc 	bl	8005794 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800379c:	2028      	movs	r0, #40	@ 0x28
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	4a0c      	ldr	r2, [pc, #48]	@ (80037d4 <BSP_PB_Init+0xd8>)
 80037a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a6:	2200      	movs	r2, #0
 80037a8:	4619      	mov	r1, r3
 80037aa:	f001 fd59 	bl	8005260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80037ae:	2328      	movs	r3, #40	@ 0x28
 80037b0:	4618      	mov	r0, r3
 80037b2:	f001 fd6f 	bl	8005294 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3720      	adds	r7, #32
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40021000 	.word	0x40021000
 80037c4:	200001e8 	.word	0x200001e8
 80037c8:	20000964 	.word	0x20000964
 80037cc:	0800cd68 	.word	0x0800cd68
 80037d0:	200001f0 	.word	0x200001f0
 80037d4:	200001f4 	.word	0x200001f4

080037d8 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	4a04      	ldr	r2, [pc, #16]	@ (80037f8 <BSP_PB_IRQHandler+0x20>)
 80037e8:	4413      	add	r3, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f002 f804 	bl	80057f8 <HAL_EXTI_IRQHandler>
}
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	20000964 	.word	0x20000964

080037fc <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
	...

08003814 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	6039      	str	r1, [r7, #0]
 800381e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d903      	bls.n	8003832 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800382a:	f06f 0301 	mvn.w	r3, #1
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	e018      	b.n	8003864 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	2294      	movs	r2, #148	@ 0x94
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	4a0d      	ldr	r2, [pc, #52]	@ (8003870 <BSP_COM_Init+0x5c>)
 800383c:	4413      	add	r3, r2
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f852 	bl	80038e8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	2294      	movs	r2, #148	@ 0x94
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	4a08      	ldr	r2, [pc, #32]	@ (8003870 <BSP_COM_Init+0x5c>)
 800384e:	4413      	add	r3, r2
 8003850:	6839      	ldr	r1, [r7, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f000 f80e 	bl	8003874 <MX_LPUART1_Init>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800385e:	f06f 0303 	mvn.w	r3, #3
 8003862:	e000      	b.n	8003866 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8003864:	68fb      	ldr	r3, [r7, #12]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	2000096c 	.word	0x2000096c

08003874 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800387e:	4b15      	ldr	r3, [pc, #84]	@ (80038d4 <MX_LPUART1_Init+0x60>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	220c      	movs	r2, #12
 8003892:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	895b      	ldrh	r3, [r3, #10]
 8003898:	461a      	mov	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	891b      	ldrh	r3, [r3, #8]
 80038aa:	461a      	mov	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	899b      	ldrh	r3, [r3, #12]
 80038b4:	461a      	mov	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80038c0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f005 fc2e 	bl	8009124 <HAL_UART_Init>
 80038c8:	4603      	mov	r3, r0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200001ec 	.word	0x200001ec

080038d8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80038dc:	2000      	movs	r0, #0
 80038de:	f7ff ff8d 	bl	80037fc <BSP_PB_Callback>
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	@ 0x28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80038f0:	4b22      	ldr	r3, [pc, #136]	@ (800397c <COM1_MspInit+0x94>)
 80038f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f4:	4a21      	ldr	r2, [pc, #132]	@ (800397c <COM1_MspInit+0x94>)
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038fc:	4b1f      	ldr	r3, [pc, #124]	@ (800397c <COM1_MspInit+0x94>)
 80038fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8003908:	4b1c      	ldr	r3, [pc, #112]	@ (800397c <COM1_MspInit+0x94>)
 800390a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390c:	4a1b      	ldr	r2, [pc, #108]	@ (800397c <COM1_MspInit+0x94>)
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003914:	4b19      	ldr	r3, [pc, #100]	@ (800397c <COM1_MspInit+0x94>)
 8003916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8003920:	4b16      	ldr	r3, [pc, #88]	@ (800397c <COM1_MspInit+0x94>)
 8003922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003924:	4a15      	ldr	r2, [pc, #84]	@ (800397c <COM1_MspInit+0x94>)
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800392c:	4b13      	ldr	r3, [pc, #76]	@ (800397c <COM1_MspInit+0x94>)
 800392e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8003938:	2304      	movs	r3, #4
 800393a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800393c:	2302      	movs	r3, #2
 800393e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003940:	2302      	movs	r3, #2
 8003942:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003944:	2301      	movs	r3, #1
 8003946:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8003948:	230c      	movs	r3, #12
 800394a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800394c:	f107 0314 	add.w	r3, r7, #20
 8003950:	4619      	mov	r1, r3
 8003952:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003956:	f002 fc2f 	bl	80061b8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800395a:	2308      	movs	r3, #8
 800395c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800395e:	2302      	movs	r3, #2
 8003960:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8003962:	230c      	movs	r3, #12
 8003964:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8003966:	f107 0314 	add.w	r3, r7, #20
 800396a:	4619      	mov	r1, r3
 800396c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003970:	f002 fc22 	bl	80061b8 <HAL_GPIO_Init>
}
 8003974:	bf00      	nop
 8003976:	3728      	adds	r7, #40	@ 0x28
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40021000 	.word	0x40021000

08003980 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800398a:	2003      	movs	r0, #3
 800398c:	f001 fc5d 	bl	800524a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003990:	200f      	movs	r0, #15
 8003992:	f7fd fab9 	bl	8000f08 <HAL_InitTick>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	71fb      	strb	r3, [r7, #7]
 80039a0:	e001      	b.n	80039a6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80039a2:	f7fd fa87 	bl	8000eb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039a6:	79fb      	ldrb	r3, [r7, #7]

}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039b4:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <HAL_IncTick+0x1c>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b05      	ldr	r3, [pc, #20]	@ (80039d0 <HAL_IncTick+0x20>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4413      	add	r3, r2
 80039be:	4a03      	ldr	r2, [pc, #12]	@ (80039cc <HAL_IncTick+0x1c>)
 80039c0:	6013      	str	r3, [r2, #0]
}
 80039c2:	bf00      	nop
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	20000a00 	.word	0x20000a00
 80039d0:	200001fc 	.word	0x200001fc

080039d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return uwTick;
 80039d8:	4b03      	ldr	r3, [pc, #12]	@ (80039e8 <HAL_GetTick+0x14>)
 80039da:	681b      	ldr	r3, [r3, #0]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20000a00 	.word	0x20000a00

080039ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	609a      	str	r2, [r3, #8]
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	609a      	str	r2, [r3, #8]
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	3360      	adds	r3, #96	@ 0x60
 8003a66:	461a      	mov	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4b08      	ldr	r3, [pc, #32]	@ (8003a98 <LL_ADC_SetOffset+0x44>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003a8c:	bf00      	nop
 8003a8e:	371c      	adds	r7, #28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	03fff000 	.word	0x03fff000

08003a9c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3360      	adds	r3, #96	@ 0x60
 8003aaa:	461a      	mov	r2, r3
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	3360      	adds	r3, #96	@ 0x60
 8003ad8:	461a      	mov	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003af2:	bf00      	nop
 8003af4:	371c      	adds	r7, #28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b087      	sub	sp, #28
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3360      	adds	r3, #96	@ 0x60
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003b28:	bf00      	nop
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3360      	adds	r3, #96	@ 0x60
 8003b44:	461a      	mov	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	615a      	str	r2, [r3, #20]
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b087      	sub	sp, #28
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3330      	adds	r3, #48	@ 0x30
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	4413      	add	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f003 031f 	and.w	r3, r3, #31
 8003be0:	211f      	movs	r1, #31
 8003be2:	fa01 f303 	lsl.w	r3, r1, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	401a      	ands	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	0e9b      	lsrs	r3, r3, #26
 8003bee:	f003 011f 	and.w	r1, r3, #31
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f003 031f 	and.w	r3, r3, #31
 8003bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c02:	bf00      	nop
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b087      	sub	sp, #28
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3314      	adds	r3, #20
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	0e5b      	lsrs	r3, r3, #25
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	4413      	add	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	0d1b      	lsrs	r3, r3, #20
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	2107      	movs	r1, #7
 8003c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	401a      	ands	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	0d1b      	lsrs	r3, r3, #20
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c52:	431a      	orrs	r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c58:	bf00      	nop
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	401a      	ands	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f003 0318 	and.w	r3, r3, #24
 8003c86:	4908      	ldr	r1, [pc, #32]	@ (8003ca8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c88:	40d9      	lsrs	r1, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	400b      	ands	r3, r1
 8003c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c92:	431a      	orrs	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003c9a:	bf00      	nop
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	0007ffff 	.word	0x0007ffff

08003cac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 031f 	and.w	r3, r3, #31
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003cd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6093      	str	r3, [r2, #8]
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d00:	d101      	bne.n	8003d06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003d24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d50:	d101      	bne.n	8003d56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d78:	f043 0201 	orr.w	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <LL_ADC_IsEnabled+0x18>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <LL_ADC_IsEnabled+0x1a>
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003dc2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003dc6:	f043 0204 	orr.w	r2, r3, #4
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d101      	bne.n	8003df2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d101      	bne.n	8003e18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
	...

08003e28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e28:	b590      	push	{r4, r7, lr}
 8003e2a:	b089      	sub	sp, #36	@ 0x24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e167      	b.n	8004112 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d109      	bne.n	8003e64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7fc fc0d 	bl	8000670 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff ff3f 	bl	8003cec <LL_ADC_IsDeepPowerDownEnabled>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d004      	beq.n	8003e7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff ff25 	bl	8003cc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff ff5a 	bl	8003d3c <LL_ADC_IsInternalRegulatorEnabled>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d115      	bne.n	8003eba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff ff3e 	bl	8003d14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e98:	4ba0      	ldr	r3, [pc, #640]	@ (800411c <HAL_ADC_Init+0x2f4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	099b      	lsrs	r3, r3, #6
 8003e9e:	4aa0      	ldr	r2, [pc, #640]	@ (8004120 <HAL_ADC_Init+0x2f8>)
 8003ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea4:	099b      	lsrs	r3, r3, #6
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003eac:	e002      	b.n	8003eb4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f9      	bne.n	8003eae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff ff3c 	bl	8003d3c <LL_ADC_IsInternalRegulatorEnabled>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10d      	bne.n	8003ee6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ece:	f043 0210 	orr.w	r2, r3, #16
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eda:	f043 0201 	orr.w	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff ff75 	bl	8003dda <LL_ADC_REG_IsConversionOngoing>
 8003ef0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef6:	f003 0310 	and.w	r3, r3, #16
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f040 8100 	bne.w	8004100 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f040 80fc 	bne.w	8004100 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003f10:	f043 0202 	orr.w	r2, r3, #2
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff ff35 	bl	8003d8c <LL_ADC_IsEnabled>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d111      	bne.n	8003f4c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f28:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003f2c:	f7ff ff2e 	bl	8003d8c <LL_ADC_IsEnabled>
 8003f30:	4604      	mov	r4, r0
 8003f32:	487c      	ldr	r0, [pc, #496]	@ (8004124 <HAL_ADC_Init+0x2fc>)
 8003f34:	f7ff ff2a 	bl	8003d8c <LL_ADC_IsEnabled>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	4323      	orrs	r3, r4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d105      	bne.n	8003f4c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4619      	mov	r1, r3
 8003f46:	4878      	ldr	r0, [pc, #480]	@ (8004128 <HAL_ADC_Init+0x300>)
 8003f48:	f7ff fd50 	bl	80039ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	7f5b      	ldrb	r3, [r3, #29]
 8003f50:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f56:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003f5c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003f62:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f6a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d106      	bne.n	8003f88 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	045b      	lsls	r3, r3, #17
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f94:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	4b60      	ldr	r3, [pc, #384]	@ (800412c <HAL_ADC_Init+0x304>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	69b9      	ldr	r1, [r7, #24]
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff ff14 	bl	8003e00 <LL_ADC_INJ_IsConversionOngoing>
 8003fd8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d16d      	bne.n	80040bc <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d16a      	bne.n	80040bc <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fea:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ff2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004002:	f023 0302 	bic.w	r3, r3, #2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	69b9      	ldr	r1, [r7, #24]
 800400c:	430b      	orrs	r3, r1
 800400e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d017      	beq.n	8004048 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004026:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004030:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004034:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6911      	ldr	r1, [r2, #16]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	430b      	orrs	r3, r1
 8004042:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004046:	e013      	b.n	8004070 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004056:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004068:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800406c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004076:	2b01      	cmp	r3, #1
 8004078:	d118      	bne.n	80040ac <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004084:	f023 0304 	bic.w	r3, r3, #4
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004090:	4311      	orrs	r1, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004096:	4311      	orrs	r1, r2
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800409c:	430a      	orrs	r2, r1
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	611a      	str	r2, [r3, #16]
 80040aa:	e007      	b.n	80040bc <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0201 	bic.w	r2, r2, #1
 80040ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d10c      	bne.n	80040de <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ca:	f023 010f 	bic.w	r1, r3, #15
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	1e5a      	subs	r2, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	631a      	str	r2, [r3, #48]	@ 0x30
 80040dc:	e007      	b.n	80040ee <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 020f 	bic.w	r2, r2, #15
 80040ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f2:	f023 0303 	bic.w	r3, r3, #3
 80040f6:	f043 0201 	orr.w	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040fe:	e007      	b.n	8004110 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004104:	f043 0210 	orr.w	r2, r3, #16
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004110:	7ffb      	ldrb	r3, [r7, #31]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3724      	adds	r7, #36	@ 0x24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd90      	pop	{r4, r7, pc}
 800411a:	bf00      	nop
 800411c:	20000000 	.word	0x20000000
 8004120:	053e2d63 	.word	0x053e2d63
 8004124:	50000100 	.word	0x50000100
 8004128:	50000300 	.word	0x50000300
 800412c:	fff04007 	.word	0xfff04007

08004130 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800413c:	4851      	ldr	r0, [pc, #324]	@ (8004284 <HAL_ADC_Start_DMA+0x154>)
 800413e:	f7ff fdb5 	bl	8003cac <LL_ADC_GetMultimode>
 8004142:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff fe46 	bl	8003dda <LL_ADC_REG_IsConversionOngoing>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	f040 808f 	bne.w	8004274 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_ADC_Start_DMA+0x34>
 8004160:	2302      	movs	r3, #2
 8004162:	e08a      	b.n	800427a <HAL_ADC_Start_DMA+0x14a>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	2b05      	cmp	r3, #5
 8004176:	d002      	beq.n	800417e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b09      	cmp	r3, #9
 800417c:	d173      	bne.n	8004266 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 fc98 	bl	8004ab4 <ADC_Enable>
 8004184:	4603      	mov	r3, r0
 8004186:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d166      	bne.n	800425c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004192:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004196:	f023 0301 	bic.w	r3, r3, #1
 800419a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a38      	ldr	r2, [pc, #224]	@ (8004288 <HAL_ADC_Start_DMA+0x158>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d002      	beq.n	80041b2 <HAL_ADC_Start_DMA+0x82>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	e001      	b.n	80041b6 <HAL_ADC_Start_DMA+0x86>
 80041b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	6812      	ldr	r2, [r2, #0]
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d002      	beq.n	80041c4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d105      	bne.n	80041d0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d006      	beq.n	80041ea <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e0:	f023 0206 	bic.w	r2, r3, #6
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	661a      	str	r2, [r3, #96]	@ 0x60
 80041e8:	e002      	b.n	80041f0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f4:	4a25      	ldr	r2, [pc, #148]	@ (800428c <HAL_ADC_Start_DMA+0x15c>)
 80041f6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fc:	4a24      	ldr	r2, [pc, #144]	@ (8004290 <HAL_ADC_Start_DMA+0x160>)
 80041fe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004204:	4a23      	ldr	r2, [pc, #140]	@ (8004294 <HAL_ADC_Start_DMA+0x164>)
 8004206:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	221c      	movs	r2, #28
 800420e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0210 	orr.w	r2, r2, #16
 8004226:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3340      	adds	r3, #64	@ 0x40
 8004242:	4619      	mov	r1, r3
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f001 f8da 	bl	8005400 <HAL_DMA_Start_IT>
 800424c:	4603      	mov	r3, r0
 800424e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fdac 	bl	8003db2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800425a:	e00d      	b.n	8004278 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004264:	e008      	b.n	8004278 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004272:	e001      	b.n	8004278 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004274:	2302      	movs	r3, #2
 8004276:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004278:	7dfb      	ldrb	r3, [r7, #23]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	50000300 	.word	0x50000300
 8004288:	50000100 	.word	0x50000100
 800428c:	08004bc1 	.word	0x08004bc1
 8004290:	08004c99 	.word	0x08004c99
 8004294:	08004cb5 	.word	0x08004cb5

08004298 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b0b6      	sub	sp, #216	@ 0xd8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x22>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e3c8      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x7b4>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fd69 	bl	8003dda <LL_ADC_REG_IsConversionOngoing>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	f040 83ad 	bne.w	8004a6a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	6859      	ldr	r1, [r3, #4]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	f7ff fc4a 	bl	8003bb6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff fd57 	bl	8003dda <LL_ADC_REG_IsConversionOngoing>
 800432c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff fd63 	bl	8003e00 <LL_ADC_INJ_IsConversionOngoing>
 800433a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800433e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004342:	2b00      	cmp	r3, #0
 8004344:	f040 81d9 	bne.w	80046fa <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004348:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800434c:	2b00      	cmp	r3, #0
 800434e:	f040 81d4 	bne.w	80046fa <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800435a:	d10f      	bne.n	800437c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2200      	movs	r2, #0
 8004366:	4619      	mov	r1, r3
 8004368:	f7ff fc51 	bl	8003c0e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fbf8 	bl	8003b6a <LL_ADC_SetSamplingTimeCommonConfig>
 800437a:	e00e      	b.n	800439a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	6819      	ldr	r1, [r3, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	461a      	mov	r2, r3
 800438a:	f7ff fc40 	bl	8003c0e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2100      	movs	r1, #0
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff fbe8 	bl	8003b6a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	695a      	ldr	r2, [r3, #20]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	08db      	lsrs	r3, r3, #3
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d022      	beq.n	8004402 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	6919      	ldr	r1, [r3, #16]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80043cc:	f7ff fb42 	bl	8003a54 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	6919      	ldr	r1, [r3, #16]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	461a      	mov	r2, r3
 80043de:	f7ff fb8e 	bl	8003afe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d102      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x124>
 80043f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043f6:	e000      	b.n	80043fa <HAL_ADC_ConfigChannel+0x126>
 80043f8:	2300      	movs	r3, #0
 80043fa:	461a      	mov	r2, r3
 80043fc:	f7ff fb9a 	bl	8003b34 <LL_ADC_SetOffsetSaturation>
 8004400:	e17b      	b.n	80046fa <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2100      	movs	r1, #0
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff fb47 	bl	8003a9c <LL_ADC_GetOffsetChannel>
 800440e:	4603      	mov	r3, r0
 8004410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10a      	bne.n	800442e <HAL_ADC_ConfigChannel+0x15a>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2100      	movs	r1, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff fb3c 	bl	8003a9c <LL_ADC_GetOffsetChannel>
 8004424:	4603      	mov	r3, r0
 8004426:	0e9b      	lsrs	r3, r3, #26
 8004428:	f003 021f 	and.w	r2, r3, #31
 800442c:	e01e      	b.n	800446c <HAL_ADC_ConfigChannel+0x198>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2100      	movs	r1, #0
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff fb31 	bl	8003a9c <LL_ADC_GetOffsetChannel>
 800443a:	4603      	mov	r3, r0
 800443c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004440:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004444:	fa93 f3a3 	rbit	r3, r3
 8004448:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800444c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004450:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004454:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800445c:	2320      	movs	r3, #32
 800445e:	e004      	b.n	800446a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004460:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004464:	fab3 f383 	clz	r3, r3
 8004468:	b2db      	uxtb	r3, r3
 800446a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004474:	2b00      	cmp	r3, #0
 8004476:	d105      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x1b0>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	0e9b      	lsrs	r3, r3, #26
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	e018      	b.n	80044b6 <HAL_ADC_ConfigChannel+0x1e2>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004490:	fa93 f3a3 	rbit	r3, r3
 8004494:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004498:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800449c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80044a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80044a8:	2320      	movs	r3, #32
 80044aa:	e004      	b.n	80044b6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80044ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80044b0:	fab3 f383 	clz	r3, r3
 80044b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d106      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2200      	movs	r2, #0
 80044c0:	2100      	movs	r1, #0
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fb00 	bl	8003ac8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2101      	movs	r1, #1
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff fae4 	bl	8003a9c <LL_ADC_GetOffsetChannel>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x220>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2101      	movs	r1, #1
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff fad9 	bl	8003a9c <LL_ADC_GetOffsetChannel>
 80044ea:	4603      	mov	r3, r0
 80044ec:	0e9b      	lsrs	r3, r3, #26
 80044ee:	f003 021f 	and.w	r2, r3, #31
 80044f2:	e01e      	b.n	8004532 <HAL_ADC_ConfigChannel+0x25e>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2101      	movs	r1, #1
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff face 	bl	8003a9c <LL_ADC_GetOffsetChannel>
 8004500:	4603      	mov	r3, r0
 8004502:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004506:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800450a:	fa93 f3a3 	rbit	r3, r3
 800450e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004516:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800451a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004522:	2320      	movs	r3, #32
 8004524:	e004      	b.n	8004530 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004526:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800452a:	fab3 f383 	clz	r3, r3
 800452e:	b2db      	uxtb	r3, r3
 8004530:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800453a:	2b00      	cmp	r3, #0
 800453c:	d105      	bne.n	800454a <HAL_ADC_ConfigChannel+0x276>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	0e9b      	lsrs	r3, r3, #26
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	e018      	b.n	800457c <HAL_ADC_ConfigChannel+0x2a8>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004556:	fa93 f3a3 	rbit	r3, r3
 800455a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800455e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004562:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004566:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800456e:	2320      	movs	r3, #32
 8004570:	e004      	b.n	800457c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004572:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004576:	fab3 f383 	clz	r3, r3
 800457a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800457c:	429a      	cmp	r2, r3
 800457e:	d106      	bne.n	800458e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2200      	movs	r2, #0
 8004586:	2101      	movs	r1, #1
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff fa9d 	bl	8003ac8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2102      	movs	r1, #2
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff fa81 	bl	8003a9c <LL_ADC_GetOffsetChannel>
 800459a:	4603      	mov	r3, r0
 800459c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <HAL_ADC_ConfigChannel+0x2e6>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2102      	movs	r1, #2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff fa76 	bl	8003a9c <LL_ADC_GetOffsetChannel>
 80045b0:	4603      	mov	r3, r0
 80045b2:	0e9b      	lsrs	r3, r3, #26
 80045b4:	f003 021f 	and.w	r2, r3, #31
 80045b8:	e01e      	b.n	80045f8 <HAL_ADC_ConfigChannel+0x324>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2102      	movs	r1, #2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff fa6b 	bl	8003a9c <LL_ADC_GetOffsetChannel>
 80045c6:	4603      	mov	r3, r0
 80045c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045d0:	fa93 f3a3 	rbit	r3, r3
 80045d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80045d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80045e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80045e8:	2320      	movs	r3, #32
 80045ea:	e004      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80045ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045f0:	fab3 f383 	clz	r3, r3
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <HAL_ADC_ConfigChannel+0x33c>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	0e9b      	lsrs	r3, r3, #26
 800460a:	f003 031f 	and.w	r3, r3, #31
 800460e:	e016      	b.n	800463e <HAL_ADC_ConfigChannel+0x36a>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004618:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800461c:	fa93 f3a3 	rbit	r3, r3
 8004620:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004622:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004624:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004628:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004630:	2320      	movs	r3, #32
 8004632:	e004      	b.n	800463e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004634:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004638:	fab3 f383 	clz	r3, r3
 800463c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800463e:	429a      	cmp	r2, r3
 8004640:	d106      	bne.n	8004650 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2200      	movs	r2, #0
 8004648:	2102      	movs	r1, #2
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff fa3c 	bl	8003ac8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2103      	movs	r1, #3
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff fa20 	bl	8003a9c <LL_ADC_GetOffsetChannel>
 800465c:	4603      	mov	r3, r0
 800465e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10a      	bne.n	800467c <HAL_ADC_ConfigChannel+0x3a8>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2103      	movs	r1, #3
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff fa15 	bl	8003a9c <LL_ADC_GetOffsetChannel>
 8004672:	4603      	mov	r3, r0
 8004674:	0e9b      	lsrs	r3, r3, #26
 8004676:	f003 021f 	and.w	r2, r3, #31
 800467a:	e017      	b.n	80046ac <HAL_ADC_ConfigChannel+0x3d8>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2103      	movs	r1, #3
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff fa0a 	bl	8003a9c <LL_ADC_GetOffsetChannel>
 8004688:	4603      	mov	r3, r0
 800468a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800468e:	fa93 f3a3 	rbit	r3, r3
 8004692:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004694:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004696:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004698:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800469e:	2320      	movs	r3, #32
 80046a0:	e003      	b.n	80046aa <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80046a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046a4:	fab3 f383 	clz	r3, r3
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d105      	bne.n	80046c4 <HAL_ADC_ConfigChannel+0x3f0>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	0e9b      	lsrs	r3, r3, #26
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	e011      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x414>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046cc:	fa93 f3a3 	rbit	r3, r3
 80046d0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80046d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80046d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80046dc:	2320      	movs	r3, #32
 80046de:	e003      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80046e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046e2:	fab3 f383 	clz	r3, r3
 80046e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d106      	bne.n	80046fa <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2200      	movs	r2, #0
 80046f2:	2103      	movs	r1, #3
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff f9e7 	bl	8003ac8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff fb44 	bl	8003d8c <LL_ADC_IsEnabled>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	f040 8140 	bne.w	800498c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	6819      	ldr	r1, [r3, #0]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	461a      	mov	r2, r3
 800471a:	f7ff faa3 	bl	8003c64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	4a8f      	ldr	r2, [pc, #572]	@ (8004960 <HAL_ADC_ConfigChannel+0x68c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	f040 8131 	bne.w	800498c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10b      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x47e>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	0e9b      	lsrs	r3, r3, #26
 8004740:	3301      	adds	r3, #1
 8004742:	f003 031f 	and.w	r3, r3, #31
 8004746:	2b09      	cmp	r3, #9
 8004748:	bf94      	ite	ls
 800474a:	2301      	movls	r3, #1
 800474c:	2300      	movhi	r3, #0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	e019      	b.n	8004786 <HAL_ADC_ConfigChannel+0x4b2>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004758:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800475a:	fa93 f3a3 	rbit	r3, r3
 800475e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004760:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004762:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004764:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800476a:	2320      	movs	r3, #32
 800476c:	e003      	b.n	8004776 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800476e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004770:	fab3 f383 	clz	r3, r3
 8004774:	b2db      	uxtb	r3, r3
 8004776:	3301      	adds	r3, #1
 8004778:	f003 031f 	and.w	r3, r3, #31
 800477c:	2b09      	cmp	r3, #9
 800477e:	bf94      	ite	ls
 8004780:	2301      	movls	r3, #1
 8004782:	2300      	movhi	r3, #0
 8004784:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004786:	2b00      	cmp	r3, #0
 8004788:	d079      	beq.n	800487e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004792:	2b00      	cmp	r3, #0
 8004794:	d107      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x4d2>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	0e9b      	lsrs	r3, r3, #26
 800479c:	3301      	adds	r3, #1
 800479e:	069b      	lsls	r3, r3, #26
 80047a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047a4:	e015      	b.n	80047d2 <HAL_ADC_ConfigChannel+0x4fe>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047ae:	fa93 f3a3 	rbit	r3, r3
 80047b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80047b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047b6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80047b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80047be:	2320      	movs	r3, #32
 80047c0:	e003      	b.n	80047ca <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80047c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c4:	fab3 f383 	clz	r3, r3
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	3301      	adds	r3, #1
 80047cc:	069b      	lsls	r3, r3, #26
 80047ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d109      	bne.n	80047f2 <HAL_ADC_ConfigChannel+0x51e>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	0e9b      	lsrs	r3, r3, #26
 80047e4:	3301      	adds	r3, #1
 80047e6:	f003 031f 	and.w	r3, r3, #31
 80047ea:	2101      	movs	r1, #1
 80047ec:	fa01 f303 	lsl.w	r3, r1, r3
 80047f0:	e017      	b.n	8004822 <HAL_ADC_ConfigChannel+0x54e>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047fa:	fa93 f3a3 	rbit	r3, r3
 80047fe:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004800:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004802:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004804:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800480a:	2320      	movs	r3, #32
 800480c:	e003      	b.n	8004816 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800480e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004810:	fab3 f383 	clz	r3, r3
 8004814:	b2db      	uxtb	r3, r3
 8004816:	3301      	adds	r3, #1
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	2101      	movs	r1, #1
 800481e:	fa01 f303 	lsl.w	r3, r1, r3
 8004822:	ea42 0103 	orr.w	r1, r2, r3
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <HAL_ADC_ConfigChannel+0x574>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	0e9b      	lsrs	r3, r3, #26
 8004838:	3301      	adds	r3, #1
 800483a:	f003 021f 	and.w	r2, r3, #31
 800483e:	4613      	mov	r3, r2
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	4413      	add	r3, r2
 8004844:	051b      	lsls	r3, r3, #20
 8004846:	e018      	b.n	800487a <HAL_ADC_ConfigChannel+0x5a6>
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004850:	fa93 f3a3 	rbit	r3, r3
 8004854:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004858:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800485a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004860:	2320      	movs	r3, #32
 8004862:	e003      	b.n	800486c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004866:	fab3 f383 	clz	r3, r3
 800486a:	b2db      	uxtb	r3, r3
 800486c:	3301      	adds	r3, #1
 800486e:	f003 021f 	and.w	r2, r3, #31
 8004872:	4613      	mov	r3, r2
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	4413      	add	r3, r2
 8004878:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800487a:	430b      	orrs	r3, r1
 800487c:	e081      	b.n	8004982 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004886:	2b00      	cmp	r3, #0
 8004888:	d107      	bne.n	800489a <HAL_ADC_ConfigChannel+0x5c6>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	0e9b      	lsrs	r3, r3, #26
 8004890:	3301      	adds	r3, #1
 8004892:	069b      	lsls	r3, r3, #26
 8004894:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004898:	e015      	b.n	80048c6 <HAL_ADC_ConfigChannel+0x5f2>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a2:	fa93 f3a3 	rbit	r3, r3
 80048a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80048a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048aa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80048ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80048b2:	2320      	movs	r3, #32
 80048b4:	e003      	b.n	80048be <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80048b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b8:	fab3 f383 	clz	r3, r3
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	3301      	adds	r3, #1
 80048c0:	069b      	lsls	r3, r3, #26
 80048c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d109      	bne.n	80048e6 <HAL_ADC_ConfigChannel+0x612>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	0e9b      	lsrs	r3, r3, #26
 80048d8:	3301      	adds	r3, #1
 80048da:	f003 031f 	and.w	r3, r3, #31
 80048de:	2101      	movs	r1, #1
 80048e0:	fa01 f303 	lsl.w	r3, r1, r3
 80048e4:	e017      	b.n	8004916 <HAL_ADC_ConfigChannel+0x642>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	fa93 f3a3 	rbit	r3, r3
 80048f2:	61fb      	str	r3, [r7, #28]
  return result;
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80048f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80048fe:	2320      	movs	r3, #32
 8004900:	e003      	b.n	800490a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	fab3 f383 	clz	r3, r3
 8004908:	b2db      	uxtb	r3, r3
 800490a:	3301      	adds	r3, #1
 800490c:	f003 031f 	and.w	r3, r3, #31
 8004910:	2101      	movs	r1, #1
 8004912:	fa01 f303 	lsl.w	r3, r1, r3
 8004916:	ea42 0103 	orr.w	r1, r2, r3
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10d      	bne.n	8004942 <HAL_ADC_ConfigChannel+0x66e>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	0e9b      	lsrs	r3, r3, #26
 800492c:	3301      	adds	r3, #1
 800492e:	f003 021f 	and.w	r2, r3, #31
 8004932:	4613      	mov	r3, r2
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	4413      	add	r3, r2
 8004938:	3b1e      	subs	r3, #30
 800493a:	051b      	lsls	r3, r3, #20
 800493c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004940:	e01e      	b.n	8004980 <HAL_ADC_ConfigChannel+0x6ac>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	fa93 f3a3 	rbit	r3, r3
 800494e:	613b      	str	r3, [r7, #16]
  return result;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d104      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800495a:	2320      	movs	r3, #32
 800495c:	e006      	b.n	800496c <HAL_ADC_ConfigChannel+0x698>
 800495e:	bf00      	nop
 8004960:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	fab3 f383 	clz	r3, r3
 800496a:	b2db      	uxtb	r3, r3
 800496c:	3301      	adds	r3, #1
 800496e:	f003 021f 	and.w	r2, r3, #31
 8004972:	4613      	mov	r3, r2
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	4413      	add	r3, r2
 8004978:	3b1e      	subs	r3, #30
 800497a:	051b      	lsls	r3, r3, #20
 800497c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004980:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004986:	4619      	mov	r1, r3
 8004988:	f7ff f941 	bl	8003c0e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	4b3f      	ldr	r3, [pc, #252]	@ (8004a90 <HAL_ADC_ConfigChannel+0x7bc>)
 8004992:	4013      	ands	r3, r2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d071      	beq.n	8004a7c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004998:	483e      	ldr	r0, [pc, #248]	@ (8004a94 <HAL_ADC_ConfigChannel+0x7c0>)
 800499a:	f7ff f84d 	bl	8003a38 <LL_ADC_GetCommonPathInternalCh>
 800499e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a3c      	ldr	r2, [pc, #240]	@ (8004a98 <HAL_ADC_ConfigChannel+0x7c4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d004      	beq.n	80049b6 <HAL_ADC_ConfigChannel+0x6e2>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a3a      	ldr	r2, [pc, #232]	@ (8004a9c <HAL_ADC_ConfigChannel+0x7c8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d127      	bne.n	8004a06 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d121      	bne.n	8004a06 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049ca:	d157      	bne.n	8004a7c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049d4:	4619      	mov	r1, r3
 80049d6:	482f      	ldr	r0, [pc, #188]	@ (8004a94 <HAL_ADC_ConfigChannel+0x7c0>)
 80049d8:	f7ff f81b 	bl	8003a12 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049dc:	4b30      	ldr	r3, [pc, #192]	@ (8004aa0 <HAL_ADC_ConfigChannel+0x7cc>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	099b      	lsrs	r3, r3, #6
 80049e2:	4a30      	ldr	r2, [pc, #192]	@ (8004aa4 <HAL_ADC_ConfigChannel+0x7d0>)
 80049e4:	fba2 2303 	umull	r2, r3, r2, r3
 80049e8:	099b      	lsrs	r3, r3, #6
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	4613      	mov	r3, r2
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049f6:	e002      	b.n	80049fe <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1f9      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a04:	e03a      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a27      	ldr	r2, [pc, #156]	@ (8004aa8 <HAL_ADC_ConfigChannel+0x7d4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d113      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10d      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a22      	ldr	r2, [pc, #136]	@ (8004aac <HAL_ADC_ConfigChannel+0x7d8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d02a      	beq.n	8004a7c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4818      	ldr	r0, [pc, #96]	@ (8004a94 <HAL_ADC_ConfigChannel+0x7c0>)
 8004a32:	f7fe ffee 	bl	8003a12 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a36:	e021      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab0 <HAL_ADC_ConfigChannel+0x7dc>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d11c      	bne.n	8004a7c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d116      	bne.n	8004a7c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a16      	ldr	r2, [pc, #88]	@ (8004aac <HAL_ADC_ConfigChannel+0x7d8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d011      	beq.n	8004a7c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a60:	4619      	mov	r1, r3
 8004a62:	480c      	ldr	r0, [pc, #48]	@ (8004a94 <HAL_ADC_ConfigChannel+0x7c0>)
 8004a64:	f7fe ffd5 	bl	8003a12 <LL_ADC_SetCommonPathInternalCh>
 8004a68:	e008      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6e:	f043 0220 	orr.w	r2, r3, #32
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a84:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	37d8      	adds	r7, #216	@ 0xd8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	80080000 	.word	0x80080000
 8004a94:	50000300 	.word	0x50000300
 8004a98:	c3210000 	.word	0xc3210000
 8004a9c:	90c00010 	.word	0x90c00010
 8004aa0:	20000000 	.word	0x20000000
 8004aa4:	053e2d63 	.word	0x053e2d63
 8004aa8:	c7520000 	.word	0xc7520000
 8004aac:	50000100 	.word	0x50000100
 8004ab0:	cb840000 	.word	0xcb840000

08004ab4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004abc:	2300      	movs	r3, #0
 8004abe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff f961 	bl	8003d8c <LL_ADC_IsEnabled>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d169      	bne.n	8004ba4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	4b36      	ldr	r3, [pc, #216]	@ (8004bb0 <ADC_Enable+0xfc>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00d      	beq.n	8004afa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae2:	f043 0210 	orr.w	r2, r3, #16
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aee:	f043 0201 	orr.w	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e055      	b.n	8004ba6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff f930 	bl	8003d64 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004b04:	482b      	ldr	r0, [pc, #172]	@ (8004bb4 <ADC_Enable+0x100>)
 8004b06:	f7fe ff97 	bl	8003a38 <LL_ADC_GetCommonPathInternalCh>
 8004b0a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004b0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d013      	beq.n	8004b3c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b14:	4b28      	ldr	r3, [pc, #160]	@ (8004bb8 <ADC_Enable+0x104>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	099b      	lsrs	r3, r3, #6
 8004b1a:	4a28      	ldr	r2, [pc, #160]	@ (8004bbc <ADC_Enable+0x108>)
 8004b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b20:	099b      	lsrs	r3, r3, #6
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	4613      	mov	r3, r2
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	4413      	add	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b2e:	e002      	b.n	8004b36 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f9      	bne.n	8004b30 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004b3c:	f7fe ff4a 	bl	80039d4 <HAL_GetTick>
 8004b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b42:	e028      	b.n	8004b96 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff f91f 	bl	8003d8c <LL_ADC_IsEnabled>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d104      	bne.n	8004b5e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff f903 	bl	8003d64 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b5e:	f7fe ff39 	bl	80039d4 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d914      	bls.n	8004b96 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d00d      	beq.n	8004b96 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b7e:	f043 0210 	orr.w	r2, r3, #16
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b8a:	f043 0201 	orr.w	r2, r3, #1
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e007      	b.n	8004ba6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d1cf      	bne.n	8004b44 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	8000003f 	.word	0x8000003f
 8004bb4:	50000300 	.word	0x50000300
 8004bb8:	20000000 	.word	0x20000000
 8004bbc:	053e2d63 	.word	0x053e2d63

08004bc0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d14b      	bne.n	8004c72 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bde:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d021      	beq.n	8004c38 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fe ffc9 	bl	8003b90 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d032      	beq.n	8004c6a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d12b      	bne.n	8004c6a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d11f      	bne.n	8004c6a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2e:	f043 0201 	orr.w	r2, r3, #1
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c36:	e018      	b.n	8004c6a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d111      	bne.n	8004c6a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d105      	bne.n	8004c6a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c62:	f043 0201 	orr.w	r2, r3, #1
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f7ff fb14 	bl	8004298 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c70:	e00e      	b.n	8004c90 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c76:	f003 0310 	and.w	r3, r3, #16
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f7ff fb1e 	bl	80042c0 <HAL_ADC_ErrorCallback>
}
 8004c84:	e004      	b.n	8004c90 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	4798      	blx	r3
}
 8004c90:	bf00      	nop
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f7ff fb00 	bl	80042ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cac:	bf00      	nop
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd2:	f043 0204 	orr.w	r2, r3, #4
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f7ff faf0 	bl	80042c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <LL_ADC_IsEnabled>:
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <LL_ADC_IsEnabled+0x18>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <LL_ADC_IsEnabled+0x1a>
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <LL_ADC_REG_IsConversionOngoing>:
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d101      	bne.n	8004d26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e000      	b.n	8004d28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004d34:	b590      	push	{r4, r7, lr}
 8004d36:	b0a1      	sub	sp, #132	@ 0x84
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d101      	bne.n	8004d52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	e08b      	b.n	8004e6a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d6a:	d102      	bne.n	8004d72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004d6c:	4b41      	ldr	r3, [pc, #260]	@ (8004e74 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	e001      	b.n	8004d76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004d72:	2300      	movs	r3, #0
 8004d74:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10b      	bne.n	8004d94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d80:	f043 0220 	orr.w	r2, r3, #32
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e06a      	b.n	8004e6a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff ffb9 	bl	8004d0e <LL_ADC_REG_IsConversionOngoing>
 8004d9c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff ffb3 	bl	8004d0e <LL_ADC_REG_IsConversionOngoing>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d14c      	bne.n	8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004dae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d149      	bne.n	8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004db4:	4b30      	ldr	r3, [pc, #192]	@ (8004e78 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004db6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d028      	beq.n	8004e12 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004dc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	6859      	ldr	r1, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004dd2:	035b      	lsls	r3, r3, #13
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dda:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ddc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004de0:	f7ff ff82 	bl	8004ce8 <LL_ADC_IsEnabled>
 8004de4:	4604      	mov	r4, r0
 8004de6:	4823      	ldr	r0, [pc, #140]	@ (8004e74 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004de8:	f7ff ff7e 	bl	8004ce8 <LL_ADC_IsEnabled>
 8004dec:	4603      	mov	r3, r0
 8004dee:	4323      	orrs	r3, r4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d133      	bne.n	8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004df4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004dfc:	f023 030f 	bic.w	r3, r3, #15
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	6811      	ldr	r1, [r2, #0]
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	6892      	ldr	r2, [r2, #8]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e0e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e10:	e024      	b.n	8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004e12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e1c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e1e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004e22:	f7ff ff61 	bl	8004ce8 <LL_ADC_IsEnabled>
 8004e26:	4604      	mov	r4, r0
 8004e28:	4812      	ldr	r0, [pc, #72]	@ (8004e74 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004e2a:	f7ff ff5d 	bl	8004ce8 <LL_ADC_IsEnabled>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4323      	orrs	r3, r4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d112      	bne.n	8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004e3e:	f023 030f 	bic.w	r3, r3, #15
 8004e42:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004e44:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e46:	e009      	b.n	8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4c:	f043 0220 	orr.w	r2, r3, #32
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004e5a:	e000      	b.n	8004e5e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e66:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3784      	adds	r7, #132	@ 0x84
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd90      	pop	{r4, r7, pc}
 8004e72:	bf00      	nop
 8004e74:	50000100 	.word	0x50000100
 8004e78:	50000300 	.word	0x50000300

08004e7c <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e023      	b.n	8004ed6 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7fb fcac 	bl	8000800 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, const CORDIC_ConfigTypeDef *sConfig)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d11d      	bne.n	8004f36 <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	4b14      	ldr	r3, [pc, #80]	@ (8004f54 <HAL_CORDIC_Configure+0x74>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	6811      	ldr	r1, [r2, #0]
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	6992      	ldr	r2, [r2, #24]
 8004f0c:	4311      	orrs	r1, r2
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	6852      	ldr	r2, [r2, #4]
 8004f12:	4311      	orrs	r1, r2
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	6912      	ldr	r2, [r2, #16]
 8004f18:	4311      	orrs	r1, r2
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	6952      	ldr	r2, [r2, #20]
 8004f1e:	4311      	orrs	r1, r2
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	6892      	ldr	r2, [r2, #8]
 8004f24:	4311      	orrs	r1, r2
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	68d2      	ldr	r2, [r2, #12]
 8004f2a:	4311      	orrs	r1, r2
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	430b      	orrs	r3, r1
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	e007      	b.n	8004f46 <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3a:	f043 0202 	orr.w	r2, r3, #2
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	ff87f800 	.word	0xff87f800

08004f58 <HAL_CORDIC_Calculate>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Calculate(CORDIC_HandleTypeDef *hcordic, const int32_t *pInBuff, int32_t *pOutBuff,
                                       uint32_t NbCalc, uint32_t Timeout)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t index;
  const int32_t *p_tmp_in_buff = pInBuff;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	617b      	str	r3, [r7, #20]
  int32_t *p_tmp_out_buff = pOutBuff;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Check parameters setting */
  if ((pInBuff == NULL) || (pOutBuff == NULL) || (NbCalc == 0U))
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_CORDIC_Calculate+0x28>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <HAL_CORDIC_Calculate+0x28>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d107      	bne.n	8004f90 <HAL_CORDIC_Calculate+0x38>
  {
    /* Update the error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	f043 0201 	orr.w	r2, r3, #1
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e058      	b.n	8005042 <HAL_CORDIC_Calculate+0xea>
  }

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d14b      	bne.n	8005034 <HAL_CORDIC_Calculate+0xdc>
  {
    /* Reset CORDIC error code */
    hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_BUSY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Get tick */
    tickstart = HAL_GetTick();
 8004faa:	f7fe fd13 	bl	80039d4 <HAL_GetTick>
 8004fae:	61b8      	str	r0, [r7, #24]

    /* Write of input data in Write Data register, and increment input buffer pointer */
    CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8004fb0:	f107 0314 	add.w	r3, r7, #20
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f847 	bl	800504a <CORDIC_WriteInDataIncrementPtr>

    /* Calculation is started.
       Provide next set of input data, until number of calculation is achieved */
    for (index = (NbCalc - 1U); index > 0U; index--)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	e028      	b.n	8005016 <HAL_CORDIC_Calculate+0xbe>
    {
      /* Write of input data in Write Data register, and increment input buffer pointer */
      CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8004fc4:	f107 0314 	add.w	r3, r7, #20
 8004fc8:	4619      	mov	r1, r3
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 f83d 	bl	800504a <CORDIC_WriteInDataIncrementPtr>

      /* Wait for RRDY flag to be raised */
      do
      {
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY)
 8004fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd6:	d010      	beq.n	8004ffa <HAL_CORDIC_Calculate+0xa2>
        {
          if ((HAL_GetTick() - tickstart) > Timeout)
 8004fd8:	f7fe fcfc 	bl	80039d4 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d208      	bcs.n	8004ffa <HAL_CORDIC_Calculate+0xa2>
          {
            /* Set CORDIC error code */
            hcordic->ErrorCode = HAL_CORDIC_ERROR_TIMEOUT;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2204      	movs	r2, #4
 8004fec:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Change the CORDIC state */
            hcordic->State = HAL_CORDIC_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Return function status */
            return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e023      	b.n	8005042 <HAL_CORDIC_Calculate+0xea>
          }
        }
      } while (HAL_IS_BIT_CLR(hcordic->Instance->CSR, CORDIC_CSR_RRDY));
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	dae5      	bge.n	8004fd0 <HAL_CORDIC_Calculate+0x78>

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8005004:	f107 0310 	add.w	r3, r7, #16
 8005008:	4619      	mov	r1, r3
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 f846 	bl	800509c <CORDIC_ReadOutDataIncrementPtr>
    for (index = (NbCalc - 1U); index > 0U; index--)
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	3b01      	subs	r3, #1
 8005014:	61fb      	str	r3, [r7, #28]
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1d3      	bne.n	8004fc4 <HAL_CORDIC_Calculate+0x6c>
    }

    /* Read output data from Read Data register, and increment output buffer pointer */
    CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 800501c:	f107 0310 	add.w	r3, r7, #16
 8005020:	4619      	mov	r1, r3
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f83a 	bl	800509c <CORDIC_ReadOutDataIncrementPtr>

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Return function status */
    return HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	e006      	b.n	8005042 <HAL_CORDIC_Calculate+0xea>
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005038:	f043 0202 	orr.w	r2, r3, #2
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
  }
}
 8005042:	4618      	mov	r0, r3
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	1d1a      	adds	r2, r3, #4
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005074:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005078:	d10a      	bne.n	8005090 <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	1d1a      	adds	r2, r3, #4
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	601a      	str	r2, [r3, #0]
  }
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	1d1a      	adds	r2, r3, #4
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050c6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80050ca:	d10a      	bne.n	80050e2 <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	1d1a      	adds	r2, r3, #4
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	601a      	str	r2, [r3, #0]
  }
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005100:	4b0c      	ldr	r3, [pc, #48]	@ (8005134 <__NVIC_SetPriorityGrouping+0x44>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800510c:	4013      	ands	r3, r2
 800510e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005118:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800511c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005122:	4a04      	ldr	r2, [pc, #16]	@ (8005134 <__NVIC_SetPriorityGrouping+0x44>)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	60d3      	str	r3, [r2, #12]
}
 8005128:	bf00      	nop
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	e000ed00 	.word	0xe000ed00

08005138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800513c:	4b04      	ldr	r3, [pc, #16]	@ (8005150 <__NVIC_GetPriorityGrouping+0x18>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	0a1b      	lsrs	r3, r3, #8
 8005142:	f003 0307 	and.w	r3, r3, #7
}
 8005146:	4618      	mov	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	e000ed00 	.word	0xe000ed00

08005154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800515e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005162:	2b00      	cmp	r3, #0
 8005164:	db0b      	blt.n	800517e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	f003 021f 	and.w	r2, r3, #31
 800516c:	4907      	ldr	r1, [pc, #28]	@ (800518c <__NVIC_EnableIRQ+0x38>)
 800516e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	2001      	movs	r0, #1
 8005176:	fa00 f202 	lsl.w	r2, r0, r2
 800517a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	e000e100 	.word	0xe000e100

08005190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	4603      	mov	r3, r0
 8005198:	6039      	str	r1, [r7, #0]
 800519a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800519c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	db0a      	blt.n	80051ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	490c      	ldr	r1, [pc, #48]	@ (80051dc <__NVIC_SetPriority+0x4c>)
 80051aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ae:	0112      	lsls	r2, r2, #4
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	440b      	add	r3, r1
 80051b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051b8:	e00a      	b.n	80051d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	4908      	ldr	r1, [pc, #32]	@ (80051e0 <__NVIC_SetPriority+0x50>)
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	3b04      	subs	r3, #4
 80051c8:	0112      	lsls	r2, r2, #4
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	440b      	add	r3, r1
 80051ce:	761a      	strb	r2, [r3, #24]
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	e000e100 	.word	0xe000e100
 80051e0:	e000ed00 	.word	0xe000ed00

080051e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b089      	sub	sp, #36	@ 0x24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f1c3 0307 	rsb	r3, r3, #7
 80051fe:	2b04      	cmp	r3, #4
 8005200:	bf28      	it	cs
 8005202:	2304      	movcs	r3, #4
 8005204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	3304      	adds	r3, #4
 800520a:	2b06      	cmp	r3, #6
 800520c:	d902      	bls.n	8005214 <NVIC_EncodePriority+0x30>
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	3b03      	subs	r3, #3
 8005212:	e000      	b.n	8005216 <NVIC_EncodePriority+0x32>
 8005214:	2300      	movs	r3, #0
 8005216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005218:	f04f 32ff 	mov.w	r2, #4294967295
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	43da      	mvns	r2, r3
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	401a      	ands	r2, r3
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800522c:	f04f 31ff 	mov.w	r1, #4294967295
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	fa01 f303 	lsl.w	r3, r1, r3
 8005236:	43d9      	mvns	r1, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800523c:	4313      	orrs	r3, r2
         );
}
 800523e:	4618      	mov	r0, r3
 8005240:	3724      	adds	r7, #36	@ 0x24
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b082      	sub	sp, #8
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7ff ff4c 	bl	80050f0 <__NVIC_SetPriorityGrouping>
}
 8005258:	bf00      	nop
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	4603      	mov	r3, r0
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800526e:	f7ff ff63 	bl	8005138 <__NVIC_GetPriorityGrouping>
 8005272:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	6978      	ldr	r0, [r7, #20]
 800527a:	f7ff ffb3 	bl	80051e4 <NVIC_EncodePriority>
 800527e:	4602      	mov	r2, r0
 8005280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005284:	4611      	mov	r1, r2
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff ff82 	bl	8005190 <__NVIC_SetPriority>
}
 800528c:	bf00      	nop
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	4603      	mov	r3, r0
 800529c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800529e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff ff56 	bl	8005154 <__NVIC_EnableIRQ>
}
 80052a8:	bf00      	nop
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e08d      	b.n	80053de <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	4b47      	ldr	r3, [pc, #284]	@ (80053e8 <HAL_DMA_Init+0x138>)
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d80f      	bhi.n	80052ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	4b45      	ldr	r3, [pc, #276]	@ (80053ec <HAL_DMA_Init+0x13c>)
 80052d6:	4413      	add	r3, r2
 80052d8:	4a45      	ldr	r2, [pc, #276]	@ (80053f0 <HAL_DMA_Init+0x140>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	091b      	lsrs	r3, r3, #4
 80052e0:	009a      	lsls	r2, r3, #2
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a42      	ldr	r2, [pc, #264]	@ (80053f4 <HAL_DMA_Init+0x144>)
 80052ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80052ec:	e00e      	b.n	800530c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	4b40      	ldr	r3, [pc, #256]	@ (80053f8 <HAL_DMA_Init+0x148>)
 80052f6:	4413      	add	r3, r2
 80052f8:	4a3d      	ldr	r2, [pc, #244]	@ (80053f0 <HAL_DMA_Init+0x140>)
 80052fa:	fba2 2303 	umull	r2, r3, r2, r3
 80052fe:	091b      	lsrs	r3, r3, #4
 8005300:	009a      	lsls	r2, r3, #2
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a3c      	ldr	r2, [pc, #240]	@ (80053fc <HAL_DMA_Init+0x14c>)
 800530a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005326:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005330:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800533c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005348:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f9b6 	bl	80056d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800536c:	d102      	bne.n	8005374 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005388:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d010      	beq.n	80053b4 <HAL_DMA_Init+0x104>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b04      	cmp	r3, #4
 8005398:	d80c      	bhi.n	80053b4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f9d6 	bl	800574c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80053b0:	605a      	str	r2, [r3, #4]
 80053b2:	e008      	b.n	80053c6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40020407 	.word	0x40020407
 80053ec:	bffdfff8 	.word	0xbffdfff8
 80053f0:	cccccccd 	.word	0xcccccccd
 80053f4:	40020000 	.word	0x40020000
 80053f8:	bffdfbf8 	.word	0xbffdfbf8
 80053fc:	40020400 	.word	0x40020400

08005400 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_DMA_Start_IT+0x20>
 800541c:	2302      	movs	r3, #2
 800541e:	e066      	b.n	80054ee <HAL_DMA_Start_IT+0xee>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d155      	bne.n	80054e0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0201 	bic.w	r2, r2, #1
 8005450:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f8fb 	bl	8005654 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005462:	2b00      	cmp	r3, #0
 8005464:	d008      	beq.n	8005478 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 020e 	orr.w	r2, r2, #14
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	e00f      	b.n	8005498 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0204 	bic.w	r2, r2, #4
 8005486:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 020a 	orr.w	r2, r2, #10
 8005496:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d007      	beq.n	80054b6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054b4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d007      	beq.n	80054ce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054cc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0201 	orr.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	e005      	b.n	80054ec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80054e8:	2302      	movs	r3, #2
 80054ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b084      	sub	sp, #16
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005512:	f003 031f 	and.w	r3, r3, #31
 8005516:	2204      	movs	r2, #4
 8005518:	409a      	lsls	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4013      	ands	r3, r2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d026      	beq.n	8005570 <HAL_DMA_IRQHandler+0x7a>
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d021      	beq.n	8005570 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b00      	cmp	r3, #0
 8005538:	d107      	bne.n	800554a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0204 	bic.w	r2, r2, #4
 8005548:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800554e:	f003 021f 	and.w	r2, r3, #31
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	2104      	movs	r1, #4
 8005558:	fa01 f202 	lsl.w	r2, r1, r2
 800555c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005562:	2b00      	cmp	r3, #0
 8005564:	d071      	beq.n	800564a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800556e:	e06c      	b.n	800564a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005574:	f003 031f 	and.w	r3, r3, #31
 8005578:	2202      	movs	r2, #2
 800557a:	409a      	lsls	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4013      	ands	r3, r2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d02e      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d029      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0320 	and.w	r3, r3, #32
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10b      	bne.n	80055b4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 020a 	bic.w	r2, r2, #10
 80055aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b8:	f003 021f 	and.w	r2, r3, #31
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c0:	2102      	movs	r1, #2
 80055c2:	fa01 f202 	lsl.w	r2, r1, r2
 80055c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d038      	beq.n	800564a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80055e0:	e033      	b.n	800564a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e6:	f003 031f 	and.w	r3, r3, #31
 80055ea:	2208      	movs	r2, #8
 80055ec:	409a      	lsls	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4013      	ands	r3, r2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d02a      	beq.n	800564c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f003 0308 	and.w	r3, r3, #8
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d025      	beq.n	800564c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 020e 	bic.w	r2, r2, #14
 800560e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005614:	f003 021f 	and.w	r2, r3, #31
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561c:	2101      	movs	r1, #1
 800561e:	fa01 f202 	lsl.w	r2, r1, r2
 8005622:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800563e:	2b00      	cmp	r3, #0
 8005640:	d004      	beq.n	800564c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800564a:	bf00      	nop
 800564c:	bf00      	nop
}
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800566a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800567c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005682:	f003 021f 	and.w	r2, r3, #31
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568a:	2101      	movs	r1, #1
 800568c:	fa01 f202 	lsl.w	r2, r1, r2
 8005690:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	2b10      	cmp	r3, #16
 80056a0:	d108      	bne.n	80056b4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80056b2:	e007      	b.n	80056c4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	60da      	str	r2, [r3, #12]
}
 80056c4:	bf00      	nop
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	461a      	mov	r2, r3
 80056de:	4b16      	ldr	r3, [pc, #88]	@ (8005738 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d802      	bhi.n	80056ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80056e4:	4b15      	ldr	r3, [pc, #84]	@ (800573c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	e001      	b.n	80056ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80056ea:	4b15      	ldr	r3, [pc, #84]	@ (8005740 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80056ec:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	3b08      	subs	r3, #8
 80056fa:	4a12      	ldr	r2, [pc, #72]	@ (8005744 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80056fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005700:	091b      	lsrs	r3, r3, #4
 8005702:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005708:	089b      	lsrs	r3, r3, #2
 800570a:	009a      	lsls	r2, r3, #2
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	4413      	add	r3, r2
 8005710:	461a      	mov	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a0b      	ldr	r2, [pc, #44]	@ (8005748 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800571a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f003 031f 	and.w	r3, r3, #31
 8005722:	2201      	movs	r2, #1
 8005724:	409a      	lsls	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800572a:	bf00      	nop
 800572c:	371c      	adds	r7, #28
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40020407 	.word	0x40020407
 800573c:	40020800 	.word	0x40020800
 8005740:	40020820 	.word	0x40020820
 8005744:	cccccccd 	.word	0xcccccccd
 8005748:	40020880 	.word	0x40020880

0800574c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	b2db      	uxtb	r3, r3
 800575a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4b0b      	ldr	r3, [pc, #44]	@ (800578c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005760:	4413      	add	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	461a      	mov	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a08      	ldr	r2, [pc, #32]	@ (8005790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800576e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3b01      	subs	r3, #1
 8005774:	f003 031f 	and.w	r3, r3, #31
 8005778:	2201      	movs	r2, #1
 800577a:	409a      	lsls	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005780:	bf00      	nop
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	1000823f 	.word	0x1000823f
 8005790:	40020940 	.word	0x40020940

08005794 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	460b      	mov	r3, r1
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80057a6:	7afb      	ldrb	r3, [r7, #11]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d103      	bne.n	80057b4 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	605a      	str	r2, [r3, #4]
      break;
 80057b2:	e005      	b.n	80057c0 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	75fb      	strb	r3, [r7, #23]
      break;
 80057be:	bf00      	nop
  }

  return status;
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e003      	b.n	80057ea <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80057e8:	2300      	movs	r3, #0
  }
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
	...

080057f8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	0c1b      	lsrs	r3, r3, #16
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	2201      	movs	r2, #1
 8005816:	fa02 f303 	lsl.w	r3, r2, r3
 800581a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	4b0c      	ldr	r3, [pc, #48]	@ (8005854 <HAL_EXTI_IRQHandler+0x5c>)
 8005822:	4413      	add	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4013      	ands	r3, r2
 800582e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d009      	beq.n	800584a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	4798      	blx	r3
    }
  }
}
 800584a:	bf00      	nop
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40010414 	.word	0x40010414

08005858 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e147      	b.n	8005afa <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fb f8ba 	bl	80009f8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0210 	bic.w	r2, r2, #16
 8005892:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005894:	f7fe f89e 	bl	80039d4 <HAL_GetTick>
 8005898:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800589a:	e012      	b.n	80058c2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800589c:	f7fe f89a 	bl	80039d4 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b0a      	cmp	r3, #10
 80058a8:	d90b      	bls.n	80058c2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ae:	f043 0201 	orr.w	r2, r3, #1
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2203      	movs	r2, #3
 80058ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e11b      	b.n	8005afa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d0e5      	beq.n	800589c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058e0:	f7fe f878 	bl	80039d4 <HAL_GetTick>
 80058e4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80058e6:	e012      	b.n	800590e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80058e8:	f7fe f874 	bl	80039d4 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b0a      	cmp	r3, #10
 80058f4:	d90b      	bls.n	800590e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058fa:	f043 0201 	orr.w	r2, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2203      	movs	r2, #3
 8005906:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e0f5      	b.n	8005afa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0e5      	beq.n	80058e8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699a      	ldr	r2, [r3, #24]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0202 	orr.w	r2, r2, #2
 800592a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a74      	ldr	r2, [pc, #464]	@ (8005b04 <HAL_FDCAN_Init+0x2ac>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d103      	bne.n	800593e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005936:	4a74      	ldr	r2, [pc, #464]	@ (8005b08 <HAL_FDCAN_Init+0x2b0>)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	7c1b      	ldrb	r3, [r3, #16]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d108      	bne.n	8005958 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	699a      	ldr	r2, [r3, #24]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005954:	619a      	str	r2, [r3, #24]
 8005956:	e007      	b.n	8005968 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699a      	ldr	r2, [r3, #24]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005966:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	7c5b      	ldrb	r3, [r3, #17]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d108      	bne.n	8005982 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699a      	ldr	r2, [r3, #24]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800597e:	619a      	str	r2, [r3, #24]
 8005980:	e007      	b.n	8005992 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699a      	ldr	r2, [r3, #24]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005990:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	7c9b      	ldrb	r3, [r3, #18]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d108      	bne.n	80059ac <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80059a8:	619a      	str	r2, [r3, #24]
 80059aa:	e007      	b.n	80059bc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80059ba:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	699a      	ldr	r2, [r3, #24]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80059e0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0210 	bic.w	r2, r2, #16
 80059f0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d108      	bne.n	8005a0c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699a      	ldr	r2, [r3, #24]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0204 	orr.w	r2, r2, #4
 8005a08:	619a      	str	r2, [r3, #24]
 8005a0a:	e02c      	b.n	8005a66 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d028      	beq.n	8005a66 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d01c      	beq.n	8005a56 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699a      	ldr	r2, [r3, #24]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005a2a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0210 	orr.w	r2, r2, #16
 8005a3a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d110      	bne.n	8005a66 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699a      	ldr	r2, [r3, #24]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0220 	orr.w	r2, r2, #32
 8005a52:	619a      	str	r2, [r3, #24]
 8005a54:	e007      	b.n	8005a66 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	699a      	ldr	r2, [r3, #24]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0220 	orr.w	r2, r2, #32
 8005a64:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a76:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a7e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a8e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a90:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a9a:	d115      	bne.n	8005ac8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005aaa:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005ab4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abc:	3b01      	subs	r3, #1
 8005abe:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005ac4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005ac6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fb14 	bl	800610c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	40006400 	.word	0x40006400
 8005b08:	40006500 	.word	0x40006500

08005b0c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b08b      	sub	sp, #44	@ 0x2c
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b24:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005b26:	7efb      	ldrb	r3, [r7, #27]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	f040 80e8 	bne.w	8005cfe <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2b40      	cmp	r3, #64	@ 0x40
 8005b32:	d137      	bne.n	8005ba4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d107      	bne.n	8005b54 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e0db      	b.n	8005d0c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b64:	d10a      	bne.n	8005b7c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b76:	d101      	bne.n	8005b7c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b84:	0a1b      	lsrs	r3, r3, #8
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8005b94:	69fa      	ldr	r2, [r7, #28]
 8005b96:	4613      	mov	r3, r2
 8005b98:	00db      	lsls	r3, r3, #3
 8005b9a:	4413      	add	r3, r2
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	440b      	add	r3, r1
 8005ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ba2:	e036      	b.n	8005c12 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bac:	f003 030f 	and.w	r3, r3, #15
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d107      	bne.n	8005bc4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bb8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e0a3      	b.n	8005d0c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bd4:	d10a      	bne.n	8005bec <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005be6:	d101      	bne.n	8005bec <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005be8:	2301      	movs	r3, #1
 8005bea:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bf4:	0a1b      	lsrs	r3, r3, #8
 8005bf6:	f003 0303 	and.w	r3, r3, #3
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005c04:	69fa      	ldr	r2, [r7, #28]
 8005c06:	4613      	mov	r3, r2
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	4413      	add	r3, r2
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	440b      	add	r3, r1
 8005c10:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d107      	bne.n	8005c36 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	0c9b      	lsrs	r3, r3, #18
 8005c2c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	e005      	b.n	8005c42 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	0c1b      	lsrs	r3, r3, #16
 8005c70:	f003 020f 	and.w	r2, r3, #15
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	0e1b      	lsrs	r3, r3, #24
 8005c96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	0fda      	lsrs	r2, r3, #31
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005caa:	3304      	adds	r3, #4
 8005cac:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	623b      	str	r3, [r7, #32]
 8005cb6:	e00a      	b.n	8005cce <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	441a      	add	r2, r3
 8005cbe:	6839      	ldr	r1, [r7, #0]
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	440b      	add	r3, r1
 8005cc4:	7812      	ldrb	r2, [r2, #0]
 8005cc6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	623b      	str	r3, [r7, #32]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	4a11      	ldr	r2, [pc, #68]	@ (8005d18 <HAL_FDCAN_GetRxMessage+0x20c>)
 8005cd4:	5cd3      	ldrb	r3, [r2, r3]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d3ec      	bcc.n	8005cb8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b40      	cmp	r3, #64	@ 0x40
 8005ce2:	d105      	bne.n	8005cf0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8005cee:	e004      	b.n	8005cfa <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	e006      	b.n	8005d0c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d02:	f043 0208 	orr.w	r2, r3, #8
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
  }
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	372c      	adds	r7, #44	@ 0x2c
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	0800cd6c 	.word	0x0800cd6c

08005d1c <HAL_FDCAN_GetTxEvent>:
  *         the configuration information for the specified FDCAN.
  * @param  pTxEvent pointer to a FDCAN_TxEventFifoTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetTxEvent(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxEventFifoTypeDef *pTxEvent)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t *TxEventAddress;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005d2c:	75fb      	strb	r3, [r7, #23]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d16e      	bne.n	8005e12 <HAL_FDCAN_GetTxEvent+0xf6>
  {
    /* Check that the Tx event FIFO is not empty */
    if ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFFL) == 0U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d107      	bne.n	8005d54 <HAL_FDCAN_GetTxEvent+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e065      	b.n	8005e20 <HAL_FDCAN_GetTxEvent+0x104>
    }

    /* Calculate Tx event FIFO element address */
    GetIndex = ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFGI) >> FDCAN_TXEFS_EFGI_Pos);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d5c:	0a1b      	lsrs	r3, r3, #8
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	613b      	str	r3, [r7, #16]
    TxEventAddress = (uint32_t *)(hfdcan->msgRam.TxEventFIFOSA + (GetIndex * SRAMCAN_TEF_SIZE));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	4413      	add	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]

    /* Retrieve IdType */
    pTxEvent->IdType = *TxEventAddress & FDCAN_ELEMENT_MASK_XTD;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pTxEvent->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d107      	bne.n	8005d94 <HAL_FDCAN_GetTxEvent+0x78>
    {
      pTxEvent->Identifier = ((*TxEventAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	0c9b      	lsrs	r3, r3, #18
 8005d8a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	e005      	b.n	8005da0 <HAL_FDCAN_GetTxEvent+0x84>
    }
    else /* Extended ID element */
    {
      pTxEvent->Identifier = (*TxEventAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve TxFrameType */
    pTxEvent->TxFrameType = (*TxEventAddress & FDCAN_ELEMENT_MASK_RTR);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pTxEvent->ErrorStateIndicator = (*TxEventAddress & FDCAN_ELEMENT_MASK_ESI);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	611a      	str	r2, [r3, #16]

    /* Increment TxEventAddress pointer to second word of Tx Event FIFO element */
    TxEventAddress++;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	60fb      	str	r3, [r7, #12]

    /* Retrieve TxTimestamp */
    pTxEvent->TxTimestamp = (*TxEventAddress & FDCAN_ELEMENT_MASK_TS);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pTxEvent->DataLength = ((*TxEventAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	0c1b      	lsrs	r3, r3, #16
 8005dce:	f003 020f 	and.w	r2, r3, #15
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pTxEvent->BitRateSwitch = (*TxEventAddress & FDCAN_ELEMENT_MASK_BRS);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pTxEvent->FDFormat = (*TxEventAddress & FDCAN_ELEMENT_MASK_FDF);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	619a      	str	r2, [r3, #24]

    /* Retrieve EventType */
    pTxEvent->EventType = (*TxEventAddress & FDCAN_ELEMENT_MASK_ET);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Retrieve MessageMarker */
    pTxEvent->MessageMarker = ((*TxEventAddress & FDCAN_ELEMENT_MASK_MM) >> 24U);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	0e1a      	lsrs	r2, r3, #24
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	621a      	str	r2, [r3, #32]

    /* Acknowledge the Tx Event FIFO that the oldest element is read so that it increments the GetIndex */
    hfdcan->Instance->TXEFA = GetIndex;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

    /* Return function status */
    return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	e006      	b.n	8005e20 <HAL_FDCAN_GetTxEvent+0x104>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e16:	f043 0208 	orr.w	r2, r3, #8
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
  }
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	371c      	adds	r7, #28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b08c      	sub	sp, #48	@ 0x30
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e3a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e48:	4013      	ands	r3, r2
 8005e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e60:	4013      	ands	r3, r2
 8005e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e78:	4013      	ands	r3, r2
 8005e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e82:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005e86:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8e:	6a3a      	ldr	r2, [r7, #32]
 8005e90:	4013      	ands	r3, r2
 8005e92:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e9a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005e9e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea6:	69fa      	ldr	r2, [r7, #28]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eba:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	099b      	lsrs	r3, r3, #6
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00c      	beq.n	8005ee2 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	099b      	lsrs	r3, r3, #6
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d006      	beq.n	8005ee2 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2240      	movs	r2, #64	@ 0x40
 8005eda:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f901 	bl	80060e4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	0a1b      	lsrs	r3, r3, #8
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d01a      	beq.n	8005f24 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	0a1b      	lsrs	r3, r3, #8
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d014      	beq.n	8005f24 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f02:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f1a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005f1c:	6939      	ldr	r1, [r7, #16]
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f8c1 	bl	80060a6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d007      	beq.n	8005f3a <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f30:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005f32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7fb fc2f 	bl	8001798 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d007      	beq.n	8005f50 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f46:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005f48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fb fc4a 	bl	80017e4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d007      	beq.n	8005f66 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f5c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005f5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7fb fcaf 	bl	80018c4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	0a5b      	lsrs	r3, r3, #9
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00d      	beq.n	8005f8e <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	0a5b      	lsrs	r3, r3, #9
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d007      	beq.n	8005f8e <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f86:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f882 	bl	8006092 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	09db      	lsrs	r3, r3, #7
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d019      	beq.n	8005fce <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	09db      	lsrs	r3, r3, #7
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d013      	beq.n	8005fce <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005fae:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2280      	movs	r2, #128	@ 0x80
 8005fc4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005fc6:	68f9      	ldr	r1, [r7, #12]
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7fb fc00 	bl	80017ce <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	0b5b      	lsrs	r3, r3, #13
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00d      	beq.n	8005ff6 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	0b5b      	lsrs	r3, r3, #13
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d007      	beq.n	8005ff6 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005fee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f863 	bl	80060bc <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	0bdb      	lsrs	r3, r3, #15
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00d      	beq.n	800601e <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	0bdb      	lsrs	r3, r3, #15
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006016:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f859 	bl	80060d0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	0b9b      	lsrs	r3, r3, #14
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d010      	beq.n	800604c <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	0b9b      	lsrs	r3, r3, #14
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800603e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006044:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69fa      	ldr	r2, [r7, #28]
 8006058:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800605a:	69f9      	ldr	r1, [r7, #28]
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7fb fb7f 	bl	8001760 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d009      	beq.n	800607c <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6a3a      	ldr	r2, [r7, #32]
 800606e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f837 	bl	80060f8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800608a:	bf00      	nop
 800608c:	3730      	adds	r7, #48	@ 0x30
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006114:	4b27      	ldr	r3, [pc, #156]	@ (80061b4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8006116:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006126:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800612e:	041a      	lsls	r2, r3, #16
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800614c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006154:	061a      	lsls	r2, r3, #24
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	e005      	b.n	800619a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3304      	adds	r3, #4
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d3f3      	bcc.n	800618e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80061a6:	bf00      	nop
 80061a8:	bf00      	nop
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	4000a400 	.word	0x4000a400

080061b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80061c6:	e15a      	b.n	800647e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	2101      	movs	r1, #1
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	fa01 f303 	lsl.w	r3, r1, r3
 80061d4:	4013      	ands	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 814c 	beq.w	8006478 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f003 0303 	and.w	r3, r3, #3
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d005      	beq.n	80061f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d130      	bne.n	800625a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	2203      	movs	r2, #3
 8006204:	fa02 f303 	lsl.w	r3, r2, r3
 8006208:	43db      	mvns	r3, r3
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	4013      	ands	r3, r2
 800620e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	fa02 f303 	lsl.w	r3, r2, r3
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	4313      	orrs	r3, r2
 8006220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800622e:	2201      	movs	r2, #1
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	fa02 f303 	lsl.w	r3, r2, r3
 8006236:	43db      	mvns	r3, r3
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4013      	ands	r3, r2
 800623c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	091b      	lsrs	r3, r3, #4
 8006244:	f003 0201 	and.w	r2, r3, #1
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	fa02 f303 	lsl.w	r3, r2, r3
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	4313      	orrs	r3, r2
 8006252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f003 0303 	and.w	r3, r3, #3
 8006262:	2b03      	cmp	r3, #3
 8006264:	d017      	beq.n	8006296 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	2203      	movs	r2, #3
 8006272:	fa02 f303 	lsl.w	r3, r2, r3
 8006276:	43db      	mvns	r3, r3
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	4013      	ands	r3, r2
 800627c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	689a      	ldr	r2, [r3, #8]
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d123      	bne.n	80062ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	08da      	lsrs	r2, r3, #3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3208      	adds	r2, #8
 80062aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	220f      	movs	r2, #15
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	43db      	mvns	r3, r3
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4013      	ands	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	691a      	ldr	r2, [r3, #16]
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	fa02 f303 	lsl.w	r3, r2, r3
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	4313      	orrs	r3, r2
 80062da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	08da      	lsrs	r2, r3, #3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3208      	adds	r2, #8
 80062e4:	6939      	ldr	r1, [r7, #16]
 80062e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	2203      	movs	r2, #3
 80062f6:	fa02 f303 	lsl.w	r3, r2, r3
 80062fa:	43db      	mvns	r3, r3
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	4013      	ands	r3, r2
 8006300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f003 0203 	and.w	r2, r3, #3
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 80a6 	beq.w	8006478 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800632c:	4b5b      	ldr	r3, [pc, #364]	@ (800649c <HAL_GPIO_Init+0x2e4>)
 800632e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006330:	4a5a      	ldr	r2, [pc, #360]	@ (800649c <HAL_GPIO_Init+0x2e4>)
 8006332:	f043 0301 	orr.w	r3, r3, #1
 8006336:	6613      	str	r3, [r2, #96]	@ 0x60
 8006338:	4b58      	ldr	r3, [pc, #352]	@ (800649c <HAL_GPIO_Init+0x2e4>)
 800633a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	60bb      	str	r3, [r7, #8]
 8006342:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006344:	4a56      	ldr	r2, [pc, #344]	@ (80064a0 <HAL_GPIO_Init+0x2e8>)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	089b      	lsrs	r3, r3, #2
 800634a:	3302      	adds	r3, #2
 800634c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006350:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f003 0303 	and.w	r3, r3, #3
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	220f      	movs	r2, #15
 800635c:	fa02 f303 	lsl.w	r3, r2, r3
 8006360:	43db      	mvns	r3, r3
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4013      	ands	r3, r2
 8006366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800636e:	d01f      	beq.n	80063b0 <HAL_GPIO_Init+0x1f8>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a4c      	ldr	r2, [pc, #304]	@ (80064a4 <HAL_GPIO_Init+0x2ec>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d019      	beq.n	80063ac <HAL_GPIO_Init+0x1f4>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a4b      	ldr	r2, [pc, #300]	@ (80064a8 <HAL_GPIO_Init+0x2f0>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d013      	beq.n	80063a8 <HAL_GPIO_Init+0x1f0>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a4a      	ldr	r2, [pc, #296]	@ (80064ac <HAL_GPIO_Init+0x2f4>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00d      	beq.n	80063a4 <HAL_GPIO_Init+0x1ec>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a49      	ldr	r2, [pc, #292]	@ (80064b0 <HAL_GPIO_Init+0x2f8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d007      	beq.n	80063a0 <HAL_GPIO_Init+0x1e8>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a48      	ldr	r2, [pc, #288]	@ (80064b4 <HAL_GPIO_Init+0x2fc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d101      	bne.n	800639c <HAL_GPIO_Init+0x1e4>
 8006398:	2305      	movs	r3, #5
 800639a:	e00a      	b.n	80063b2 <HAL_GPIO_Init+0x1fa>
 800639c:	2306      	movs	r3, #6
 800639e:	e008      	b.n	80063b2 <HAL_GPIO_Init+0x1fa>
 80063a0:	2304      	movs	r3, #4
 80063a2:	e006      	b.n	80063b2 <HAL_GPIO_Init+0x1fa>
 80063a4:	2303      	movs	r3, #3
 80063a6:	e004      	b.n	80063b2 <HAL_GPIO_Init+0x1fa>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e002      	b.n	80063b2 <HAL_GPIO_Init+0x1fa>
 80063ac:	2301      	movs	r3, #1
 80063ae:	e000      	b.n	80063b2 <HAL_GPIO_Init+0x1fa>
 80063b0:	2300      	movs	r3, #0
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	f002 0203 	and.w	r2, r2, #3
 80063b8:	0092      	lsls	r2, r2, #2
 80063ba:	4093      	lsls	r3, r2
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	4313      	orrs	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063c2:	4937      	ldr	r1, [pc, #220]	@ (80064a0 <HAL_GPIO_Init+0x2e8>)
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	089b      	lsrs	r3, r3, #2
 80063c8:	3302      	adds	r3, #2
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063d0:	4b39      	ldr	r3, [pc, #228]	@ (80064b8 <HAL_GPIO_Init+0x300>)
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	43db      	mvns	r3, r3
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4013      	ands	r3, r2
 80063de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80063f4:	4a30      	ldr	r2, [pc, #192]	@ (80064b8 <HAL_GPIO_Init+0x300>)
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80063fa:	4b2f      	ldr	r3, [pc, #188]	@ (80064b8 <HAL_GPIO_Init+0x300>)
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	43db      	mvns	r3, r3
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4013      	ands	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800641e:	4a26      	ldr	r2, [pc, #152]	@ (80064b8 <HAL_GPIO_Init+0x300>)
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006424:	4b24      	ldr	r3, [pc, #144]	@ (80064b8 <HAL_GPIO_Init+0x300>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	43db      	mvns	r3, r3
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	4013      	ands	r3, r2
 8006432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	4313      	orrs	r3, r2
 8006446:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006448:	4a1b      	ldr	r2, [pc, #108]	@ (80064b8 <HAL_GPIO_Init+0x300>)
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800644e:	4b1a      	ldr	r3, [pc, #104]	@ (80064b8 <HAL_GPIO_Init+0x300>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	43db      	mvns	r3, r3
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4013      	ands	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4313      	orrs	r3, r2
 8006470:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006472:	4a11      	ldr	r2, [pc, #68]	@ (80064b8 <HAL_GPIO_Init+0x300>)
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	3301      	adds	r3, #1
 800647c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	fa22 f303 	lsr.w	r3, r2, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	f47f ae9d 	bne.w	80061c8 <HAL_GPIO_Init+0x10>
  }
}
 800648e:	bf00      	nop
 8006490:	bf00      	nop
 8006492:	371c      	adds	r7, #28
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	40021000 	.word	0x40021000
 80064a0:	40010000 	.word	0x40010000
 80064a4:	48000400 	.word	0x48000400
 80064a8:	48000800 	.word	0x48000800
 80064ac:	48000c00 	.word	0x48000c00
 80064b0:	48001000 	.word	0x48001000
 80064b4:	48001400 	.word	0x48001400
 80064b8:	40010400 	.word	0x40010400

080064bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	460b      	mov	r3, r1
 80064c6:	807b      	strh	r3, [r7, #2]
 80064c8:	4613      	mov	r3, r2
 80064ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064cc:	787b      	ldrb	r3, [r7, #1]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80064d2:	887a      	ldrh	r2, [r7, #2]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80064d8:	e002      	b.n	80064e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80064da:	887a      	ldrh	r2, [r7, #2]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	4603      	mov	r3, r0
 80064f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80064f6:	4b08      	ldr	r3, [pc, #32]	@ (8006518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064f8:	695a      	ldr	r2, [r3, #20]
 80064fa:	88fb      	ldrh	r3, [r7, #6]
 80064fc:	4013      	ands	r3, r2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d006      	beq.n	8006510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006502:	4a05      	ldr	r2, [pc, #20]	@ (8006518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006504:	88fb      	ldrh	r3, [r7, #6]
 8006506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006508:	88fb      	ldrh	r3, [r7, #6]
 800650a:	4618      	mov	r0, r3
 800650c:	f7fb fa44 	bl	8001998 <HAL_GPIO_EXTI_Callback>
  }
}
 8006510:	bf00      	nop
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	40010400 	.word	0x40010400

0800651c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e08d      	b.n	800664a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7fa fb98 	bl	8000c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2224      	movs	r2, #36	@ 0x24
 800654c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0201 	bic.w	r2, r2, #1
 800655e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800656c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800657c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d107      	bne.n	8006596 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006592:	609a      	str	r2, [r3, #8]
 8006594:	e006      	b.n	80065a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689a      	ldr	r2, [r3, #8]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80065a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d108      	bne.n	80065be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065ba:	605a      	str	r2, [r3, #4]
 80065bc:	e007      	b.n	80065ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	6812      	ldr	r2, [r2, #0]
 80065d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80065dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691a      	ldr	r2, [r3, #16]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	69d9      	ldr	r1, [r3, #28]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a1a      	ldr	r2, [r3, #32]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0201 	orr.w	r2, r2, #1
 800662a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006652:	b480      	push	{r7}
 8006654:	b083      	sub	sp, #12
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b20      	cmp	r3, #32
 8006666:	d138      	bne.n	80066da <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800666e:	2b01      	cmp	r3, #1
 8006670:	d101      	bne.n	8006676 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006672:	2302      	movs	r3, #2
 8006674:	e032      	b.n	80066dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2224      	movs	r2, #36	@ 0x24
 8006682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0201 	bic.w	r2, r2, #1
 8006694:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066a4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6819      	ldr	r1, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f042 0201 	orr.w	r2, r2, #1
 80066c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	e000      	b.n	80066dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066da:	2302      	movs	r3, #2
  }
}
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b20      	cmp	r3, #32
 80066fc:	d139      	bne.n	8006772 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006708:	2302      	movs	r3, #2
 800670a:	e033      	b.n	8006774 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2224      	movs	r2, #36	@ 0x24
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0201 	bic.w	r2, r2, #1
 800672a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800673a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	021b      	lsls	r3, r3, #8
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f042 0201 	orr.w	r2, r2, #1
 800675c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	e000      	b.n	8006774 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006772:	2302      	movs	r3, #2
  }
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d141      	bne.n	8006812 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800678e:	4b4b      	ldr	r3, [pc, #300]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800679a:	d131      	bne.n	8006800 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800679c:	4b47      	ldr	r3, [pc, #284]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800679e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067a2:	4a46      	ldr	r2, [pc, #280]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067ac:	4b43      	ldr	r3, [pc, #268]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80067b4:	4a41      	ldr	r2, [pc, #260]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80067ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067bc:	4b40      	ldr	r3, [pc, #256]	@ (80068c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2232      	movs	r2, #50	@ 0x32
 80067c2:	fb02 f303 	mul.w	r3, r2, r3
 80067c6:	4a3f      	ldr	r2, [pc, #252]	@ (80068c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80067c8:	fba2 2303 	umull	r2, r3, r2, r3
 80067cc:	0c9b      	lsrs	r3, r3, #18
 80067ce:	3301      	adds	r3, #1
 80067d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067d2:	e002      	b.n	80067da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067da:	4b38      	ldr	r3, [pc, #224]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067e6:	d102      	bne.n	80067ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1f2      	bne.n	80067d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067ee:	4b33      	ldr	r3, [pc, #204]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067fa:	d158      	bne.n	80068ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e057      	b.n	80068b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006800:	4b2e      	ldr	r3, [pc, #184]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006806:	4a2d      	ldr	r2, [pc, #180]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800680c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006810:	e04d      	b.n	80068ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006818:	d141      	bne.n	800689e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800681a:	4b28      	ldr	r3, [pc, #160]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006822:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006826:	d131      	bne.n	800688c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006828:	4b24      	ldr	r3, [pc, #144]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800682a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800682e:	4a23      	ldr	r2, [pc, #140]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006834:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006838:	4b20      	ldr	r3, [pc, #128]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006840:	4a1e      	ldr	r2, [pc, #120]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006842:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006846:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006848:	4b1d      	ldr	r3, [pc, #116]	@ (80068c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2232      	movs	r2, #50	@ 0x32
 800684e:	fb02 f303 	mul.w	r3, r2, r3
 8006852:	4a1c      	ldr	r2, [pc, #112]	@ (80068c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006854:	fba2 2303 	umull	r2, r3, r2, r3
 8006858:	0c9b      	lsrs	r3, r3, #18
 800685a:	3301      	adds	r3, #1
 800685c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800685e:	e002      	b.n	8006866 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3b01      	subs	r3, #1
 8006864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006866:	4b15      	ldr	r3, [pc, #84]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800686e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006872:	d102      	bne.n	800687a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1f2      	bne.n	8006860 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800687a:	4b10      	ldr	r3, [pc, #64]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006886:	d112      	bne.n	80068ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e011      	b.n	80068b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800688c:	4b0b      	ldr	r3, [pc, #44]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800688e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006892:	4a0a      	ldr	r2, [pc, #40]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006898:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800689c:	e007      	b.n	80068ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800689e:	4b07      	ldr	r3, [pc, #28]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80068a6:	4a05      	ldr	r2, [pc, #20]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80068ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	40007000 	.word	0x40007000
 80068c0:	20000000 	.word	0x20000000
 80068c4:	431bde83 	.word	0x431bde83

080068c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80068cc:	4b05      	ldr	r3, [pc, #20]	@ (80068e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	4a04      	ldr	r2, [pc, #16]	@ (80068e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068d6:	6093      	str	r3, [r2, #8]
}
 80068d8:	bf00      	nop
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	40007000 	.word	0x40007000

080068e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e2fe      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d075      	beq.n	80069f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006906:	4b97      	ldr	r3, [pc, #604]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 030c 	and.w	r3, r3, #12
 800690e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006910:	4b94      	ldr	r3, [pc, #592]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f003 0303 	and.w	r3, r3, #3
 8006918:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	2b0c      	cmp	r3, #12
 800691e:	d102      	bne.n	8006926 <HAL_RCC_OscConfig+0x3e>
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	2b03      	cmp	r3, #3
 8006924:	d002      	beq.n	800692c <HAL_RCC_OscConfig+0x44>
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	2b08      	cmp	r3, #8
 800692a:	d10b      	bne.n	8006944 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800692c:	4b8d      	ldr	r3, [pc, #564]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d05b      	beq.n	80069f0 <HAL_RCC_OscConfig+0x108>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d157      	bne.n	80069f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e2d9      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800694c:	d106      	bne.n	800695c <HAL_RCC_OscConfig+0x74>
 800694e:	4b85      	ldr	r3, [pc, #532]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a84      	ldr	r2, [pc, #528]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	e01d      	b.n	8006998 <HAL_RCC_OscConfig+0xb0>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006964:	d10c      	bne.n	8006980 <HAL_RCC_OscConfig+0x98>
 8006966:	4b7f      	ldr	r3, [pc, #508]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a7e      	ldr	r2, [pc, #504]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 800696c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	4b7c      	ldr	r3, [pc, #496]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a7b      	ldr	r2, [pc, #492]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800697c:	6013      	str	r3, [r2, #0]
 800697e:	e00b      	b.n	8006998 <HAL_RCC_OscConfig+0xb0>
 8006980:	4b78      	ldr	r3, [pc, #480]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a77      	ldr	r2, [pc, #476]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	4b75      	ldr	r3, [pc, #468]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a74      	ldr	r2, [pc, #464]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d013      	beq.n	80069c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a0:	f7fd f818 	bl	80039d4 <HAL_GetTick>
 80069a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069a8:	f7fd f814 	bl	80039d4 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b64      	cmp	r3, #100	@ 0x64
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e29e      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069ba:	4b6a      	ldr	r3, [pc, #424]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0f0      	beq.n	80069a8 <HAL_RCC_OscConfig+0xc0>
 80069c6:	e014      	b.n	80069f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c8:	f7fd f804 	bl	80039d4 <HAL_GetTick>
 80069cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069ce:	e008      	b.n	80069e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069d0:	f7fd f800 	bl	80039d4 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b64      	cmp	r3, #100	@ 0x64
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e28a      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069e2:	4b60      	ldr	r3, [pc, #384]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1f0      	bne.n	80069d0 <HAL_RCC_OscConfig+0xe8>
 80069ee:	e000      	b.n	80069f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d075      	beq.n	8006aea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069fe:	4b59      	ldr	r3, [pc, #356]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 030c 	and.w	r3, r3, #12
 8006a06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a08:	4b56      	ldr	r3, [pc, #344]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f003 0303 	and.w	r3, r3, #3
 8006a10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2b0c      	cmp	r3, #12
 8006a16:	d102      	bne.n	8006a1e <HAL_RCC_OscConfig+0x136>
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d002      	beq.n	8006a24 <HAL_RCC_OscConfig+0x13c>
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d11f      	bne.n	8006a64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a24:	4b4f      	ldr	r3, [pc, #316]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d005      	beq.n	8006a3c <HAL_RCC_OscConfig+0x154>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e25d      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a3c:	4b49      	ldr	r3, [pc, #292]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	061b      	lsls	r3, r3, #24
 8006a4a:	4946      	ldr	r1, [pc, #280]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a50:	4b45      	ldr	r3, [pc, #276]	@ (8006b68 <HAL_RCC_OscConfig+0x280>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fa fa57 	bl	8000f08 <HAL_InitTick>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d043      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e249      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d023      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a3c      	ldr	r2, [pc, #240]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a78:	f7fc ffac 	bl	80039d4 <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a80:	f7fc ffa8 	bl	80039d4 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e232      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a92:	4b34      	ldr	r3, [pc, #208]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d0f0      	beq.n	8006a80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a9e:	4b31      	ldr	r3, [pc, #196]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	061b      	lsls	r3, r3, #24
 8006aac:	492d      	ldr	r1, [pc, #180]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	604b      	str	r3, [r1, #4]
 8006ab2:	e01a      	b.n	8006aea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a2a      	ldr	r2, [pc, #168]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006aba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac0:	f7fc ff88 	bl	80039d4 <HAL_GetTick>
 8006ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ac6:	e008      	b.n	8006ada <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ac8:	f7fc ff84 	bl	80039d4 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e20e      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ada:	4b22      	ldr	r3, [pc, #136]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1f0      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x1e0>
 8006ae6:	e000      	b.n	8006aea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ae8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0308 	and.w	r3, r3, #8
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d041      	beq.n	8006b7a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d01c      	beq.n	8006b38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006afe:	4b19      	ldr	r3, [pc, #100]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b04:	4a17      	ldr	r2, [pc, #92]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006b06:	f043 0301 	orr.w	r3, r3, #1
 8006b0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b0e:	f7fc ff61 	bl	80039d4 <HAL_GetTick>
 8006b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b14:	e008      	b.n	8006b28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b16:	f7fc ff5d 	bl	80039d4 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d901      	bls.n	8006b28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e1e7      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b28:	4b0e      	ldr	r3, [pc, #56]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0ef      	beq.n	8006b16 <HAL_RCC_OscConfig+0x22e>
 8006b36:	e020      	b.n	8006b7a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b38:	4b0a      	ldr	r3, [pc, #40]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b3e:	4a09      	ldr	r2, [pc, #36]	@ (8006b64 <HAL_RCC_OscConfig+0x27c>)
 8006b40:	f023 0301 	bic.w	r3, r3, #1
 8006b44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b48:	f7fc ff44 	bl	80039d4 <HAL_GetTick>
 8006b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b4e:	e00d      	b.n	8006b6c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b50:	f7fc ff40 	bl	80039d4 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d906      	bls.n	8006b6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e1ca      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>
 8006b62:	bf00      	nop
 8006b64:	40021000 	.word	0x40021000
 8006b68:	200001f8 	.word	0x200001f8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b6c:	4b8c      	ldr	r3, [pc, #560]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1ea      	bne.n	8006b50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0304 	and.w	r3, r3, #4
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 80a6 	beq.w	8006cd4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b8c:	4b84      	ldr	r3, [pc, #528]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <HAL_RCC_OscConfig+0x2b4>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e000      	b.n	8006b9e <HAL_RCC_OscConfig+0x2b6>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00d      	beq.n	8006bbe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ba2:	4b7f      	ldr	r3, [pc, #508]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba6:	4a7e      	ldr	r2, [pc, #504]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bac:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bae:	4b7c      	ldr	r3, [pc, #496]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bb6:	60fb      	str	r3, [r7, #12]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bbe:	4b79      	ldr	r3, [pc, #484]	@ (8006da4 <HAL_RCC_OscConfig+0x4bc>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d118      	bne.n	8006bfc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bca:	4b76      	ldr	r3, [pc, #472]	@ (8006da4 <HAL_RCC_OscConfig+0x4bc>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a75      	ldr	r2, [pc, #468]	@ (8006da4 <HAL_RCC_OscConfig+0x4bc>)
 8006bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bd6:	f7fc fefd 	bl	80039d4 <HAL_GetTick>
 8006bda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bdc:	e008      	b.n	8006bf0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bde:	f7fc fef9 	bl	80039d4 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d901      	bls.n	8006bf0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e183      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bf0:	4b6c      	ldr	r3, [pc, #432]	@ (8006da4 <HAL_RCC_OscConfig+0x4bc>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d0f0      	beq.n	8006bde <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d108      	bne.n	8006c16 <HAL_RCC_OscConfig+0x32e>
 8006c04:	4b66      	ldr	r3, [pc, #408]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c0a:	4a65      	ldr	r2, [pc, #404]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006c0c:	f043 0301 	orr.w	r3, r3, #1
 8006c10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c14:	e024      	b.n	8006c60 <HAL_RCC_OscConfig+0x378>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	2b05      	cmp	r3, #5
 8006c1c:	d110      	bne.n	8006c40 <HAL_RCC_OscConfig+0x358>
 8006c1e:	4b60      	ldr	r3, [pc, #384]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c24:	4a5e      	ldr	r2, [pc, #376]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006c26:	f043 0304 	orr.w	r3, r3, #4
 8006c2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c2e:	4b5c      	ldr	r3, [pc, #368]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c34:	4a5a      	ldr	r2, [pc, #360]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006c36:	f043 0301 	orr.w	r3, r3, #1
 8006c3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c3e:	e00f      	b.n	8006c60 <HAL_RCC_OscConfig+0x378>
 8006c40:	4b57      	ldr	r3, [pc, #348]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c46:	4a56      	ldr	r2, [pc, #344]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006c48:	f023 0301 	bic.w	r3, r3, #1
 8006c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c50:	4b53      	ldr	r3, [pc, #332]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c56:	4a52      	ldr	r2, [pc, #328]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006c58:	f023 0304 	bic.w	r3, r3, #4
 8006c5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d016      	beq.n	8006c96 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c68:	f7fc feb4 	bl	80039d4 <HAL_GetTick>
 8006c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c6e:	e00a      	b.n	8006c86 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c70:	f7fc feb0 	bl	80039d4 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e138      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c86:	4b46      	ldr	r3, [pc, #280]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0ed      	beq.n	8006c70 <HAL_RCC_OscConfig+0x388>
 8006c94:	e015      	b.n	8006cc2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c96:	f7fc fe9d 	bl	80039d4 <HAL_GetTick>
 8006c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c9c:	e00a      	b.n	8006cb4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c9e:	f7fc fe99 	bl	80039d4 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d901      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e121      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cb4:	4b3a      	ldr	r3, [pc, #232]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1ed      	bne.n	8006c9e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006cc2:	7ffb      	ldrb	r3, [r7, #31]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d105      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cc8:	4b35      	ldr	r3, [pc, #212]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ccc:	4a34      	ldr	r2, [pc, #208]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006cce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cd2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0320 	and.w	r3, r3, #32
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d03c      	beq.n	8006d5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01c      	beq.n	8006d22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006cea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cee:	4a2c      	ldr	r2, [pc, #176]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006cf0:	f043 0301 	orr.w	r3, r3, #1
 8006cf4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf8:	f7fc fe6c 	bl	80039d4 <HAL_GetTick>
 8006cfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cfe:	e008      	b.n	8006d12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d00:	f7fc fe68 	bl	80039d4 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d901      	bls.n	8006d12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e0f2      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d12:	4b23      	ldr	r3, [pc, #140]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006d14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d0ef      	beq.n	8006d00 <HAL_RCC_OscConfig+0x418>
 8006d20:	e01b      	b.n	8006d5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d22:	4b1f      	ldr	r3, [pc, #124]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d28:	4a1d      	ldr	r2, [pc, #116]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006d2a:	f023 0301 	bic.w	r3, r3, #1
 8006d2e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d32:	f7fc fe4f 	bl	80039d4 <HAL_GetTick>
 8006d36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d38:	e008      	b.n	8006d4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d3a:	f7fc fe4b 	bl	80039d4 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d901      	bls.n	8006d4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e0d5      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d4c:	4b14      	ldr	r3, [pc, #80]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1ef      	bne.n	8006d3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 80c9 	beq.w	8006ef6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d64:	4b0e      	ldr	r3, [pc, #56]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f003 030c 	and.w	r3, r3, #12
 8006d6c:	2b0c      	cmp	r3, #12
 8006d6e:	f000 8083 	beq.w	8006e78 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d15e      	bne.n	8006e38 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d7a:	4b09      	ldr	r3, [pc, #36]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a08      	ldr	r2, [pc, #32]	@ (8006da0 <HAL_RCC_OscConfig+0x4b8>)
 8006d80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d86:	f7fc fe25 	bl	80039d4 <HAL_GetTick>
 8006d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d8c:	e00c      	b.n	8006da8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d8e:	f7fc fe21 	bl	80039d4 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d905      	bls.n	8006da8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e0ab      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>
 8006da0:	40021000 	.word	0x40021000
 8006da4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006da8:	4b55      	ldr	r3, [pc, #340]	@ (8006f00 <HAL_RCC_OscConfig+0x618>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1ec      	bne.n	8006d8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006db4:	4b52      	ldr	r3, [pc, #328]	@ (8006f00 <HAL_RCC_OscConfig+0x618>)
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	4b52      	ldr	r3, [pc, #328]	@ (8006f04 <HAL_RCC_OscConfig+0x61c>)
 8006dba:	4013      	ands	r3, r2
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	6a11      	ldr	r1, [r2, #32]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006dc4:	3a01      	subs	r2, #1
 8006dc6:	0112      	lsls	r2, r2, #4
 8006dc8:	4311      	orrs	r1, r2
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006dce:	0212      	lsls	r2, r2, #8
 8006dd0:	4311      	orrs	r1, r2
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006dd6:	0852      	lsrs	r2, r2, #1
 8006dd8:	3a01      	subs	r2, #1
 8006dda:	0552      	lsls	r2, r2, #21
 8006ddc:	4311      	orrs	r1, r2
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006de2:	0852      	lsrs	r2, r2, #1
 8006de4:	3a01      	subs	r2, #1
 8006de6:	0652      	lsls	r2, r2, #25
 8006de8:	4311      	orrs	r1, r2
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006dee:	06d2      	lsls	r2, r2, #27
 8006df0:	430a      	orrs	r2, r1
 8006df2:	4943      	ldr	r1, [pc, #268]	@ (8006f00 <HAL_RCC_OscConfig+0x618>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006df8:	4b41      	ldr	r3, [pc, #260]	@ (8006f00 <HAL_RCC_OscConfig+0x618>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a40      	ldr	r2, [pc, #256]	@ (8006f00 <HAL_RCC_OscConfig+0x618>)
 8006dfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e04:	4b3e      	ldr	r3, [pc, #248]	@ (8006f00 <HAL_RCC_OscConfig+0x618>)
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	4a3d      	ldr	r2, [pc, #244]	@ (8006f00 <HAL_RCC_OscConfig+0x618>)
 8006e0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e10:	f7fc fde0 	bl	80039d4 <HAL_GetTick>
 8006e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e16:	e008      	b.n	8006e2a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e18:	f7fc fddc 	bl	80039d4 <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d901      	bls.n	8006e2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e066      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e2a:	4b35      	ldr	r3, [pc, #212]	@ (8006f00 <HAL_RCC_OscConfig+0x618>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0f0      	beq.n	8006e18 <HAL_RCC_OscConfig+0x530>
 8006e36:	e05e      	b.n	8006ef6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e38:	4b31      	ldr	r3, [pc, #196]	@ (8006f00 <HAL_RCC_OscConfig+0x618>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a30      	ldr	r2, [pc, #192]	@ (8006f00 <HAL_RCC_OscConfig+0x618>)
 8006e3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e44:	f7fc fdc6 	bl	80039d4 <HAL_GetTick>
 8006e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e4a:	e008      	b.n	8006e5e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e4c:	f7fc fdc2 	bl	80039d4 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d901      	bls.n	8006e5e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e04c      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e5e:	4b28      	ldr	r3, [pc, #160]	@ (8006f00 <HAL_RCC_OscConfig+0x618>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1f0      	bne.n	8006e4c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006e6a:	4b25      	ldr	r3, [pc, #148]	@ (8006f00 <HAL_RCC_OscConfig+0x618>)
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	4924      	ldr	r1, [pc, #144]	@ (8006f00 <HAL_RCC_OscConfig+0x618>)
 8006e70:	4b25      	ldr	r3, [pc, #148]	@ (8006f08 <HAL_RCC_OscConfig+0x620>)
 8006e72:	4013      	ands	r3, r2
 8006e74:	60cb      	str	r3, [r1, #12]
 8006e76:	e03e      	b.n	8006ef6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	69db      	ldr	r3, [r3, #28]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e039      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006e84:	4b1e      	ldr	r3, [pc, #120]	@ (8006f00 <HAL_RCC_OscConfig+0x618>)
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f003 0203 	and.w	r2, r3, #3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d12c      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d123      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d11b      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d113      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed4:	085b      	lsrs	r3, r3, #1
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d109      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee8:	085b      	lsrs	r3, r3, #1
 8006eea:	3b01      	subs	r3, #1
 8006eec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d001      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3720      	adds	r7, #32
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	40021000 	.word	0x40021000
 8006f04:	019f800c 	.word	0x019f800c
 8006f08:	feeefffc 	.word	0xfeeefffc

08006f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006f16:	2300      	movs	r3, #0
 8006f18:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e11e      	b.n	8007162 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f24:	4b91      	ldr	r3, [pc, #580]	@ (800716c <HAL_RCC_ClockConfig+0x260>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 030f 	and.w	r3, r3, #15
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d910      	bls.n	8006f54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f32:	4b8e      	ldr	r3, [pc, #568]	@ (800716c <HAL_RCC_ClockConfig+0x260>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f023 020f 	bic.w	r2, r3, #15
 8006f3a:	498c      	ldr	r1, [pc, #560]	@ (800716c <HAL_RCC_ClockConfig+0x260>)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f42:	4b8a      	ldr	r3, [pc, #552]	@ (800716c <HAL_RCC_ClockConfig+0x260>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 030f 	and.w	r3, r3, #15
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d001      	beq.n	8006f54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e106      	b.n	8007162 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d073      	beq.n	8007048 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d129      	bne.n	8006fbc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f68:	4b81      	ldr	r3, [pc, #516]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e0f4      	b.n	8007162 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006f78:	f000 f9d0 	bl	800731c <RCC_GetSysClockFreqFromPLLSource>
 8006f7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	4a7c      	ldr	r2, [pc, #496]	@ (8007174 <HAL_RCC_ClockConfig+0x268>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d93f      	bls.n	8007006 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f86:	4b7a      	ldr	r3, [pc, #488]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d009      	beq.n	8006fa6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d033      	beq.n	8007006 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d12f      	bne.n	8007006 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006fa6:	4b72      	ldr	r3, [pc, #456]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fae:	4a70      	ldr	r2, [pc, #448]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 8006fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fb4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006fb6:	2380      	movs	r3, #128	@ 0x80
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	e024      	b.n	8007006 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d107      	bne.n	8006fd4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d109      	bne.n	8006fe4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e0c6      	b.n	8007162 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fd4:	4b66      	ldr	r3, [pc, #408]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e0be      	b.n	8007162 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006fe4:	f000 f8ce 	bl	8007184 <HAL_RCC_GetSysClockFreq>
 8006fe8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	4a61      	ldr	r2, [pc, #388]	@ (8007174 <HAL_RCC_ClockConfig+0x268>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d909      	bls.n	8007006 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ffa:	4a5d      	ldr	r2, [pc, #372]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 8006ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007000:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007002:	2380      	movs	r3, #128	@ 0x80
 8007004:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007006:	4b5a      	ldr	r3, [pc, #360]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f023 0203 	bic.w	r2, r3, #3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	4957      	ldr	r1, [pc, #348]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 8007014:	4313      	orrs	r3, r2
 8007016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007018:	f7fc fcdc 	bl	80039d4 <HAL_GetTick>
 800701c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800701e:	e00a      	b.n	8007036 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007020:	f7fc fcd8 	bl	80039d4 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800702e:	4293      	cmp	r3, r2
 8007030:	d901      	bls.n	8007036 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e095      	b.n	8007162 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007036:	4b4e      	ldr	r3, [pc, #312]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f003 020c 	and.w	r2, r3, #12
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	429a      	cmp	r2, r3
 8007046:	d1eb      	bne.n	8007020 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0302 	and.w	r3, r3, #2
 8007050:	2b00      	cmp	r3, #0
 8007052:	d023      	beq.n	800709c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007060:	4b43      	ldr	r3, [pc, #268]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	4a42      	ldr	r2, [pc, #264]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 8007066:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800706a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0308 	and.w	r3, r3, #8
 8007074:	2b00      	cmp	r3, #0
 8007076:	d007      	beq.n	8007088 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007078:	4b3d      	ldr	r3, [pc, #244]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007080:	4a3b      	ldr	r2, [pc, #236]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 8007082:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007086:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007088:	4b39      	ldr	r3, [pc, #228]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	4936      	ldr	r1, [pc, #216]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 8007096:	4313      	orrs	r3, r2
 8007098:	608b      	str	r3, [r1, #8]
 800709a:	e008      	b.n	80070ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	2b80      	cmp	r3, #128	@ 0x80
 80070a0:	d105      	bne.n	80070ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80070a2:	4b33      	ldr	r3, [pc, #204]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	4a32      	ldr	r2, [pc, #200]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 80070a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070ae:	4b2f      	ldr	r3, [pc, #188]	@ (800716c <HAL_RCC_ClockConfig+0x260>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 030f 	and.w	r3, r3, #15
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d21d      	bcs.n	80070f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070bc:	4b2b      	ldr	r3, [pc, #172]	@ (800716c <HAL_RCC_ClockConfig+0x260>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f023 020f 	bic.w	r2, r3, #15
 80070c4:	4929      	ldr	r1, [pc, #164]	@ (800716c <HAL_RCC_ClockConfig+0x260>)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80070cc:	f7fc fc82 	bl	80039d4 <HAL_GetTick>
 80070d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070d2:	e00a      	b.n	80070ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070d4:	f7fc fc7e 	bl	80039d4 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d901      	bls.n	80070ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e03b      	b.n	8007162 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ea:	4b20      	ldr	r3, [pc, #128]	@ (800716c <HAL_RCC_ClockConfig+0x260>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 030f 	and.w	r3, r3, #15
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d1ed      	bne.n	80070d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	d008      	beq.n	8007116 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007104:	4b1a      	ldr	r3, [pc, #104]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	4917      	ldr	r1, [pc, #92]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 8007112:	4313      	orrs	r3, r2
 8007114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0308 	and.w	r3, r3, #8
 800711e:	2b00      	cmp	r3, #0
 8007120:	d009      	beq.n	8007136 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007122:	4b13      	ldr	r3, [pc, #76]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	00db      	lsls	r3, r3, #3
 8007130:	490f      	ldr	r1, [pc, #60]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 8007132:	4313      	orrs	r3, r2
 8007134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007136:	f000 f825 	bl	8007184 <HAL_RCC_GetSysClockFreq>
 800713a:	4602      	mov	r2, r0
 800713c:	4b0c      	ldr	r3, [pc, #48]	@ (8007170 <HAL_RCC_ClockConfig+0x264>)
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	091b      	lsrs	r3, r3, #4
 8007142:	f003 030f 	and.w	r3, r3, #15
 8007146:	490c      	ldr	r1, [pc, #48]	@ (8007178 <HAL_RCC_ClockConfig+0x26c>)
 8007148:	5ccb      	ldrb	r3, [r1, r3]
 800714a:	f003 031f 	and.w	r3, r3, #31
 800714e:	fa22 f303 	lsr.w	r3, r2, r3
 8007152:	4a0a      	ldr	r2, [pc, #40]	@ (800717c <HAL_RCC_ClockConfig+0x270>)
 8007154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007156:	4b0a      	ldr	r3, [pc, #40]	@ (8007180 <HAL_RCC_ClockConfig+0x274>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4618      	mov	r0, r3
 800715c:	f7f9 fed4 	bl	8000f08 <HAL_InitTick>
 8007160:	4603      	mov	r3, r0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	40022000 	.word	0x40022000
 8007170:	40021000 	.word	0x40021000
 8007174:	04c4b400 	.word	0x04c4b400
 8007178:	0800cd24 	.word	0x0800cd24
 800717c:	20000000 	.word	0x20000000
 8007180:	200001f8 	.word	0x200001f8

08007184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800718a:	4b2c      	ldr	r3, [pc, #176]	@ (800723c <HAL_RCC_GetSysClockFreq+0xb8>)
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f003 030c 	and.w	r3, r3, #12
 8007192:	2b04      	cmp	r3, #4
 8007194:	d102      	bne.n	800719c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007196:	4b2a      	ldr	r3, [pc, #168]	@ (8007240 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007198:	613b      	str	r3, [r7, #16]
 800719a:	e047      	b.n	800722c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800719c:	4b27      	ldr	r3, [pc, #156]	@ (800723c <HAL_RCC_GetSysClockFreq+0xb8>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f003 030c 	and.w	r3, r3, #12
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d102      	bne.n	80071ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80071a8:	4b26      	ldr	r3, [pc, #152]	@ (8007244 <HAL_RCC_GetSysClockFreq+0xc0>)
 80071aa:	613b      	str	r3, [r7, #16]
 80071ac:	e03e      	b.n	800722c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80071ae:	4b23      	ldr	r3, [pc, #140]	@ (800723c <HAL_RCC_GetSysClockFreq+0xb8>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f003 030c 	and.w	r3, r3, #12
 80071b6:	2b0c      	cmp	r3, #12
 80071b8:	d136      	bne.n	8007228 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80071ba:	4b20      	ldr	r3, [pc, #128]	@ (800723c <HAL_RCC_GetSysClockFreq+0xb8>)
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f003 0303 	and.w	r3, r3, #3
 80071c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071c4:	4b1d      	ldr	r3, [pc, #116]	@ (800723c <HAL_RCC_GetSysClockFreq+0xb8>)
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	091b      	lsrs	r3, r3, #4
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	3301      	adds	r3, #1
 80071d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	d10c      	bne.n	80071f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071d8:	4a1a      	ldr	r2, [pc, #104]	@ (8007244 <HAL_RCC_GetSysClockFreq+0xc0>)
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e0:	4a16      	ldr	r2, [pc, #88]	@ (800723c <HAL_RCC_GetSysClockFreq+0xb8>)
 80071e2:	68d2      	ldr	r2, [r2, #12]
 80071e4:	0a12      	lsrs	r2, r2, #8
 80071e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071ea:	fb02 f303 	mul.w	r3, r2, r3
 80071ee:	617b      	str	r3, [r7, #20]
      break;
 80071f0:	e00c      	b.n	800720c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071f2:	4a13      	ldr	r2, [pc, #76]	@ (8007240 <HAL_RCC_GetSysClockFreq+0xbc>)
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fa:	4a10      	ldr	r2, [pc, #64]	@ (800723c <HAL_RCC_GetSysClockFreq+0xb8>)
 80071fc:	68d2      	ldr	r2, [r2, #12]
 80071fe:	0a12      	lsrs	r2, r2, #8
 8007200:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007204:	fb02 f303 	mul.w	r3, r2, r3
 8007208:	617b      	str	r3, [r7, #20]
      break;
 800720a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800720c:	4b0b      	ldr	r3, [pc, #44]	@ (800723c <HAL_RCC_GetSysClockFreq+0xb8>)
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	0e5b      	lsrs	r3, r3, #25
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	3301      	adds	r3, #1
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	fbb2 f3f3 	udiv	r3, r2, r3
 8007224:	613b      	str	r3, [r7, #16]
 8007226:	e001      	b.n	800722c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800722c:	693b      	ldr	r3, [r7, #16]
}
 800722e:	4618      	mov	r0, r3
 8007230:	371c      	adds	r7, #28
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	40021000 	.word	0x40021000
 8007240:	00f42400 	.word	0x00f42400
 8007244:	016e3600 	.word	0x016e3600

08007248 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007248:	b480      	push	{r7}
 800724a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800724c:	4b03      	ldr	r3, [pc, #12]	@ (800725c <HAL_RCC_GetHCLKFreq+0x14>)
 800724e:	681b      	ldr	r3, [r3, #0]
}
 8007250:	4618      	mov	r0, r3
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	20000000 	.word	0x20000000

08007260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007264:	f7ff fff0 	bl	8007248 <HAL_RCC_GetHCLKFreq>
 8007268:	4602      	mov	r2, r0
 800726a:	4b06      	ldr	r3, [pc, #24]	@ (8007284 <HAL_RCC_GetPCLK1Freq+0x24>)
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	0a1b      	lsrs	r3, r3, #8
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	4904      	ldr	r1, [pc, #16]	@ (8007288 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007276:	5ccb      	ldrb	r3, [r1, r3]
 8007278:	f003 031f 	and.w	r3, r3, #31
 800727c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007280:	4618      	mov	r0, r3
 8007282:	bd80      	pop	{r7, pc}
 8007284:	40021000 	.word	0x40021000
 8007288:	0800cd34 	.word	0x0800cd34

0800728c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007290:	f7ff ffda 	bl	8007248 <HAL_RCC_GetHCLKFreq>
 8007294:	4602      	mov	r2, r0
 8007296:	4b06      	ldr	r3, [pc, #24]	@ (80072b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	0adb      	lsrs	r3, r3, #11
 800729c:	f003 0307 	and.w	r3, r3, #7
 80072a0:	4904      	ldr	r1, [pc, #16]	@ (80072b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80072a2:	5ccb      	ldrb	r3, [r1, r3]
 80072a4:	f003 031f 	and.w	r3, r3, #31
 80072a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	40021000 	.word	0x40021000
 80072b4:	0800cd34 	.word	0x0800cd34

080072b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	220f      	movs	r2, #15
 80072c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80072c8:	4b12      	ldr	r3, [pc, #72]	@ (8007314 <HAL_RCC_GetClockConfig+0x5c>)
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f003 0203 	and.w	r2, r3, #3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80072d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007314 <HAL_RCC_GetClockConfig+0x5c>)
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80072e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007314 <HAL_RCC_GetClockConfig+0x5c>)
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80072ec:	4b09      	ldr	r3, [pc, #36]	@ (8007314 <HAL_RCC_GetClockConfig+0x5c>)
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	08db      	lsrs	r3, r3, #3
 80072f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80072fa:	4b07      	ldr	r3, [pc, #28]	@ (8007318 <HAL_RCC_GetClockConfig+0x60>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 020f 	and.w	r2, r3, #15
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	601a      	str	r2, [r3, #0]
}
 8007306:	bf00      	nop
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	40021000 	.word	0x40021000
 8007318:	40022000 	.word	0x40022000

0800731c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007322:	4b1e      	ldr	r3, [pc, #120]	@ (800739c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	f003 0303 	and.w	r3, r3, #3
 800732a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800732c:	4b1b      	ldr	r3, [pc, #108]	@ (800739c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	091b      	lsrs	r3, r3, #4
 8007332:	f003 030f 	and.w	r3, r3, #15
 8007336:	3301      	adds	r3, #1
 8007338:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	2b03      	cmp	r3, #3
 800733e:	d10c      	bne.n	800735a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007340:	4a17      	ldr	r2, [pc, #92]	@ (80073a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	fbb2 f3f3 	udiv	r3, r2, r3
 8007348:	4a14      	ldr	r2, [pc, #80]	@ (800739c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800734a:	68d2      	ldr	r2, [r2, #12]
 800734c:	0a12      	lsrs	r2, r2, #8
 800734e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007352:	fb02 f303 	mul.w	r3, r2, r3
 8007356:	617b      	str	r3, [r7, #20]
    break;
 8007358:	e00c      	b.n	8007374 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800735a:	4a12      	ldr	r2, [pc, #72]	@ (80073a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007362:	4a0e      	ldr	r2, [pc, #56]	@ (800739c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007364:	68d2      	ldr	r2, [r2, #12]
 8007366:	0a12      	lsrs	r2, r2, #8
 8007368:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800736c:	fb02 f303 	mul.w	r3, r2, r3
 8007370:	617b      	str	r3, [r7, #20]
    break;
 8007372:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007374:	4b09      	ldr	r3, [pc, #36]	@ (800739c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	0e5b      	lsrs	r3, r3, #25
 800737a:	f003 0303 	and.w	r3, r3, #3
 800737e:	3301      	adds	r3, #1
 8007380:	005b      	lsls	r3, r3, #1
 8007382:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	fbb2 f3f3 	udiv	r3, r2, r3
 800738c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800738e:	687b      	ldr	r3, [r7, #4]
}
 8007390:	4618      	mov	r0, r3
 8007392:	371c      	adds	r7, #28
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	40021000 	.word	0x40021000
 80073a0:	016e3600 	.word	0x016e3600
 80073a4:	00f42400 	.word	0x00f42400

080073a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073b0:	2300      	movs	r3, #0
 80073b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073b4:	2300      	movs	r3, #0
 80073b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 8098 	beq.w	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073c6:	2300      	movs	r3, #0
 80073c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073ca:	4b43      	ldr	r3, [pc, #268]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10d      	bne.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073d6:	4b40      	ldr	r3, [pc, #256]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073da:	4a3f      	ldr	r2, [pc, #252]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80073e2:	4b3d      	ldr	r3, [pc, #244]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073ea:	60bb      	str	r3, [r7, #8]
 80073ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073ee:	2301      	movs	r3, #1
 80073f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073f2:	4b3a      	ldr	r3, [pc, #232]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a39      	ldr	r2, [pc, #228]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073fe:	f7fc fae9 	bl	80039d4 <HAL_GetTick>
 8007402:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007404:	e009      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007406:	f7fc fae5 	bl	80039d4 <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	2b02      	cmp	r3, #2
 8007412:	d902      	bls.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	74fb      	strb	r3, [r7, #19]
        break;
 8007418:	e005      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800741a:	4b30      	ldr	r3, [pc, #192]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0ef      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007426:	7cfb      	ldrb	r3, [r7, #19]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d159      	bne.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800742c:	4b2a      	ldr	r3, [pc, #168]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800742e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007432:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007436:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d01e      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	429a      	cmp	r2, r3
 8007446:	d019      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007448:	4b23      	ldr	r3, [pc, #140]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800744a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800744e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007452:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007454:	4b20      	ldr	r3, [pc, #128]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800745a:	4a1f      	ldr	r2, [pc, #124]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800745c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007460:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007464:	4b1c      	ldr	r3, [pc, #112]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800746a:	4a1b      	ldr	r2, [pc, #108]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800746c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007474:	4a18      	ldr	r2, [pc, #96]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d016      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007486:	f7fc faa5 	bl	80039d4 <HAL_GetTick>
 800748a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800748c:	e00b      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800748e:	f7fc faa1 	bl	80039d4 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800749c:	4293      	cmp	r3, r2
 800749e:	d902      	bls.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	74fb      	strb	r3, [r7, #19]
            break;
 80074a4:	e006      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074a6:	4b0c      	ldr	r3, [pc, #48]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0ec      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80074b4:	7cfb      	ldrb	r3, [r7, #19]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10b      	bne.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074ba:	4b07      	ldr	r3, [pc, #28]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c8:	4903      	ldr	r1, [pc, #12]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80074d0:	e008      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80074d2:	7cfb      	ldrb	r3, [r7, #19]
 80074d4:	74bb      	strb	r3, [r7, #18]
 80074d6:	e005      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80074d8:	40021000 	.word	0x40021000
 80074dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e0:	7cfb      	ldrb	r3, [r7, #19]
 80074e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074e4:	7c7b      	ldrb	r3, [r7, #17]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d105      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074ea:	4ba6      	ldr	r3, [pc, #664]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ee:	4aa5      	ldr	r2, [pc, #660]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00a      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007502:	4ba0      	ldr	r3, [pc, #640]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007508:	f023 0203 	bic.w	r2, r3, #3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	499c      	ldr	r1, [pc, #624]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007512:	4313      	orrs	r3, r2
 8007514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007524:	4b97      	ldr	r3, [pc, #604]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800752a:	f023 020c 	bic.w	r2, r3, #12
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	4994      	ldr	r1, [pc, #592]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007534:	4313      	orrs	r3, r2
 8007536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0304 	and.w	r3, r3, #4
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007546:	4b8f      	ldr	r3, [pc, #572]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800754c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	498b      	ldr	r1, [pc, #556]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007556:	4313      	orrs	r3, r2
 8007558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0308 	and.w	r3, r3, #8
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00a      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007568:	4b86      	ldr	r3, [pc, #536]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800756a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800756e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	4983      	ldr	r1, [pc, #524]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007578:	4313      	orrs	r3, r2
 800757a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0320 	and.w	r3, r3, #32
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00a      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800758a:	4b7e      	ldr	r3, [pc, #504]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800758c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007590:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	497a      	ldr	r1, [pc, #488]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800759a:	4313      	orrs	r3, r2
 800759c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00a      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075ac:	4b75      	ldr	r3, [pc, #468]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	4972      	ldr	r1, [pc, #456]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075ce:	4b6d      	ldr	r3, [pc, #436]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	4969      	ldr	r1, [pc, #420]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00a      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075f0:	4b64      	ldr	r3, [pc, #400]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	4961      	ldr	r1, [pc, #388]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007600:	4313      	orrs	r3, r2
 8007602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00a      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007612:	4b5c      	ldr	r3, [pc, #368]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007618:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007620:	4958      	ldr	r1, [pc, #352]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007622:	4313      	orrs	r3, r2
 8007624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007630:	2b00      	cmp	r3, #0
 8007632:	d015      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007634:	4b53      	ldr	r3, [pc, #332]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800763a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007642:	4950      	ldr	r1, [pc, #320]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007644:	4313      	orrs	r3, r2
 8007646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800764e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007652:	d105      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007654:	4b4b      	ldr	r3, [pc, #300]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	4a4a      	ldr	r2, [pc, #296]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800765a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800765e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007668:	2b00      	cmp	r3, #0
 800766a:	d015      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800766c:	4b45      	ldr	r3, [pc, #276]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800766e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007672:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767a:	4942      	ldr	r1, [pc, #264]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800767c:	4313      	orrs	r3, r2
 800767e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007686:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800768a:	d105      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800768c:	4b3d      	ldr	r3, [pc, #244]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	4a3c      	ldr	r2, [pc, #240]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007696:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d015      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80076a4:	4b37      	ldr	r3, [pc, #220]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b2:	4934      	ldr	r1, [pc, #208]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076c2:	d105      	bne.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076c4:	4b2f      	ldr	r3, [pc, #188]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	4a2e      	ldr	r2, [pc, #184]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d015      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076dc:	4b29      	ldr	r3, [pc, #164]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ea:	4926      	ldr	r1, [pc, #152]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076fa:	d105      	bne.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076fc:	4b21      	ldr	r3, [pc, #132]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	4a20      	ldr	r2, [pc, #128]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007706:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d015      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007714:	4b1b      	ldr	r3, [pc, #108]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800771a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007722:	4918      	ldr	r1, [pc, #96]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007724:	4313      	orrs	r3, r2
 8007726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800772e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007732:	d105      	bne.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007734:	4b13      	ldr	r3, [pc, #76]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	4a12      	ldr	r2, [pc, #72]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800773a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800773e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d015      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800774c:	4b0d      	ldr	r3, [pc, #52]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800774e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007752:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800775a:	490a      	ldr	r1, [pc, #40]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800775c:	4313      	orrs	r3, r2
 800775e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007766:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800776a:	d105      	bne.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800776c:	4b05      	ldr	r3, [pc, #20]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	4a04      	ldr	r2, [pc, #16]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007776:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007778:	7cbb      	ldrb	r3, [r7, #18]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	40021000 	.word	0x40021000

08007788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e049      	b.n	800782e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d106      	bne.n	80077b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f841 	bl	8007836 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3304      	adds	r3, #4
 80077c4:	4619      	mov	r1, r3
 80077c6:	4610      	mov	r0, r2
 80077c8:	f000 fe56 	bl	8008478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007836:	b480      	push	{r7}
 8007838:	b083      	sub	sp, #12
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800783e:	bf00      	nop
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
	...

0800784c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b01      	cmp	r3, #1
 800785e:	d001      	beq.n	8007864 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e042      	b.n	80078ea <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a21      	ldr	r2, [pc, #132]	@ (80078f8 <HAL_TIM_Base_Start+0xac>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d018      	beq.n	80078a8 <HAL_TIM_Base_Start+0x5c>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800787e:	d013      	beq.n	80078a8 <HAL_TIM_Base_Start+0x5c>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a1d      	ldr	r2, [pc, #116]	@ (80078fc <HAL_TIM_Base_Start+0xb0>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d00e      	beq.n	80078a8 <HAL_TIM_Base_Start+0x5c>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a1c      	ldr	r2, [pc, #112]	@ (8007900 <HAL_TIM_Base_Start+0xb4>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d009      	beq.n	80078a8 <HAL_TIM_Base_Start+0x5c>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a1a      	ldr	r2, [pc, #104]	@ (8007904 <HAL_TIM_Base_Start+0xb8>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d004      	beq.n	80078a8 <HAL_TIM_Base_Start+0x5c>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a19      	ldr	r2, [pc, #100]	@ (8007908 <HAL_TIM_Base_Start+0xbc>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d115      	bne.n	80078d4 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689a      	ldr	r2, [r3, #8]
 80078ae:	4b17      	ldr	r3, [pc, #92]	@ (800790c <HAL_TIM_Base_Start+0xc0>)
 80078b0:	4013      	ands	r3, r2
 80078b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b06      	cmp	r3, #6
 80078b8:	d015      	beq.n	80078e6 <HAL_TIM_Base_Start+0x9a>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078c0:	d011      	beq.n	80078e6 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f042 0201 	orr.w	r2, r2, #1
 80078d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d2:	e008      	b.n	80078e6 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 0201 	orr.w	r2, r2, #1
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	e000      	b.n	80078e8 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	40012c00 	.word	0x40012c00
 80078fc:	40000400 	.word	0x40000400
 8007900:	40000800 	.word	0x40000800
 8007904:	40013400 	.word	0x40013400
 8007908:	40014000 	.word	0x40014000
 800790c:	00010007 	.word	0x00010007

08007910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b01      	cmp	r3, #1
 8007922:	d001      	beq.n	8007928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e04a      	b.n	80079be <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68da      	ldr	r2, [r3, #12]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f042 0201 	orr.w	r2, r2, #1
 800793e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a21      	ldr	r2, [pc, #132]	@ (80079cc <HAL_TIM_Base_Start_IT+0xbc>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d018      	beq.n	800797c <HAL_TIM_Base_Start_IT+0x6c>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007952:	d013      	beq.n	800797c <HAL_TIM_Base_Start_IT+0x6c>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a1d      	ldr	r2, [pc, #116]	@ (80079d0 <HAL_TIM_Base_Start_IT+0xc0>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d00e      	beq.n	800797c <HAL_TIM_Base_Start_IT+0x6c>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a1c      	ldr	r2, [pc, #112]	@ (80079d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d009      	beq.n	800797c <HAL_TIM_Base_Start_IT+0x6c>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a1a      	ldr	r2, [pc, #104]	@ (80079d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d004      	beq.n	800797c <HAL_TIM_Base_Start_IT+0x6c>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a19      	ldr	r2, [pc, #100]	@ (80079dc <HAL_TIM_Base_Start_IT+0xcc>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d115      	bne.n	80079a8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689a      	ldr	r2, [r3, #8]
 8007982:	4b17      	ldr	r3, [pc, #92]	@ (80079e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007984:	4013      	ands	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2b06      	cmp	r3, #6
 800798c:	d015      	beq.n	80079ba <HAL_TIM_Base_Start_IT+0xaa>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007994:	d011      	beq.n	80079ba <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f042 0201 	orr.w	r2, r2, #1
 80079a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a6:	e008      	b.n	80079ba <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f042 0201 	orr.w	r2, r2, #1
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	e000      	b.n	80079bc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	40012c00 	.word	0x40012c00
 80079d0:	40000400 	.word	0x40000400
 80079d4:	40000800 	.word	0x40000800
 80079d8:	40013400 	.word	0x40013400
 80079dc:	40014000 	.word	0x40014000
 80079e0:	00010007 	.word	0x00010007

080079e4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d101      	bne.n	80079f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e049      	b.n	8007a8a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d106      	bne.n	8007a10 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7f9 fcf6 	bl	80013fc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3304      	adds	r3, #4
 8007a20:	4619      	mov	r1, r3
 8007a22:	4610      	mov	r0, r2
 8007a24:	f000 fd28 	bl	8008478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b082      	sub	sp, #8
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e049      	b.n	8007b38 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d106      	bne.n	8007abe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7f9 fc79 	bl	80013b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	3304      	adds	r3, #4
 8007ace:	4619      	mov	r1, r3
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	f000 fcd1 	bl	8008478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2201      	movs	r2, #1
 8007b22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d109      	bne.n	8007b64 <HAL_TIM_PWM_Start+0x24>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	bf14      	ite	ne
 8007b5c:	2301      	movne	r3, #1
 8007b5e:	2300      	moveq	r3, #0
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	e03c      	b.n	8007bde <HAL_TIM_PWM_Start+0x9e>
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	2b04      	cmp	r3, #4
 8007b68:	d109      	bne.n	8007b7e <HAL_TIM_PWM_Start+0x3e>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	bf14      	ite	ne
 8007b76:	2301      	movne	r3, #1
 8007b78:	2300      	moveq	r3, #0
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	e02f      	b.n	8007bde <HAL_TIM_PWM_Start+0x9e>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b08      	cmp	r3, #8
 8007b82:	d109      	bne.n	8007b98 <HAL_TIM_PWM_Start+0x58>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	bf14      	ite	ne
 8007b90:	2301      	movne	r3, #1
 8007b92:	2300      	moveq	r3, #0
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	e022      	b.n	8007bde <HAL_TIM_PWM_Start+0x9e>
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	2b0c      	cmp	r3, #12
 8007b9c:	d109      	bne.n	8007bb2 <HAL_TIM_PWM_Start+0x72>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	bf14      	ite	ne
 8007baa:	2301      	movne	r3, #1
 8007bac:	2300      	moveq	r3, #0
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	e015      	b.n	8007bde <HAL_TIM_PWM_Start+0x9e>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b10      	cmp	r3, #16
 8007bb6:	d109      	bne.n	8007bcc <HAL_TIM_PWM_Start+0x8c>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	bf14      	ite	ne
 8007bc4:	2301      	movne	r3, #1
 8007bc6:	2300      	moveq	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	e008      	b.n	8007bde <HAL_TIM_PWM_Start+0x9e>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	bf14      	ite	ne
 8007bd8:	2301      	movne	r3, #1
 8007bda:	2300      	moveq	r3, #0
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e097      	b.n	8007d16 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d104      	bne.n	8007bf6 <HAL_TIM_PWM_Start+0xb6>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bf4:	e023      	b.n	8007c3e <HAL_TIM_PWM_Start+0xfe>
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	2b04      	cmp	r3, #4
 8007bfa:	d104      	bne.n	8007c06 <HAL_TIM_PWM_Start+0xc6>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c04:	e01b      	b.n	8007c3e <HAL_TIM_PWM_Start+0xfe>
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	d104      	bne.n	8007c16 <HAL_TIM_PWM_Start+0xd6>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c14:	e013      	b.n	8007c3e <HAL_TIM_PWM_Start+0xfe>
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	2b0c      	cmp	r3, #12
 8007c1a:	d104      	bne.n	8007c26 <HAL_TIM_PWM_Start+0xe6>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2202      	movs	r2, #2
 8007c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c24:	e00b      	b.n	8007c3e <HAL_TIM_PWM_Start+0xfe>
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	2b10      	cmp	r3, #16
 8007c2a:	d104      	bne.n	8007c36 <HAL_TIM_PWM_Start+0xf6>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2202      	movs	r2, #2
 8007c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c34:	e003      	b.n	8007c3e <HAL_TIM_PWM_Start+0xfe>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2202      	movs	r2, #2
 8007c3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2201      	movs	r2, #1
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 ffa8 	bl	8008b9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a33      	ldr	r2, [pc, #204]	@ (8007d20 <HAL_TIM_PWM_Start+0x1e0>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d013      	beq.n	8007c7e <HAL_TIM_PWM_Start+0x13e>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a32      	ldr	r2, [pc, #200]	@ (8007d24 <HAL_TIM_PWM_Start+0x1e4>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d00e      	beq.n	8007c7e <HAL_TIM_PWM_Start+0x13e>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a30      	ldr	r2, [pc, #192]	@ (8007d28 <HAL_TIM_PWM_Start+0x1e8>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d009      	beq.n	8007c7e <HAL_TIM_PWM_Start+0x13e>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8007d2c <HAL_TIM_PWM_Start+0x1ec>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d004      	beq.n	8007c7e <HAL_TIM_PWM_Start+0x13e>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a2d      	ldr	r2, [pc, #180]	@ (8007d30 <HAL_TIM_PWM_Start+0x1f0>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d101      	bne.n	8007c82 <HAL_TIM_PWM_Start+0x142>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e000      	b.n	8007c84 <HAL_TIM_PWM_Start+0x144>
 8007c82:	2300      	movs	r3, #0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d007      	beq.n	8007c98 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a20      	ldr	r2, [pc, #128]	@ (8007d20 <HAL_TIM_PWM_Start+0x1e0>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d018      	beq.n	8007cd4 <HAL_TIM_PWM_Start+0x194>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007caa:	d013      	beq.n	8007cd4 <HAL_TIM_PWM_Start+0x194>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a20      	ldr	r2, [pc, #128]	@ (8007d34 <HAL_TIM_PWM_Start+0x1f4>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d00e      	beq.n	8007cd4 <HAL_TIM_PWM_Start+0x194>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a1f      	ldr	r2, [pc, #124]	@ (8007d38 <HAL_TIM_PWM_Start+0x1f8>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d009      	beq.n	8007cd4 <HAL_TIM_PWM_Start+0x194>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a17      	ldr	r2, [pc, #92]	@ (8007d24 <HAL_TIM_PWM_Start+0x1e4>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d004      	beq.n	8007cd4 <HAL_TIM_PWM_Start+0x194>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a16      	ldr	r2, [pc, #88]	@ (8007d28 <HAL_TIM_PWM_Start+0x1e8>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d115      	bne.n	8007d00 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	689a      	ldr	r2, [r3, #8]
 8007cda:	4b18      	ldr	r3, [pc, #96]	@ (8007d3c <HAL_TIM_PWM_Start+0x1fc>)
 8007cdc:	4013      	ands	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2b06      	cmp	r3, #6
 8007ce4:	d015      	beq.n	8007d12 <HAL_TIM_PWM_Start+0x1d2>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cec:	d011      	beq.n	8007d12 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f042 0201 	orr.w	r2, r2, #1
 8007cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cfe:	e008      	b.n	8007d12 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f042 0201 	orr.w	r2, r2, #1
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	e000      	b.n	8007d14 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	40012c00 	.word	0x40012c00
 8007d24:	40013400 	.word	0x40013400
 8007d28:	40014000 	.word	0x40014000
 8007d2c:	40014400 	.word	0x40014400
 8007d30:	40014800 	.word	0x40014800
 8007d34:	40000400 	.word	0x40000400
 8007d38:	40000800 	.word	0x40000800
 8007d3c:	00010007 	.word	0x00010007

08007d40 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 ff22 	bl	8008b9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a3e      	ldr	r2, [pc, #248]	@ (8007e58 <HAL_TIM_PWM_Stop+0x118>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d013      	beq.n	8007d8a <HAL_TIM_PWM_Stop+0x4a>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a3d      	ldr	r2, [pc, #244]	@ (8007e5c <HAL_TIM_PWM_Stop+0x11c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d00e      	beq.n	8007d8a <HAL_TIM_PWM_Stop+0x4a>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a3b      	ldr	r2, [pc, #236]	@ (8007e60 <HAL_TIM_PWM_Stop+0x120>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d009      	beq.n	8007d8a <HAL_TIM_PWM_Stop+0x4a>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a3a      	ldr	r2, [pc, #232]	@ (8007e64 <HAL_TIM_PWM_Stop+0x124>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d004      	beq.n	8007d8a <HAL_TIM_PWM_Stop+0x4a>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a38      	ldr	r2, [pc, #224]	@ (8007e68 <HAL_TIM_PWM_Stop+0x128>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d101      	bne.n	8007d8e <HAL_TIM_PWM_Stop+0x4e>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e000      	b.n	8007d90 <HAL_TIM_PWM_Stop+0x50>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d017      	beq.n	8007dc4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6a1a      	ldr	r2, [r3, #32]
 8007d9a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007d9e:	4013      	ands	r3, r2
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10f      	bne.n	8007dc4 <HAL_TIM_PWM_Stop+0x84>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6a1a      	ldr	r2, [r3, #32]
 8007daa:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007dae:	4013      	ands	r3, r2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d107      	bne.n	8007dc4 <HAL_TIM_PWM_Stop+0x84>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007dc2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6a1a      	ldr	r2, [r3, #32]
 8007dca:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007dce:	4013      	ands	r3, r2
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10f      	bne.n	8007df4 <HAL_TIM_PWM_Stop+0xb4>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6a1a      	ldr	r2, [r3, #32]
 8007dda:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007dde:	4013      	ands	r3, r2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d107      	bne.n	8007df4 <HAL_TIM_PWM_Stop+0xb4>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f022 0201 	bic.w	r2, r2, #1
 8007df2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d104      	bne.n	8007e04 <HAL_TIM_PWM_Stop+0xc4>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e02:	e023      	b.n	8007e4c <HAL_TIM_PWM_Stop+0x10c>
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	2b04      	cmp	r3, #4
 8007e08:	d104      	bne.n	8007e14 <HAL_TIM_PWM_Stop+0xd4>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e12:	e01b      	b.n	8007e4c <HAL_TIM_PWM_Stop+0x10c>
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2b08      	cmp	r3, #8
 8007e18:	d104      	bne.n	8007e24 <HAL_TIM_PWM_Stop+0xe4>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e22:	e013      	b.n	8007e4c <HAL_TIM_PWM_Stop+0x10c>
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2b0c      	cmp	r3, #12
 8007e28:	d104      	bne.n	8007e34 <HAL_TIM_PWM_Stop+0xf4>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e32:	e00b      	b.n	8007e4c <HAL_TIM_PWM_Stop+0x10c>
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2b10      	cmp	r3, #16
 8007e38:	d104      	bne.n	8007e44 <HAL_TIM_PWM_Stop+0x104>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e42:	e003      	b.n	8007e4c <HAL_TIM_PWM_Stop+0x10c>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	40012c00 	.word	0x40012c00
 8007e5c:	40013400 	.word	0x40013400
 8007e60:	40014000 	.word	0x40014000
 8007e64:	40014400 	.word	0x40014400
 8007e68:	40014800 	.word	0x40014800

08007e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	f003 0302 	and.w	r3, r3, #2
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d020      	beq.n	8007ed0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f003 0302 	and.w	r3, r3, #2
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d01b      	beq.n	8007ed0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f06f 0202 	mvn.w	r2, #2
 8007ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	f003 0303 	and.w	r3, r3, #3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d003      	beq.n	8007ebe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fac0 	bl	800843c <HAL_TIM_IC_CaptureCallback>
 8007ebc:	e005      	b.n	8007eca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fab2 	bl	8008428 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fac3 	bl	8008450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	f003 0304 	and.w	r3, r3, #4
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d020      	beq.n	8007f1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f003 0304 	and.w	r3, r3, #4
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d01b      	beq.n	8007f1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f06f 0204 	mvn.w	r2, #4
 8007eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa9a 	bl	800843c <HAL_TIM_IC_CaptureCallback>
 8007f08:	e005      	b.n	8007f16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fa8c 	bl	8008428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fa9d 	bl	8008450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	f003 0308 	and.w	r3, r3, #8
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d020      	beq.n	8007f68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f003 0308 	and.w	r3, r3, #8
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d01b      	beq.n	8007f68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f06f 0208 	mvn.w	r2, #8
 8007f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2204      	movs	r2, #4
 8007f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	69db      	ldr	r3, [r3, #28]
 8007f46:	f003 0303 	and.w	r3, r3, #3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fa74 	bl	800843c <HAL_TIM_IC_CaptureCallback>
 8007f54:	e005      	b.n	8007f62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fa66 	bl	8008428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 fa77 	bl	8008450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	f003 0310 	and.w	r3, r3, #16
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d020      	beq.n	8007fb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f003 0310 	and.w	r3, r3, #16
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d01b      	beq.n	8007fb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f06f 0210 	mvn.w	r2, #16
 8007f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2208      	movs	r2, #8
 8007f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fa4e 	bl	800843c <HAL_TIM_IC_CaptureCallback>
 8007fa0:	e005      	b.n	8007fae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fa40 	bl	8008428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fa51 	bl	8008450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00c      	beq.n	8007fd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d007      	beq.n	8007fd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f06f 0201 	mvn.w	r2, #1
 8007fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7f8 ff54 	bl	8000e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d104      	bne.n	8007fec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00c      	beq.n	8008006 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d007      	beq.n	8008006 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f001 f82e 	bl	8009062 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00c      	beq.n	800802a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008016:	2b00      	cmp	r3, #0
 8008018:	d007      	beq.n	800802a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f001 f826 	bl	8009076 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00c      	beq.n	800804e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	d007      	beq.n	800804e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fa0b 	bl	8008464 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	f003 0320 	and.w	r3, r3, #32
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00c      	beq.n	8008072 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f003 0320 	and.w	r3, r3, #32
 800805e:	2b00      	cmp	r3, #0
 8008060:	d007      	beq.n	8008072 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f06f 0220 	mvn.w	r2, #32
 800806a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 ffee 	bl	800904e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00c      	beq.n	8008096 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d007      	beq.n	8008096 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800808e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fffa 	bl	800908a <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00c      	beq.n	80080ba <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d007      	beq.n	80080ba <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80080b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fff2 	bl	800909e <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00c      	beq.n	80080de <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d007      	beq.n	80080de <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80080d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 ffea 	bl	80090b2 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00c      	beq.n	8008102 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d007      	beq.n	8008102 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80080fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 ffe2 	bl	80090c6 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008102:	bf00      	nop
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008122:	2b01      	cmp	r3, #1
 8008124:	d101      	bne.n	800812a <HAL_TIM_OC_ConfigChannel+0x1e>
 8008126:	2302      	movs	r3, #2
 8008128:	e066      	b.n	80081f8 <HAL_TIM_OC_ConfigChannel+0xec>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b14      	cmp	r3, #20
 8008136:	d857      	bhi.n	80081e8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008138:	a201      	add	r2, pc, #4	@ (adr r2, 8008140 <HAL_TIM_OC_ConfigChannel+0x34>)
 800813a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813e:	bf00      	nop
 8008140:	08008195 	.word	0x08008195
 8008144:	080081e9 	.word	0x080081e9
 8008148:	080081e9 	.word	0x080081e9
 800814c:	080081e9 	.word	0x080081e9
 8008150:	080081a3 	.word	0x080081a3
 8008154:	080081e9 	.word	0x080081e9
 8008158:	080081e9 	.word	0x080081e9
 800815c:	080081e9 	.word	0x080081e9
 8008160:	080081b1 	.word	0x080081b1
 8008164:	080081e9 	.word	0x080081e9
 8008168:	080081e9 	.word	0x080081e9
 800816c:	080081e9 	.word	0x080081e9
 8008170:	080081bf 	.word	0x080081bf
 8008174:	080081e9 	.word	0x080081e9
 8008178:	080081e9 	.word	0x080081e9
 800817c:	080081e9 	.word	0x080081e9
 8008180:	080081cd 	.word	0x080081cd
 8008184:	080081e9 	.word	0x080081e9
 8008188:	080081e9 	.word	0x080081e9
 800818c:	080081e9 	.word	0x080081e9
 8008190:	080081db 	.word	0x080081db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68b9      	ldr	r1, [r7, #8]
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fa08 	bl	80085b0 <TIM_OC1_SetConfig>
      break;
 80081a0:	e025      	b.n	80081ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68b9      	ldr	r1, [r7, #8]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 fa91 	bl	80086d0 <TIM_OC2_SetConfig>
      break;
 80081ae:	e01e      	b.n	80081ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68b9      	ldr	r1, [r7, #8]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 fb14 	bl	80087e4 <TIM_OC3_SetConfig>
      break;
 80081bc:	e017      	b.n	80081ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68b9      	ldr	r1, [r7, #8]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 fb95 	bl	80088f4 <TIM_OC4_SetConfig>
      break;
 80081ca:	e010      	b.n	80081ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68b9      	ldr	r1, [r7, #8]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 fc18 	bl	8008a08 <TIM_OC5_SetConfig>
      break;
 80081d8:	e009      	b.n	80081ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68b9      	ldr	r1, [r7, #8]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 fc75 	bl	8008ad0 <TIM_OC6_SetConfig>
      break;
 80081e6:	e002      	b.n	80081ee <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	75fb      	strb	r3, [r7, #23]
      break;
 80081ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3718      	adds	r7, #24
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008216:	2b01      	cmp	r3, #1
 8008218:	d101      	bne.n	800821e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800821a:	2302      	movs	r3, #2
 800821c:	e0ff      	b.n	800841e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2b14      	cmp	r3, #20
 800822a:	f200 80f0 	bhi.w	800840e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800822e:	a201      	add	r2, pc, #4	@ (adr r2, 8008234 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008234:	08008289 	.word	0x08008289
 8008238:	0800840f 	.word	0x0800840f
 800823c:	0800840f 	.word	0x0800840f
 8008240:	0800840f 	.word	0x0800840f
 8008244:	080082c9 	.word	0x080082c9
 8008248:	0800840f 	.word	0x0800840f
 800824c:	0800840f 	.word	0x0800840f
 8008250:	0800840f 	.word	0x0800840f
 8008254:	0800830b 	.word	0x0800830b
 8008258:	0800840f 	.word	0x0800840f
 800825c:	0800840f 	.word	0x0800840f
 8008260:	0800840f 	.word	0x0800840f
 8008264:	0800834b 	.word	0x0800834b
 8008268:	0800840f 	.word	0x0800840f
 800826c:	0800840f 	.word	0x0800840f
 8008270:	0800840f 	.word	0x0800840f
 8008274:	0800838d 	.word	0x0800838d
 8008278:	0800840f 	.word	0x0800840f
 800827c:	0800840f 	.word	0x0800840f
 8008280:	0800840f 	.word	0x0800840f
 8008284:	080083cd 	.word	0x080083cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68b9      	ldr	r1, [r7, #8]
 800828e:	4618      	mov	r0, r3
 8008290:	f000 f98e 	bl	80085b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	699a      	ldr	r2, [r3, #24]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f042 0208 	orr.w	r2, r2, #8
 80082a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	699a      	ldr	r2, [r3, #24]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f022 0204 	bic.w	r2, r2, #4
 80082b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6999      	ldr	r1, [r3, #24]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	691a      	ldr	r2, [r3, #16]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	619a      	str	r2, [r3, #24]
      break;
 80082c6:	e0a5      	b.n	8008414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68b9      	ldr	r1, [r7, #8]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 f9fe 	bl	80086d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	699a      	ldr	r2, [r3, #24]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	699a      	ldr	r2, [r3, #24]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6999      	ldr	r1, [r3, #24]
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	021a      	lsls	r2, r3, #8
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	619a      	str	r2, [r3, #24]
      break;
 8008308:	e084      	b.n	8008414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68b9      	ldr	r1, [r7, #8]
 8008310:	4618      	mov	r0, r3
 8008312:	f000 fa67 	bl	80087e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	69da      	ldr	r2, [r3, #28]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f042 0208 	orr.w	r2, r2, #8
 8008324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	69da      	ldr	r2, [r3, #28]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f022 0204 	bic.w	r2, r2, #4
 8008334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	69d9      	ldr	r1, [r3, #28]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	691a      	ldr	r2, [r3, #16]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	430a      	orrs	r2, r1
 8008346:	61da      	str	r2, [r3, #28]
      break;
 8008348:	e064      	b.n	8008414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68b9      	ldr	r1, [r7, #8]
 8008350:	4618      	mov	r0, r3
 8008352:	f000 facf 	bl	80088f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	69da      	ldr	r2, [r3, #28]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	69da      	ldr	r2, [r3, #28]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	69d9      	ldr	r1, [r3, #28]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	021a      	lsls	r2, r3, #8
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	430a      	orrs	r2, r1
 8008388:	61da      	str	r2, [r3, #28]
      break;
 800838a:	e043      	b.n	8008414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68b9      	ldr	r1, [r7, #8]
 8008392:	4618      	mov	r0, r3
 8008394:	f000 fb38 	bl	8008a08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f042 0208 	orr.w	r2, r2, #8
 80083a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f022 0204 	bic.w	r2, r2, #4
 80083b6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	691a      	ldr	r2, [r3, #16]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80083ca:	e023      	b.n	8008414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68b9      	ldr	r1, [r7, #8]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fb7c 	bl	8008ad0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083f6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	021a      	lsls	r2, r3, #8
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	430a      	orrs	r2, r1
 800840a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800840c:	e002      	b.n	8008414 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	75fb      	strb	r3, [r7, #23]
      break;
 8008412:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800841c:	7dfb      	ldrb	r3, [r7, #23]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3718      	adds	r7, #24
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop

08008428 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a42      	ldr	r2, [pc, #264]	@ (8008594 <TIM_Base_SetConfig+0x11c>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d00f      	beq.n	80084b0 <TIM_Base_SetConfig+0x38>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008496:	d00b      	beq.n	80084b0 <TIM_Base_SetConfig+0x38>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a3f      	ldr	r2, [pc, #252]	@ (8008598 <TIM_Base_SetConfig+0x120>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d007      	beq.n	80084b0 <TIM_Base_SetConfig+0x38>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a3e      	ldr	r2, [pc, #248]	@ (800859c <TIM_Base_SetConfig+0x124>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d003      	beq.n	80084b0 <TIM_Base_SetConfig+0x38>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a3d      	ldr	r2, [pc, #244]	@ (80085a0 <TIM_Base_SetConfig+0x128>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d108      	bne.n	80084c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	4313      	orrs	r3, r2
 80084c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a33      	ldr	r2, [pc, #204]	@ (8008594 <TIM_Base_SetConfig+0x11c>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d01b      	beq.n	8008502 <TIM_Base_SetConfig+0x8a>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084d0:	d017      	beq.n	8008502 <TIM_Base_SetConfig+0x8a>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a30      	ldr	r2, [pc, #192]	@ (8008598 <TIM_Base_SetConfig+0x120>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d013      	beq.n	8008502 <TIM_Base_SetConfig+0x8a>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a2f      	ldr	r2, [pc, #188]	@ (800859c <TIM_Base_SetConfig+0x124>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d00f      	beq.n	8008502 <TIM_Base_SetConfig+0x8a>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a2e      	ldr	r2, [pc, #184]	@ (80085a0 <TIM_Base_SetConfig+0x128>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d00b      	beq.n	8008502 <TIM_Base_SetConfig+0x8a>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a2d      	ldr	r2, [pc, #180]	@ (80085a4 <TIM_Base_SetConfig+0x12c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d007      	beq.n	8008502 <TIM_Base_SetConfig+0x8a>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a2c      	ldr	r2, [pc, #176]	@ (80085a8 <TIM_Base_SetConfig+0x130>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d003      	beq.n	8008502 <TIM_Base_SetConfig+0x8a>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a2b      	ldr	r2, [pc, #172]	@ (80085ac <TIM_Base_SetConfig+0x134>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d108      	bne.n	8008514 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	4313      	orrs	r3, r2
 8008512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	4313      	orrs	r3, r2
 8008520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	689a      	ldr	r2, [r3, #8]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a16      	ldr	r2, [pc, #88]	@ (8008594 <TIM_Base_SetConfig+0x11c>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d00f      	beq.n	8008560 <TIM_Base_SetConfig+0xe8>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a17      	ldr	r2, [pc, #92]	@ (80085a0 <TIM_Base_SetConfig+0x128>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d00b      	beq.n	8008560 <TIM_Base_SetConfig+0xe8>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a16      	ldr	r2, [pc, #88]	@ (80085a4 <TIM_Base_SetConfig+0x12c>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d007      	beq.n	8008560 <TIM_Base_SetConfig+0xe8>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a15      	ldr	r2, [pc, #84]	@ (80085a8 <TIM_Base_SetConfig+0x130>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d003      	beq.n	8008560 <TIM_Base_SetConfig+0xe8>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a14      	ldr	r2, [pc, #80]	@ (80085ac <TIM_Base_SetConfig+0x134>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d103      	bne.n	8008568 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	691a      	ldr	r2, [r3, #16]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b01      	cmp	r3, #1
 8008578:	d105      	bne.n	8008586 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	f023 0201 	bic.w	r2, r3, #1
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	611a      	str	r2, [r3, #16]
  }
}
 8008586:	bf00      	nop
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	40012c00 	.word	0x40012c00
 8008598:	40000400 	.word	0x40000400
 800859c:	40000800 	.word	0x40000800
 80085a0:	40013400 	.word	0x40013400
 80085a4:	40014000 	.word	0x40014000
 80085a8:	40014400 	.word	0x40014400
 80085ac:	40014800 	.word	0x40014800

080085b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a1b      	ldr	r3, [r3, #32]
 80085c4:	f023 0201 	bic.w	r2, r3, #1
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f023 0303 	bic.w	r3, r3, #3
 80085ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f023 0302 	bic.w	r3, r3, #2
 80085fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	4313      	orrs	r3, r2
 8008606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a2c      	ldr	r2, [pc, #176]	@ (80086bc <TIM_OC1_SetConfig+0x10c>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d00f      	beq.n	8008630 <TIM_OC1_SetConfig+0x80>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a2b      	ldr	r2, [pc, #172]	@ (80086c0 <TIM_OC1_SetConfig+0x110>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d00b      	beq.n	8008630 <TIM_OC1_SetConfig+0x80>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a2a      	ldr	r2, [pc, #168]	@ (80086c4 <TIM_OC1_SetConfig+0x114>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d007      	beq.n	8008630 <TIM_OC1_SetConfig+0x80>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a29      	ldr	r2, [pc, #164]	@ (80086c8 <TIM_OC1_SetConfig+0x118>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d003      	beq.n	8008630 <TIM_OC1_SetConfig+0x80>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a28      	ldr	r2, [pc, #160]	@ (80086cc <TIM_OC1_SetConfig+0x11c>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d10c      	bne.n	800864a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	f023 0308 	bic.w	r3, r3, #8
 8008636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	697a      	ldr	r2, [r7, #20]
 800863e:	4313      	orrs	r3, r2
 8008640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f023 0304 	bic.w	r3, r3, #4
 8008648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a1b      	ldr	r2, [pc, #108]	@ (80086bc <TIM_OC1_SetConfig+0x10c>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d00f      	beq.n	8008672 <TIM_OC1_SetConfig+0xc2>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a1a      	ldr	r2, [pc, #104]	@ (80086c0 <TIM_OC1_SetConfig+0x110>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d00b      	beq.n	8008672 <TIM_OC1_SetConfig+0xc2>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a19      	ldr	r2, [pc, #100]	@ (80086c4 <TIM_OC1_SetConfig+0x114>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d007      	beq.n	8008672 <TIM_OC1_SetConfig+0xc2>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a18      	ldr	r2, [pc, #96]	@ (80086c8 <TIM_OC1_SetConfig+0x118>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d003      	beq.n	8008672 <TIM_OC1_SetConfig+0xc2>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a17      	ldr	r2, [pc, #92]	@ (80086cc <TIM_OC1_SetConfig+0x11c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d111      	bne.n	8008696 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	4313      	orrs	r3, r2
 800868a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	4313      	orrs	r3, r2
 8008694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	621a      	str	r2, [r3, #32]
}
 80086b0:	bf00      	nop
 80086b2:	371c      	adds	r7, #28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	40012c00 	.word	0x40012c00
 80086c0:	40013400 	.word	0x40013400
 80086c4:	40014000 	.word	0x40014000
 80086c8:	40014400 	.word	0x40014400
 80086cc:	40014800 	.word	0x40014800

080086d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b087      	sub	sp, #28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a1b      	ldr	r3, [r3, #32]
 80086e4:	f023 0210 	bic.w	r2, r3, #16
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80086fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800870a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	021b      	lsls	r3, r3, #8
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	4313      	orrs	r3, r2
 8008716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f023 0320 	bic.w	r3, r3, #32
 800871e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	011b      	lsls	r3, r3, #4
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	4313      	orrs	r3, r2
 800872a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a28      	ldr	r2, [pc, #160]	@ (80087d0 <TIM_OC2_SetConfig+0x100>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d003      	beq.n	800873c <TIM_OC2_SetConfig+0x6c>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a27      	ldr	r2, [pc, #156]	@ (80087d4 <TIM_OC2_SetConfig+0x104>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d10d      	bne.n	8008758 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	011b      	lsls	r3, r3, #4
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	4313      	orrs	r3, r2
 800874e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008756:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a1d      	ldr	r2, [pc, #116]	@ (80087d0 <TIM_OC2_SetConfig+0x100>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d00f      	beq.n	8008780 <TIM_OC2_SetConfig+0xb0>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a1c      	ldr	r2, [pc, #112]	@ (80087d4 <TIM_OC2_SetConfig+0x104>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d00b      	beq.n	8008780 <TIM_OC2_SetConfig+0xb0>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a1b      	ldr	r2, [pc, #108]	@ (80087d8 <TIM_OC2_SetConfig+0x108>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d007      	beq.n	8008780 <TIM_OC2_SetConfig+0xb0>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a1a      	ldr	r2, [pc, #104]	@ (80087dc <TIM_OC2_SetConfig+0x10c>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d003      	beq.n	8008780 <TIM_OC2_SetConfig+0xb0>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a19      	ldr	r2, [pc, #100]	@ (80087e0 <TIM_OC2_SetConfig+0x110>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d113      	bne.n	80087a8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008786:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800878e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	4313      	orrs	r3, r2
 800879a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	621a      	str	r2, [r3, #32]
}
 80087c2:	bf00      	nop
 80087c4:	371c      	adds	r7, #28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	40012c00 	.word	0x40012c00
 80087d4:	40013400 	.word	0x40013400
 80087d8:	40014000 	.word	0x40014000
 80087dc:	40014400 	.word	0x40014400
 80087e0:	40014800 	.word	0x40014800

080087e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b087      	sub	sp, #28
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a1b      	ldr	r3, [r3, #32]
 80087f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	69db      	ldr	r3, [r3, #28]
 800880a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 0303 	bic.w	r3, r3, #3
 800881e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	4313      	orrs	r3, r2
 8008828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	021b      	lsls	r3, r3, #8
 8008838:	697a      	ldr	r2, [r7, #20]
 800883a:	4313      	orrs	r3, r2
 800883c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a27      	ldr	r2, [pc, #156]	@ (80088e0 <TIM_OC3_SetConfig+0xfc>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d003      	beq.n	800884e <TIM_OC3_SetConfig+0x6a>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a26      	ldr	r2, [pc, #152]	@ (80088e4 <TIM_OC3_SetConfig+0x100>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d10d      	bne.n	800886a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008854:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	021b      	lsls	r3, r3, #8
 800885c:	697a      	ldr	r2, [r7, #20]
 800885e:	4313      	orrs	r3, r2
 8008860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a1c      	ldr	r2, [pc, #112]	@ (80088e0 <TIM_OC3_SetConfig+0xfc>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d00f      	beq.n	8008892 <TIM_OC3_SetConfig+0xae>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a1b      	ldr	r2, [pc, #108]	@ (80088e4 <TIM_OC3_SetConfig+0x100>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d00b      	beq.n	8008892 <TIM_OC3_SetConfig+0xae>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a1a      	ldr	r2, [pc, #104]	@ (80088e8 <TIM_OC3_SetConfig+0x104>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d007      	beq.n	8008892 <TIM_OC3_SetConfig+0xae>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a19      	ldr	r2, [pc, #100]	@ (80088ec <TIM_OC3_SetConfig+0x108>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d003      	beq.n	8008892 <TIM_OC3_SetConfig+0xae>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a18      	ldr	r2, [pc, #96]	@ (80088f0 <TIM_OC3_SetConfig+0x10c>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d113      	bne.n	80088ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80088a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	011b      	lsls	r3, r3, #4
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	011b      	lsls	r3, r3, #4
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	685a      	ldr	r2, [r3, #4]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	621a      	str	r2, [r3, #32]
}
 80088d4:	bf00      	nop
 80088d6:	371c      	adds	r7, #28
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr
 80088e0:	40012c00 	.word	0x40012c00
 80088e4:	40013400 	.word	0x40013400
 80088e8:	40014000 	.word	0x40014000
 80088ec:	40014400 	.word	0x40014400
 80088f0:	40014800 	.word	0x40014800

080088f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b087      	sub	sp, #28
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a1b      	ldr	r3, [r3, #32]
 8008908:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	69db      	ldr	r3, [r3, #28]
 800891a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008922:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800892e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	021b      	lsls	r3, r3, #8
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	4313      	orrs	r3, r2
 800893a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	031b      	lsls	r3, r3, #12
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	4313      	orrs	r3, r2
 800894e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a28      	ldr	r2, [pc, #160]	@ (80089f4 <TIM_OC4_SetConfig+0x100>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d003      	beq.n	8008960 <TIM_OC4_SetConfig+0x6c>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a27      	ldr	r2, [pc, #156]	@ (80089f8 <TIM_OC4_SetConfig+0x104>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d10d      	bne.n	800897c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	031b      	lsls	r3, r3, #12
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	4313      	orrs	r3, r2
 8008972:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800897a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a1d      	ldr	r2, [pc, #116]	@ (80089f4 <TIM_OC4_SetConfig+0x100>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d00f      	beq.n	80089a4 <TIM_OC4_SetConfig+0xb0>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a1c      	ldr	r2, [pc, #112]	@ (80089f8 <TIM_OC4_SetConfig+0x104>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d00b      	beq.n	80089a4 <TIM_OC4_SetConfig+0xb0>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a1b      	ldr	r2, [pc, #108]	@ (80089fc <TIM_OC4_SetConfig+0x108>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d007      	beq.n	80089a4 <TIM_OC4_SetConfig+0xb0>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a1a      	ldr	r2, [pc, #104]	@ (8008a00 <TIM_OC4_SetConfig+0x10c>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d003      	beq.n	80089a4 <TIM_OC4_SetConfig+0xb0>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a19      	ldr	r2, [pc, #100]	@ (8008a04 <TIM_OC4_SetConfig+0x110>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d113      	bne.n	80089cc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089aa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80089b2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	019b      	lsls	r3, r3, #6
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	4313      	orrs	r3, r2
 80089be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	019b      	lsls	r3, r3, #6
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	693a      	ldr	r2, [r7, #16]
 80089d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	621a      	str	r2, [r3, #32]
}
 80089e6:	bf00      	nop
 80089e8:	371c      	adds	r7, #28
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	40012c00 	.word	0x40012c00
 80089f8:	40013400 	.word	0x40013400
 80089fc:	40014000 	.word	0x40014000
 8008a00:	40014400 	.word	0x40014400
 8008a04:	40014800 	.word	0x40014800

08008a08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b087      	sub	sp, #28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a1b      	ldr	r3, [r3, #32]
 8008a1c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008a4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	041b      	lsls	r3, r3, #16
 8008a54:	693a      	ldr	r2, [r7, #16]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a17      	ldr	r2, [pc, #92]	@ (8008abc <TIM_OC5_SetConfig+0xb4>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d00f      	beq.n	8008a82 <TIM_OC5_SetConfig+0x7a>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a16      	ldr	r2, [pc, #88]	@ (8008ac0 <TIM_OC5_SetConfig+0xb8>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d00b      	beq.n	8008a82 <TIM_OC5_SetConfig+0x7a>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a15      	ldr	r2, [pc, #84]	@ (8008ac4 <TIM_OC5_SetConfig+0xbc>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d007      	beq.n	8008a82 <TIM_OC5_SetConfig+0x7a>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a14      	ldr	r2, [pc, #80]	@ (8008ac8 <TIM_OC5_SetConfig+0xc0>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d003      	beq.n	8008a82 <TIM_OC5_SetConfig+0x7a>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a13      	ldr	r2, [pc, #76]	@ (8008acc <TIM_OC5_SetConfig+0xc4>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d109      	bne.n	8008a96 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	021b      	lsls	r3, r3, #8
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	685a      	ldr	r2, [r3, #4]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	621a      	str	r2, [r3, #32]
}
 8008ab0:	bf00      	nop
 8008ab2:	371c      	adds	r7, #28
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	40012c00 	.word	0x40012c00
 8008ac0:	40013400 	.word	0x40013400
 8008ac4:	40014000 	.word	0x40014000
 8008ac8:	40014400 	.word	0x40014400
 8008acc:	40014800 	.word	0x40014800

08008ad0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b087      	sub	sp, #28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a1b      	ldr	r3, [r3, #32]
 8008ae4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008afe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	021b      	lsls	r3, r3, #8
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	051b      	lsls	r3, r3, #20
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a18      	ldr	r2, [pc, #96]	@ (8008b88 <TIM_OC6_SetConfig+0xb8>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d00f      	beq.n	8008b4c <TIM_OC6_SetConfig+0x7c>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a17      	ldr	r2, [pc, #92]	@ (8008b8c <TIM_OC6_SetConfig+0xbc>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d00b      	beq.n	8008b4c <TIM_OC6_SetConfig+0x7c>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a16      	ldr	r2, [pc, #88]	@ (8008b90 <TIM_OC6_SetConfig+0xc0>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d007      	beq.n	8008b4c <TIM_OC6_SetConfig+0x7c>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a15      	ldr	r2, [pc, #84]	@ (8008b94 <TIM_OC6_SetConfig+0xc4>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d003      	beq.n	8008b4c <TIM_OC6_SetConfig+0x7c>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a14      	ldr	r2, [pc, #80]	@ (8008b98 <TIM_OC6_SetConfig+0xc8>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d109      	bne.n	8008b60 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	029b      	lsls	r3, r3, #10
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	621a      	str	r2, [r3, #32]
}
 8008b7a:	bf00      	nop
 8008b7c:	371c      	adds	r7, #28
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	40012c00 	.word	0x40012c00
 8008b8c:	40013400 	.word	0x40013400
 8008b90:	40014000 	.word	0x40014000
 8008b94:	40014400 	.word	0x40014400
 8008b98:	40014800 	.word	0x40014800

08008b9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b087      	sub	sp, #28
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	f003 031f 	and.w	r3, r3, #31
 8008bae:	2201      	movs	r2, #1
 8008bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6a1a      	ldr	r2, [r3, #32]
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	43db      	mvns	r3, r3
 8008bbe:	401a      	ands	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6a1a      	ldr	r2, [r3, #32]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	f003 031f 	and.w	r3, r3, #31
 8008bce:	6879      	ldr	r1, [r7, #4]
 8008bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8008bd4:	431a      	orrs	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	621a      	str	r2, [r3, #32]
}
 8008bda:	bf00      	nop
 8008bdc:	371c      	adds	r7, #28
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
	...

08008be8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d109      	bne.n	8008c0c <HAL_TIMEx_PWMN_Start+0x24>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	bf14      	ite	ne
 8008c04:	2301      	movne	r3, #1
 8008c06:	2300      	moveq	r3, #0
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	e022      	b.n	8008c52 <HAL_TIMEx_PWMN_Start+0x6a>
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	2b04      	cmp	r3, #4
 8008c10:	d109      	bne.n	8008c26 <HAL_TIMEx_PWMN_Start+0x3e>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	bf14      	ite	ne
 8008c1e:	2301      	movne	r3, #1
 8008c20:	2300      	moveq	r3, #0
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	e015      	b.n	8008c52 <HAL_TIMEx_PWMN_Start+0x6a>
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	2b08      	cmp	r3, #8
 8008c2a:	d109      	bne.n	8008c40 <HAL_TIMEx_PWMN_Start+0x58>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	bf14      	ite	ne
 8008c38:	2301      	movne	r3, #1
 8008c3a:	2300      	moveq	r3, #0
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	e008      	b.n	8008c52 <HAL_TIMEx_PWMN_Start+0x6a>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	bf14      	ite	ne
 8008c4c:	2301      	movne	r3, #1
 8008c4e:	2300      	moveq	r3, #0
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e069      	b.n	8008d2e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d104      	bne.n	8008c6a <HAL_TIMEx_PWMN_Start+0x82>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2202      	movs	r2, #2
 8008c64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c68:	e013      	b.n	8008c92 <HAL_TIMEx_PWMN_Start+0xaa>
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b04      	cmp	r3, #4
 8008c6e:	d104      	bne.n	8008c7a <HAL_TIMEx_PWMN_Start+0x92>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2202      	movs	r2, #2
 8008c74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c78:	e00b      	b.n	8008c92 <HAL_TIMEx_PWMN_Start+0xaa>
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	2b08      	cmp	r3, #8
 8008c7e:	d104      	bne.n	8008c8a <HAL_TIMEx_PWMN_Start+0xa2>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2202      	movs	r2, #2
 8008c84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c88:	e003      	b.n	8008c92 <HAL_TIMEx_PWMN_Start+0xaa>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2204      	movs	r2, #4
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 fa1d 	bl	80090da <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008cae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a20      	ldr	r2, [pc, #128]	@ (8008d38 <HAL_TIMEx_PWMN_Start+0x150>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d018      	beq.n	8008cec <HAL_TIMEx_PWMN_Start+0x104>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cc2:	d013      	beq.n	8008cec <HAL_TIMEx_PWMN_Start+0x104>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8008d3c <HAL_TIMEx_PWMN_Start+0x154>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d00e      	beq.n	8008cec <HAL_TIMEx_PWMN_Start+0x104>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8008d40 <HAL_TIMEx_PWMN_Start+0x158>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d009      	beq.n	8008cec <HAL_TIMEx_PWMN_Start+0x104>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a19      	ldr	r2, [pc, #100]	@ (8008d44 <HAL_TIMEx_PWMN_Start+0x15c>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d004      	beq.n	8008cec <HAL_TIMEx_PWMN_Start+0x104>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a18      	ldr	r2, [pc, #96]	@ (8008d48 <HAL_TIMEx_PWMN_Start+0x160>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d115      	bne.n	8008d18 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	689a      	ldr	r2, [r3, #8]
 8008cf2:	4b16      	ldr	r3, [pc, #88]	@ (8008d4c <HAL_TIMEx_PWMN_Start+0x164>)
 8008cf4:	4013      	ands	r3, r2
 8008cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2b06      	cmp	r3, #6
 8008cfc:	d015      	beq.n	8008d2a <HAL_TIMEx_PWMN_Start+0x142>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d04:	d011      	beq.n	8008d2a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f042 0201 	orr.w	r2, r2, #1
 8008d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d16:	e008      	b.n	8008d2a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f042 0201 	orr.w	r2, r2, #1
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	e000      	b.n	8008d2c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	40012c00 	.word	0x40012c00
 8008d3c:	40000400 	.word	0x40000400
 8008d40:	40000800 	.word	0x40000800
 8008d44:	40013400 	.word	0x40013400
 8008d48:	40014000 	.word	0x40014000
 8008d4c:	00010007 	.word	0x00010007

08008d50 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 f9b9 	bl	80090da <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	6a1a      	ldr	r2, [r3, #32]
 8008d6e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008d72:	4013      	ands	r3, r2
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10f      	bne.n	8008d98 <HAL_TIMEx_PWMN_Stop+0x48>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6a1a      	ldr	r2, [r3, #32]
 8008d7e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008d82:	4013      	ands	r3, r2
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d107      	bne.n	8008d98 <HAL_TIMEx_PWMN_Stop+0x48>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008d96:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6a1a      	ldr	r2, [r3, #32]
 8008d9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008da2:	4013      	ands	r3, r2
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10f      	bne.n	8008dc8 <HAL_TIMEx_PWMN_Stop+0x78>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6a1a      	ldr	r2, [r3, #32]
 8008dae:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008db2:	4013      	ands	r3, r2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d107      	bne.n	8008dc8 <HAL_TIMEx_PWMN_Stop+0x78>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f022 0201 	bic.w	r2, r2, #1
 8008dc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d104      	bne.n	8008dd8 <HAL_TIMEx_PWMN_Stop+0x88>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008dd6:	e013      	b.n	8008e00 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	2b04      	cmp	r3, #4
 8008ddc:	d104      	bne.n	8008de8 <HAL_TIMEx_PWMN_Stop+0x98>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2201      	movs	r2, #1
 8008de2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008de6:	e00b      	b.n	8008e00 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	2b08      	cmp	r3, #8
 8008dec:	d104      	bne.n	8008df8 <HAL_TIMEx_PWMN_Stop+0xa8>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008df6:	e003      	b.n	8008e00 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
	...

08008e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d101      	bne.n	8008e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e20:	2302      	movs	r3, #2
 8008e22:	e065      	b.n	8008ef0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a2c      	ldr	r2, [pc, #176]	@ (8008efc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d004      	beq.n	8008e58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a2b      	ldr	r2, [pc, #172]	@ (8008f00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d108      	bne.n	8008e6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008e5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008e70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8008efc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d018      	beq.n	8008ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e9a:	d013      	beq.n	8008ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a18      	ldr	r2, [pc, #96]	@ (8008f04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d00e      	beq.n	8008ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a17      	ldr	r2, [pc, #92]	@ (8008f08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d009      	beq.n	8008ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a12      	ldr	r2, [pc, #72]	@ (8008f00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d004      	beq.n	8008ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a13      	ldr	r2, [pc, #76]	@ (8008f0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d10c      	bne.n	8008ede <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008eca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	68ba      	ldr	r2, [r7, #8]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3714      	adds	r7, #20
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr
 8008efc:	40012c00 	.word	0x40012c00
 8008f00:	40013400 	.word	0x40013400
 8008f04:	40000400 	.word	0x40000400
 8008f08:	40000800 	.word	0x40000800
 8008f0c:	40014000 	.word	0x40014000

08008f10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d101      	bne.n	8008f2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f28:	2302      	movs	r3, #2
 8008f2a:	e073      	b.n	8009014 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	695b      	ldr	r3, [r3, #20]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f92:	4313      	orrs	r3, r2
 8008f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	041b      	lsls	r3, r3, #16
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	69db      	ldr	r3, [r3, #28]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a19      	ldr	r2, [pc, #100]	@ (8009020 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d004      	beq.n	8008fc8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a18      	ldr	r2, [pc, #96]	@ (8009024 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d11c      	bne.n	8009002 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd2:	051b      	lsls	r3, r3, #20
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffe:	4313      	orrs	r3, r2
 8009000:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr
 8009020:	40012c00 	.word	0x40012c00
 8009024:	40013400 	.word	0x40013400

08009028 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800903e:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800904e:	b480      	push	{r7}
 8009050:	b083      	sub	sp, #12
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009056:	bf00      	nop
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr

08009062 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009062:	b480      	push	{r7}
 8009064:	b083      	sub	sp, #12
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800906a:	bf00      	nop
 800906c:	370c      	adds	r7, #12
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009076:	b480      	push	{r7}
 8009078:	b083      	sub	sp, #12
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800907e:	bf00      	nop
 8009080:	370c      	adds	r7, #12
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800908a:	b480      	push	{r7}
 800908c:	b083      	sub	sp, #12
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009092:	bf00      	nop
 8009094:	370c      	adds	r7, #12
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800909e:	b480      	push	{r7}
 80090a0:	b083      	sub	sp, #12
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80090a6:	bf00      	nop
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b083      	sub	sp, #12
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80090ba:	bf00      	nop
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b083      	sub	sp, #12
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80090ce:	bf00      	nop
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80090da:	b480      	push	{r7}
 80090dc:	b087      	sub	sp, #28
 80090de:	af00      	add	r7, sp, #0
 80090e0:	60f8      	str	r0, [r7, #12]
 80090e2:	60b9      	str	r1, [r7, #8]
 80090e4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	f003 030f 	and.w	r3, r3, #15
 80090ec:	2204      	movs	r2, #4
 80090ee:	fa02 f303 	lsl.w	r3, r2, r3
 80090f2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6a1a      	ldr	r2, [r3, #32]
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	43db      	mvns	r3, r3
 80090fc:	401a      	ands	r2, r3
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6a1a      	ldr	r2, [r3, #32]
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	f003 030f 	and.w	r3, r3, #15
 800910c:	6879      	ldr	r1, [r7, #4]
 800910e:	fa01 f303 	lsl.w	r3, r1, r3
 8009112:	431a      	orrs	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	621a      	str	r2, [r3, #32]
}
 8009118:	bf00      	nop
 800911a:	371c      	adds	r7, #28
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e042      	b.n	80091bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800913c:	2b00      	cmp	r3, #0
 800913e:	d106      	bne.n	800914e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f83b 	bl	80091c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2224      	movs	r2, #36	@ 0x24
 8009152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f022 0201 	bic.w	r2, r2, #1
 8009164:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800916a:	2b00      	cmp	r3, #0
 800916c:	d002      	beq.n	8009174 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fafe 	bl	8009770 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 f82f 	bl	80091d8 <UART_SetConfig>
 800917a:	4603      	mov	r3, r0
 800917c:	2b01      	cmp	r3, #1
 800917e:	d101      	bne.n	8009184 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	e01b      	b.n	80091bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	685a      	ldr	r2, [r3, #4]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009192:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	689a      	ldr	r2, [r3, #8]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f042 0201 	orr.w	r2, r2, #1
 80091b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fb7d 	bl	80098b4 <UART_CheckIdleState>
 80091ba:	4603      	mov	r3, r0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091dc:	b08c      	sub	sp, #48	@ 0x30
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	689a      	ldr	r2, [r3, #8]
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	431a      	orrs	r2, r3
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	431a      	orrs	r2, r3
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	69db      	ldr	r3, [r3, #28]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	4bab      	ldr	r3, [pc, #684]	@ (80094b4 <UART_SetConfig+0x2dc>)
 8009208:	4013      	ands	r3, r2
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	6812      	ldr	r2, [r2, #0]
 800920e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009210:	430b      	orrs	r3, r1
 8009212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	68da      	ldr	r2, [r3, #12]
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	430a      	orrs	r2, r1
 8009228:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4aa0      	ldr	r2, [pc, #640]	@ (80094b8 <UART_SetConfig+0x2e0>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d004      	beq.n	8009244 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	6a1b      	ldr	r3, [r3, #32]
 800923e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009240:	4313      	orrs	r3, r2
 8009242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800924e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	6812      	ldr	r2, [r2, #0]
 8009256:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009258:	430b      	orrs	r3, r1
 800925a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009262:	f023 010f 	bic.w	r1, r3, #15
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	430a      	orrs	r2, r1
 8009270:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a91      	ldr	r2, [pc, #580]	@ (80094bc <UART_SetConfig+0x2e4>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d125      	bne.n	80092c8 <UART_SetConfig+0xf0>
 800927c:	4b90      	ldr	r3, [pc, #576]	@ (80094c0 <UART_SetConfig+0x2e8>)
 800927e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009282:	f003 0303 	and.w	r3, r3, #3
 8009286:	2b03      	cmp	r3, #3
 8009288:	d81a      	bhi.n	80092c0 <UART_SetConfig+0xe8>
 800928a:	a201      	add	r2, pc, #4	@ (adr r2, 8009290 <UART_SetConfig+0xb8>)
 800928c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009290:	080092a1 	.word	0x080092a1
 8009294:	080092b1 	.word	0x080092b1
 8009298:	080092a9 	.word	0x080092a9
 800929c:	080092b9 	.word	0x080092b9
 80092a0:	2301      	movs	r3, #1
 80092a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092a6:	e0d6      	b.n	8009456 <UART_SetConfig+0x27e>
 80092a8:	2302      	movs	r3, #2
 80092aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092ae:	e0d2      	b.n	8009456 <UART_SetConfig+0x27e>
 80092b0:	2304      	movs	r3, #4
 80092b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092b6:	e0ce      	b.n	8009456 <UART_SetConfig+0x27e>
 80092b8:	2308      	movs	r3, #8
 80092ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092be:	e0ca      	b.n	8009456 <UART_SetConfig+0x27e>
 80092c0:	2310      	movs	r3, #16
 80092c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092c6:	e0c6      	b.n	8009456 <UART_SetConfig+0x27e>
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a7d      	ldr	r2, [pc, #500]	@ (80094c4 <UART_SetConfig+0x2ec>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d138      	bne.n	8009344 <UART_SetConfig+0x16c>
 80092d2:	4b7b      	ldr	r3, [pc, #492]	@ (80094c0 <UART_SetConfig+0x2e8>)
 80092d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092d8:	f003 030c 	and.w	r3, r3, #12
 80092dc:	2b0c      	cmp	r3, #12
 80092de:	d82d      	bhi.n	800933c <UART_SetConfig+0x164>
 80092e0:	a201      	add	r2, pc, #4	@ (adr r2, 80092e8 <UART_SetConfig+0x110>)
 80092e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e6:	bf00      	nop
 80092e8:	0800931d 	.word	0x0800931d
 80092ec:	0800933d 	.word	0x0800933d
 80092f0:	0800933d 	.word	0x0800933d
 80092f4:	0800933d 	.word	0x0800933d
 80092f8:	0800932d 	.word	0x0800932d
 80092fc:	0800933d 	.word	0x0800933d
 8009300:	0800933d 	.word	0x0800933d
 8009304:	0800933d 	.word	0x0800933d
 8009308:	08009325 	.word	0x08009325
 800930c:	0800933d 	.word	0x0800933d
 8009310:	0800933d 	.word	0x0800933d
 8009314:	0800933d 	.word	0x0800933d
 8009318:	08009335 	.word	0x08009335
 800931c:	2300      	movs	r3, #0
 800931e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009322:	e098      	b.n	8009456 <UART_SetConfig+0x27e>
 8009324:	2302      	movs	r3, #2
 8009326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800932a:	e094      	b.n	8009456 <UART_SetConfig+0x27e>
 800932c:	2304      	movs	r3, #4
 800932e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009332:	e090      	b.n	8009456 <UART_SetConfig+0x27e>
 8009334:	2308      	movs	r3, #8
 8009336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800933a:	e08c      	b.n	8009456 <UART_SetConfig+0x27e>
 800933c:	2310      	movs	r3, #16
 800933e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009342:	e088      	b.n	8009456 <UART_SetConfig+0x27e>
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a5f      	ldr	r2, [pc, #380]	@ (80094c8 <UART_SetConfig+0x2f0>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d125      	bne.n	800939a <UART_SetConfig+0x1c2>
 800934e:	4b5c      	ldr	r3, [pc, #368]	@ (80094c0 <UART_SetConfig+0x2e8>)
 8009350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009354:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009358:	2b30      	cmp	r3, #48	@ 0x30
 800935a:	d016      	beq.n	800938a <UART_SetConfig+0x1b2>
 800935c:	2b30      	cmp	r3, #48	@ 0x30
 800935e:	d818      	bhi.n	8009392 <UART_SetConfig+0x1ba>
 8009360:	2b20      	cmp	r3, #32
 8009362:	d00a      	beq.n	800937a <UART_SetConfig+0x1a2>
 8009364:	2b20      	cmp	r3, #32
 8009366:	d814      	bhi.n	8009392 <UART_SetConfig+0x1ba>
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <UART_SetConfig+0x19a>
 800936c:	2b10      	cmp	r3, #16
 800936e:	d008      	beq.n	8009382 <UART_SetConfig+0x1aa>
 8009370:	e00f      	b.n	8009392 <UART_SetConfig+0x1ba>
 8009372:	2300      	movs	r3, #0
 8009374:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009378:	e06d      	b.n	8009456 <UART_SetConfig+0x27e>
 800937a:	2302      	movs	r3, #2
 800937c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009380:	e069      	b.n	8009456 <UART_SetConfig+0x27e>
 8009382:	2304      	movs	r3, #4
 8009384:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009388:	e065      	b.n	8009456 <UART_SetConfig+0x27e>
 800938a:	2308      	movs	r3, #8
 800938c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009390:	e061      	b.n	8009456 <UART_SetConfig+0x27e>
 8009392:	2310      	movs	r3, #16
 8009394:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009398:	e05d      	b.n	8009456 <UART_SetConfig+0x27e>
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a4b      	ldr	r2, [pc, #300]	@ (80094cc <UART_SetConfig+0x2f4>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d125      	bne.n	80093f0 <UART_SetConfig+0x218>
 80093a4:	4b46      	ldr	r3, [pc, #280]	@ (80094c0 <UART_SetConfig+0x2e8>)
 80093a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80093ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80093b0:	d016      	beq.n	80093e0 <UART_SetConfig+0x208>
 80093b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80093b4:	d818      	bhi.n	80093e8 <UART_SetConfig+0x210>
 80093b6:	2b80      	cmp	r3, #128	@ 0x80
 80093b8:	d00a      	beq.n	80093d0 <UART_SetConfig+0x1f8>
 80093ba:	2b80      	cmp	r3, #128	@ 0x80
 80093bc:	d814      	bhi.n	80093e8 <UART_SetConfig+0x210>
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d002      	beq.n	80093c8 <UART_SetConfig+0x1f0>
 80093c2:	2b40      	cmp	r3, #64	@ 0x40
 80093c4:	d008      	beq.n	80093d8 <UART_SetConfig+0x200>
 80093c6:	e00f      	b.n	80093e8 <UART_SetConfig+0x210>
 80093c8:	2300      	movs	r3, #0
 80093ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093ce:	e042      	b.n	8009456 <UART_SetConfig+0x27e>
 80093d0:	2302      	movs	r3, #2
 80093d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093d6:	e03e      	b.n	8009456 <UART_SetConfig+0x27e>
 80093d8:	2304      	movs	r3, #4
 80093da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093de:	e03a      	b.n	8009456 <UART_SetConfig+0x27e>
 80093e0:	2308      	movs	r3, #8
 80093e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093e6:	e036      	b.n	8009456 <UART_SetConfig+0x27e>
 80093e8:	2310      	movs	r3, #16
 80093ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093ee:	e032      	b.n	8009456 <UART_SetConfig+0x27e>
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a30      	ldr	r2, [pc, #192]	@ (80094b8 <UART_SetConfig+0x2e0>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d12a      	bne.n	8009450 <UART_SetConfig+0x278>
 80093fa:	4b31      	ldr	r3, [pc, #196]	@ (80094c0 <UART_SetConfig+0x2e8>)
 80093fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009400:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009404:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009408:	d01a      	beq.n	8009440 <UART_SetConfig+0x268>
 800940a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800940e:	d81b      	bhi.n	8009448 <UART_SetConfig+0x270>
 8009410:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009414:	d00c      	beq.n	8009430 <UART_SetConfig+0x258>
 8009416:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800941a:	d815      	bhi.n	8009448 <UART_SetConfig+0x270>
 800941c:	2b00      	cmp	r3, #0
 800941e:	d003      	beq.n	8009428 <UART_SetConfig+0x250>
 8009420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009424:	d008      	beq.n	8009438 <UART_SetConfig+0x260>
 8009426:	e00f      	b.n	8009448 <UART_SetConfig+0x270>
 8009428:	2300      	movs	r3, #0
 800942a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800942e:	e012      	b.n	8009456 <UART_SetConfig+0x27e>
 8009430:	2302      	movs	r3, #2
 8009432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009436:	e00e      	b.n	8009456 <UART_SetConfig+0x27e>
 8009438:	2304      	movs	r3, #4
 800943a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800943e:	e00a      	b.n	8009456 <UART_SetConfig+0x27e>
 8009440:	2308      	movs	r3, #8
 8009442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009446:	e006      	b.n	8009456 <UART_SetConfig+0x27e>
 8009448:	2310      	movs	r3, #16
 800944a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800944e:	e002      	b.n	8009456 <UART_SetConfig+0x27e>
 8009450:	2310      	movs	r3, #16
 8009452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a17      	ldr	r2, [pc, #92]	@ (80094b8 <UART_SetConfig+0x2e0>)
 800945c:	4293      	cmp	r3, r2
 800945e:	f040 80a8 	bne.w	80095b2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009462:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009466:	2b08      	cmp	r3, #8
 8009468:	d834      	bhi.n	80094d4 <UART_SetConfig+0x2fc>
 800946a:	a201      	add	r2, pc, #4	@ (adr r2, 8009470 <UART_SetConfig+0x298>)
 800946c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009470:	08009495 	.word	0x08009495
 8009474:	080094d5 	.word	0x080094d5
 8009478:	0800949d 	.word	0x0800949d
 800947c:	080094d5 	.word	0x080094d5
 8009480:	080094a3 	.word	0x080094a3
 8009484:	080094d5 	.word	0x080094d5
 8009488:	080094d5 	.word	0x080094d5
 800948c:	080094d5 	.word	0x080094d5
 8009490:	080094ab 	.word	0x080094ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009494:	f7fd fee4 	bl	8007260 <HAL_RCC_GetPCLK1Freq>
 8009498:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800949a:	e021      	b.n	80094e0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800949c:	4b0c      	ldr	r3, [pc, #48]	@ (80094d0 <UART_SetConfig+0x2f8>)
 800949e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80094a0:	e01e      	b.n	80094e0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094a2:	f7fd fe6f 	bl	8007184 <HAL_RCC_GetSysClockFreq>
 80094a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80094a8:	e01a      	b.n	80094e0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80094b0:	e016      	b.n	80094e0 <UART_SetConfig+0x308>
 80094b2:	bf00      	nop
 80094b4:	cfff69f3 	.word	0xcfff69f3
 80094b8:	40008000 	.word	0x40008000
 80094bc:	40013800 	.word	0x40013800
 80094c0:	40021000 	.word	0x40021000
 80094c4:	40004400 	.word	0x40004400
 80094c8:	40004800 	.word	0x40004800
 80094cc:	40004c00 	.word	0x40004c00
 80094d0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80094d4:	2300      	movs	r3, #0
 80094d6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80094de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80094e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f000 812a 	beq.w	800973c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ec:	4a9e      	ldr	r2, [pc, #632]	@ (8009768 <UART_SetConfig+0x590>)
 80094ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094f2:	461a      	mov	r2, r3
 80094f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80094fa:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	685a      	ldr	r2, [r3, #4]
 8009500:	4613      	mov	r3, r2
 8009502:	005b      	lsls	r3, r3, #1
 8009504:	4413      	add	r3, r2
 8009506:	69ba      	ldr	r2, [r7, #24]
 8009508:	429a      	cmp	r2, r3
 800950a:	d305      	bcc.n	8009518 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009512:	69ba      	ldr	r2, [r7, #24]
 8009514:	429a      	cmp	r2, r3
 8009516:	d903      	bls.n	8009520 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800951e:	e10d      	b.n	800973c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009522:	2200      	movs	r2, #0
 8009524:	60bb      	str	r3, [r7, #8]
 8009526:	60fa      	str	r2, [r7, #12]
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800952c:	4a8e      	ldr	r2, [pc, #568]	@ (8009768 <UART_SetConfig+0x590>)
 800952e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009532:	b29b      	uxth	r3, r3
 8009534:	2200      	movs	r2, #0
 8009536:	603b      	str	r3, [r7, #0]
 8009538:	607a      	str	r2, [r7, #4]
 800953a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800953e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009542:	f7f6 fe6d 	bl	8000220 <__aeabi_uldivmod>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4610      	mov	r0, r2
 800954c:	4619      	mov	r1, r3
 800954e:	f04f 0200 	mov.w	r2, #0
 8009552:	f04f 0300 	mov.w	r3, #0
 8009556:	020b      	lsls	r3, r1, #8
 8009558:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800955c:	0202      	lsls	r2, r0, #8
 800955e:	6979      	ldr	r1, [r7, #20]
 8009560:	6849      	ldr	r1, [r1, #4]
 8009562:	0849      	lsrs	r1, r1, #1
 8009564:	2000      	movs	r0, #0
 8009566:	460c      	mov	r4, r1
 8009568:	4605      	mov	r5, r0
 800956a:	eb12 0804 	adds.w	r8, r2, r4
 800956e:	eb43 0905 	adc.w	r9, r3, r5
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	469a      	mov	sl, r3
 800957a:	4693      	mov	fp, r2
 800957c:	4652      	mov	r2, sl
 800957e:	465b      	mov	r3, fp
 8009580:	4640      	mov	r0, r8
 8009582:	4649      	mov	r1, r9
 8009584:	f7f6 fe4c 	bl	8000220 <__aeabi_uldivmod>
 8009588:	4602      	mov	r2, r0
 800958a:	460b      	mov	r3, r1
 800958c:	4613      	mov	r3, r2
 800958e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009596:	d308      	bcc.n	80095aa <UART_SetConfig+0x3d2>
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800959e:	d204      	bcs.n	80095aa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	6a3a      	ldr	r2, [r7, #32]
 80095a6:	60da      	str	r2, [r3, #12]
 80095a8:	e0c8      	b.n	800973c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80095b0:	e0c4      	b.n	800973c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095ba:	d167      	bne.n	800968c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80095bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80095c0:	2b08      	cmp	r3, #8
 80095c2:	d828      	bhi.n	8009616 <UART_SetConfig+0x43e>
 80095c4:	a201      	add	r2, pc, #4	@ (adr r2, 80095cc <UART_SetConfig+0x3f4>)
 80095c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ca:	bf00      	nop
 80095cc:	080095f1 	.word	0x080095f1
 80095d0:	080095f9 	.word	0x080095f9
 80095d4:	08009601 	.word	0x08009601
 80095d8:	08009617 	.word	0x08009617
 80095dc:	08009607 	.word	0x08009607
 80095e0:	08009617 	.word	0x08009617
 80095e4:	08009617 	.word	0x08009617
 80095e8:	08009617 	.word	0x08009617
 80095ec:	0800960f 	.word	0x0800960f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095f0:	f7fd fe36 	bl	8007260 <HAL_RCC_GetPCLK1Freq>
 80095f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80095f6:	e014      	b.n	8009622 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095f8:	f7fd fe48 	bl	800728c <HAL_RCC_GetPCLK2Freq>
 80095fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80095fe:	e010      	b.n	8009622 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009600:	4b5a      	ldr	r3, [pc, #360]	@ (800976c <UART_SetConfig+0x594>)
 8009602:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009604:	e00d      	b.n	8009622 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009606:	f7fd fdbd 	bl	8007184 <HAL_RCC_GetSysClockFreq>
 800960a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800960c:	e009      	b.n	8009622 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800960e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009612:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009614:	e005      	b.n	8009622 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009616:	2300      	movs	r3, #0
 8009618:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009620:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009624:	2b00      	cmp	r3, #0
 8009626:	f000 8089 	beq.w	800973c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800962e:	4a4e      	ldr	r2, [pc, #312]	@ (8009768 <UART_SetConfig+0x590>)
 8009630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009634:	461a      	mov	r2, r3
 8009636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009638:	fbb3 f3f2 	udiv	r3, r3, r2
 800963c:	005a      	lsls	r2, r3, #1
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	085b      	lsrs	r3, r3, #1
 8009644:	441a      	add	r2, r3
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	fbb2 f3f3 	udiv	r3, r2, r3
 800964e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009650:	6a3b      	ldr	r3, [r7, #32]
 8009652:	2b0f      	cmp	r3, #15
 8009654:	d916      	bls.n	8009684 <UART_SetConfig+0x4ac>
 8009656:	6a3b      	ldr	r3, [r7, #32]
 8009658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800965c:	d212      	bcs.n	8009684 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	b29b      	uxth	r3, r3
 8009662:	f023 030f 	bic.w	r3, r3, #15
 8009666:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009668:	6a3b      	ldr	r3, [r7, #32]
 800966a:	085b      	lsrs	r3, r3, #1
 800966c:	b29b      	uxth	r3, r3
 800966e:	f003 0307 	and.w	r3, r3, #7
 8009672:	b29a      	uxth	r2, r3
 8009674:	8bfb      	ldrh	r3, [r7, #30]
 8009676:	4313      	orrs	r3, r2
 8009678:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	8bfa      	ldrh	r2, [r7, #30]
 8009680:	60da      	str	r2, [r3, #12]
 8009682:	e05b      	b.n	800973c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800968a:	e057      	b.n	800973c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800968c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009690:	2b08      	cmp	r3, #8
 8009692:	d828      	bhi.n	80096e6 <UART_SetConfig+0x50e>
 8009694:	a201      	add	r2, pc, #4	@ (adr r2, 800969c <UART_SetConfig+0x4c4>)
 8009696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969a:	bf00      	nop
 800969c:	080096c1 	.word	0x080096c1
 80096a0:	080096c9 	.word	0x080096c9
 80096a4:	080096d1 	.word	0x080096d1
 80096a8:	080096e7 	.word	0x080096e7
 80096ac:	080096d7 	.word	0x080096d7
 80096b0:	080096e7 	.word	0x080096e7
 80096b4:	080096e7 	.word	0x080096e7
 80096b8:	080096e7 	.word	0x080096e7
 80096bc:	080096df 	.word	0x080096df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096c0:	f7fd fdce 	bl	8007260 <HAL_RCC_GetPCLK1Freq>
 80096c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80096c6:	e014      	b.n	80096f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096c8:	f7fd fde0 	bl	800728c <HAL_RCC_GetPCLK2Freq>
 80096cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80096ce:	e010      	b.n	80096f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096d0:	4b26      	ldr	r3, [pc, #152]	@ (800976c <UART_SetConfig+0x594>)
 80096d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80096d4:	e00d      	b.n	80096f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096d6:	f7fd fd55 	bl	8007184 <HAL_RCC_GetSysClockFreq>
 80096da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80096dc:	e009      	b.n	80096f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80096e4:	e005      	b.n	80096f2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80096e6:	2300      	movs	r3, #0
 80096e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80096f0:	bf00      	nop
    }

    if (pclk != 0U)
 80096f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d021      	beq.n	800973c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096fc:	4a1a      	ldr	r2, [pc, #104]	@ (8009768 <UART_SetConfig+0x590>)
 80096fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009702:	461a      	mov	r2, r3
 8009704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009706:	fbb3 f2f2 	udiv	r2, r3, r2
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	085b      	lsrs	r3, r3, #1
 8009710:	441a      	add	r2, r3
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	fbb2 f3f3 	udiv	r3, r2, r3
 800971a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800971c:	6a3b      	ldr	r3, [r7, #32]
 800971e:	2b0f      	cmp	r3, #15
 8009720:	d909      	bls.n	8009736 <UART_SetConfig+0x55e>
 8009722:	6a3b      	ldr	r3, [r7, #32]
 8009724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009728:	d205      	bcs.n	8009736 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	b29a      	uxth	r2, r3
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	60da      	str	r2, [r3, #12]
 8009734:	e002      	b.n	800973c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	2201      	movs	r2, #1
 8009740:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	2201      	movs	r2, #1
 8009748:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	2200      	movs	r2, #0
 8009750:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	2200      	movs	r2, #0
 8009756:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009758:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800975c:	4618      	mov	r0, r3
 800975e:	3730      	adds	r7, #48	@ 0x30
 8009760:	46bd      	mov	sp, r7
 8009762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009766:	bf00      	nop
 8009768:	0800cd7c 	.word	0x0800cd7c
 800976c:	00f42400 	.word	0x00f42400

08009770 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800977c:	f003 0308 	and.w	r3, r3, #8
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00a      	beq.n	800979a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	430a      	orrs	r2, r1
 8009798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800979e:	f003 0301 	and.w	r3, r3, #1
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00a      	beq.n	80097bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	430a      	orrs	r2, r1
 80097ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c0:	f003 0302 	and.w	r3, r3, #2
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00a      	beq.n	80097de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	430a      	orrs	r2, r1
 80097dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097e2:	f003 0304 	and.w	r3, r3, #4
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00a      	beq.n	8009800 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	430a      	orrs	r2, r1
 80097fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009804:	f003 0310 	and.w	r3, r3, #16
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00a      	beq.n	8009822 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	430a      	orrs	r2, r1
 8009820:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009826:	f003 0320 	and.w	r3, r3, #32
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00a      	beq.n	8009844 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	430a      	orrs	r2, r1
 8009842:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800984c:	2b00      	cmp	r3, #0
 800984e:	d01a      	beq.n	8009886 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800986a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800986e:	d10a      	bne.n	8009886 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	430a      	orrs	r2, r1
 8009884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800988a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00a      	beq.n	80098a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	430a      	orrs	r2, r1
 80098a6:	605a      	str	r2, [r3, #4]
  }
}
 80098a8:	bf00      	nop
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b098      	sub	sp, #96	@ 0x60
 80098b8:	af02      	add	r7, sp, #8
 80098ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098c4:	f7fa f886 	bl	80039d4 <HAL_GetTick>
 80098c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 0308 	and.w	r3, r3, #8
 80098d4:	2b08      	cmp	r3, #8
 80098d6:	d12f      	bne.n	8009938 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098e0:	2200      	movs	r2, #0
 80098e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f88e 	bl	8009a08 <UART_WaitOnFlagUntilTimeout>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d022      	beq.n	8009938 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098fa:	e853 3f00 	ldrex	r3, [r3]
 80098fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009902:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009906:	653b      	str	r3, [r7, #80]	@ 0x50
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	461a      	mov	r2, r3
 800990e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009910:	647b      	str	r3, [r7, #68]	@ 0x44
 8009912:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009914:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009916:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009918:	e841 2300 	strex	r3, r2, [r1]
 800991c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800991e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1e6      	bne.n	80098f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2220      	movs	r2, #32
 8009928:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e063      	b.n	8009a00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 0304 	and.w	r3, r3, #4
 8009942:	2b04      	cmp	r3, #4
 8009944:	d149      	bne.n	80099da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009946:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800994a:	9300      	str	r3, [sp, #0]
 800994c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800994e:	2200      	movs	r2, #0
 8009950:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f857 	bl	8009a08 <UART_WaitOnFlagUntilTimeout>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d03c      	beq.n	80099da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009968:	e853 3f00 	ldrex	r3, [r3]
 800996c:	623b      	str	r3, [r7, #32]
   return(result);
 800996e:	6a3b      	ldr	r3, [r7, #32]
 8009970:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009974:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	461a      	mov	r2, r3
 800997c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800997e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009980:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009982:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009986:	e841 2300 	strex	r3, r2, [r1]
 800998a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800998c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1e6      	bne.n	8009960 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	3308      	adds	r3, #8
 8009998:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	e853 3f00 	ldrex	r3, [r3]
 80099a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f023 0301 	bic.w	r3, r3, #1
 80099a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3308      	adds	r3, #8
 80099b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099b2:	61fa      	str	r2, [r7, #28]
 80099b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b6:	69b9      	ldr	r1, [r7, #24]
 80099b8:	69fa      	ldr	r2, [r7, #28]
 80099ba:	e841 2300 	strex	r3, r2, [r1]
 80099be:	617b      	str	r3, [r7, #20]
   return(result);
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1e5      	bne.n	8009992 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2220      	movs	r2, #32
 80099ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e012      	b.n	8009a00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2220      	movs	r2, #32
 80099de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2220      	movs	r2, #32
 80099e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3758      	adds	r7, #88	@ 0x58
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	603b      	str	r3, [r7, #0]
 8009a14:	4613      	mov	r3, r2
 8009a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a18:	e04f      	b.n	8009aba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a20:	d04b      	beq.n	8009aba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a22:	f7f9 ffd7 	bl	80039d4 <HAL_GetTick>
 8009a26:	4602      	mov	r2, r0
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	69ba      	ldr	r2, [r7, #24]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d302      	bcc.n	8009a38 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d101      	bne.n	8009a3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	e04e      	b.n	8009ada <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 0304 	and.w	r3, r3, #4
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d037      	beq.n	8009aba <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	2b80      	cmp	r3, #128	@ 0x80
 8009a4e:	d034      	beq.n	8009aba <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2b40      	cmp	r3, #64	@ 0x40
 8009a54:	d031      	beq.n	8009aba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	69db      	ldr	r3, [r3, #28]
 8009a5c:	f003 0308 	and.w	r3, r3, #8
 8009a60:	2b08      	cmp	r3, #8
 8009a62:	d110      	bne.n	8009a86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2208      	movs	r2, #8
 8009a6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f000 f838 	bl	8009ae2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2208      	movs	r2, #8
 8009a76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e029      	b.n	8009ada <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	69db      	ldr	r3, [r3, #28]
 8009a8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a94:	d111      	bne.n	8009aba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f000 f81e 	bl	8009ae2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2220      	movs	r2, #32
 8009aaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	e00f      	b.n	8009ada <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	69da      	ldr	r2, [r3, #28]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	bf0c      	ite	eq
 8009aca:	2301      	moveq	r3, #1
 8009acc:	2300      	movne	r3, #0
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	79fb      	ldrb	r3, [r7, #7]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d0a0      	beq.n	8009a1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ae2:	b480      	push	{r7}
 8009ae4:	b095      	sub	sp, #84	@ 0x54
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009af2:	e853 3f00 	ldrex	r3, [r3]
 8009af6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	461a      	mov	r2, r3
 8009b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b08:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b10:	e841 2300 	strex	r3, r2, [r1]
 8009b14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e6      	bne.n	8009aea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3308      	adds	r3, #8
 8009b22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b24:	6a3b      	ldr	r3, [r7, #32]
 8009b26:	e853 3f00 	ldrex	r3, [r3]
 8009b2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b32:	f023 0301 	bic.w	r3, r3, #1
 8009b36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	3308      	adds	r3, #8
 8009b3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b48:	e841 2300 	strex	r3, r2, [r1]
 8009b4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1e3      	bne.n	8009b1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d118      	bne.n	8009b8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	e853 3f00 	ldrex	r3, [r3]
 8009b68:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	f023 0310 	bic.w	r3, r3, #16
 8009b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	461a      	mov	r2, r3
 8009b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b7a:	61bb      	str	r3, [r7, #24]
 8009b7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7e:	6979      	ldr	r1, [r7, #20]
 8009b80:	69ba      	ldr	r2, [r7, #24]
 8009b82:	e841 2300 	strex	r3, r2, [r1]
 8009b86:	613b      	str	r3, [r7, #16]
   return(result);
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1e6      	bne.n	8009b5c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2220      	movs	r2, #32
 8009b92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009ba2:	bf00      	nop
 8009ba4:	3754      	adds	r7, #84	@ 0x54
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
	...

08009bb0 <__NVIC_SetPriority>:
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	6039      	str	r1, [r7, #0]
 8009bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	db0a      	blt.n	8009bda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	490c      	ldr	r1, [pc, #48]	@ (8009bfc <__NVIC_SetPriority+0x4c>)
 8009bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bce:	0112      	lsls	r2, r2, #4
 8009bd0:	b2d2      	uxtb	r2, r2
 8009bd2:	440b      	add	r3, r1
 8009bd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009bd8:	e00a      	b.n	8009bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	b2da      	uxtb	r2, r3
 8009bde:	4908      	ldr	r1, [pc, #32]	@ (8009c00 <__NVIC_SetPriority+0x50>)
 8009be0:	79fb      	ldrb	r3, [r7, #7]
 8009be2:	f003 030f 	and.w	r3, r3, #15
 8009be6:	3b04      	subs	r3, #4
 8009be8:	0112      	lsls	r2, r2, #4
 8009bea:	b2d2      	uxtb	r2, r2
 8009bec:	440b      	add	r3, r1
 8009bee:	761a      	strb	r2, [r3, #24]
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	e000e100 	.word	0xe000e100
 8009c00:	e000ed00 	.word	0xe000ed00

08009c04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009c04:	b580      	push	{r7, lr}
 8009c06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009c08:	4b05      	ldr	r3, [pc, #20]	@ (8009c20 <SysTick_Handler+0x1c>)
 8009c0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009c0c:	f001 fe94 	bl	800b938 <xTaskGetSchedulerState>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d001      	beq.n	8009c1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009c16:	f002 fc8f 	bl	800c538 <xPortSysTickHandler>
  }
}
 8009c1a:	bf00      	nop
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	e000e010 	.word	0xe000e010

08009c24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009c24:	b580      	push	{r7, lr}
 8009c26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009c28:	2100      	movs	r1, #0
 8009c2a:	f06f 0004 	mvn.w	r0, #4
 8009c2e:	f7ff ffbf 	bl	8009bb0 <__NVIC_SetPriority>
#endif
}
 8009c32:	bf00      	nop
 8009c34:	bd80      	pop	{r7, pc}
	...

08009c38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c3e:	f3ef 8305 	mrs	r3, IPSR
 8009c42:	603b      	str	r3, [r7, #0]
  return(result);
 8009c44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d003      	beq.n	8009c52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009c4a:	f06f 0305 	mvn.w	r3, #5
 8009c4e:	607b      	str	r3, [r7, #4]
 8009c50:	e00c      	b.n	8009c6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009c52:	4b0a      	ldr	r3, [pc, #40]	@ (8009c7c <osKernelInitialize+0x44>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d105      	bne.n	8009c66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009c5a:	4b08      	ldr	r3, [pc, #32]	@ (8009c7c <osKernelInitialize+0x44>)
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	607b      	str	r3, [r7, #4]
 8009c64:	e002      	b.n	8009c6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009c66:	f04f 33ff 	mov.w	r3, #4294967295
 8009c6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009c6c:	687b      	ldr	r3, [r7, #4]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	370c      	adds	r7, #12
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	20000a04 	.word	0x20000a04

08009c80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c86:	f3ef 8305 	mrs	r3, IPSR
 8009c8a:	603b      	str	r3, [r7, #0]
  return(result);
 8009c8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d003      	beq.n	8009c9a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009c92:	f06f 0305 	mvn.w	r3, #5
 8009c96:	607b      	str	r3, [r7, #4]
 8009c98:	e010      	b.n	8009cbc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8009cc8 <osKernelStart+0x48>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d109      	bne.n	8009cb6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009ca2:	f7ff ffbf 	bl	8009c24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009ca6:	4b08      	ldr	r3, [pc, #32]	@ (8009cc8 <osKernelStart+0x48>)
 8009ca8:	2202      	movs	r2, #2
 8009caa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009cac:	f001 f9ce 	bl	800b04c <vTaskStartScheduler>
      stat = osOK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	607b      	str	r3, [r7, #4]
 8009cb4:	e002      	b.n	8009cbc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009cbc:	687b      	ldr	r3, [r7, #4]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20000a04 	.word	0x20000a04

08009ccc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cd2:	f3ef 8305 	mrs	r3, IPSR
 8009cd6:	603b      	str	r3, [r7, #0]
  return(result);
 8009cd8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d003      	beq.n	8009ce6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009cde:	f001 fae1 	bl	800b2a4 <xTaskGetTickCountFromISR>
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	e002      	b.n	8009cec <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009ce6:	f001 facd 	bl	800b284 <xTaskGetTickCount>
 8009cea:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009cec:	687b      	ldr	r3, [r7, #4]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3708      	adds	r7, #8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b08e      	sub	sp, #56	@ 0x38
 8009cfa:	af04      	add	r7, sp, #16
 8009cfc:	60f8      	str	r0, [r7, #12]
 8009cfe:	60b9      	str	r1, [r7, #8]
 8009d00:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009d02:	2300      	movs	r3, #0
 8009d04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d06:	f3ef 8305 	mrs	r3, IPSR
 8009d0a:	617b      	str	r3, [r7, #20]
  return(result);
 8009d0c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d17e      	bne.n	8009e10 <osThreadNew+0x11a>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d07b      	beq.n	8009e10 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009d18:	2380      	movs	r3, #128	@ 0x80
 8009d1a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009d1c:	2318      	movs	r3, #24
 8009d1e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009d20:	2300      	movs	r3, #0
 8009d22:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009d24:	f04f 33ff 	mov.w	r3, #4294967295
 8009d28:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d045      	beq.n	8009dbc <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <osThreadNew+0x48>
        name = attr->name;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d002      	beq.n	8009d4c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	699b      	ldr	r3, [r3, #24]
 8009d4a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d008      	beq.n	8009d64 <osThreadNew+0x6e>
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	2b38      	cmp	r3, #56	@ 0x38
 8009d56:	d805      	bhi.n	8009d64 <osThreadNew+0x6e>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	f003 0301 	and.w	r3, r3, #1
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d001      	beq.n	8009d68 <osThreadNew+0x72>
        return (NULL);
 8009d64:	2300      	movs	r3, #0
 8009d66:	e054      	b.n	8009e12 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	695b      	ldr	r3, [r3, #20]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d003      	beq.n	8009d78 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	695b      	ldr	r3, [r3, #20]
 8009d74:	089b      	lsrs	r3, r3, #2
 8009d76:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00e      	beq.n	8009d9e <osThreadNew+0xa8>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	2ba7      	cmp	r3, #167	@ 0xa7
 8009d86:	d90a      	bls.n	8009d9e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d006      	beq.n	8009d9e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	695b      	ldr	r3, [r3, #20]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d002      	beq.n	8009d9e <osThreadNew+0xa8>
        mem = 1;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	61bb      	str	r3, [r7, #24]
 8009d9c:	e010      	b.n	8009dc0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d10c      	bne.n	8009dc0 <osThreadNew+0xca>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d108      	bne.n	8009dc0 <osThreadNew+0xca>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d104      	bne.n	8009dc0 <osThreadNew+0xca>
          mem = 0;
 8009db6:	2300      	movs	r3, #0
 8009db8:	61bb      	str	r3, [r7, #24]
 8009dba:	e001      	b.n	8009dc0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d110      	bne.n	8009de8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009dce:	9202      	str	r2, [sp, #8]
 8009dd0:	9301      	str	r3, [sp, #4]
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	6a3a      	ldr	r2, [r7, #32]
 8009dda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f000 fe4d 	bl	800aa7c <xTaskCreateStatic>
 8009de2:	4603      	mov	r3, r0
 8009de4:	613b      	str	r3, [r7, #16]
 8009de6:	e013      	b.n	8009e10 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d110      	bne.n	8009e10 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009dee:	6a3b      	ldr	r3, [r7, #32]
 8009df0:	b29a      	uxth	r2, r3
 8009df2:	f107 0310 	add.w	r3, r7, #16
 8009df6:	9301      	str	r3, [sp, #4]
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f000 fe9b 	bl	800ab3c <xTaskCreate>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d001      	beq.n	8009e10 <osThreadNew+0x11a>
            hTask = NULL;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009e10:	693b      	ldr	r3, [r7, #16]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3728      	adds	r7, #40	@ 0x28
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8009e1e:	2000      	movs	r0, #0
 8009e20:	f000 ffea 	bl	800adf8 <vTaskDelete>
#endif
  for (;;);
 8009e24:	bf00      	nop
 8009e26:	e7fd      	b.n	8009e24 <osThreadExit+0xa>

08009e28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e30:	f3ef 8305 	mrs	r3, IPSR
 8009e34:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d003      	beq.n	8009e44 <osDelay+0x1c>
    stat = osErrorISR;
 8009e3c:	f06f 0305 	mvn.w	r3, #5
 8009e40:	60fb      	str	r3, [r7, #12]
 8009e42:	e007      	b.n	8009e54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d002      	beq.n	8009e54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f001 f8c6 	bl	800afe0 <vTaskDelay>
    }
  }

  return (stat);
 8009e54:	68fb      	ldr	r3, [r7, #12]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b086      	sub	sp, #24
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e66:	f3ef 8305 	mrs	r3, IPSR
 8009e6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d003      	beq.n	8009e7a <osDelayUntil+0x1c>
    stat = osErrorISR;
 8009e72:	f06f 0305 	mvn.w	r3, #5
 8009e76:	617b      	str	r3, [r7, #20]
 8009e78:	e019      	b.n	8009eae <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8009e7e:	f001 fa01 	bl	800b284 <xTaskGetTickCount>
 8009e82:	4603      	mov	r3, r0
 8009e84:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d009      	beq.n	8009ea8 <osDelayUntil+0x4a>
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	db06      	blt.n	8009ea8 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8009e9a:	f107 0308 	add.w	r3, r7, #8
 8009e9e:	6939      	ldr	r1, [r7, #16]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f001 f81d 	bl	800aee0 <vTaskDelayUntil>
 8009ea6:	e002      	b.n	8009eae <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009ea8:	f06f 0303 	mvn.w	r3, #3
 8009eac:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009eae:	697b      	ldr	r3, [r7, #20]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3718      	adds	r7, #24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	4a07      	ldr	r2, [pc, #28]	@ (8009ee4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009ec8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	4a06      	ldr	r2, [pc, #24]	@ (8009ee8 <vApplicationGetIdleTaskMemory+0x30>)
 8009ece:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2280      	movs	r2, #128	@ 0x80
 8009ed4:	601a      	str	r2, [r3, #0]
}
 8009ed6:	bf00      	nop
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	20000a08 	.word	0x20000a08
 8009ee8:	20000ab0 	.word	0x20000ab0

08009eec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4a07      	ldr	r2, [pc, #28]	@ (8009f18 <vApplicationGetTimerTaskMemory+0x2c>)
 8009efc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	4a06      	ldr	r2, [pc, #24]	@ (8009f1c <vApplicationGetTimerTaskMemory+0x30>)
 8009f02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009f0a:	601a      	str	r2, [r3, #0]
}
 8009f0c:	bf00      	nop
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	20000cb0 	.word	0x20000cb0
 8009f1c:	20000d58 	.word	0x20000d58

08009f20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f103 0208 	add.w	r2, r3, #8
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f04f 32ff 	mov.w	r2, #4294967295
 8009f38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f103 0208 	add.w	r2, r3, #8
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f103 0208 	add.w	r2, r3, #8
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f54:	bf00      	nop
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f6e:	bf00      	nop
 8009f70:	370c      	adds	r7, #12
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr

08009f7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f7a:	b480      	push	{r7}
 8009f7c:	b085      	sub	sp, #20
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	689a      	ldr	r2, [r3, #8]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	1c5a      	adds	r2, r3, #1
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	601a      	str	r2, [r3, #0]
}
 8009fb6:	bf00      	nop
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	b085      	sub	sp, #20
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd8:	d103      	bne.n	8009fe2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	60fb      	str	r3, [r7, #12]
 8009fe0:	e00c      	b.n	8009ffc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	3308      	adds	r3, #8
 8009fe6:	60fb      	str	r3, [r7, #12]
 8009fe8:	e002      	b.n	8009ff0 <vListInsert+0x2e>
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	60fb      	str	r3, [r7, #12]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d2f6      	bcs.n	8009fea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	685a      	ldr	r2, [r3, #4]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	683a      	ldr	r2, [r7, #0]
 800a00a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	683a      	ldr	r2, [r7, #0]
 800a016:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	1c5a      	adds	r2, r3, #1
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	601a      	str	r2, [r3, #0]
}
 800a028:	bf00      	nop
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	6892      	ldr	r2, [r2, #8]
 800a04a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	6852      	ldr	r2, [r2, #4]
 800a054:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d103      	bne.n	800a068 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	689a      	ldr	r2, [r3, #8]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	1e5a      	subs	r2, r3, #1
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10b      	bne.n	800a0b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a09c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a0:	f383 8811 	msr	BASEPRI, r3
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a0ae:	bf00      	nop
 800a0b0:	bf00      	nop
 800a0b2:	e7fd      	b.n	800a0b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a0b4:	f002 f9b0 	bl	800c418 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0c0:	68f9      	ldr	r1, [r7, #12]
 800a0c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a0c4:	fb01 f303 	mul.w	r3, r1, r3
 800a0c8:	441a      	add	r2, r3
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	68f9      	ldr	r1, [r7, #12]
 800a0e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a0ea:	fb01 f303 	mul.w	r3, r1, r3
 800a0ee:	441a      	add	r2, r3
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	22ff      	movs	r2, #255	@ 0xff
 800a0f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	22ff      	movs	r2, #255	@ 0xff
 800a100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d114      	bne.n	800a134 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d01a      	beq.n	800a148 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	3310      	adds	r3, #16
 800a116:	4618      	mov	r0, r3
 800a118:	f001 fa48 	bl	800b5ac <xTaskRemoveFromEventList>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d012      	beq.n	800a148 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a122:	4b0d      	ldr	r3, [pc, #52]	@ (800a158 <xQueueGenericReset+0xd0>)
 800a124:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a128:	601a      	str	r2, [r3, #0]
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	f3bf 8f6f 	isb	sy
 800a132:	e009      	b.n	800a148 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	3310      	adds	r3, #16
 800a138:	4618      	mov	r0, r3
 800a13a:	f7ff fef1 	bl	8009f20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	3324      	adds	r3, #36	@ 0x24
 800a142:	4618      	mov	r0, r3
 800a144:	f7ff feec 	bl	8009f20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a148:	f002 f998 	bl	800c47c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a14c:	2301      	movs	r3, #1
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	e000ed04 	.word	0xe000ed04

0800a15c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b08e      	sub	sp, #56	@ 0x38
 800a160:	af02      	add	r7, sp, #8
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
 800a168:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10b      	bne.n	800a188 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a182:	bf00      	nop
 800a184:	bf00      	nop
 800a186:	e7fd      	b.n	800a184 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10b      	bne.n	800a1a6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a1a0:	bf00      	nop
 800a1a2:	bf00      	nop
 800a1a4:	e7fd      	b.n	800a1a2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d002      	beq.n	800a1b2 <xQueueGenericCreateStatic+0x56>
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <xQueueGenericCreateStatic+0x5a>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e000      	b.n	800a1b8 <xQueueGenericCreateStatic+0x5c>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10b      	bne.n	800a1d4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	623b      	str	r3, [r7, #32]
}
 800a1ce:	bf00      	nop
 800a1d0:	bf00      	nop
 800a1d2:	e7fd      	b.n	800a1d0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d102      	bne.n	800a1e0 <xQueueGenericCreateStatic+0x84>
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d101      	bne.n	800a1e4 <xQueueGenericCreateStatic+0x88>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e000      	b.n	800a1e6 <xQueueGenericCreateStatic+0x8a>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d10b      	bne.n	800a202 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a1ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ee:	f383 8811 	msr	BASEPRI, r3
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	61fb      	str	r3, [r7, #28]
}
 800a1fc:	bf00      	nop
 800a1fe:	bf00      	nop
 800a200:	e7fd      	b.n	800a1fe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a202:	2350      	movs	r3, #80	@ 0x50
 800a204:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	2b50      	cmp	r3, #80	@ 0x50
 800a20a:	d00b      	beq.n	800a224 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	61bb      	str	r3, [r7, #24]
}
 800a21e:	bf00      	nop
 800a220:	bf00      	nop
 800a222:	e7fd      	b.n	800a220 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a224:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a22a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00d      	beq.n	800a24c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a232:	2201      	movs	r2, #1
 800a234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a238:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	4613      	mov	r3, r2
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	68b9      	ldr	r1, [r7, #8]
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f000 f805 	bl	800a256 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a24e:	4618      	mov	r0, r3
 800a250:	3730      	adds	r7, #48	@ 0x30
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b084      	sub	sp, #16
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	60f8      	str	r0, [r7, #12]
 800a25e:	60b9      	str	r1, [r7, #8]
 800a260:	607a      	str	r2, [r7, #4]
 800a262:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d103      	bne.n	800a272 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	69ba      	ldr	r2, [r7, #24]
 800a26e:	601a      	str	r2, [r3, #0]
 800a270:	e002      	b.n	800a278 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a284:	2101      	movs	r1, #1
 800a286:	69b8      	ldr	r0, [r7, #24]
 800a288:	f7ff fefe 	bl	800a088 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	78fa      	ldrb	r2, [r7, #3]
 800a290:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a294:	bf00      	nop
 800a296:	3710      	adds	r7, #16
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b08e      	sub	sp, #56	@ 0x38
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
 800a2a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10b      	bne.n	800a2d0 <xQueueGenericSend+0x34>
	__asm volatile
 800a2b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2bc:	f383 8811 	msr	BASEPRI, r3
 800a2c0:	f3bf 8f6f 	isb	sy
 800a2c4:	f3bf 8f4f 	dsb	sy
 800a2c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a2ca:	bf00      	nop
 800a2cc:	bf00      	nop
 800a2ce:	e7fd      	b.n	800a2cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d103      	bne.n	800a2de <xQueueGenericSend+0x42>
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d101      	bne.n	800a2e2 <xQueueGenericSend+0x46>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e000      	b.n	800a2e4 <xQueueGenericSend+0x48>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10b      	bne.n	800a300 <xQueueGenericSend+0x64>
	__asm volatile
 800a2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ec:	f383 8811 	msr	BASEPRI, r3
 800a2f0:	f3bf 8f6f 	isb	sy
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a2fa:	bf00      	nop
 800a2fc:	bf00      	nop
 800a2fe:	e7fd      	b.n	800a2fc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	2b02      	cmp	r3, #2
 800a304:	d103      	bne.n	800a30e <xQueueGenericSend+0x72>
 800a306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d101      	bne.n	800a312 <xQueueGenericSend+0x76>
 800a30e:	2301      	movs	r3, #1
 800a310:	e000      	b.n	800a314 <xQueueGenericSend+0x78>
 800a312:	2300      	movs	r3, #0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d10b      	bne.n	800a330 <xQueueGenericSend+0x94>
	__asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	623b      	str	r3, [r7, #32]
}
 800a32a:	bf00      	nop
 800a32c:	bf00      	nop
 800a32e:	e7fd      	b.n	800a32c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a330:	f001 fb02 	bl	800b938 <xTaskGetSchedulerState>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d102      	bne.n	800a340 <xQueueGenericSend+0xa4>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d101      	bne.n	800a344 <xQueueGenericSend+0xa8>
 800a340:	2301      	movs	r3, #1
 800a342:	e000      	b.n	800a346 <xQueueGenericSend+0xaa>
 800a344:	2300      	movs	r3, #0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10b      	bne.n	800a362 <xQueueGenericSend+0xc6>
	__asm volatile
 800a34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	61fb      	str	r3, [r7, #28]
}
 800a35c:	bf00      	nop
 800a35e:	bf00      	nop
 800a360:	e7fd      	b.n	800a35e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a362:	f002 f859 	bl	800c418 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a36e:	429a      	cmp	r2, r3
 800a370:	d302      	bcc.n	800a378 <xQueueGenericSend+0xdc>
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b02      	cmp	r3, #2
 800a376:	d129      	bne.n	800a3cc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	68b9      	ldr	r1, [r7, #8]
 800a37c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a37e:	f000 fa0f 	bl	800a7a0 <prvCopyDataToQueue>
 800a382:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d010      	beq.n	800a3ae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a38e:	3324      	adds	r3, #36	@ 0x24
 800a390:	4618      	mov	r0, r3
 800a392:	f001 f90b 	bl	800b5ac <xTaskRemoveFromEventList>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d013      	beq.n	800a3c4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a39c:	4b3f      	ldr	r3, [pc, #252]	@ (800a49c <xQueueGenericSend+0x200>)
 800a39e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3a2:	601a      	str	r2, [r3, #0]
 800a3a4:	f3bf 8f4f 	dsb	sy
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	e00a      	b.n	800a3c4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d007      	beq.n	800a3c4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3b4:	4b39      	ldr	r3, [pc, #228]	@ (800a49c <xQueueGenericSend+0x200>)
 800a3b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3ba:	601a      	str	r2, [r3, #0]
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3c4:	f002 f85a 	bl	800c47c <vPortExitCritical>
				return pdPASS;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e063      	b.n	800a494 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d103      	bne.n	800a3da <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3d2:	f002 f853 	bl	800c47c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	e05c      	b.n	800a494 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d106      	bne.n	800a3ee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3e0:	f107 0314 	add.w	r3, r7, #20
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f001 f945 	bl	800b674 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3ee:	f002 f845 	bl	800c47c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3f2:	f000 fe9b 	bl	800b12c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3f6:	f002 f80f 	bl	800c418 <vPortEnterCritical>
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a400:	b25b      	sxtb	r3, r3
 800a402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a406:	d103      	bne.n	800a410 <xQueueGenericSend+0x174>
 800a408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a412:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a416:	b25b      	sxtb	r3, r3
 800a418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a41c:	d103      	bne.n	800a426 <xQueueGenericSend+0x18a>
 800a41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a420:	2200      	movs	r2, #0
 800a422:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a426:	f002 f829 	bl	800c47c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a42a:	1d3a      	adds	r2, r7, #4
 800a42c:	f107 0314 	add.w	r3, r7, #20
 800a430:	4611      	mov	r1, r2
 800a432:	4618      	mov	r0, r3
 800a434:	f001 f934 	bl	800b6a0 <xTaskCheckForTimeOut>
 800a438:	4603      	mov	r3, r0
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d124      	bne.n	800a488 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a43e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a440:	f000 faa6 	bl	800a990 <prvIsQueueFull>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d018      	beq.n	800a47c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44c:	3310      	adds	r3, #16
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	4611      	mov	r1, r2
 800a452:	4618      	mov	r0, r3
 800a454:	f001 f858 	bl	800b508 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a458:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a45a:	f000 fa31 	bl	800a8c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a45e:	f000 fe73 	bl	800b148 <xTaskResumeAll>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	f47f af7c 	bne.w	800a362 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a46a:	4b0c      	ldr	r3, [pc, #48]	@ (800a49c <xQueueGenericSend+0x200>)
 800a46c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a470:	601a      	str	r2, [r3, #0]
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	e772      	b.n	800a362 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a47c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a47e:	f000 fa1f 	bl	800a8c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a482:	f000 fe61 	bl	800b148 <xTaskResumeAll>
 800a486:	e76c      	b.n	800a362 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a488:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a48a:	f000 fa19 	bl	800a8c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a48e:	f000 fe5b 	bl	800b148 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a492:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a494:	4618      	mov	r0, r3
 800a496:	3738      	adds	r7, #56	@ 0x38
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	e000ed04 	.word	0xe000ed04

0800a4a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b090      	sub	sp, #64	@ 0x40
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
 800a4ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10b      	bne.n	800a4d0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a4b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4bc:	f383 8811 	msr	BASEPRI, r3
 800a4c0:	f3bf 8f6f 	isb	sy
 800a4c4:	f3bf 8f4f 	dsb	sy
 800a4c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a4ca:	bf00      	nop
 800a4cc:	bf00      	nop
 800a4ce:	e7fd      	b.n	800a4cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d103      	bne.n	800a4de <xQueueGenericSendFromISR+0x3e>
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d101      	bne.n	800a4e2 <xQueueGenericSendFromISR+0x42>
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e000      	b.n	800a4e4 <xQueueGenericSendFromISR+0x44>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10b      	bne.n	800a500 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a4e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ec:	f383 8811 	msr	BASEPRI, r3
 800a4f0:	f3bf 8f6f 	isb	sy
 800a4f4:	f3bf 8f4f 	dsb	sy
 800a4f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a4fa:	bf00      	nop
 800a4fc:	bf00      	nop
 800a4fe:	e7fd      	b.n	800a4fc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	2b02      	cmp	r3, #2
 800a504:	d103      	bne.n	800a50e <xQueueGenericSendFromISR+0x6e>
 800a506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d101      	bne.n	800a512 <xQueueGenericSendFromISR+0x72>
 800a50e:	2301      	movs	r3, #1
 800a510:	e000      	b.n	800a514 <xQueueGenericSendFromISR+0x74>
 800a512:	2300      	movs	r3, #0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10b      	bne.n	800a530 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a51c:	f383 8811 	msr	BASEPRI, r3
 800a520:	f3bf 8f6f 	isb	sy
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	623b      	str	r3, [r7, #32]
}
 800a52a:	bf00      	nop
 800a52c:	bf00      	nop
 800a52e:	e7fd      	b.n	800a52c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a530:	f002 f852 	bl	800c5d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a534:	f3ef 8211 	mrs	r2, BASEPRI
 800a538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	61fa      	str	r2, [r7, #28]
 800a54a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a54c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a54e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a558:	429a      	cmp	r2, r3
 800a55a:	d302      	bcc.n	800a562 <xQueueGenericSendFromISR+0xc2>
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d12f      	bne.n	800a5c2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a564:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a568:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a56e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a570:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	68b9      	ldr	r1, [r7, #8]
 800a576:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a578:	f000 f912 	bl	800a7a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a57c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a584:	d112      	bne.n	800a5ac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d016      	beq.n	800a5bc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a590:	3324      	adds	r3, #36	@ 0x24
 800a592:	4618      	mov	r0, r3
 800a594:	f001 f80a 	bl	800b5ac <xTaskRemoveFromEventList>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00e      	beq.n	800a5bc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d00b      	beq.n	800a5bc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	601a      	str	r2, [r3, #0]
 800a5aa:	e007      	b.n	800a5bc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	b25a      	sxtb	r2, r3
 800a5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a5c0:	e001      	b.n	800a5c6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5c8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a5d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3740      	adds	r7, #64	@ 0x40
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b08c      	sub	sp, #48	@ 0x30
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10b      	bne.n	800a60e <xQueueReceive+0x32>
	__asm volatile
 800a5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fa:	f383 8811 	msr	BASEPRI, r3
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	f3bf 8f4f 	dsb	sy
 800a606:	623b      	str	r3, [r7, #32]
}
 800a608:	bf00      	nop
 800a60a:	bf00      	nop
 800a60c:	e7fd      	b.n	800a60a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d103      	bne.n	800a61c <xQueueReceive+0x40>
 800a614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d101      	bne.n	800a620 <xQueueReceive+0x44>
 800a61c:	2301      	movs	r3, #1
 800a61e:	e000      	b.n	800a622 <xQueueReceive+0x46>
 800a620:	2300      	movs	r3, #0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10b      	bne.n	800a63e <xQueueReceive+0x62>
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	61fb      	str	r3, [r7, #28]
}
 800a638:	bf00      	nop
 800a63a:	bf00      	nop
 800a63c:	e7fd      	b.n	800a63a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a63e:	f001 f97b 	bl	800b938 <xTaskGetSchedulerState>
 800a642:	4603      	mov	r3, r0
 800a644:	2b00      	cmp	r3, #0
 800a646:	d102      	bne.n	800a64e <xQueueReceive+0x72>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d101      	bne.n	800a652 <xQueueReceive+0x76>
 800a64e:	2301      	movs	r3, #1
 800a650:	e000      	b.n	800a654 <xQueueReceive+0x78>
 800a652:	2300      	movs	r3, #0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10b      	bne.n	800a670 <xQueueReceive+0x94>
	__asm volatile
 800a658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	61bb      	str	r3, [r7, #24]
}
 800a66a:	bf00      	nop
 800a66c:	bf00      	nop
 800a66e:	e7fd      	b.n	800a66c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a670:	f001 fed2 	bl	800c418 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a678:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d01f      	beq.n	800a6c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a680:	68b9      	ldr	r1, [r7, #8]
 800a682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a684:	f000 f8f6 	bl	800a874 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68a:	1e5a      	subs	r2, r3, #1
 800a68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a68e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00f      	beq.n	800a6b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69a:	3310      	adds	r3, #16
 800a69c:	4618      	mov	r0, r3
 800a69e:	f000 ff85 	bl	800b5ac <xTaskRemoveFromEventList>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d007      	beq.n	800a6b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6a8:	4b3c      	ldr	r3, [pc, #240]	@ (800a79c <xQueueReceive+0x1c0>)
 800a6aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6ae:	601a      	str	r2, [r3, #0]
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6b8:	f001 fee0 	bl	800c47c <vPortExitCritical>
				return pdPASS;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e069      	b.n	800a794 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d103      	bne.n	800a6ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6c6:	f001 fed9 	bl	800c47c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	e062      	b.n	800a794 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d106      	bne.n	800a6e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6d4:	f107 0310 	add.w	r3, r7, #16
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f000 ffcb 	bl	800b674 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6e2:	f001 fecb 	bl	800c47c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6e6:	f000 fd21 	bl	800b12c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6ea:	f001 fe95 	bl	800c418 <vPortEnterCritical>
 800a6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6f4:	b25b      	sxtb	r3, r3
 800a6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fa:	d103      	bne.n	800a704 <xQueueReceive+0x128>
 800a6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a706:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a70a:	b25b      	sxtb	r3, r3
 800a70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a710:	d103      	bne.n	800a71a <xQueueReceive+0x13e>
 800a712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a714:	2200      	movs	r2, #0
 800a716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a71a:	f001 feaf 	bl	800c47c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a71e:	1d3a      	adds	r2, r7, #4
 800a720:	f107 0310 	add.w	r3, r7, #16
 800a724:	4611      	mov	r1, r2
 800a726:	4618      	mov	r0, r3
 800a728:	f000 ffba 	bl	800b6a0 <xTaskCheckForTimeOut>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d123      	bne.n	800a77a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a732:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a734:	f000 f916 	bl	800a964 <prvIsQueueEmpty>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d017      	beq.n	800a76e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a740:	3324      	adds	r3, #36	@ 0x24
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	4611      	mov	r1, r2
 800a746:	4618      	mov	r0, r3
 800a748:	f000 fede 	bl	800b508 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a74c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a74e:	f000 f8b7 	bl	800a8c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a752:	f000 fcf9 	bl	800b148 <xTaskResumeAll>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d189      	bne.n	800a670 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a75c:	4b0f      	ldr	r3, [pc, #60]	@ (800a79c <xQueueReceive+0x1c0>)
 800a75e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	e780      	b.n	800a670 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a76e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a770:	f000 f8a6 	bl	800a8c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a774:	f000 fce8 	bl	800b148 <xTaskResumeAll>
 800a778:	e77a      	b.n	800a670 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a77a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a77c:	f000 f8a0 	bl	800a8c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a780:	f000 fce2 	bl	800b148 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a784:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a786:	f000 f8ed 	bl	800a964 <prvIsQueueEmpty>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f43f af6f 	beq.w	800a670 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a792:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a794:	4618      	mov	r0, r3
 800a796:	3730      	adds	r7, #48	@ 0x30
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	e000ed04 	.word	0xe000ed04

0800a7a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10d      	bne.n	800a7da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d14d      	bne.n	800a862 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f001 f8d2 	bl	800b974 <xTaskPriorityDisinherit>
 800a7d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	609a      	str	r2, [r3, #8]
 800a7d8:	e043      	b.n	800a862 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d119      	bne.n	800a814 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6858      	ldr	r0, [r3, #4]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	68b9      	ldr	r1, [r7, #8]
 800a7ec:	f002 f9b6 	bl	800cb5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	685a      	ldr	r2, [r3, #4]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7f8:	441a      	add	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	685a      	ldr	r2, [r3, #4]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	429a      	cmp	r2, r3
 800a808:	d32b      	bcc.n	800a862 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	605a      	str	r2, [r3, #4]
 800a812:	e026      	b.n	800a862 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	68d8      	ldr	r0, [r3, #12]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a81c:	461a      	mov	r2, r3
 800a81e:	68b9      	ldr	r1, [r7, #8]
 800a820:	f002 f99c 	bl	800cb5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	68da      	ldr	r2, [r3, #12]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a82c:	425b      	negs	r3, r3
 800a82e:	441a      	add	r2, r3
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	68da      	ldr	r2, [r3, #12]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d207      	bcs.n	800a850 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	689a      	ldr	r2, [r3, #8]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a848:	425b      	negs	r3, r3
 800a84a:	441a      	add	r2, r3
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2b02      	cmp	r3, #2
 800a854:	d105      	bne.n	800a862 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	3b01      	subs	r3, #1
 800a860:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	1c5a      	adds	r2, r3, #1
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a86a:	697b      	ldr	r3, [r7, #20]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3718      	adds	r7, #24
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a882:	2b00      	cmp	r3, #0
 800a884:	d018      	beq.n	800a8b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	68da      	ldr	r2, [r3, #12]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a88e:	441a      	add	r2, r3
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	68da      	ldr	r2, [r3, #12]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d303      	bcc.n	800a8a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68d9      	ldr	r1, [r3, #12]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	6838      	ldr	r0, [r7, #0]
 800a8b4:	f002 f952 	bl	800cb5c <memcpy>
	}
}
 800a8b8:	bf00      	nop
 800a8ba:	3708      	adds	r7, #8
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a8c8:	f001 fda6 	bl	800c418 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8d4:	e011      	b.n	800a8fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d012      	beq.n	800a904 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	3324      	adds	r3, #36	@ 0x24
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f000 fe62 	bl	800b5ac <xTaskRemoveFromEventList>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a8ee:	f000 ff3b 	bl	800b768 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a8f2:	7bfb      	ldrb	r3, [r7, #15]
 800a8f4:	3b01      	subs	r3, #1
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	dce9      	bgt.n	800a8d6 <prvUnlockQueue+0x16>
 800a902:	e000      	b.n	800a906 <prvUnlockQueue+0x46>
					break;
 800a904:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	22ff      	movs	r2, #255	@ 0xff
 800a90a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a90e:	f001 fdb5 	bl	800c47c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a912:	f001 fd81 	bl	800c418 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a91c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a91e:	e011      	b.n	800a944 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	691b      	ldr	r3, [r3, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d012      	beq.n	800a94e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	3310      	adds	r3, #16
 800a92c:	4618      	mov	r0, r3
 800a92e:	f000 fe3d 	bl	800b5ac <xTaskRemoveFromEventList>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d001      	beq.n	800a93c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a938:	f000 ff16 	bl	800b768 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a93c:	7bbb      	ldrb	r3, [r7, #14]
 800a93e:	3b01      	subs	r3, #1
 800a940:	b2db      	uxtb	r3, r3
 800a942:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a944:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	dce9      	bgt.n	800a920 <prvUnlockQueue+0x60>
 800a94c:	e000      	b.n	800a950 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a94e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	22ff      	movs	r2, #255	@ 0xff
 800a954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a958:	f001 fd90 	bl	800c47c <vPortExitCritical>
}
 800a95c:	bf00      	nop
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a96c:	f001 fd54 	bl	800c418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a974:	2b00      	cmp	r3, #0
 800a976:	d102      	bne.n	800a97e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a978:	2301      	movs	r3, #1
 800a97a:	60fb      	str	r3, [r7, #12]
 800a97c:	e001      	b.n	800a982 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a97e:	2300      	movs	r3, #0
 800a980:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a982:	f001 fd7b 	bl	800c47c <vPortExitCritical>

	return xReturn;
 800a986:	68fb      	ldr	r3, [r7, #12]
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3710      	adds	r7, #16
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a998:	f001 fd3e 	bl	800c418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d102      	bne.n	800a9ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	60fb      	str	r3, [r7, #12]
 800a9ac:	e001      	b.n	800a9b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9b2:	f001 fd63 	bl	800c47c <vPortExitCritical>

	return xReturn;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3710      	adds	r7, #16
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	60fb      	str	r3, [r7, #12]
 800a9ce:	e014      	b.n	800a9fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a9d0:	4a0f      	ldr	r2, [pc, #60]	@ (800aa10 <vQueueAddToRegistry+0x50>)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10b      	bne.n	800a9f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a9dc:	490c      	ldr	r1, [pc, #48]	@ (800aa10 <vQueueAddToRegistry+0x50>)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	683a      	ldr	r2, [r7, #0]
 800a9e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a9e6:	4a0a      	ldr	r2, [pc, #40]	@ (800aa10 <vQueueAddToRegistry+0x50>)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	00db      	lsls	r3, r3, #3
 800a9ec:	4413      	add	r3, r2
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a9f2:	e006      	b.n	800aa02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	60fb      	str	r3, [r7, #12]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2b07      	cmp	r3, #7
 800a9fe:	d9e7      	bls.n	800a9d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aa00:	bf00      	nop
 800aa02:	bf00      	nop
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	20001158 	.word	0x20001158

0800aa14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b086      	sub	sp, #24
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa24:	f001 fcf8 	bl	800c418 <vPortEnterCritical>
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa2e:	b25b      	sxtb	r3, r3
 800aa30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa34:	d103      	bne.n	800aa3e <vQueueWaitForMessageRestricted+0x2a>
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa44:	b25b      	sxtb	r3, r3
 800aa46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa4a:	d103      	bne.n	800aa54 <vQueueWaitForMessageRestricted+0x40>
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa54:	f001 fd12 	bl	800c47c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d106      	bne.n	800aa6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	3324      	adds	r3, #36	@ 0x24
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	68b9      	ldr	r1, [r7, #8]
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f000 fd73 	bl	800b554 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aa6e:	6978      	ldr	r0, [r7, #20]
 800aa70:	f7ff ff26 	bl	800a8c0 <prvUnlockQueue>
	}
 800aa74:	bf00      	nop
 800aa76:	3718      	adds	r7, #24
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b08e      	sub	sp, #56	@ 0x38
 800aa80:	af04      	add	r7, sp, #16
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
 800aa88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d10b      	bne.n	800aaa8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	623b      	str	r3, [r7, #32]
}
 800aaa2:	bf00      	nop
 800aaa4:	bf00      	nop
 800aaa6:	e7fd      	b.n	800aaa4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aaa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10b      	bne.n	800aac6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800aaae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab2:	f383 8811 	msr	BASEPRI, r3
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	61fb      	str	r3, [r7, #28]
}
 800aac0:	bf00      	nop
 800aac2:	bf00      	nop
 800aac4:	e7fd      	b.n	800aac2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aac6:	23a8      	movs	r3, #168	@ 0xa8
 800aac8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	2ba8      	cmp	r3, #168	@ 0xa8
 800aace:	d00b      	beq.n	800aae8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800aad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	61bb      	str	r3, [r7, #24]
}
 800aae2:	bf00      	nop
 800aae4:	bf00      	nop
 800aae6:	e7fd      	b.n	800aae4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aae8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aaea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d01e      	beq.n	800ab2e <xTaskCreateStatic+0xb2>
 800aaf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d01b      	beq.n	800ab2e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aaf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aafe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab02:	2202      	movs	r2, #2
 800ab04:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab08:	2300      	movs	r3, #0
 800ab0a:	9303      	str	r3, [sp, #12]
 800ab0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0e:	9302      	str	r3, [sp, #8]
 800ab10:	f107 0314 	add.w	r3, r7, #20
 800ab14:	9301      	str	r3, [sp, #4]
 800ab16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab18:	9300      	str	r3, [sp, #0]
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	68b9      	ldr	r1, [r7, #8]
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f000 f851 	bl	800abc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab28:	f000 f8f6 	bl	800ad18 <prvAddNewTaskToReadyList>
 800ab2c:	e001      	b.n	800ab32 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab32:	697b      	ldr	r3, [r7, #20]
	}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3728      	adds	r7, #40	@ 0x28
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b08c      	sub	sp, #48	@ 0x30
 800ab40:	af04      	add	r7, sp, #16
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	603b      	str	r3, [r7, #0]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab4c:	88fb      	ldrh	r3, [r7, #6]
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	4618      	mov	r0, r3
 800ab52:	f001 fd83 	bl	800c65c <pvPortMalloc>
 800ab56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00e      	beq.n	800ab7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab5e:	20a8      	movs	r0, #168	@ 0xa8
 800ab60:	f001 fd7c 	bl	800c65c <pvPortMalloc>
 800ab64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d003      	beq.n	800ab74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	697a      	ldr	r2, [r7, #20]
 800ab70:	631a      	str	r2, [r3, #48]	@ 0x30
 800ab72:	e005      	b.n	800ab80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ab74:	6978      	ldr	r0, [r7, #20]
 800ab76:	f001 fe3f 	bl	800c7f8 <vPortFree>
 800ab7a:	e001      	b.n	800ab80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d017      	beq.n	800abb6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ab8e:	88fa      	ldrh	r2, [r7, #6]
 800ab90:	2300      	movs	r3, #0
 800ab92:	9303      	str	r3, [sp, #12]
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	9302      	str	r3, [sp, #8]
 800ab98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab9a:	9301      	str	r3, [sp, #4]
 800ab9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab9e:	9300      	str	r3, [sp, #0]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	68b9      	ldr	r1, [r7, #8]
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	f000 f80f 	bl	800abc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abaa:	69f8      	ldr	r0, [r7, #28]
 800abac:	f000 f8b4 	bl	800ad18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800abb0:	2301      	movs	r3, #1
 800abb2:	61bb      	str	r3, [r7, #24]
 800abb4:	e002      	b.n	800abbc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800abb6:	f04f 33ff 	mov.w	r3, #4294967295
 800abba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800abbc:	69bb      	ldr	r3, [r7, #24]
	}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3720      	adds	r7, #32
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
	...

0800abc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b088      	sub	sp, #32
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
 800abd4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800abd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	461a      	mov	r2, r3
 800abe0:	21a5      	movs	r1, #165	@ 0xa5
 800abe2:	f001 ff29 	bl	800ca38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800abe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800abf0:	3b01      	subs	r3, #1
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4413      	add	r3, r2
 800abf6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	f023 0307 	bic.w	r3, r3, #7
 800abfe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	f003 0307 	and.w	r3, r3, #7
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00b      	beq.n	800ac22 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ac0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac0e:	f383 8811 	msr	BASEPRI, r3
 800ac12:	f3bf 8f6f 	isb	sy
 800ac16:	f3bf 8f4f 	dsb	sy
 800ac1a:	617b      	str	r3, [r7, #20]
}
 800ac1c:	bf00      	nop
 800ac1e:	bf00      	nop
 800ac20:	e7fd      	b.n	800ac1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d01f      	beq.n	800ac68 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac28:	2300      	movs	r3, #0
 800ac2a:	61fb      	str	r3, [r7, #28]
 800ac2c:	e012      	b.n	800ac54 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	4413      	add	r3, r2
 800ac34:	7819      	ldrb	r1, [r3, #0]
 800ac36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	3334      	adds	r3, #52	@ 0x34
 800ac3e:	460a      	mov	r2, r1
 800ac40:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac42:	68ba      	ldr	r2, [r7, #8]
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	4413      	add	r3, r2
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d006      	beq.n	800ac5c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	3301      	adds	r3, #1
 800ac52:	61fb      	str	r3, [r7, #28]
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	2b0f      	cmp	r3, #15
 800ac58:	d9e9      	bls.n	800ac2e <prvInitialiseNewTask+0x66>
 800ac5a:	e000      	b.n	800ac5e <prvInitialiseNewTask+0x96>
			{
				break;
 800ac5c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac60:	2200      	movs	r2, #0
 800ac62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ac66:	e003      	b.n	800ac70 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ac68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ac70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac72:	2b37      	cmp	r3, #55	@ 0x37
 800ac74:	d901      	bls.n	800ac7a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac76:	2337      	movs	r3, #55	@ 0x37
 800ac78:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ac80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac84:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ac86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac88:	2200      	movs	r2, #0
 800ac8a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8e:	3304      	adds	r3, #4
 800ac90:	4618      	mov	r0, r3
 800ac92:	f7ff f965 	bl	8009f60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac98:	3318      	adds	r3, #24
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7ff f960 	bl	8009f60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aca4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800acac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800acb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acb4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800acb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb8:	2200      	movs	r2, #0
 800acba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800acbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc0:	2200      	movs	r2, #0
 800acc2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800acc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc8:	3354      	adds	r3, #84	@ 0x54
 800acca:	224c      	movs	r2, #76	@ 0x4c
 800accc:	2100      	movs	r1, #0
 800acce:	4618      	mov	r0, r3
 800acd0:	f001 feb2 	bl	800ca38 <memset>
 800acd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd6:	4a0d      	ldr	r2, [pc, #52]	@ (800ad0c <prvInitialiseNewTask+0x144>)
 800acd8:	659a      	str	r2, [r3, #88]	@ 0x58
 800acda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acdc:	4a0c      	ldr	r2, [pc, #48]	@ (800ad10 <prvInitialiseNewTask+0x148>)
 800acde:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ace0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace2:	4a0c      	ldr	r2, [pc, #48]	@ (800ad14 <prvInitialiseNewTask+0x14c>)
 800ace4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	68f9      	ldr	r1, [r7, #12]
 800acea:	69b8      	ldr	r0, [r7, #24]
 800acec:	f001 fa60 	bl	800c1b0 <pxPortInitialiseStack>
 800acf0:	4602      	mov	r2, r0
 800acf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800acf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d002      	beq.n	800ad02 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800acfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad02:	bf00      	nop
 800ad04:	3720      	adds	r7, #32
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	200023ec 	.word	0x200023ec
 800ad10:	20002454 	.word	0x20002454
 800ad14:	200024bc 	.word	0x200024bc

0800ad18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad20:	f001 fb7a 	bl	800c418 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad24:	4b2d      	ldr	r3, [pc, #180]	@ (800addc <prvAddNewTaskToReadyList+0xc4>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	4a2c      	ldr	r2, [pc, #176]	@ (800addc <prvAddNewTaskToReadyList+0xc4>)
 800ad2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad2e:	4b2c      	ldr	r3, [pc, #176]	@ (800ade0 <prvAddNewTaskToReadyList+0xc8>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d109      	bne.n	800ad4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad36:	4a2a      	ldr	r2, [pc, #168]	@ (800ade0 <prvAddNewTaskToReadyList+0xc8>)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad3c:	4b27      	ldr	r3, [pc, #156]	@ (800addc <prvAddNewTaskToReadyList+0xc4>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d110      	bne.n	800ad66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad44:	f000 fd34 	bl	800b7b0 <prvInitialiseTaskLists>
 800ad48:	e00d      	b.n	800ad66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad4a:	4b26      	ldr	r3, [pc, #152]	@ (800ade4 <prvAddNewTaskToReadyList+0xcc>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d109      	bne.n	800ad66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad52:	4b23      	ldr	r3, [pc, #140]	@ (800ade0 <prvAddNewTaskToReadyList+0xc8>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d802      	bhi.n	800ad66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad60:	4a1f      	ldr	r2, [pc, #124]	@ (800ade0 <prvAddNewTaskToReadyList+0xc8>)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad66:	4b20      	ldr	r3, [pc, #128]	@ (800ade8 <prvAddNewTaskToReadyList+0xd0>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	4a1e      	ldr	r2, [pc, #120]	@ (800ade8 <prvAddNewTaskToReadyList+0xd0>)
 800ad6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ad70:	4b1d      	ldr	r3, [pc, #116]	@ (800ade8 <prvAddNewTaskToReadyList+0xd0>)
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad7c:	4b1b      	ldr	r3, [pc, #108]	@ (800adec <prvAddNewTaskToReadyList+0xd4>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d903      	bls.n	800ad8c <prvAddNewTaskToReadyList+0x74>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad88:	4a18      	ldr	r2, [pc, #96]	@ (800adec <prvAddNewTaskToReadyList+0xd4>)
 800ad8a:	6013      	str	r3, [r2, #0]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad90:	4613      	mov	r3, r2
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	4413      	add	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4a15      	ldr	r2, [pc, #84]	@ (800adf0 <prvAddNewTaskToReadyList+0xd8>)
 800ad9a:	441a      	add	r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	3304      	adds	r3, #4
 800ada0:	4619      	mov	r1, r3
 800ada2:	4610      	mov	r0, r2
 800ada4:	f7ff f8e9 	bl	8009f7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ada8:	f001 fb68 	bl	800c47c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800adac:	4b0d      	ldr	r3, [pc, #52]	@ (800ade4 <prvAddNewTaskToReadyList+0xcc>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d00e      	beq.n	800add2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800adb4:	4b0a      	ldr	r3, [pc, #40]	@ (800ade0 <prvAddNewTaskToReadyList+0xc8>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d207      	bcs.n	800add2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800adc2:	4b0c      	ldr	r3, [pc, #48]	@ (800adf4 <prvAddNewTaskToReadyList+0xdc>)
 800adc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adc8:	601a      	str	r2, [r3, #0]
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800add2:	bf00      	nop
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	2000166c 	.word	0x2000166c
 800ade0:	20001198 	.word	0x20001198
 800ade4:	20001678 	.word	0x20001678
 800ade8:	20001688 	.word	0x20001688
 800adec:	20001674 	.word	0x20001674
 800adf0:	2000119c 	.word	0x2000119c
 800adf4:	e000ed04 	.word	0xe000ed04

0800adf8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ae00:	f001 fb0a 	bl	800c418 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d102      	bne.n	800ae10 <vTaskDelete+0x18>
 800ae0a:	4b2d      	ldr	r3, [pc, #180]	@ (800aec0 <vTaskDelete+0xc8>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	e000      	b.n	800ae12 <vTaskDelete+0x1a>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	3304      	adds	r3, #4
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7ff f90b 	bl	800a034 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d004      	beq.n	800ae30 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	3318      	adds	r3, #24
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7ff f902 	bl	800a034 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800ae30:	4b24      	ldr	r3, [pc, #144]	@ (800aec4 <vTaskDelete+0xcc>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	3301      	adds	r3, #1
 800ae36:	4a23      	ldr	r2, [pc, #140]	@ (800aec4 <vTaskDelete+0xcc>)
 800ae38:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ae3a:	4b21      	ldr	r3, [pc, #132]	@ (800aec0 <vTaskDelete+0xc8>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d10b      	bne.n	800ae5c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	3304      	adds	r3, #4
 800ae48:	4619      	mov	r1, r3
 800ae4a:	481f      	ldr	r0, [pc, #124]	@ (800aec8 <vTaskDelete+0xd0>)
 800ae4c:	f7ff f895 	bl	8009f7a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ae50:	4b1e      	ldr	r3, [pc, #120]	@ (800aecc <vTaskDelete+0xd4>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	3301      	adds	r3, #1
 800ae56:	4a1d      	ldr	r2, [pc, #116]	@ (800aecc <vTaskDelete+0xd4>)
 800ae58:	6013      	str	r3, [r2, #0]
 800ae5a:	e009      	b.n	800ae70 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ae5c:	4b1c      	ldr	r3, [pc, #112]	@ (800aed0 <vTaskDelete+0xd8>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	3b01      	subs	r3, #1
 800ae62:	4a1b      	ldr	r2, [pc, #108]	@ (800aed0 <vTaskDelete+0xd8>)
 800ae64:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f000 fd10 	bl	800b88c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ae6c:	f000 fd44 	bl	800b8f8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800ae70:	f001 fb04 	bl	800c47c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ae74:	4b17      	ldr	r3, [pc, #92]	@ (800aed4 <vTaskDelete+0xdc>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d01c      	beq.n	800aeb6 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800ae7c:	4b10      	ldr	r3, [pc, #64]	@ (800aec0 <vTaskDelete+0xc8>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d117      	bne.n	800aeb6 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ae86:	4b14      	ldr	r3, [pc, #80]	@ (800aed8 <vTaskDelete+0xe0>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00b      	beq.n	800aea6 <vTaskDelete+0xae>
	__asm volatile
 800ae8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae92:	f383 8811 	msr	BASEPRI, r3
 800ae96:	f3bf 8f6f 	isb	sy
 800ae9a:	f3bf 8f4f 	dsb	sy
 800ae9e:	60bb      	str	r3, [r7, #8]
}
 800aea0:	bf00      	nop
 800aea2:	bf00      	nop
 800aea4:	e7fd      	b.n	800aea2 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800aea6:	4b0d      	ldr	r3, [pc, #52]	@ (800aedc <vTaskDelete+0xe4>)
 800aea8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aeac:	601a      	str	r2, [r3, #0]
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aeb6:	bf00      	nop
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	20001198 	.word	0x20001198
 800aec4:	20001688 	.word	0x20001688
 800aec8:	20001640 	.word	0x20001640
 800aecc:	20001654 	.word	0x20001654
 800aed0:	2000166c 	.word	0x2000166c
 800aed4:	20001678 	.word	0x20001678
 800aed8:	20001694 	.word	0x20001694
 800aedc:	e000ed04 	.word	0xe000ed04

0800aee0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b08a      	sub	sp, #40	@ 0x28
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800aeea:	2300      	movs	r3, #0
 800aeec:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d10b      	bne.n	800af0c <vTaskDelayUntil+0x2c>
	__asm volatile
 800aef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef8:	f383 8811 	msr	BASEPRI, r3
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	617b      	str	r3, [r7, #20]
}
 800af06:	bf00      	nop
 800af08:	bf00      	nop
 800af0a:	e7fd      	b.n	800af08 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d10b      	bne.n	800af2a <vTaskDelayUntil+0x4a>
	__asm volatile
 800af12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af16:	f383 8811 	msr	BASEPRI, r3
 800af1a:	f3bf 8f6f 	isb	sy
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	613b      	str	r3, [r7, #16]
}
 800af24:	bf00      	nop
 800af26:	bf00      	nop
 800af28:	e7fd      	b.n	800af26 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800af2a:	4b2a      	ldr	r3, [pc, #168]	@ (800afd4 <vTaskDelayUntil+0xf4>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00b      	beq.n	800af4a <vTaskDelayUntil+0x6a>
	__asm volatile
 800af32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af36:	f383 8811 	msr	BASEPRI, r3
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	60fb      	str	r3, [r7, #12]
}
 800af44:	bf00      	nop
 800af46:	bf00      	nop
 800af48:	e7fd      	b.n	800af46 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800af4a:	f000 f8ef 	bl	800b12c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800af4e:	4b22      	ldr	r3, [pc, #136]	@ (800afd8 <vTaskDelayUntil+0xf8>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	683a      	ldr	r2, [r7, #0]
 800af5a:	4413      	add	r3, r2
 800af5c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	6a3a      	ldr	r2, [r7, #32]
 800af64:	429a      	cmp	r2, r3
 800af66:	d20b      	bcs.n	800af80 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	69fa      	ldr	r2, [r7, #28]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d211      	bcs.n	800af96 <vTaskDelayUntil+0xb6>
 800af72:	69fa      	ldr	r2, [r7, #28]
 800af74:	6a3b      	ldr	r3, [r7, #32]
 800af76:	429a      	cmp	r2, r3
 800af78:	d90d      	bls.n	800af96 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800af7a:	2301      	movs	r3, #1
 800af7c:	627b      	str	r3, [r7, #36]	@ 0x24
 800af7e:	e00a      	b.n	800af96 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	69fa      	ldr	r2, [r7, #28]
 800af86:	429a      	cmp	r2, r3
 800af88:	d303      	bcc.n	800af92 <vTaskDelayUntil+0xb2>
 800af8a:	69fa      	ldr	r2, [r7, #28]
 800af8c:	6a3b      	ldr	r3, [r7, #32]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d901      	bls.n	800af96 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800af92:	2301      	movs	r3, #1
 800af94:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	69fa      	ldr	r2, [r7, #28]
 800af9a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800af9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d006      	beq.n	800afb0 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800afa2:	69fa      	ldr	r2, [r7, #28]
 800afa4:	6a3b      	ldr	r3, [r7, #32]
 800afa6:	1ad3      	subs	r3, r2, r3
 800afa8:	2100      	movs	r1, #0
 800afaa:	4618      	mov	r0, r3
 800afac:	f000 fd52 	bl	800ba54 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800afb0:	f000 f8ca 	bl	800b148 <xTaskResumeAll>
 800afb4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d107      	bne.n	800afcc <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800afbc:	4b07      	ldr	r3, [pc, #28]	@ (800afdc <vTaskDelayUntil+0xfc>)
 800afbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afc2:	601a      	str	r2, [r3, #0]
 800afc4:	f3bf 8f4f 	dsb	sy
 800afc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800afcc:	bf00      	nop
 800afce:	3728      	adds	r7, #40	@ 0x28
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	20001694 	.word	0x20001694
 800afd8:	20001670 	.word	0x20001670
 800afdc:	e000ed04 	.word	0xe000ed04

0800afe0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800afe8:	2300      	movs	r3, #0
 800afea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d018      	beq.n	800b024 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aff2:	4b14      	ldr	r3, [pc, #80]	@ (800b044 <vTaskDelay+0x64>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00b      	beq.n	800b012 <vTaskDelay+0x32>
	__asm volatile
 800affa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800affe:	f383 8811 	msr	BASEPRI, r3
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	f3bf 8f4f 	dsb	sy
 800b00a:	60bb      	str	r3, [r7, #8]
}
 800b00c:	bf00      	nop
 800b00e:	bf00      	nop
 800b010:	e7fd      	b.n	800b00e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b012:	f000 f88b 	bl	800b12c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b016:	2100      	movs	r1, #0
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 fd1b 	bl	800ba54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b01e:	f000 f893 	bl	800b148 <xTaskResumeAll>
 800b022:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d107      	bne.n	800b03a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b02a:	4b07      	ldr	r3, [pc, #28]	@ (800b048 <vTaskDelay+0x68>)
 800b02c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b030:	601a      	str	r2, [r3, #0]
 800b032:	f3bf 8f4f 	dsb	sy
 800b036:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b03a:	bf00      	nop
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	20001694 	.word	0x20001694
 800b048:	e000ed04 	.word	0xe000ed04

0800b04c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b08a      	sub	sp, #40	@ 0x28
 800b050:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b052:	2300      	movs	r3, #0
 800b054:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b056:	2300      	movs	r3, #0
 800b058:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b05a:	463a      	mov	r2, r7
 800b05c:	1d39      	adds	r1, r7, #4
 800b05e:	f107 0308 	add.w	r3, r7, #8
 800b062:	4618      	mov	r0, r3
 800b064:	f7fe ff28 	bl	8009eb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b068:	6839      	ldr	r1, [r7, #0]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	68ba      	ldr	r2, [r7, #8]
 800b06e:	9202      	str	r2, [sp, #8]
 800b070:	9301      	str	r3, [sp, #4]
 800b072:	2300      	movs	r3, #0
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	2300      	movs	r3, #0
 800b078:	460a      	mov	r2, r1
 800b07a:	4924      	ldr	r1, [pc, #144]	@ (800b10c <vTaskStartScheduler+0xc0>)
 800b07c:	4824      	ldr	r0, [pc, #144]	@ (800b110 <vTaskStartScheduler+0xc4>)
 800b07e:	f7ff fcfd 	bl	800aa7c <xTaskCreateStatic>
 800b082:	4603      	mov	r3, r0
 800b084:	4a23      	ldr	r2, [pc, #140]	@ (800b114 <vTaskStartScheduler+0xc8>)
 800b086:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b088:	4b22      	ldr	r3, [pc, #136]	@ (800b114 <vTaskStartScheduler+0xc8>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d002      	beq.n	800b096 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b090:	2301      	movs	r3, #1
 800b092:	617b      	str	r3, [r7, #20]
 800b094:	e001      	b.n	800b09a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b096:	2300      	movs	r3, #0
 800b098:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d102      	bne.n	800b0a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b0a0:	f000 fd2c 	bl	800bafc <xTimerCreateTimerTask>
 800b0a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d11b      	bne.n	800b0e4 <vTaskStartScheduler+0x98>
	__asm volatile
 800b0ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b0:	f383 8811 	msr	BASEPRI, r3
 800b0b4:	f3bf 8f6f 	isb	sy
 800b0b8:	f3bf 8f4f 	dsb	sy
 800b0bc:	613b      	str	r3, [r7, #16]
}
 800b0be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b0c0:	4b15      	ldr	r3, [pc, #84]	@ (800b118 <vTaskStartScheduler+0xcc>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	3354      	adds	r3, #84	@ 0x54
 800b0c6:	4a15      	ldr	r2, [pc, #84]	@ (800b11c <vTaskStartScheduler+0xd0>)
 800b0c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b0ca:	4b15      	ldr	r3, [pc, #84]	@ (800b120 <vTaskStartScheduler+0xd4>)
 800b0cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b0d2:	4b14      	ldr	r3, [pc, #80]	@ (800b124 <vTaskStartScheduler+0xd8>)
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b0d8:	4b13      	ldr	r3, [pc, #76]	@ (800b128 <vTaskStartScheduler+0xdc>)
 800b0da:	2200      	movs	r2, #0
 800b0dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b0de:	f001 f8f7 	bl	800c2d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b0e2:	e00f      	b.n	800b104 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ea:	d10b      	bne.n	800b104 <vTaskStartScheduler+0xb8>
	__asm volatile
 800b0ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0f0:	f383 8811 	msr	BASEPRI, r3
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	f3bf 8f4f 	dsb	sy
 800b0fc:	60fb      	str	r3, [r7, #12]
}
 800b0fe:	bf00      	nop
 800b100:	bf00      	nop
 800b102:	e7fd      	b.n	800b100 <vTaskStartScheduler+0xb4>
}
 800b104:	bf00      	nop
 800b106:	3718      	adds	r7, #24
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	0800cca0 	.word	0x0800cca0
 800b110:	0800b781 	.word	0x0800b781
 800b114:	20001690 	.word	0x20001690
 800b118:	20001198 	.word	0x20001198
 800b11c:	20000204 	.word	0x20000204
 800b120:	2000168c 	.word	0x2000168c
 800b124:	20001678 	.word	0x20001678
 800b128:	20001670 	.word	0x20001670

0800b12c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b12c:	b480      	push	{r7}
 800b12e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b130:	4b04      	ldr	r3, [pc, #16]	@ (800b144 <vTaskSuspendAll+0x18>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	3301      	adds	r3, #1
 800b136:	4a03      	ldr	r2, [pc, #12]	@ (800b144 <vTaskSuspendAll+0x18>)
 800b138:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b13a:	bf00      	nop
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr
 800b144:	20001694 	.word	0x20001694

0800b148 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b14e:	2300      	movs	r3, #0
 800b150:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b152:	2300      	movs	r3, #0
 800b154:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b156:	4b42      	ldr	r3, [pc, #264]	@ (800b260 <xTaskResumeAll+0x118>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d10b      	bne.n	800b176 <xTaskResumeAll+0x2e>
	__asm volatile
 800b15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b162:	f383 8811 	msr	BASEPRI, r3
 800b166:	f3bf 8f6f 	isb	sy
 800b16a:	f3bf 8f4f 	dsb	sy
 800b16e:	603b      	str	r3, [r7, #0]
}
 800b170:	bf00      	nop
 800b172:	bf00      	nop
 800b174:	e7fd      	b.n	800b172 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b176:	f001 f94f 	bl	800c418 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b17a:	4b39      	ldr	r3, [pc, #228]	@ (800b260 <xTaskResumeAll+0x118>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	3b01      	subs	r3, #1
 800b180:	4a37      	ldr	r2, [pc, #220]	@ (800b260 <xTaskResumeAll+0x118>)
 800b182:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b184:	4b36      	ldr	r3, [pc, #216]	@ (800b260 <xTaskResumeAll+0x118>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d162      	bne.n	800b252 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b18c:	4b35      	ldr	r3, [pc, #212]	@ (800b264 <xTaskResumeAll+0x11c>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d05e      	beq.n	800b252 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b194:	e02f      	b.n	800b1f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b196:	4b34      	ldr	r3, [pc, #208]	@ (800b268 <xTaskResumeAll+0x120>)
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	3318      	adds	r3, #24
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fe ff46 	bl	800a034 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	3304      	adds	r3, #4
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7fe ff41 	bl	800a034 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1b6:	4b2d      	ldr	r3, [pc, #180]	@ (800b26c <xTaskResumeAll+0x124>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d903      	bls.n	800b1c6 <xTaskResumeAll+0x7e>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1c2:	4a2a      	ldr	r2, [pc, #168]	@ (800b26c <xTaskResumeAll+0x124>)
 800b1c4:	6013      	str	r3, [r2, #0]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ca:	4613      	mov	r3, r2
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	4413      	add	r3, r2
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4a27      	ldr	r2, [pc, #156]	@ (800b270 <xTaskResumeAll+0x128>)
 800b1d4:	441a      	add	r2, r3
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	3304      	adds	r3, #4
 800b1da:	4619      	mov	r1, r3
 800b1dc:	4610      	mov	r0, r2
 800b1de:	f7fe fecc 	bl	8009f7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1e6:	4b23      	ldr	r3, [pc, #140]	@ (800b274 <xTaskResumeAll+0x12c>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d302      	bcc.n	800b1f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b1f0:	4b21      	ldr	r3, [pc, #132]	@ (800b278 <xTaskResumeAll+0x130>)
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1f6:	4b1c      	ldr	r3, [pc, #112]	@ (800b268 <xTaskResumeAll+0x120>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1cb      	bne.n	800b196 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d001      	beq.n	800b208 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b204:	f000 fb78 	bl	800b8f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b208:	4b1c      	ldr	r3, [pc, #112]	@ (800b27c <xTaskResumeAll+0x134>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d010      	beq.n	800b236 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b214:	f000 f858 	bl	800b2c8 <xTaskIncrementTick>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d002      	beq.n	800b224 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b21e:	4b16      	ldr	r3, [pc, #88]	@ (800b278 <xTaskResumeAll+0x130>)
 800b220:	2201      	movs	r2, #1
 800b222:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	3b01      	subs	r3, #1
 800b228:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1f1      	bne.n	800b214 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b230:	4b12      	ldr	r3, [pc, #72]	@ (800b27c <xTaskResumeAll+0x134>)
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b236:	4b10      	ldr	r3, [pc, #64]	@ (800b278 <xTaskResumeAll+0x130>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d009      	beq.n	800b252 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b23e:	2301      	movs	r3, #1
 800b240:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b242:	4b0f      	ldr	r3, [pc, #60]	@ (800b280 <xTaskResumeAll+0x138>)
 800b244:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b248:	601a      	str	r2, [r3, #0]
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b252:	f001 f913 	bl	800c47c <vPortExitCritical>

	return xAlreadyYielded;
 800b256:	68bb      	ldr	r3, [r7, #8]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	20001694 	.word	0x20001694
 800b264:	2000166c 	.word	0x2000166c
 800b268:	2000162c 	.word	0x2000162c
 800b26c:	20001674 	.word	0x20001674
 800b270:	2000119c 	.word	0x2000119c
 800b274:	20001198 	.word	0x20001198
 800b278:	20001680 	.word	0x20001680
 800b27c:	2000167c 	.word	0x2000167c
 800b280:	e000ed04 	.word	0xe000ed04

0800b284 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b28a:	4b05      	ldr	r3, [pc, #20]	@ (800b2a0 <xTaskGetTickCount+0x1c>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b290:	687b      	ldr	r3, [r7, #4]
}
 800b292:	4618      	mov	r0, r3
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	20001670 	.word	0x20001670

0800b2a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b2aa:	f001 f995 	bl	800c5d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b2b2:	4b04      	ldr	r3, [pc, #16]	@ (800b2c4 <xTaskGetTickCountFromISR+0x20>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2b8:	683b      	ldr	r3, [r7, #0]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3708      	adds	r7, #8
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	20001670 	.word	0x20001670

0800b2c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b086      	sub	sp, #24
 800b2cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2d2:	4b4f      	ldr	r3, [pc, #316]	@ (800b410 <xTaskIncrementTick+0x148>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	f040 8090 	bne.w	800b3fc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b2dc:	4b4d      	ldr	r3, [pc, #308]	@ (800b414 <xTaskIncrementTick+0x14c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b2e4:	4a4b      	ldr	r2, [pc, #300]	@ (800b414 <xTaskIncrementTick+0x14c>)
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d121      	bne.n	800b334 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b2f0:	4b49      	ldr	r3, [pc, #292]	@ (800b418 <xTaskIncrementTick+0x150>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00b      	beq.n	800b312 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b2fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2fe:	f383 8811 	msr	BASEPRI, r3
 800b302:	f3bf 8f6f 	isb	sy
 800b306:	f3bf 8f4f 	dsb	sy
 800b30a:	603b      	str	r3, [r7, #0]
}
 800b30c:	bf00      	nop
 800b30e:	bf00      	nop
 800b310:	e7fd      	b.n	800b30e <xTaskIncrementTick+0x46>
 800b312:	4b41      	ldr	r3, [pc, #260]	@ (800b418 <xTaskIncrementTick+0x150>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	60fb      	str	r3, [r7, #12]
 800b318:	4b40      	ldr	r3, [pc, #256]	@ (800b41c <xTaskIncrementTick+0x154>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a3e      	ldr	r2, [pc, #248]	@ (800b418 <xTaskIncrementTick+0x150>)
 800b31e:	6013      	str	r3, [r2, #0]
 800b320:	4a3e      	ldr	r2, [pc, #248]	@ (800b41c <xTaskIncrementTick+0x154>)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6013      	str	r3, [r2, #0]
 800b326:	4b3e      	ldr	r3, [pc, #248]	@ (800b420 <xTaskIncrementTick+0x158>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3301      	adds	r3, #1
 800b32c:	4a3c      	ldr	r2, [pc, #240]	@ (800b420 <xTaskIncrementTick+0x158>)
 800b32e:	6013      	str	r3, [r2, #0]
 800b330:	f000 fae2 	bl	800b8f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b334:	4b3b      	ldr	r3, [pc, #236]	@ (800b424 <xTaskIncrementTick+0x15c>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	693a      	ldr	r2, [r7, #16]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d349      	bcc.n	800b3d2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b33e:	4b36      	ldr	r3, [pc, #216]	@ (800b418 <xTaskIncrementTick+0x150>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d104      	bne.n	800b352 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b348:	4b36      	ldr	r3, [pc, #216]	@ (800b424 <xTaskIncrementTick+0x15c>)
 800b34a:	f04f 32ff 	mov.w	r2, #4294967295
 800b34e:	601a      	str	r2, [r3, #0]
					break;
 800b350:	e03f      	b.n	800b3d2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b352:	4b31      	ldr	r3, [pc, #196]	@ (800b418 <xTaskIncrementTick+0x150>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	429a      	cmp	r2, r3
 800b368:	d203      	bcs.n	800b372 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b36a:	4a2e      	ldr	r2, [pc, #184]	@ (800b424 <xTaskIncrementTick+0x15c>)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b370:	e02f      	b.n	800b3d2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	3304      	adds	r3, #4
 800b376:	4618      	mov	r0, r3
 800b378:	f7fe fe5c 	bl	800a034 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b380:	2b00      	cmp	r3, #0
 800b382:	d004      	beq.n	800b38e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	3318      	adds	r3, #24
 800b388:	4618      	mov	r0, r3
 800b38a:	f7fe fe53 	bl	800a034 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b392:	4b25      	ldr	r3, [pc, #148]	@ (800b428 <xTaskIncrementTick+0x160>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	429a      	cmp	r2, r3
 800b398:	d903      	bls.n	800b3a2 <xTaskIncrementTick+0xda>
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b39e:	4a22      	ldr	r2, [pc, #136]	@ (800b428 <xTaskIncrementTick+0x160>)
 800b3a0:	6013      	str	r3, [r2, #0]
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4413      	add	r3, r2
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	4a1f      	ldr	r2, [pc, #124]	@ (800b42c <xTaskIncrementTick+0x164>)
 800b3b0:	441a      	add	r2, r3
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	3304      	adds	r3, #4
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	4610      	mov	r0, r2
 800b3ba:	f7fe fdde 	bl	8009f7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3c2:	4b1b      	ldr	r3, [pc, #108]	@ (800b430 <xTaskIncrementTick+0x168>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d3b8      	bcc.n	800b33e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3d0:	e7b5      	b.n	800b33e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b3d2:	4b17      	ldr	r3, [pc, #92]	@ (800b430 <xTaskIncrementTick+0x168>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3d8:	4914      	ldr	r1, [pc, #80]	@ (800b42c <xTaskIncrementTick+0x164>)
 800b3da:	4613      	mov	r3, r2
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	4413      	add	r3, r2
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	440b      	add	r3, r1
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d901      	bls.n	800b3ee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b3ee:	4b11      	ldr	r3, [pc, #68]	@ (800b434 <xTaskIncrementTick+0x16c>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d007      	beq.n	800b406 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	617b      	str	r3, [r7, #20]
 800b3fa:	e004      	b.n	800b406 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b3fc:	4b0e      	ldr	r3, [pc, #56]	@ (800b438 <xTaskIncrementTick+0x170>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	3301      	adds	r3, #1
 800b402:	4a0d      	ldr	r2, [pc, #52]	@ (800b438 <xTaskIncrementTick+0x170>)
 800b404:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b406:	697b      	ldr	r3, [r7, #20]
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3718      	adds	r7, #24
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}
 800b410:	20001694 	.word	0x20001694
 800b414:	20001670 	.word	0x20001670
 800b418:	20001624 	.word	0x20001624
 800b41c:	20001628 	.word	0x20001628
 800b420:	20001684 	.word	0x20001684
 800b424:	2000168c 	.word	0x2000168c
 800b428:	20001674 	.word	0x20001674
 800b42c:	2000119c 	.word	0x2000119c
 800b430:	20001198 	.word	0x20001198
 800b434:	20001680 	.word	0x20001680
 800b438:	2000167c 	.word	0x2000167c

0800b43c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b442:	4b2b      	ldr	r3, [pc, #172]	@ (800b4f0 <vTaskSwitchContext+0xb4>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d003      	beq.n	800b452 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b44a:	4b2a      	ldr	r3, [pc, #168]	@ (800b4f4 <vTaskSwitchContext+0xb8>)
 800b44c:	2201      	movs	r2, #1
 800b44e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b450:	e047      	b.n	800b4e2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b452:	4b28      	ldr	r3, [pc, #160]	@ (800b4f4 <vTaskSwitchContext+0xb8>)
 800b454:	2200      	movs	r2, #0
 800b456:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b458:	4b27      	ldr	r3, [pc, #156]	@ (800b4f8 <vTaskSwitchContext+0xbc>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	60fb      	str	r3, [r7, #12]
 800b45e:	e011      	b.n	800b484 <vTaskSwitchContext+0x48>
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d10b      	bne.n	800b47e <vTaskSwitchContext+0x42>
	__asm volatile
 800b466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b46a:	f383 8811 	msr	BASEPRI, r3
 800b46e:	f3bf 8f6f 	isb	sy
 800b472:	f3bf 8f4f 	dsb	sy
 800b476:	607b      	str	r3, [r7, #4]
}
 800b478:	bf00      	nop
 800b47a:	bf00      	nop
 800b47c:	e7fd      	b.n	800b47a <vTaskSwitchContext+0x3e>
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	3b01      	subs	r3, #1
 800b482:	60fb      	str	r3, [r7, #12]
 800b484:	491d      	ldr	r1, [pc, #116]	@ (800b4fc <vTaskSwitchContext+0xc0>)
 800b486:	68fa      	ldr	r2, [r7, #12]
 800b488:	4613      	mov	r3, r2
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	4413      	add	r3, r2
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	440b      	add	r3, r1
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d0e3      	beq.n	800b460 <vTaskSwitchContext+0x24>
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	4613      	mov	r3, r2
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	4413      	add	r3, r2
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	4a16      	ldr	r2, [pc, #88]	@ (800b4fc <vTaskSwitchContext+0xc0>)
 800b4a4:	4413      	add	r3, r2
 800b4a6:	60bb      	str	r3, [r7, #8]
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	685a      	ldr	r2, [r3, #4]
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	605a      	str	r2, [r3, #4]
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	685a      	ldr	r2, [r3, #4]
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	3308      	adds	r3, #8
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d104      	bne.n	800b4c8 <vTaskSwitchContext+0x8c>
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	685a      	ldr	r2, [r3, #4]
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	605a      	str	r2, [r3, #4]
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	4a0c      	ldr	r2, [pc, #48]	@ (800b500 <vTaskSwitchContext+0xc4>)
 800b4d0:	6013      	str	r3, [r2, #0]
 800b4d2:	4a09      	ldr	r2, [pc, #36]	@ (800b4f8 <vTaskSwitchContext+0xbc>)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b4d8:	4b09      	ldr	r3, [pc, #36]	@ (800b500 <vTaskSwitchContext+0xc4>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	3354      	adds	r3, #84	@ 0x54
 800b4de:	4a09      	ldr	r2, [pc, #36]	@ (800b504 <vTaskSwitchContext+0xc8>)
 800b4e0:	6013      	str	r3, [r2, #0]
}
 800b4e2:	bf00      	nop
 800b4e4:	3714      	adds	r7, #20
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop
 800b4f0:	20001694 	.word	0x20001694
 800b4f4:	20001680 	.word	0x20001680
 800b4f8:	20001674 	.word	0x20001674
 800b4fc:	2000119c 	.word	0x2000119c
 800b500:	20001198 	.word	0x20001198
 800b504:	20000204 	.word	0x20000204

0800b508 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d10b      	bne.n	800b530 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b51c:	f383 8811 	msr	BASEPRI, r3
 800b520:	f3bf 8f6f 	isb	sy
 800b524:	f3bf 8f4f 	dsb	sy
 800b528:	60fb      	str	r3, [r7, #12]
}
 800b52a:	bf00      	nop
 800b52c:	bf00      	nop
 800b52e:	e7fd      	b.n	800b52c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b530:	4b07      	ldr	r3, [pc, #28]	@ (800b550 <vTaskPlaceOnEventList+0x48>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	3318      	adds	r3, #24
 800b536:	4619      	mov	r1, r3
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7fe fd42 	bl	8009fc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b53e:	2101      	movs	r1, #1
 800b540:	6838      	ldr	r0, [r7, #0]
 800b542:	f000 fa87 	bl	800ba54 <prvAddCurrentTaskToDelayedList>
}
 800b546:	bf00      	nop
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	20001198 	.word	0x20001198

0800b554 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b554:	b580      	push	{r7, lr}
 800b556:	b086      	sub	sp, #24
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d10b      	bne.n	800b57e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b56a:	f383 8811 	msr	BASEPRI, r3
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f3bf 8f4f 	dsb	sy
 800b576:	617b      	str	r3, [r7, #20]
}
 800b578:	bf00      	nop
 800b57a:	bf00      	nop
 800b57c:	e7fd      	b.n	800b57a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b57e:	4b0a      	ldr	r3, [pc, #40]	@ (800b5a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3318      	adds	r3, #24
 800b584:	4619      	mov	r1, r3
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	f7fe fcf7 	bl	8009f7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d002      	beq.n	800b598 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b592:	f04f 33ff 	mov.w	r3, #4294967295
 800b596:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b598:	6879      	ldr	r1, [r7, #4]
 800b59a:	68b8      	ldr	r0, [r7, #8]
 800b59c:	f000 fa5a 	bl	800ba54 <prvAddCurrentTaskToDelayedList>
	}
 800b5a0:	bf00      	nop
 800b5a2:	3718      	adds	r7, #24
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	20001198 	.word	0x20001198

0800b5ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b086      	sub	sp, #24
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d10b      	bne.n	800b5da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c6:	f383 8811 	msr	BASEPRI, r3
 800b5ca:	f3bf 8f6f 	isb	sy
 800b5ce:	f3bf 8f4f 	dsb	sy
 800b5d2:	60fb      	str	r3, [r7, #12]
}
 800b5d4:	bf00      	nop
 800b5d6:	bf00      	nop
 800b5d8:	e7fd      	b.n	800b5d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	3318      	adds	r3, #24
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7fe fd28 	bl	800a034 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5e4:	4b1d      	ldr	r3, [pc, #116]	@ (800b65c <xTaskRemoveFromEventList+0xb0>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d11d      	bne.n	800b628 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	3304      	adds	r3, #4
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7fe fd1f 	bl	800a034 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5fa:	4b19      	ldr	r3, [pc, #100]	@ (800b660 <xTaskRemoveFromEventList+0xb4>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d903      	bls.n	800b60a <xTaskRemoveFromEventList+0x5e>
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b606:	4a16      	ldr	r2, [pc, #88]	@ (800b660 <xTaskRemoveFromEventList+0xb4>)
 800b608:	6013      	str	r3, [r2, #0]
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b60e:	4613      	mov	r3, r2
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	4413      	add	r3, r2
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	4a13      	ldr	r2, [pc, #76]	@ (800b664 <xTaskRemoveFromEventList+0xb8>)
 800b618:	441a      	add	r2, r3
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	3304      	adds	r3, #4
 800b61e:	4619      	mov	r1, r3
 800b620:	4610      	mov	r0, r2
 800b622:	f7fe fcaa 	bl	8009f7a <vListInsertEnd>
 800b626:	e005      	b.n	800b634 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	3318      	adds	r3, #24
 800b62c:	4619      	mov	r1, r3
 800b62e:	480e      	ldr	r0, [pc, #56]	@ (800b668 <xTaskRemoveFromEventList+0xbc>)
 800b630:	f7fe fca3 	bl	8009f7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b638:	4b0c      	ldr	r3, [pc, #48]	@ (800b66c <xTaskRemoveFromEventList+0xc0>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b63e:	429a      	cmp	r2, r3
 800b640:	d905      	bls.n	800b64e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b642:	2301      	movs	r3, #1
 800b644:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b646:	4b0a      	ldr	r3, [pc, #40]	@ (800b670 <xTaskRemoveFromEventList+0xc4>)
 800b648:	2201      	movs	r2, #1
 800b64a:	601a      	str	r2, [r3, #0]
 800b64c:	e001      	b.n	800b652 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b64e:	2300      	movs	r3, #0
 800b650:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b652:	697b      	ldr	r3, [r7, #20]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3718      	adds	r7, #24
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	20001694 	.word	0x20001694
 800b660:	20001674 	.word	0x20001674
 800b664:	2000119c 	.word	0x2000119c
 800b668:	2000162c 	.word	0x2000162c
 800b66c:	20001198 	.word	0x20001198
 800b670:	20001680 	.word	0x20001680

0800b674 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b67c:	4b06      	ldr	r3, [pc, #24]	@ (800b698 <vTaskInternalSetTimeOutState+0x24>)
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b684:	4b05      	ldr	r3, [pc, #20]	@ (800b69c <vTaskInternalSetTimeOutState+0x28>)
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	605a      	str	r2, [r3, #4]
}
 800b68c:	bf00      	nop
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr
 800b698:	20001684 	.word	0x20001684
 800b69c:	20001670 	.word	0x20001670

0800b6a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b088      	sub	sp, #32
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d10b      	bne.n	800b6c8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6b4:	f383 8811 	msr	BASEPRI, r3
 800b6b8:	f3bf 8f6f 	isb	sy
 800b6bc:	f3bf 8f4f 	dsb	sy
 800b6c0:	613b      	str	r3, [r7, #16]
}
 800b6c2:	bf00      	nop
 800b6c4:	bf00      	nop
 800b6c6:	e7fd      	b.n	800b6c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d10b      	bne.n	800b6e6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	60fb      	str	r3, [r7, #12]
}
 800b6e0:	bf00      	nop
 800b6e2:	bf00      	nop
 800b6e4:	e7fd      	b.n	800b6e2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b6e6:	f000 fe97 	bl	800c418 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6ea:	4b1d      	ldr	r3, [pc, #116]	@ (800b760 <xTaskCheckForTimeOut+0xc0>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	69ba      	ldr	r2, [r7, #24]
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b702:	d102      	bne.n	800b70a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b704:	2300      	movs	r3, #0
 800b706:	61fb      	str	r3, [r7, #28]
 800b708:	e023      	b.n	800b752 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	4b15      	ldr	r3, [pc, #84]	@ (800b764 <xTaskCheckForTimeOut+0xc4>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	429a      	cmp	r2, r3
 800b714:	d007      	beq.n	800b726 <xTaskCheckForTimeOut+0x86>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	69ba      	ldr	r2, [r7, #24]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d302      	bcc.n	800b726 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b720:	2301      	movs	r3, #1
 800b722:	61fb      	str	r3, [r7, #28]
 800b724:	e015      	b.n	800b752 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	697a      	ldr	r2, [r7, #20]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d20b      	bcs.n	800b748 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	1ad2      	subs	r2, r2, r3
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f7ff ff99 	bl	800b674 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b742:	2300      	movs	r3, #0
 800b744:	61fb      	str	r3, [r7, #28]
 800b746:	e004      	b.n	800b752 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	2200      	movs	r2, #0
 800b74c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b74e:	2301      	movs	r3, #1
 800b750:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b752:	f000 fe93 	bl	800c47c <vPortExitCritical>

	return xReturn;
 800b756:	69fb      	ldr	r3, [r7, #28]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3720      	adds	r7, #32
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	20001670 	.word	0x20001670
 800b764:	20001684 	.word	0x20001684

0800b768 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b768:	b480      	push	{r7}
 800b76a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b76c:	4b03      	ldr	r3, [pc, #12]	@ (800b77c <vTaskMissedYield+0x14>)
 800b76e:	2201      	movs	r2, #1
 800b770:	601a      	str	r2, [r3, #0]
}
 800b772:	bf00      	nop
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr
 800b77c:	20001680 	.word	0x20001680

0800b780 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b788:	f000 f852 	bl	800b830 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b78c:	4b06      	ldr	r3, [pc, #24]	@ (800b7a8 <prvIdleTask+0x28>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d9f9      	bls.n	800b788 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b794:	4b05      	ldr	r3, [pc, #20]	@ (800b7ac <prvIdleTask+0x2c>)
 800b796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b79a:	601a      	str	r2, [r3, #0]
 800b79c:	f3bf 8f4f 	dsb	sy
 800b7a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b7a4:	e7f0      	b.n	800b788 <prvIdleTask+0x8>
 800b7a6:	bf00      	nop
 800b7a8:	2000119c 	.word	0x2000119c
 800b7ac:	e000ed04 	.word	0xe000ed04

0800b7b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	607b      	str	r3, [r7, #4]
 800b7ba:	e00c      	b.n	800b7d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	4613      	mov	r3, r2
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	4413      	add	r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	4a12      	ldr	r2, [pc, #72]	@ (800b810 <prvInitialiseTaskLists+0x60>)
 800b7c8:	4413      	add	r3, r2
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7fe fba8 	bl	8009f20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	607b      	str	r3, [r7, #4]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2b37      	cmp	r3, #55	@ 0x37
 800b7da:	d9ef      	bls.n	800b7bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b7dc:	480d      	ldr	r0, [pc, #52]	@ (800b814 <prvInitialiseTaskLists+0x64>)
 800b7de:	f7fe fb9f 	bl	8009f20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b7e2:	480d      	ldr	r0, [pc, #52]	@ (800b818 <prvInitialiseTaskLists+0x68>)
 800b7e4:	f7fe fb9c 	bl	8009f20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7e8:	480c      	ldr	r0, [pc, #48]	@ (800b81c <prvInitialiseTaskLists+0x6c>)
 800b7ea:	f7fe fb99 	bl	8009f20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b7ee:	480c      	ldr	r0, [pc, #48]	@ (800b820 <prvInitialiseTaskLists+0x70>)
 800b7f0:	f7fe fb96 	bl	8009f20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b7f4:	480b      	ldr	r0, [pc, #44]	@ (800b824 <prvInitialiseTaskLists+0x74>)
 800b7f6:	f7fe fb93 	bl	8009f20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b7fa:	4b0b      	ldr	r3, [pc, #44]	@ (800b828 <prvInitialiseTaskLists+0x78>)
 800b7fc:	4a05      	ldr	r2, [pc, #20]	@ (800b814 <prvInitialiseTaskLists+0x64>)
 800b7fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b800:	4b0a      	ldr	r3, [pc, #40]	@ (800b82c <prvInitialiseTaskLists+0x7c>)
 800b802:	4a05      	ldr	r2, [pc, #20]	@ (800b818 <prvInitialiseTaskLists+0x68>)
 800b804:	601a      	str	r2, [r3, #0]
}
 800b806:	bf00      	nop
 800b808:	3708      	adds	r7, #8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	2000119c 	.word	0x2000119c
 800b814:	200015fc 	.word	0x200015fc
 800b818:	20001610 	.word	0x20001610
 800b81c:	2000162c 	.word	0x2000162c
 800b820:	20001640 	.word	0x20001640
 800b824:	20001658 	.word	0x20001658
 800b828:	20001624 	.word	0x20001624
 800b82c:	20001628 	.word	0x20001628

0800b830 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b836:	e019      	b.n	800b86c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b838:	f000 fdee 	bl	800c418 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b83c:	4b10      	ldr	r3, [pc, #64]	@ (800b880 <prvCheckTasksWaitingTermination+0x50>)
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	3304      	adds	r3, #4
 800b848:	4618      	mov	r0, r3
 800b84a:	f7fe fbf3 	bl	800a034 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b84e:	4b0d      	ldr	r3, [pc, #52]	@ (800b884 <prvCheckTasksWaitingTermination+0x54>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	3b01      	subs	r3, #1
 800b854:	4a0b      	ldr	r2, [pc, #44]	@ (800b884 <prvCheckTasksWaitingTermination+0x54>)
 800b856:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b858:	4b0b      	ldr	r3, [pc, #44]	@ (800b888 <prvCheckTasksWaitingTermination+0x58>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	3b01      	subs	r3, #1
 800b85e:	4a0a      	ldr	r2, [pc, #40]	@ (800b888 <prvCheckTasksWaitingTermination+0x58>)
 800b860:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b862:	f000 fe0b 	bl	800c47c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f810 	bl	800b88c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b86c:	4b06      	ldr	r3, [pc, #24]	@ (800b888 <prvCheckTasksWaitingTermination+0x58>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1e1      	bne.n	800b838 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b874:	bf00      	nop
 800b876:	bf00      	nop
 800b878:	3708      	adds	r7, #8
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	20001640 	.word	0x20001640
 800b884:	2000166c 	.word	0x2000166c
 800b888:	20001654 	.word	0x20001654

0800b88c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	3354      	adds	r3, #84	@ 0x54
 800b898:	4618      	mov	r0, r3
 800b89a:	f001 f8d5 	bl	800ca48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d108      	bne.n	800b8ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f000 ffa3 	bl	800c7f8 <vPortFree>
				vPortFree( pxTCB );
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 ffa0 	bl	800c7f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b8b8:	e019      	b.n	800b8ee <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d103      	bne.n	800b8cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 ff97 	bl	800c7f8 <vPortFree>
	}
 800b8ca:	e010      	b.n	800b8ee <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	d00b      	beq.n	800b8ee <prvDeleteTCB+0x62>
	__asm volatile
 800b8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	60fb      	str	r3, [r7, #12]
}
 800b8e8:	bf00      	nop
 800b8ea:	bf00      	nop
 800b8ec:	e7fd      	b.n	800b8ea <prvDeleteTCB+0x5e>
	}
 800b8ee:	bf00      	nop
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
	...

0800b8f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8fe:	4b0c      	ldr	r3, [pc, #48]	@ (800b930 <prvResetNextTaskUnblockTime+0x38>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d104      	bne.n	800b912 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b908:	4b0a      	ldr	r3, [pc, #40]	@ (800b934 <prvResetNextTaskUnblockTime+0x3c>)
 800b90a:	f04f 32ff 	mov.w	r2, #4294967295
 800b90e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b910:	e008      	b.n	800b924 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b912:	4b07      	ldr	r3, [pc, #28]	@ (800b930 <prvResetNextTaskUnblockTime+0x38>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	68db      	ldr	r3, [r3, #12]
 800b91a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	4a04      	ldr	r2, [pc, #16]	@ (800b934 <prvResetNextTaskUnblockTime+0x3c>)
 800b922:	6013      	str	r3, [r2, #0]
}
 800b924:	bf00      	nop
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr
 800b930:	20001624 	.word	0x20001624
 800b934:	2000168c 	.word	0x2000168c

0800b938 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b93e:	4b0b      	ldr	r3, [pc, #44]	@ (800b96c <xTaskGetSchedulerState+0x34>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d102      	bne.n	800b94c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b946:	2301      	movs	r3, #1
 800b948:	607b      	str	r3, [r7, #4]
 800b94a:	e008      	b.n	800b95e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b94c:	4b08      	ldr	r3, [pc, #32]	@ (800b970 <xTaskGetSchedulerState+0x38>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d102      	bne.n	800b95a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b954:	2302      	movs	r3, #2
 800b956:	607b      	str	r3, [r7, #4]
 800b958:	e001      	b.n	800b95e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b95a:	2300      	movs	r3, #0
 800b95c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b95e:	687b      	ldr	r3, [r7, #4]
	}
 800b960:	4618      	mov	r0, r3
 800b962:	370c      	adds	r7, #12
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr
 800b96c:	20001678 	.word	0x20001678
 800b970:	20001694 	.word	0x20001694

0800b974 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b974:	b580      	push	{r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b980:	2300      	movs	r3, #0
 800b982:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d058      	beq.n	800ba3c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b98a:	4b2f      	ldr	r3, [pc, #188]	@ (800ba48 <xTaskPriorityDisinherit+0xd4>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	693a      	ldr	r2, [r7, #16]
 800b990:	429a      	cmp	r2, r3
 800b992:	d00b      	beq.n	800b9ac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b998:	f383 8811 	msr	BASEPRI, r3
 800b99c:	f3bf 8f6f 	isb	sy
 800b9a0:	f3bf 8f4f 	dsb	sy
 800b9a4:	60fb      	str	r3, [r7, #12]
}
 800b9a6:	bf00      	nop
 800b9a8:	bf00      	nop
 800b9aa:	e7fd      	b.n	800b9a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d10b      	bne.n	800b9cc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b9b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b8:	f383 8811 	msr	BASEPRI, r3
 800b9bc:	f3bf 8f6f 	isb	sy
 800b9c0:	f3bf 8f4f 	dsb	sy
 800b9c4:	60bb      	str	r3, [r7, #8]
}
 800b9c6:	bf00      	nop
 800b9c8:	bf00      	nop
 800b9ca:	e7fd      	b.n	800b9c8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9d0:	1e5a      	subs	r2, r3, #1
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d02c      	beq.n	800ba3c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d128      	bne.n	800ba3c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7fe fb20 	bl	800a034 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ba4c <xTaskPriorityDisinherit+0xd8>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d903      	bls.n	800ba1c <xTaskPriorityDisinherit+0xa8>
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba18:	4a0c      	ldr	r2, [pc, #48]	@ (800ba4c <xTaskPriorityDisinherit+0xd8>)
 800ba1a:	6013      	str	r3, [r2, #0]
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba20:	4613      	mov	r3, r2
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	4413      	add	r3, r2
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	4a09      	ldr	r2, [pc, #36]	@ (800ba50 <xTaskPriorityDisinherit+0xdc>)
 800ba2a:	441a      	add	r2, r3
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	3304      	adds	r3, #4
 800ba30:	4619      	mov	r1, r3
 800ba32:	4610      	mov	r0, r2
 800ba34:	f7fe faa1 	bl	8009f7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba3c:	697b      	ldr	r3, [r7, #20]
	}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3718      	adds	r7, #24
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	20001198 	.word	0x20001198
 800ba4c:	20001674 	.word	0x20001674
 800ba50:	2000119c 	.word	0x2000119c

0800ba54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba5e:	4b21      	ldr	r3, [pc, #132]	@ (800bae4 <prvAddCurrentTaskToDelayedList+0x90>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba64:	4b20      	ldr	r3, [pc, #128]	@ (800bae8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	3304      	adds	r3, #4
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fe fae2 	bl	800a034 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba76:	d10a      	bne.n	800ba8e <prvAddCurrentTaskToDelayedList+0x3a>
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d007      	beq.n	800ba8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba7e:	4b1a      	ldr	r3, [pc, #104]	@ (800bae8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	3304      	adds	r3, #4
 800ba84:	4619      	mov	r1, r3
 800ba86:	4819      	ldr	r0, [pc, #100]	@ (800baec <prvAddCurrentTaskToDelayedList+0x98>)
 800ba88:	f7fe fa77 	bl	8009f7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba8c:	e026      	b.n	800badc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba8e:	68fa      	ldr	r2, [r7, #12]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4413      	add	r3, r2
 800ba94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba96:	4b14      	ldr	r3, [pc, #80]	@ (800bae8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	68ba      	ldr	r2, [r7, #8]
 800ba9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba9e:	68ba      	ldr	r2, [r7, #8]
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d209      	bcs.n	800baba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baa6:	4b12      	ldr	r3, [pc, #72]	@ (800baf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	4b0f      	ldr	r3, [pc, #60]	@ (800bae8 <prvAddCurrentTaskToDelayedList+0x94>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	3304      	adds	r3, #4
 800bab0:	4619      	mov	r1, r3
 800bab2:	4610      	mov	r0, r2
 800bab4:	f7fe fa85 	bl	8009fc2 <vListInsert>
}
 800bab8:	e010      	b.n	800badc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baba:	4b0e      	ldr	r3, [pc, #56]	@ (800baf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	4b0a      	ldr	r3, [pc, #40]	@ (800bae8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	3304      	adds	r3, #4
 800bac4:	4619      	mov	r1, r3
 800bac6:	4610      	mov	r0, r2
 800bac8:	f7fe fa7b 	bl	8009fc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bacc:	4b0a      	ldr	r3, [pc, #40]	@ (800baf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d202      	bcs.n	800badc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bad6:	4a08      	ldr	r2, [pc, #32]	@ (800baf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	6013      	str	r3, [r2, #0]
}
 800badc:	bf00      	nop
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	20001670 	.word	0x20001670
 800bae8:	20001198 	.word	0x20001198
 800baec:	20001658 	.word	0x20001658
 800baf0:	20001628 	.word	0x20001628
 800baf4:	20001624 	.word	0x20001624
 800baf8:	2000168c 	.word	0x2000168c

0800bafc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b08a      	sub	sp, #40	@ 0x28
 800bb00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bb02:	2300      	movs	r3, #0
 800bb04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bb06:	f000 fb13 	bl	800c130 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bb0a:	4b1d      	ldr	r3, [pc, #116]	@ (800bb80 <xTimerCreateTimerTask+0x84>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d021      	beq.n	800bb56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bb12:	2300      	movs	r3, #0
 800bb14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bb16:	2300      	movs	r3, #0
 800bb18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bb1a:	1d3a      	adds	r2, r7, #4
 800bb1c:	f107 0108 	add.w	r1, r7, #8
 800bb20:	f107 030c 	add.w	r3, r7, #12
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7fe f9e1 	bl	8009eec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bb2a:	6879      	ldr	r1, [r7, #4]
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	68fa      	ldr	r2, [r7, #12]
 800bb30:	9202      	str	r2, [sp, #8]
 800bb32:	9301      	str	r3, [sp, #4]
 800bb34:	2302      	movs	r3, #2
 800bb36:	9300      	str	r3, [sp, #0]
 800bb38:	2300      	movs	r3, #0
 800bb3a:	460a      	mov	r2, r1
 800bb3c:	4911      	ldr	r1, [pc, #68]	@ (800bb84 <xTimerCreateTimerTask+0x88>)
 800bb3e:	4812      	ldr	r0, [pc, #72]	@ (800bb88 <xTimerCreateTimerTask+0x8c>)
 800bb40:	f7fe ff9c 	bl	800aa7c <xTaskCreateStatic>
 800bb44:	4603      	mov	r3, r0
 800bb46:	4a11      	ldr	r2, [pc, #68]	@ (800bb8c <xTimerCreateTimerTask+0x90>)
 800bb48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bb4a:	4b10      	ldr	r3, [pc, #64]	@ (800bb8c <xTimerCreateTimerTask+0x90>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d001      	beq.n	800bb56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bb52:	2301      	movs	r3, #1
 800bb54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10b      	bne.n	800bb74 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	613b      	str	r3, [r7, #16]
}
 800bb6e:	bf00      	nop
 800bb70:	bf00      	nop
 800bb72:	e7fd      	b.n	800bb70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bb74:	697b      	ldr	r3, [r7, #20]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3718      	adds	r7, #24
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	200016c8 	.word	0x200016c8
 800bb84:	0800cca8 	.word	0x0800cca8
 800bb88:	0800bcc9 	.word	0x0800bcc9
 800bb8c:	200016cc 	.word	0x200016cc

0800bb90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b08a      	sub	sp, #40	@ 0x28
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
 800bb9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d10b      	bne.n	800bbc0 <xTimerGenericCommand+0x30>
	__asm volatile
 800bba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbac:	f383 8811 	msr	BASEPRI, r3
 800bbb0:	f3bf 8f6f 	isb	sy
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	623b      	str	r3, [r7, #32]
}
 800bbba:	bf00      	nop
 800bbbc:	bf00      	nop
 800bbbe:	e7fd      	b.n	800bbbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bbc0:	4b19      	ldr	r3, [pc, #100]	@ (800bc28 <xTimerGenericCommand+0x98>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d02a      	beq.n	800bc1e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	2b05      	cmp	r3, #5
 800bbd8:	dc18      	bgt.n	800bc0c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bbda:	f7ff fead 	bl	800b938 <xTaskGetSchedulerState>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b02      	cmp	r3, #2
 800bbe2:	d109      	bne.n	800bbf8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bbe4:	4b10      	ldr	r3, [pc, #64]	@ (800bc28 <xTimerGenericCommand+0x98>)
 800bbe6:	6818      	ldr	r0, [r3, #0]
 800bbe8:	f107 0110 	add.w	r1, r7, #16
 800bbec:	2300      	movs	r3, #0
 800bbee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbf0:	f7fe fb54 	bl	800a29c <xQueueGenericSend>
 800bbf4:	6278      	str	r0, [r7, #36]	@ 0x24
 800bbf6:	e012      	b.n	800bc1e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bbf8:	4b0b      	ldr	r3, [pc, #44]	@ (800bc28 <xTimerGenericCommand+0x98>)
 800bbfa:	6818      	ldr	r0, [r3, #0]
 800bbfc:	f107 0110 	add.w	r1, r7, #16
 800bc00:	2300      	movs	r3, #0
 800bc02:	2200      	movs	r2, #0
 800bc04:	f7fe fb4a 	bl	800a29c <xQueueGenericSend>
 800bc08:	6278      	str	r0, [r7, #36]	@ 0x24
 800bc0a:	e008      	b.n	800bc1e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bc0c:	4b06      	ldr	r3, [pc, #24]	@ (800bc28 <xTimerGenericCommand+0x98>)
 800bc0e:	6818      	ldr	r0, [r3, #0]
 800bc10:	f107 0110 	add.w	r1, r7, #16
 800bc14:	2300      	movs	r3, #0
 800bc16:	683a      	ldr	r2, [r7, #0]
 800bc18:	f7fe fc42 	bl	800a4a0 <xQueueGenericSendFromISR>
 800bc1c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3728      	adds	r7, #40	@ 0x28
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	200016c8 	.word	0x200016c8

0800bc2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b088      	sub	sp, #32
 800bc30:	af02      	add	r7, sp, #8
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc36:	4b23      	ldr	r3, [pc, #140]	@ (800bcc4 <prvProcessExpiredTimer+0x98>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	3304      	adds	r3, #4
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7fe f9f5 	bl	800a034 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc50:	f003 0304 	and.w	r3, r3, #4
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d023      	beq.n	800bca0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	699a      	ldr	r2, [r3, #24]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	18d1      	adds	r1, r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	683a      	ldr	r2, [r7, #0]
 800bc64:	6978      	ldr	r0, [r7, #20]
 800bc66:	f000 f8d5 	bl	800be14 <prvInsertTimerInActiveList>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d020      	beq.n	800bcb2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc70:	2300      	movs	r3, #0
 800bc72:	9300      	str	r3, [sp, #0]
 800bc74:	2300      	movs	r3, #0
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	2100      	movs	r1, #0
 800bc7a:	6978      	ldr	r0, [r7, #20]
 800bc7c:	f7ff ff88 	bl	800bb90 <xTimerGenericCommand>
 800bc80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d114      	bne.n	800bcb2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bc88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc8c:	f383 8811 	msr	BASEPRI, r3
 800bc90:	f3bf 8f6f 	isb	sy
 800bc94:	f3bf 8f4f 	dsb	sy
 800bc98:	60fb      	str	r3, [r7, #12]
}
 800bc9a:	bf00      	nop
 800bc9c:	bf00      	nop
 800bc9e:	e7fd      	b.n	800bc9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bca6:	f023 0301 	bic.w	r3, r3, #1
 800bcaa:	b2da      	uxtb	r2, r3
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	6a1b      	ldr	r3, [r3, #32]
 800bcb6:	6978      	ldr	r0, [r7, #20]
 800bcb8:	4798      	blx	r3
}
 800bcba:	bf00      	nop
 800bcbc:	3718      	adds	r7, #24
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	200016c0 	.word	0x200016c0

0800bcc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcd0:	f107 0308 	add.w	r3, r7, #8
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f000 f859 	bl	800bd8c <prvGetNextExpireTime>
 800bcda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	4619      	mov	r1, r3
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f000 f805 	bl	800bcf0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bce6:	f000 f8d7 	bl	800be98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcea:	bf00      	nop
 800bcec:	e7f0      	b.n	800bcd0 <prvTimerTask+0x8>
	...

0800bcf0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bcfa:	f7ff fa17 	bl	800b12c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcfe:	f107 0308 	add.w	r3, r7, #8
 800bd02:	4618      	mov	r0, r3
 800bd04:	f000 f866 	bl	800bdd4 <prvSampleTimeNow>
 800bd08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d130      	bne.n	800bd72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d10a      	bne.n	800bd2c <prvProcessTimerOrBlockTask+0x3c>
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d806      	bhi.n	800bd2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bd1e:	f7ff fa13 	bl	800b148 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bd22:	68f9      	ldr	r1, [r7, #12]
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f7ff ff81 	bl	800bc2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bd2a:	e024      	b.n	800bd76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d008      	beq.n	800bd44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd32:	4b13      	ldr	r3, [pc, #76]	@ (800bd80 <prvProcessTimerOrBlockTask+0x90>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d101      	bne.n	800bd40 <prvProcessTimerOrBlockTask+0x50>
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	e000      	b.n	800bd42 <prvProcessTimerOrBlockTask+0x52>
 800bd40:	2300      	movs	r3, #0
 800bd42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bd44:	4b0f      	ldr	r3, [pc, #60]	@ (800bd84 <prvProcessTimerOrBlockTask+0x94>)
 800bd46:	6818      	ldr	r0, [r3, #0]
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	1ad3      	subs	r3, r2, r3
 800bd4e:	683a      	ldr	r2, [r7, #0]
 800bd50:	4619      	mov	r1, r3
 800bd52:	f7fe fe5f 	bl	800aa14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bd56:	f7ff f9f7 	bl	800b148 <xTaskResumeAll>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10a      	bne.n	800bd76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bd60:	4b09      	ldr	r3, [pc, #36]	@ (800bd88 <prvProcessTimerOrBlockTask+0x98>)
 800bd62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd66:	601a      	str	r2, [r3, #0]
 800bd68:	f3bf 8f4f 	dsb	sy
 800bd6c:	f3bf 8f6f 	isb	sy
}
 800bd70:	e001      	b.n	800bd76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bd72:	f7ff f9e9 	bl	800b148 <xTaskResumeAll>
}
 800bd76:	bf00      	nop
 800bd78:	3710      	adds	r7, #16
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	200016c4 	.word	0x200016c4
 800bd84:	200016c8 	.word	0x200016c8
 800bd88:	e000ed04 	.word	0xe000ed04

0800bd8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bd94:	4b0e      	ldr	r3, [pc, #56]	@ (800bdd0 <prvGetNextExpireTime+0x44>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d101      	bne.n	800bda2 <prvGetNextExpireTime+0x16>
 800bd9e:	2201      	movs	r2, #1
 800bda0:	e000      	b.n	800bda4 <prvGetNextExpireTime+0x18>
 800bda2:	2200      	movs	r2, #0
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d105      	bne.n	800bdbc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bdb0:	4b07      	ldr	r3, [pc, #28]	@ (800bdd0 <prvGetNextExpireTime+0x44>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	60fb      	str	r3, [r7, #12]
 800bdba:	e001      	b.n	800bdc0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3714      	adds	r7, #20
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr
 800bdce:	bf00      	nop
 800bdd0:	200016c0 	.word	0x200016c0

0800bdd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bddc:	f7ff fa52 	bl	800b284 <xTaskGetTickCount>
 800bde0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bde2:	4b0b      	ldr	r3, [pc, #44]	@ (800be10 <prvSampleTimeNow+0x3c>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	68fa      	ldr	r2, [r7, #12]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d205      	bcs.n	800bdf8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bdec:	f000 f93a 	bl	800c064 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	601a      	str	r2, [r3, #0]
 800bdf6:	e002      	b.n	800bdfe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bdfe:	4a04      	ldr	r2, [pc, #16]	@ (800be10 <prvSampleTimeNow+0x3c>)
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800be04:	68fb      	ldr	r3, [r7, #12]
}
 800be06:	4618      	mov	r0, r3
 800be08:	3710      	adds	r7, #16
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	200016d0 	.word	0x200016d0

0800be14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
 800be20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800be22:	2300      	movs	r3, #0
 800be24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	68ba      	ldr	r2, [r7, #8]
 800be2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800be32:	68ba      	ldr	r2, [r7, #8]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	429a      	cmp	r2, r3
 800be38:	d812      	bhi.n	800be60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	1ad2      	subs	r2, r2, r3
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	699b      	ldr	r3, [r3, #24]
 800be44:	429a      	cmp	r2, r3
 800be46:	d302      	bcc.n	800be4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800be48:	2301      	movs	r3, #1
 800be4a:	617b      	str	r3, [r7, #20]
 800be4c:	e01b      	b.n	800be86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800be4e:	4b10      	ldr	r3, [pc, #64]	@ (800be90 <prvInsertTimerInActiveList+0x7c>)
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	3304      	adds	r3, #4
 800be56:	4619      	mov	r1, r3
 800be58:	4610      	mov	r0, r2
 800be5a:	f7fe f8b2 	bl	8009fc2 <vListInsert>
 800be5e:	e012      	b.n	800be86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	429a      	cmp	r2, r3
 800be66:	d206      	bcs.n	800be76 <prvInsertTimerInActiveList+0x62>
 800be68:	68ba      	ldr	r2, [r7, #8]
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d302      	bcc.n	800be76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800be70:	2301      	movs	r3, #1
 800be72:	617b      	str	r3, [r7, #20]
 800be74:	e007      	b.n	800be86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be76:	4b07      	ldr	r3, [pc, #28]	@ (800be94 <prvInsertTimerInActiveList+0x80>)
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	3304      	adds	r3, #4
 800be7e:	4619      	mov	r1, r3
 800be80:	4610      	mov	r0, r2
 800be82:	f7fe f89e 	bl	8009fc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800be86:	697b      	ldr	r3, [r7, #20]
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3718      	adds	r7, #24
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	200016c4 	.word	0x200016c4
 800be94:	200016c0 	.word	0x200016c0

0800be98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b08e      	sub	sp, #56	@ 0x38
 800be9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be9e:	e0ce      	b.n	800c03e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	da19      	bge.n	800beda <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bea6:	1d3b      	adds	r3, r7, #4
 800bea8:	3304      	adds	r3, #4
 800beaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800beac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d10b      	bne.n	800beca <prvProcessReceivedCommands+0x32>
	__asm volatile
 800beb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb6:	f383 8811 	msr	BASEPRI, r3
 800beba:	f3bf 8f6f 	isb	sy
 800bebe:	f3bf 8f4f 	dsb	sy
 800bec2:	61fb      	str	r3, [r7, #28]
}
 800bec4:	bf00      	nop
 800bec6:	bf00      	nop
 800bec8:	e7fd      	b.n	800bec6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800beca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bed0:	6850      	ldr	r0, [r2, #4]
 800bed2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bed4:	6892      	ldr	r2, [r2, #8]
 800bed6:	4611      	mov	r1, r2
 800bed8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f2c0 80ae 	blt.w	800c03e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee8:	695b      	ldr	r3, [r3, #20]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d004      	beq.n	800bef8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800beee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bef0:	3304      	adds	r3, #4
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7fe f89e 	bl	800a034 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bef8:	463b      	mov	r3, r7
 800befa:	4618      	mov	r0, r3
 800befc:	f7ff ff6a 	bl	800bdd4 <prvSampleTimeNow>
 800bf00:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2b09      	cmp	r3, #9
 800bf06:	f200 8097 	bhi.w	800c038 <prvProcessReceivedCommands+0x1a0>
 800bf0a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf10 <prvProcessReceivedCommands+0x78>)
 800bf0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf10:	0800bf39 	.word	0x0800bf39
 800bf14:	0800bf39 	.word	0x0800bf39
 800bf18:	0800bf39 	.word	0x0800bf39
 800bf1c:	0800bfaf 	.word	0x0800bfaf
 800bf20:	0800bfc3 	.word	0x0800bfc3
 800bf24:	0800c00f 	.word	0x0800c00f
 800bf28:	0800bf39 	.word	0x0800bf39
 800bf2c:	0800bf39 	.word	0x0800bf39
 800bf30:	0800bfaf 	.word	0x0800bfaf
 800bf34:	0800bfc3 	.word	0x0800bfc3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf3e:	f043 0301 	orr.w	r3, r3, #1
 800bf42:	b2da      	uxtb	r2, r3
 800bf44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf4a:	68ba      	ldr	r2, [r7, #8]
 800bf4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	18d1      	adds	r1, r2, r3
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf58:	f7ff ff5c 	bl	800be14 <prvInsertTimerInActiveList>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d06c      	beq.n	800c03c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf64:	6a1b      	ldr	r3, [r3, #32]
 800bf66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf70:	f003 0304 	and.w	r3, r3, #4
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d061      	beq.n	800c03c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf7c:	699b      	ldr	r3, [r3, #24]
 800bf7e:	441a      	add	r2, r3
 800bf80:	2300      	movs	r3, #0
 800bf82:	9300      	str	r3, [sp, #0]
 800bf84:	2300      	movs	r3, #0
 800bf86:	2100      	movs	r1, #0
 800bf88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf8a:	f7ff fe01 	bl	800bb90 <xTimerGenericCommand>
 800bf8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bf90:	6a3b      	ldr	r3, [r7, #32]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d152      	bne.n	800c03c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bf96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf9a:	f383 8811 	msr	BASEPRI, r3
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	61bb      	str	r3, [r7, #24]
}
 800bfa8:	bf00      	nop
 800bfaa:	bf00      	nop
 800bfac:	e7fd      	b.n	800bfaa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfb4:	f023 0301 	bic.w	r3, r3, #1
 800bfb8:	b2da      	uxtb	r2, r3
 800bfba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bfc0:	e03d      	b.n	800c03e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bfc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfc8:	f043 0301 	orr.w	r3, r3, #1
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bfd4:	68ba      	ldr	r2, [r7, #8]
 800bfd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfd8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bfda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfdc:	699b      	ldr	r3, [r3, #24]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d10b      	bne.n	800bffa <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bfe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	617b      	str	r3, [r7, #20]
}
 800bff4:	bf00      	nop
 800bff6:	bf00      	nop
 800bff8:	e7fd      	b.n	800bff6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bffc:	699a      	ldr	r2, [r3, #24]
 800bffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c000:	18d1      	adds	r1, r2, r3
 800c002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c006:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c008:	f7ff ff04 	bl	800be14 <prvInsertTimerInActiveList>
					break;
 800c00c:	e017      	b.n	800c03e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c010:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c014:	f003 0302 	and.w	r3, r3, #2
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d103      	bne.n	800c024 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c01c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c01e:	f000 fbeb 	bl	800c7f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c022:	e00c      	b.n	800c03e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c026:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c02a:	f023 0301 	bic.w	r3, r3, #1
 800c02e:	b2da      	uxtb	r2, r3
 800c030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c032:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c036:	e002      	b.n	800c03e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c038:	bf00      	nop
 800c03a:	e000      	b.n	800c03e <prvProcessReceivedCommands+0x1a6>
					break;
 800c03c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c03e:	4b08      	ldr	r3, [pc, #32]	@ (800c060 <prvProcessReceivedCommands+0x1c8>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	1d39      	adds	r1, r7, #4
 800c044:	2200      	movs	r2, #0
 800c046:	4618      	mov	r0, r3
 800c048:	f7fe fac8 	bl	800a5dc <xQueueReceive>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b00      	cmp	r3, #0
 800c050:	f47f af26 	bne.w	800bea0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c054:	bf00      	nop
 800c056:	bf00      	nop
 800c058:	3730      	adds	r7, #48	@ 0x30
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	200016c8 	.word	0x200016c8

0800c064 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b088      	sub	sp, #32
 800c068:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c06a:	e049      	b.n	800c100 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c06c:	4b2e      	ldr	r3, [pc, #184]	@ (800c128 <prvSwitchTimerLists+0xc4>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	68db      	ldr	r3, [r3, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c076:	4b2c      	ldr	r3, [pc, #176]	@ (800c128 <prvSwitchTimerLists+0xc4>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	3304      	adds	r3, #4
 800c084:	4618      	mov	r0, r3
 800c086:	f7fd ffd5 	bl	800a034 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	6a1b      	ldr	r3, [r3, #32]
 800c08e:	68f8      	ldr	r0, [r7, #12]
 800c090:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c098:	f003 0304 	and.w	r3, r3, #4
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d02f      	beq.n	800c100 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	699b      	ldr	r3, [r3, #24]
 800c0a4:	693a      	ldr	r2, [r7, #16]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c0aa:	68ba      	ldr	r2, [r7, #8]
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d90e      	bls.n	800c0d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	68ba      	ldr	r2, [r7, #8]
 800c0b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0be:	4b1a      	ldr	r3, [pc, #104]	@ (800c128 <prvSwitchTimerLists+0xc4>)
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	3304      	adds	r3, #4
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	4610      	mov	r0, r2
 800c0ca:	f7fd ff7a 	bl	8009fc2 <vListInsert>
 800c0ce:	e017      	b.n	800c100 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	693a      	ldr	r2, [r7, #16]
 800c0d8:	2100      	movs	r1, #0
 800c0da:	68f8      	ldr	r0, [r7, #12]
 800c0dc:	f7ff fd58 	bl	800bb90 <xTimerGenericCommand>
 800c0e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d10b      	bne.n	800c100 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ec:	f383 8811 	msr	BASEPRI, r3
 800c0f0:	f3bf 8f6f 	isb	sy
 800c0f4:	f3bf 8f4f 	dsb	sy
 800c0f8:	603b      	str	r3, [r7, #0]
}
 800c0fa:	bf00      	nop
 800c0fc:	bf00      	nop
 800c0fe:	e7fd      	b.n	800c0fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c100:	4b09      	ldr	r3, [pc, #36]	@ (800c128 <prvSwitchTimerLists+0xc4>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1b0      	bne.n	800c06c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c10a:	4b07      	ldr	r3, [pc, #28]	@ (800c128 <prvSwitchTimerLists+0xc4>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c110:	4b06      	ldr	r3, [pc, #24]	@ (800c12c <prvSwitchTimerLists+0xc8>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4a04      	ldr	r2, [pc, #16]	@ (800c128 <prvSwitchTimerLists+0xc4>)
 800c116:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c118:	4a04      	ldr	r2, [pc, #16]	@ (800c12c <prvSwitchTimerLists+0xc8>)
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	6013      	str	r3, [r2, #0]
}
 800c11e:	bf00      	nop
 800c120:	3718      	adds	r7, #24
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	200016c0 	.word	0x200016c0
 800c12c:	200016c4 	.word	0x200016c4

0800c130 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c136:	f000 f96f 	bl	800c418 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c13a:	4b15      	ldr	r3, [pc, #84]	@ (800c190 <prvCheckForValidListAndQueue+0x60>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d120      	bne.n	800c184 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c142:	4814      	ldr	r0, [pc, #80]	@ (800c194 <prvCheckForValidListAndQueue+0x64>)
 800c144:	f7fd feec 	bl	8009f20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c148:	4813      	ldr	r0, [pc, #76]	@ (800c198 <prvCheckForValidListAndQueue+0x68>)
 800c14a:	f7fd fee9 	bl	8009f20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c14e:	4b13      	ldr	r3, [pc, #76]	@ (800c19c <prvCheckForValidListAndQueue+0x6c>)
 800c150:	4a10      	ldr	r2, [pc, #64]	@ (800c194 <prvCheckForValidListAndQueue+0x64>)
 800c152:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c154:	4b12      	ldr	r3, [pc, #72]	@ (800c1a0 <prvCheckForValidListAndQueue+0x70>)
 800c156:	4a10      	ldr	r2, [pc, #64]	@ (800c198 <prvCheckForValidListAndQueue+0x68>)
 800c158:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c15a:	2300      	movs	r3, #0
 800c15c:	9300      	str	r3, [sp, #0]
 800c15e:	4b11      	ldr	r3, [pc, #68]	@ (800c1a4 <prvCheckForValidListAndQueue+0x74>)
 800c160:	4a11      	ldr	r2, [pc, #68]	@ (800c1a8 <prvCheckForValidListAndQueue+0x78>)
 800c162:	2110      	movs	r1, #16
 800c164:	200a      	movs	r0, #10
 800c166:	f7fd fff9 	bl	800a15c <xQueueGenericCreateStatic>
 800c16a:	4603      	mov	r3, r0
 800c16c:	4a08      	ldr	r2, [pc, #32]	@ (800c190 <prvCheckForValidListAndQueue+0x60>)
 800c16e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c170:	4b07      	ldr	r3, [pc, #28]	@ (800c190 <prvCheckForValidListAndQueue+0x60>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d005      	beq.n	800c184 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c178:	4b05      	ldr	r3, [pc, #20]	@ (800c190 <prvCheckForValidListAndQueue+0x60>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	490b      	ldr	r1, [pc, #44]	@ (800c1ac <prvCheckForValidListAndQueue+0x7c>)
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fe fc1e 	bl	800a9c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c184:	f000 f97a 	bl	800c47c <vPortExitCritical>
}
 800c188:	bf00      	nop
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	200016c8 	.word	0x200016c8
 800c194:	20001698 	.word	0x20001698
 800c198:	200016ac 	.word	0x200016ac
 800c19c:	200016c0 	.word	0x200016c0
 800c1a0:	200016c4 	.word	0x200016c4
 800c1a4:	20001774 	.word	0x20001774
 800c1a8:	200016d4 	.word	0x200016d4
 800c1ac:	0800ccb0 	.word	0x0800ccb0

0800c1b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b085      	sub	sp, #20
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	3b04      	subs	r3, #4
 800c1c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c1c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	3b04      	subs	r3, #4
 800c1ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	f023 0201 	bic.w	r2, r3, #1
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	3b04      	subs	r3, #4
 800c1de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1e0:	4a0c      	ldr	r2, [pc, #48]	@ (800c214 <pxPortInitialiseStack+0x64>)
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	3b14      	subs	r3, #20
 800c1ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	3b04      	subs	r3, #4
 800c1f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f06f 0202 	mvn.w	r2, #2
 800c1fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	3b20      	subs	r3, #32
 800c204:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c206:	68fb      	ldr	r3, [r7, #12]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3714      	adds	r7, #20
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr
 800c214:	0800c219 	.word	0x0800c219

0800c218 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c218:	b480      	push	{r7}
 800c21a:	b085      	sub	sp, #20
 800c21c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c21e:	2300      	movs	r3, #0
 800c220:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c222:	4b13      	ldr	r3, [pc, #76]	@ (800c270 <prvTaskExitError+0x58>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c22a:	d00b      	beq.n	800c244 <prvTaskExitError+0x2c>
	__asm volatile
 800c22c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c230:	f383 8811 	msr	BASEPRI, r3
 800c234:	f3bf 8f6f 	isb	sy
 800c238:	f3bf 8f4f 	dsb	sy
 800c23c:	60fb      	str	r3, [r7, #12]
}
 800c23e:	bf00      	nop
 800c240:	bf00      	nop
 800c242:	e7fd      	b.n	800c240 <prvTaskExitError+0x28>
	__asm volatile
 800c244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c248:	f383 8811 	msr	BASEPRI, r3
 800c24c:	f3bf 8f6f 	isb	sy
 800c250:	f3bf 8f4f 	dsb	sy
 800c254:	60bb      	str	r3, [r7, #8]
}
 800c256:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c258:	bf00      	nop
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d0fc      	beq.n	800c25a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c260:	bf00      	nop
 800c262:	bf00      	nop
 800c264:	3714      	adds	r7, #20
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	20000200 	.word	0x20000200
	...

0800c280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c280:	4b07      	ldr	r3, [pc, #28]	@ (800c2a0 <pxCurrentTCBConst2>)
 800c282:	6819      	ldr	r1, [r3, #0]
 800c284:	6808      	ldr	r0, [r1, #0]
 800c286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28a:	f380 8809 	msr	PSP, r0
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f04f 0000 	mov.w	r0, #0
 800c296:	f380 8811 	msr	BASEPRI, r0
 800c29a:	4770      	bx	lr
 800c29c:	f3af 8000 	nop.w

0800c2a0 <pxCurrentTCBConst2>:
 800c2a0:	20001198 	.word	0x20001198
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c2a4:	bf00      	nop
 800c2a6:	bf00      	nop

0800c2a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c2a8:	4808      	ldr	r0, [pc, #32]	@ (800c2cc <prvPortStartFirstTask+0x24>)
 800c2aa:	6800      	ldr	r0, [r0, #0]
 800c2ac:	6800      	ldr	r0, [r0, #0]
 800c2ae:	f380 8808 	msr	MSP, r0
 800c2b2:	f04f 0000 	mov.w	r0, #0
 800c2b6:	f380 8814 	msr	CONTROL, r0
 800c2ba:	b662      	cpsie	i
 800c2bc:	b661      	cpsie	f
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	df00      	svc	0
 800c2c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c2ca:	bf00      	nop
 800c2cc:	e000ed08 	.word	0xe000ed08

0800c2d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b086      	sub	sp, #24
 800c2d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c2d6:	4b47      	ldr	r3, [pc, #284]	@ (800c3f4 <xPortStartScheduler+0x124>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a47      	ldr	r2, [pc, #284]	@ (800c3f8 <xPortStartScheduler+0x128>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d10b      	bne.n	800c2f8 <xPortStartScheduler+0x28>
	__asm volatile
 800c2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2e4:	f383 8811 	msr	BASEPRI, r3
 800c2e8:	f3bf 8f6f 	isb	sy
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	60fb      	str	r3, [r7, #12]
}
 800c2f2:	bf00      	nop
 800c2f4:	bf00      	nop
 800c2f6:	e7fd      	b.n	800c2f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c2f8:	4b3e      	ldr	r3, [pc, #248]	@ (800c3f4 <xPortStartScheduler+0x124>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a3f      	ldr	r2, [pc, #252]	@ (800c3fc <xPortStartScheduler+0x12c>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d10b      	bne.n	800c31a <xPortStartScheduler+0x4a>
	__asm volatile
 800c302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	613b      	str	r3, [r7, #16]
}
 800c314:	bf00      	nop
 800c316:	bf00      	nop
 800c318:	e7fd      	b.n	800c316 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c31a:	4b39      	ldr	r3, [pc, #228]	@ (800c400 <xPortStartScheduler+0x130>)
 800c31c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	b2db      	uxtb	r3, r3
 800c324:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	22ff      	movs	r2, #255	@ 0xff
 800c32a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	b2db      	uxtb	r3, r3
 800c332:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c334:	78fb      	ldrb	r3, [r7, #3]
 800c336:	b2db      	uxtb	r3, r3
 800c338:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c33c:	b2da      	uxtb	r2, r3
 800c33e:	4b31      	ldr	r3, [pc, #196]	@ (800c404 <xPortStartScheduler+0x134>)
 800c340:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c342:	4b31      	ldr	r3, [pc, #196]	@ (800c408 <xPortStartScheduler+0x138>)
 800c344:	2207      	movs	r2, #7
 800c346:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c348:	e009      	b.n	800c35e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c34a:	4b2f      	ldr	r3, [pc, #188]	@ (800c408 <xPortStartScheduler+0x138>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	3b01      	subs	r3, #1
 800c350:	4a2d      	ldr	r2, [pc, #180]	@ (800c408 <xPortStartScheduler+0x138>)
 800c352:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c354:	78fb      	ldrb	r3, [r7, #3]
 800c356:	b2db      	uxtb	r3, r3
 800c358:	005b      	lsls	r3, r3, #1
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c35e:	78fb      	ldrb	r3, [r7, #3]
 800c360:	b2db      	uxtb	r3, r3
 800c362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c366:	2b80      	cmp	r3, #128	@ 0x80
 800c368:	d0ef      	beq.n	800c34a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c36a:	4b27      	ldr	r3, [pc, #156]	@ (800c408 <xPortStartScheduler+0x138>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f1c3 0307 	rsb	r3, r3, #7
 800c372:	2b04      	cmp	r3, #4
 800c374:	d00b      	beq.n	800c38e <xPortStartScheduler+0xbe>
	__asm volatile
 800c376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37a:	f383 8811 	msr	BASEPRI, r3
 800c37e:	f3bf 8f6f 	isb	sy
 800c382:	f3bf 8f4f 	dsb	sy
 800c386:	60bb      	str	r3, [r7, #8]
}
 800c388:	bf00      	nop
 800c38a:	bf00      	nop
 800c38c:	e7fd      	b.n	800c38a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c38e:	4b1e      	ldr	r3, [pc, #120]	@ (800c408 <xPortStartScheduler+0x138>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	021b      	lsls	r3, r3, #8
 800c394:	4a1c      	ldr	r2, [pc, #112]	@ (800c408 <xPortStartScheduler+0x138>)
 800c396:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c398:	4b1b      	ldr	r3, [pc, #108]	@ (800c408 <xPortStartScheduler+0x138>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c3a0:	4a19      	ldr	r2, [pc, #100]	@ (800c408 <xPortStartScheduler+0x138>)
 800c3a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	b2da      	uxtb	r2, r3
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c3ac:	4b17      	ldr	r3, [pc, #92]	@ (800c40c <xPortStartScheduler+0x13c>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a16      	ldr	r2, [pc, #88]	@ (800c40c <xPortStartScheduler+0x13c>)
 800c3b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c3b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c3b8:	4b14      	ldr	r3, [pc, #80]	@ (800c40c <xPortStartScheduler+0x13c>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a13      	ldr	r2, [pc, #76]	@ (800c40c <xPortStartScheduler+0x13c>)
 800c3be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c3c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c3c4:	f000 f8da 	bl	800c57c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c3c8:	4b11      	ldr	r3, [pc, #68]	@ (800c410 <xPortStartScheduler+0x140>)
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c3ce:	f000 f8f9 	bl	800c5c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c3d2:	4b10      	ldr	r3, [pc, #64]	@ (800c414 <xPortStartScheduler+0x144>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a0f      	ldr	r2, [pc, #60]	@ (800c414 <xPortStartScheduler+0x144>)
 800c3d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c3dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c3de:	f7ff ff63 	bl	800c2a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c3e2:	f7ff f82b 	bl	800b43c <vTaskSwitchContext>
	prvTaskExitError();
 800c3e6:	f7ff ff17 	bl	800c218 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c3ea:	2300      	movs	r3, #0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3718      	adds	r7, #24
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	e000ed00 	.word	0xe000ed00
 800c3f8:	410fc271 	.word	0x410fc271
 800c3fc:	410fc270 	.word	0x410fc270
 800c400:	e000e400 	.word	0xe000e400
 800c404:	200017c4 	.word	0x200017c4
 800c408:	200017c8 	.word	0x200017c8
 800c40c:	e000ed20 	.word	0xe000ed20
 800c410:	20000200 	.word	0x20000200
 800c414:	e000ef34 	.word	0xe000ef34

0800c418 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
	__asm volatile
 800c41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c422:	f383 8811 	msr	BASEPRI, r3
 800c426:	f3bf 8f6f 	isb	sy
 800c42a:	f3bf 8f4f 	dsb	sy
 800c42e:	607b      	str	r3, [r7, #4]
}
 800c430:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c432:	4b10      	ldr	r3, [pc, #64]	@ (800c474 <vPortEnterCritical+0x5c>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	3301      	adds	r3, #1
 800c438:	4a0e      	ldr	r2, [pc, #56]	@ (800c474 <vPortEnterCritical+0x5c>)
 800c43a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c43c:	4b0d      	ldr	r3, [pc, #52]	@ (800c474 <vPortEnterCritical+0x5c>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2b01      	cmp	r3, #1
 800c442:	d110      	bne.n	800c466 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c444:	4b0c      	ldr	r3, [pc, #48]	@ (800c478 <vPortEnterCritical+0x60>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d00b      	beq.n	800c466 <vPortEnterCritical+0x4e>
	__asm volatile
 800c44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	603b      	str	r3, [r7, #0]
}
 800c460:	bf00      	nop
 800c462:	bf00      	nop
 800c464:	e7fd      	b.n	800c462 <vPortEnterCritical+0x4a>
	}
}
 800c466:	bf00      	nop
 800c468:	370c      	adds	r7, #12
 800c46a:	46bd      	mov	sp, r7
 800c46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c470:	4770      	bx	lr
 800c472:	bf00      	nop
 800c474:	20000200 	.word	0x20000200
 800c478:	e000ed04 	.word	0xe000ed04

0800c47c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c482:	4b12      	ldr	r3, [pc, #72]	@ (800c4cc <vPortExitCritical+0x50>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d10b      	bne.n	800c4a2 <vPortExitCritical+0x26>
	__asm volatile
 800c48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c48e:	f383 8811 	msr	BASEPRI, r3
 800c492:	f3bf 8f6f 	isb	sy
 800c496:	f3bf 8f4f 	dsb	sy
 800c49a:	607b      	str	r3, [r7, #4]
}
 800c49c:	bf00      	nop
 800c49e:	bf00      	nop
 800c4a0:	e7fd      	b.n	800c49e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c4a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c4cc <vPortExitCritical+0x50>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	4a08      	ldr	r2, [pc, #32]	@ (800c4cc <vPortExitCritical+0x50>)
 800c4aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c4ac:	4b07      	ldr	r3, [pc, #28]	@ (800c4cc <vPortExitCritical+0x50>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d105      	bne.n	800c4c0 <vPortExitCritical+0x44>
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	f383 8811 	msr	BASEPRI, r3
}
 800c4be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c4c0:	bf00      	nop
 800c4c2:	370c      	adds	r7, #12
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr
 800c4cc:	20000200 	.word	0x20000200

0800c4d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c4d0:	f3ef 8009 	mrs	r0, PSP
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	4b15      	ldr	r3, [pc, #84]	@ (800c530 <pxCurrentTCBConst>)
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	f01e 0f10 	tst.w	lr, #16
 800c4e0:	bf08      	it	eq
 800c4e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c4e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ea:	6010      	str	r0, [r2, #0]
 800c4ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c4f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c4f4:	f380 8811 	msr	BASEPRI, r0
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f7fe ff9c 	bl	800b43c <vTaskSwitchContext>
 800c504:	f04f 0000 	mov.w	r0, #0
 800c508:	f380 8811 	msr	BASEPRI, r0
 800c50c:	bc09      	pop	{r0, r3}
 800c50e:	6819      	ldr	r1, [r3, #0]
 800c510:	6808      	ldr	r0, [r1, #0]
 800c512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c516:	f01e 0f10 	tst.w	lr, #16
 800c51a:	bf08      	it	eq
 800c51c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c520:	f380 8809 	msr	PSP, r0
 800c524:	f3bf 8f6f 	isb	sy
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	f3af 8000 	nop.w

0800c530 <pxCurrentTCBConst>:
 800c530:	20001198 	.word	0x20001198
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c534:	bf00      	nop
 800c536:	bf00      	nop

0800c538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
	__asm volatile
 800c53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c542:	f383 8811 	msr	BASEPRI, r3
 800c546:	f3bf 8f6f 	isb	sy
 800c54a:	f3bf 8f4f 	dsb	sy
 800c54e:	607b      	str	r3, [r7, #4]
}
 800c550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c552:	f7fe feb9 	bl	800b2c8 <xTaskIncrementTick>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d003      	beq.n	800c564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c55c:	4b06      	ldr	r3, [pc, #24]	@ (800c578 <xPortSysTickHandler+0x40>)
 800c55e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c562:	601a      	str	r2, [r3, #0]
 800c564:	2300      	movs	r3, #0
 800c566:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	f383 8811 	msr	BASEPRI, r3
}
 800c56e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c570:	bf00      	nop
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	e000ed04 	.word	0xe000ed04

0800c57c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c57c:	b480      	push	{r7}
 800c57e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c580:	4b0b      	ldr	r3, [pc, #44]	@ (800c5b0 <vPortSetupTimerInterrupt+0x34>)
 800c582:	2200      	movs	r2, #0
 800c584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c586:	4b0b      	ldr	r3, [pc, #44]	@ (800c5b4 <vPortSetupTimerInterrupt+0x38>)
 800c588:	2200      	movs	r2, #0
 800c58a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c58c:	4b0a      	ldr	r3, [pc, #40]	@ (800c5b8 <vPortSetupTimerInterrupt+0x3c>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a0a      	ldr	r2, [pc, #40]	@ (800c5bc <vPortSetupTimerInterrupt+0x40>)
 800c592:	fba2 2303 	umull	r2, r3, r2, r3
 800c596:	099b      	lsrs	r3, r3, #6
 800c598:	4a09      	ldr	r2, [pc, #36]	@ (800c5c0 <vPortSetupTimerInterrupt+0x44>)
 800c59a:	3b01      	subs	r3, #1
 800c59c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c59e:	4b04      	ldr	r3, [pc, #16]	@ (800c5b0 <vPortSetupTimerInterrupt+0x34>)
 800c5a0:	2207      	movs	r2, #7
 800c5a2:	601a      	str	r2, [r3, #0]
}
 800c5a4:	bf00      	nop
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	e000e010 	.word	0xe000e010
 800c5b4:	e000e018 	.word	0xe000e018
 800c5b8:	20000000 	.word	0x20000000
 800c5bc:	10624dd3 	.word	0x10624dd3
 800c5c0:	e000e014 	.word	0xe000e014

0800c5c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c5c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c5d4 <vPortEnableVFP+0x10>
 800c5c8:	6801      	ldr	r1, [r0, #0]
 800c5ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c5ce:	6001      	str	r1, [r0, #0]
 800c5d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c5d2:	bf00      	nop
 800c5d4:	e000ed88 	.word	0xe000ed88

0800c5d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c5de:	f3ef 8305 	mrs	r3, IPSR
 800c5e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2b0f      	cmp	r3, #15
 800c5e8:	d915      	bls.n	800c616 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c5ea:	4a18      	ldr	r2, [pc, #96]	@ (800c64c <vPortValidateInterruptPriority+0x74>)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c5f4:	4b16      	ldr	r3, [pc, #88]	@ (800c650 <vPortValidateInterruptPriority+0x78>)
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	7afa      	ldrb	r2, [r7, #11]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d20b      	bcs.n	800c616 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c602:	f383 8811 	msr	BASEPRI, r3
 800c606:	f3bf 8f6f 	isb	sy
 800c60a:	f3bf 8f4f 	dsb	sy
 800c60e:	607b      	str	r3, [r7, #4]
}
 800c610:	bf00      	nop
 800c612:	bf00      	nop
 800c614:	e7fd      	b.n	800c612 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c616:	4b0f      	ldr	r3, [pc, #60]	@ (800c654 <vPortValidateInterruptPriority+0x7c>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c61e:	4b0e      	ldr	r3, [pc, #56]	@ (800c658 <vPortValidateInterruptPriority+0x80>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	429a      	cmp	r2, r3
 800c624:	d90b      	bls.n	800c63e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c62a:	f383 8811 	msr	BASEPRI, r3
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	f3bf 8f4f 	dsb	sy
 800c636:	603b      	str	r3, [r7, #0]
}
 800c638:	bf00      	nop
 800c63a:	bf00      	nop
 800c63c:	e7fd      	b.n	800c63a <vPortValidateInterruptPriority+0x62>
	}
 800c63e:	bf00      	nop
 800c640:	3714      	adds	r7, #20
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop
 800c64c:	e000e3f0 	.word	0xe000e3f0
 800c650:	200017c4 	.word	0x200017c4
 800c654:	e000ed0c 	.word	0xe000ed0c
 800c658:	200017c8 	.word	0x200017c8

0800c65c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b08a      	sub	sp, #40	@ 0x28
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c664:	2300      	movs	r3, #0
 800c666:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c668:	f7fe fd60 	bl	800b12c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c66c:	4b5c      	ldr	r3, [pc, #368]	@ (800c7e0 <pvPortMalloc+0x184>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d101      	bne.n	800c678 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c674:	f000 f924 	bl	800c8c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c678:	4b5a      	ldr	r3, [pc, #360]	@ (800c7e4 <pvPortMalloc+0x188>)
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	4013      	ands	r3, r2
 800c680:	2b00      	cmp	r3, #0
 800c682:	f040 8095 	bne.w	800c7b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d01e      	beq.n	800c6ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c68c:	2208      	movs	r2, #8
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4413      	add	r3, r2
 800c692:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f003 0307 	and.w	r3, r3, #7
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d015      	beq.n	800c6ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f023 0307 	bic.w	r3, r3, #7
 800c6a4:	3308      	adds	r3, #8
 800c6a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f003 0307 	and.w	r3, r3, #7
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d00b      	beq.n	800c6ca <pvPortMalloc+0x6e>
	__asm volatile
 800c6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b6:	f383 8811 	msr	BASEPRI, r3
 800c6ba:	f3bf 8f6f 	isb	sy
 800c6be:	f3bf 8f4f 	dsb	sy
 800c6c2:	617b      	str	r3, [r7, #20]
}
 800c6c4:	bf00      	nop
 800c6c6:	bf00      	nop
 800c6c8:	e7fd      	b.n	800c6c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d06f      	beq.n	800c7b0 <pvPortMalloc+0x154>
 800c6d0:	4b45      	ldr	r3, [pc, #276]	@ (800c7e8 <pvPortMalloc+0x18c>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d86a      	bhi.n	800c7b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c6da:	4b44      	ldr	r3, [pc, #272]	@ (800c7ec <pvPortMalloc+0x190>)
 800c6dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c6de:	4b43      	ldr	r3, [pc, #268]	@ (800c7ec <pvPortMalloc+0x190>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6e4:	e004      	b.n	800c6f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d903      	bls.n	800c702 <pvPortMalloc+0xa6>
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1f1      	bne.n	800c6e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c702:	4b37      	ldr	r3, [pc, #220]	@ (800c7e0 <pvPortMalloc+0x184>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c708:	429a      	cmp	r2, r3
 800c70a:	d051      	beq.n	800c7b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c70c:	6a3b      	ldr	r3, [r7, #32]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2208      	movs	r2, #8
 800c712:	4413      	add	r3, r2
 800c714:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	6a3b      	ldr	r3, [r7, #32]
 800c71c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c720:	685a      	ldr	r2, [r3, #4]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	1ad2      	subs	r2, r2, r3
 800c726:	2308      	movs	r3, #8
 800c728:	005b      	lsls	r3, r3, #1
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d920      	bls.n	800c770 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c72e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4413      	add	r3, r2
 800c734:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	f003 0307 	and.w	r3, r3, #7
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d00b      	beq.n	800c758 <pvPortMalloc+0xfc>
	__asm volatile
 800c740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c744:	f383 8811 	msr	BASEPRI, r3
 800c748:	f3bf 8f6f 	isb	sy
 800c74c:	f3bf 8f4f 	dsb	sy
 800c750:	613b      	str	r3, [r7, #16]
}
 800c752:	bf00      	nop
 800c754:	bf00      	nop
 800c756:	e7fd      	b.n	800c754 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	1ad2      	subs	r2, r2, r3
 800c760:	69bb      	ldr	r3, [r7, #24]
 800c762:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c76a:	69b8      	ldr	r0, [r7, #24]
 800c76c:	f000 f90a 	bl	800c984 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c770:	4b1d      	ldr	r3, [pc, #116]	@ (800c7e8 <pvPortMalloc+0x18c>)
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	4a1b      	ldr	r2, [pc, #108]	@ (800c7e8 <pvPortMalloc+0x18c>)
 800c77c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c77e:	4b1a      	ldr	r3, [pc, #104]	@ (800c7e8 <pvPortMalloc+0x18c>)
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	4b1b      	ldr	r3, [pc, #108]	@ (800c7f0 <pvPortMalloc+0x194>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	429a      	cmp	r2, r3
 800c788:	d203      	bcs.n	800c792 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c78a:	4b17      	ldr	r3, [pc, #92]	@ (800c7e8 <pvPortMalloc+0x18c>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a18      	ldr	r2, [pc, #96]	@ (800c7f0 <pvPortMalloc+0x194>)
 800c790:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c794:	685a      	ldr	r2, [r3, #4]
 800c796:	4b13      	ldr	r3, [pc, #76]	@ (800c7e4 <pvPortMalloc+0x188>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	431a      	orrs	r2, r3
 800c79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c7a6:	4b13      	ldr	r3, [pc, #76]	@ (800c7f4 <pvPortMalloc+0x198>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	4a11      	ldr	r2, [pc, #68]	@ (800c7f4 <pvPortMalloc+0x198>)
 800c7ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c7b0:	f7fe fcca 	bl	800b148 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	f003 0307 	and.w	r3, r3, #7
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00b      	beq.n	800c7d6 <pvPortMalloc+0x17a>
	__asm volatile
 800c7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c2:	f383 8811 	msr	BASEPRI, r3
 800c7c6:	f3bf 8f6f 	isb	sy
 800c7ca:	f3bf 8f4f 	dsb	sy
 800c7ce:	60fb      	str	r3, [r7, #12]
}
 800c7d0:	bf00      	nop
 800c7d2:	bf00      	nop
 800c7d4:	e7fd      	b.n	800c7d2 <pvPortMalloc+0x176>
	return pvReturn;
 800c7d6:	69fb      	ldr	r3, [r7, #28]
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3728      	adds	r7, #40	@ 0x28
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	200023d4 	.word	0x200023d4
 800c7e4:	200023e8 	.word	0x200023e8
 800c7e8:	200023d8 	.word	0x200023d8
 800c7ec:	200023cc 	.word	0x200023cc
 800c7f0:	200023dc 	.word	0x200023dc
 800c7f4:	200023e0 	.word	0x200023e0

0800c7f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b086      	sub	sp, #24
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d04f      	beq.n	800c8aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c80a:	2308      	movs	r3, #8
 800c80c:	425b      	negs	r3, r3
 800c80e:	697a      	ldr	r2, [r7, #20]
 800c810:	4413      	add	r3, r2
 800c812:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	685a      	ldr	r2, [r3, #4]
 800c81c:	4b25      	ldr	r3, [pc, #148]	@ (800c8b4 <vPortFree+0xbc>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4013      	ands	r3, r2
 800c822:	2b00      	cmp	r3, #0
 800c824:	d10b      	bne.n	800c83e <vPortFree+0x46>
	__asm volatile
 800c826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c82a:	f383 8811 	msr	BASEPRI, r3
 800c82e:	f3bf 8f6f 	isb	sy
 800c832:	f3bf 8f4f 	dsb	sy
 800c836:	60fb      	str	r3, [r7, #12]
}
 800c838:	bf00      	nop
 800c83a:	bf00      	nop
 800c83c:	e7fd      	b.n	800c83a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00b      	beq.n	800c85e <vPortFree+0x66>
	__asm volatile
 800c846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c84a:	f383 8811 	msr	BASEPRI, r3
 800c84e:	f3bf 8f6f 	isb	sy
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	60bb      	str	r3, [r7, #8]
}
 800c858:	bf00      	nop
 800c85a:	bf00      	nop
 800c85c:	e7fd      	b.n	800c85a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	685a      	ldr	r2, [r3, #4]
 800c862:	4b14      	ldr	r3, [pc, #80]	@ (800c8b4 <vPortFree+0xbc>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4013      	ands	r3, r2
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d01e      	beq.n	800c8aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d11a      	bne.n	800c8aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	685a      	ldr	r2, [r3, #4]
 800c878:	4b0e      	ldr	r3, [pc, #56]	@ (800c8b4 <vPortFree+0xbc>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	43db      	mvns	r3, r3
 800c87e:	401a      	ands	r2, r3
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c884:	f7fe fc52 	bl	800b12c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	685a      	ldr	r2, [r3, #4]
 800c88c:	4b0a      	ldr	r3, [pc, #40]	@ (800c8b8 <vPortFree+0xc0>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4413      	add	r3, r2
 800c892:	4a09      	ldr	r2, [pc, #36]	@ (800c8b8 <vPortFree+0xc0>)
 800c894:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c896:	6938      	ldr	r0, [r7, #16]
 800c898:	f000 f874 	bl	800c984 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c89c:	4b07      	ldr	r3, [pc, #28]	@ (800c8bc <vPortFree+0xc4>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	4a06      	ldr	r2, [pc, #24]	@ (800c8bc <vPortFree+0xc4>)
 800c8a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c8a6:	f7fe fc4f 	bl	800b148 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c8aa:	bf00      	nop
 800c8ac:	3718      	adds	r7, #24
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	200023e8 	.word	0x200023e8
 800c8b8:	200023d8 	.word	0x200023d8
 800c8bc:	200023e4 	.word	0x200023e4

0800c8c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b085      	sub	sp, #20
 800c8c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c8c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800c8ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c8cc:	4b27      	ldr	r3, [pc, #156]	@ (800c96c <prvHeapInit+0xac>)
 800c8ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f003 0307 	and.w	r3, r3, #7
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d00c      	beq.n	800c8f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	3307      	adds	r3, #7
 800c8de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f023 0307 	bic.w	r3, r3, #7
 800c8e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c8e8:	68ba      	ldr	r2, [r7, #8]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	1ad3      	subs	r3, r2, r3
 800c8ee:	4a1f      	ldr	r2, [pc, #124]	@ (800c96c <prvHeapInit+0xac>)
 800c8f0:	4413      	add	r3, r2
 800c8f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c8f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c970 <prvHeapInit+0xb0>)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c8fe:	4b1c      	ldr	r3, [pc, #112]	@ (800c970 <prvHeapInit+0xb0>)
 800c900:	2200      	movs	r2, #0
 800c902:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	68ba      	ldr	r2, [r7, #8]
 800c908:	4413      	add	r3, r2
 800c90a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c90c:	2208      	movs	r2, #8
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	1a9b      	subs	r3, r3, r2
 800c912:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f023 0307 	bic.w	r3, r3, #7
 800c91a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	4a15      	ldr	r2, [pc, #84]	@ (800c974 <prvHeapInit+0xb4>)
 800c920:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c922:	4b14      	ldr	r3, [pc, #80]	@ (800c974 <prvHeapInit+0xb4>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2200      	movs	r2, #0
 800c928:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c92a:	4b12      	ldr	r3, [pc, #72]	@ (800c974 <prvHeapInit+0xb4>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	2200      	movs	r2, #0
 800c930:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	1ad2      	subs	r2, r2, r3
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c940:	4b0c      	ldr	r3, [pc, #48]	@ (800c974 <prvHeapInit+0xb4>)
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	4a0a      	ldr	r2, [pc, #40]	@ (800c978 <prvHeapInit+0xb8>)
 800c94e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	4a09      	ldr	r2, [pc, #36]	@ (800c97c <prvHeapInit+0xbc>)
 800c956:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c958:	4b09      	ldr	r3, [pc, #36]	@ (800c980 <prvHeapInit+0xc0>)
 800c95a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c95e:	601a      	str	r2, [r3, #0]
}
 800c960:	bf00      	nop
 800c962:	3714      	adds	r7, #20
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr
 800c96c:	200017cc 	.word	0x200017cc
 800c970:	200023cc 	.word	0x200023cc
 800c974:	200023d4 	.word	0x200023d4
 800c978:	200023dc 	.word	0x200023dc
 800c97c:	200023d8 	.word	0x200023d8
 800c980:	200023e8 	.word	0x200023e8

0800c984 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c984:	b480      	push	{r7}
 800c986:	b085      	sub	sp, #20
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c98c:	4b28      	ldr	r3, [pc, #160]	@ (800ca30 <prvInsertBlockIntoFreeList+0xac>)
 800c98e:	60fb      	str	r3, [r7, #12]
 800c990:	e002      	b.n	800c998 <prvInsertBlockIntoFreeList+0x14>
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	60fb      	str	r3, [r7, #12]
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d8f7      	bhi.n	800c992 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	68ba      	ldr	r2, [r7, #8]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d108      	bne.n	800c9c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	685a      	ldr	r2, [r3, #4]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	441a      	add	r2, r3
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	441a      	add	r2, r3
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d118      	bne.n	800ca0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	4b15      	ldr	r3, [pc, #84]	@ (800ca34 <prvInsertBlockIntoFreeList+0xb0>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d00d      	beq.n	800ca02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	685a      	ldr	r2, [r3, #4]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	441a      	add	r2, r3
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	601a      	str	r2, [r3, #0]
 800ca00:	e008      	b.n	800ca14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca02:	4b0c      	ldr	r3, [pc, #48]	@ (800ca34 <prvInsertBlockIntoFreeList+0xb0>)
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	601a      	str	r2, [r3, #0]
 800ca0a:	e003      	b.n	800ca14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d002      	beq.n	800ca22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca22:	bf00      	nop
 800ca24:	3714      	adds	r7, #20
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr
 800ca2e:	bf00      	nop
 800ca30:	200023cc 	.word	0x200023cc
 800ca34:	200023d4 	.word	0x200023d4

0800ca38 <memset>:
 800ca38:	4402      	add	r2, r0
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d100      	bne.n	800ca42 <memset+0xa>
 800ca40:	4770      	bx	lr
 800ca42:	f803 1b01 	strb.w	r1, [r3], #1
 800ca46:	e7f9      	b.n	800ca3c <memset+0x4>

0800ca48 <_reclaim_reent>:
 800ca48:	4b2d      	ldr	r3, [pc, #180]	@ (800cb00 <_reclaim_reent+0xb8>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4283      	cmp	r3, r0
 800ca4e:	b570      	push	{r4, r5, r6, lr}
 800ca50:	4604      	mov	r4, r0
 800ca52:	d053      	beq.n	800cafc <_reclaim_reent+0xb4>
 800ca54:	69c3      	ldr	r3, [r0, #28]
 800ca56:	b31b      	cbz	r3, 800caa0 <_reclaim_reent+0x58>
 800ca58:	68db      	ldr	r3, [r3, #12]
 800ca5a:	b163      	cbz	r3, 800ca76 <_reclaim_reent+0x2e>
 800ca5c:	2500      	movs	r5, #0
 800ca5e:	69e3      	ldr	r3, [r4, #28]
 800ca60:	68db      	ldr	r3, [r3, #12]
 800ca62:	5959      	ldr	r1, [r3, r5]
 800ca64:	b9b1      	cbnz	r1, 800ca94 <_reclaim_reent+0x4c>
 800ca66:	3504      	adds	r5, #4
 800ca68:	2d80      	cmp	r5, #128	@ 0x80
 800ca6a:	d1f8      	bne.n	800ca5e <_reclaim_reent+0x16>
 800ca6c:	69e3      	ldr	r3, [r4, #28]
 800ca6e:	4620      	mov	r0, r4
 800ca70:	68d9      	ldr	r1, [r3, #12]
 800ca72:	f000 f881 	bl	800cb78 <_free_r>
 800ca76:	69e3      	ldr	r3, [r4, #28]
 800ca78:	6819      	ldr	r1, [r3, #0]
 800ca7a:	b111      	cbz	r1, 800ca82 <_reclaim_reent+0x3a>
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f000 f87b 	bl	800cb78 <_free_r>
 800ca82:	69e3      	ldr	r3, [r4, #28]
 800ca84:	689d      	ldr	r5, [r3, #8]
 800ca86:	b15d      	cbz	r5, 800caa0 <_reclaim_reent+0x58>
 800ca88:	4629      	mov	r1, r5
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	682d      	ldr	r5, [r5, #0]
 800ca8e:	f000 f873 	bl	800cb78 <_free_r>
 800ca92:	e7f8      	b.n	800ca86 <_reclaim_reent+0x3e>
 800ca94:	680e      	ldr	r6, [r1, #0]
 800ca96:	4620      	mov	r0, r4
 800ca98:	f000 f86e 	bl	800cb78 <_free_r>
 800ca9c:	4631      	mov	r1, r6
 800ca9e:	e7e1      	b.n	800ca64 <_reclaim_reent+0x1c>
 800caa0:	6961      	ldr	r1, [r4, #20]
 800caa2:	b111      	cbz	r1, 800caaa <_reclaim_reent+0x62>
 800caa4:	4620      	mov	r0, r4
 800caa6:	f000 f867 	bl	800cb78 <_free_r>
 800caaa:	69e1      	ldr	r1, [r4, #28]
 800caac:	b111      	cbz	r1, 800cab4 <_reclaim_reent+0x6c>
 800caae:	4620      	mov	r0, r4
 800cab0:	f000 f862 	bl	800cb78 <_free_r>
 800cab4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cab6:	b111      	cbz	r1, 800cabe <_reclaim_reent+0x76>
 800cab8:	4620      	mov	r0, r4
 800caba:	f000 f85d 	bl	800cb78 <_free_r>
 800cabe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cac0:	b111      	cbz	r1, 800cac8 <_reclaim_reent+0x80>
 800cac2:	4620      	mov	r0, r4
 800cac4:	f000 f858 	bl	800cb78 <_free_r>
 800cac8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800caca:	b111      	cbz	r1, 800cad2 <_reclaim_reent+0x8a>
 800cacc:	4620      	mov	r0, r4
 800cace:	f000 f853 	bl	800cb78 <_free_r>
 800cad2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cad4:	b111      	cbz	r1, 800cadc <_reclaim_reent+0x94>
 800cad6:	4620      	mov	r0, r4
 800cad8:	f000 f84e 	bl	800cb78 <_free_r>
 800cadc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cade:	b111      	cbz	r1, 800cae6 <_reclaim_reent+0x9e>
 800cae0:	4620      	mov	r0, r4
 800cae2:	f000 f849 	bl	800cb78 <_free_r>
 800cae6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cae8:	b111      	cbz	r1, 800caf0 <_reclaim_reent+0xa8>
 800caea:	4620      	mov	r0, r4
 800caec:	f000 f844 	bl	800cb78 <_free_r>
 800caf0:	6a23      	ldr	r3, [r4, #32]
 800caf2:	b11b      	cbz	r3, 800cafc <_reclaim_reent+0xb4>
 800caf4:	4620      	mov	r0, r4
 800caf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cafa:	4718      	bx	r3
 800cafc:	bd70      	pop	{r4, r5, r6, pc}
 800cafe:	bf00      	nop
 800cb00:	20000204 	.word	0x20000204

0800cb04 <__errno>:
 800cb04:	4b01      	ldr	r3, [pc, #4]	@ (800cb0c <__errno+0x8>)
 800cb06:	6818      	ldr	r0, [r3, #0]
 800cb08:	4770      	bx	lr
 800cb0a:	bf00      	nop
 800cb0c:	20000204 	.word	0x20000204

0800cb10 <__libc_init_array>:
 800cb10:	b570      	push	{r4, r5, r6, lr}
 800cb12:	4d0d      	ldr	r5, [pc, #52]	@ (800cb48 <__libc_init_array+0x38>)
 800cb14:	4c0d      	ldr	r4, [pc, #52]	@ (800cb4c <__libc_init_array+0x3c>)
 800cb16:	1b64      	subs	r4, r4, r5
 800cb18:	10a4      	asrs	r4, r4, #2
 800cb1a:	2600      	movs	r6, #0
 800cb1c:	42a6      	cmp	r6, r4
 800cb1e:	d109      	bne.n	800cb34 <__libc_init_array+0x24>
 800cb20:	4d0b      	ldr	r5, [pc, #44]	@ (800cb50 <__libc_init_array+0x40>)
 800cb22:	4c0c      	ldr	r4, [pc, #48]	@ (800cb54 <__libc_init_array+0x44>)
 800cb24:	f000 f8a0 	bl	800cc68 <_init>
 800cb28:	1b64      	subs	r4, r4, r5
 800cb2a:	10a4      	asrs	r4, r4, #2
 800cb2c:	2600      	movs	r6, #0
 800cb2e:	42a6      	cmp	r6, r4
 800cb30:	d105      	bne.n	800cb3e <__libc_init_array+0x2e>
 800cb32:	bd70      	pop	{r4, r5, r6, pc}
 800cb34:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb38:	4798      	blx	r3
 800cb3a:	3601      	adds	r6, #1
 800cb3c:	e7ee      	b.n	800cb1c <__libc_init_array+0xc>
 800cb3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb42:	4798      	blx	r3
 800cb44:	3601      	adds	r6, #1
 800cb46:	e7f2      	b.n	800cb2e <__libc_init_array+0x1e>
 800cb48:	0800cd9c 	.word	0x0800cd9c
 800cb4c:	0800cd9c 	.word	0x0800cd9c
 800cb50:	0800cd9c 	.word	0x0800cd9c
 800cb54:	0800cda0 	.word	0x0800cda0

0800cb58 <__retarget_lock_acquire_recursive>:
 800cb58:	4770      	bx	lr

0800cb5a <__retarget_lock_release_recursive>:
 800cb5a:	4770      	bx	lr

0800cb5c <memcpy>:
 800cb5c:	440a      	add	r2, r1
 800cb5e:	4291      	cmp	r1, r2
 800cb60:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb64:	d100      	bne.n	800cb68 <memcpy+0xc>
 800cb66:	4770      	bx	lr
 800cb68:	b510      	push	{r4, lr}
 800cb6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb72:	4291      	cmp	r1, r2
 800cb74:	d1f9      	bne.n	800cb6a <memcpy+0xe>
 800cb76:	bd10      	pop	{r4, pc}

0800cb78 <_free_r>:
 800cb78:	b538      	push	{r3, r4, r5, lr}
 800cb7a:	4605      	mov	r5, r0
 800cb7c:	2900      	cmp	r1, #0
 800cb7e:	d041      	beq.n	800cc04 <_free_r+0x8c>
 800cb80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb84:	1f0c      	subs	r4, r1, #4
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	bfb8      	it	lt
 800cb8a:	18e4      	addlt	r4, r4, r3
 800cb8c:	f000 f83e 	bl	800cc0c <__malloc_lock>
 800cb90:	4a1d      	ldr	r2, [pc, #116]	@ (800cc08 <_free_r+0x90>)
 800cb92:	6813      	ldr	r3, [r2, #0]
 800cb94:	b933      	cbnz	r3, 800cba4 <_free_r+0x2c>
 800cb96:	6063      	str	r3, [r4, #4]
 800cb98:	6014      	str	r4, [r2, #0]
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cba0:	f000 b83a 	b.w	800cc18 <__malloc_unlock>
 800cba4:	42a3      	cmp	r3, r4
 800cba6:	d908      	bls.n	800cbba <_free_r+0x42>
 800cba8:	6820      	ldr	r0, [r4, #0]
 800cbaa:	1821      	adds	r1, r4, r0
 800cbac:	428b      	cmp	r3, r1
 800cbae:	bf01      	itttt	eq
 800cbb0:	6819      	ldreq	r1, [r3, #0]
 800cbb2:	685b      	ldreq	r3, [r3, #4]
 800cbb4:	1809      	addeq	r1, r1, r0
 800cbb6:	6021      	streq	r1, [r4, #0]
 800cbb8:	e7ed      	b.n	800cb96 <_free_r+0x1e>
 800cbba:	461a      	mov	r2, r3
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	b10b      	cbz	r3, 800cbc4 <_free_r+0x4c>
 800cbc0:	42a3      	cmp	r3, r4
 800cbc2:	d9fa      	bls.n	800cbba <_free_r+0x42>
 800cbc4:	6811      	ldr	r1, [r2, #0]
 800cbc6:	1850      	adds	r0, r2, r1
 800cbc8:	42a0      	cmp	r0, r4
 800cbca:	d10b      	bne.n	800cbe4 <_free_r+0x6c>
 800cbcc:	6820      	ldr	r0, [r4, #0]
 800cbce:	4401      	add	r1, r0
 800cbd0:	1850      	adds	r0, r2, r1
 800cbd2:	4283      	cmp	r3, r0
 800cbd4:	6011      	str	r1, [r2, #0]
 800cbd6:	d1e0      	bne.n	800cb9a <_free_r+0x22>
 800cbd8:	6818      	ldr	r0, [r3, #0]
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	6053      	str	r3, [r2, #4]
 800cbde:	4408      	add	r0, r1
 800cbe0:	6010      	str	r0, [r2, #0]
 800cbe2:	e7da      	b.n	800cb9a <_free_r+0x22>
 800cbe4:	d902      	bls.n	800cbec <_free_r+0x74>
 800cbe6:	230c      	movs	r3, #12
 800cbe8:	602b      	str	r3, [r5, #0]
 800cbea:	e7d6      	b.n	800cb9a <_free_r+0x22>
 800cbec:	6820      	ldr	r0, [r4, #0]
 800cbee:	1821      	adds	r1, r4, r0
 800cbf0:	428b      	cmp	r3, r1
 800cbf2:	bf04      	itt	eq
 800cbf4:	6819      	ldreq	r1, [r3, #0]
 800cbf6:	685b      	ldreq	r3, [r3, #4]
 800cbf8:	6063      	str	r3, [r4, #4]
 800cbfa:	bf04      	itt	eq
 800cbfc:	1809      	addeq	r1, r1, r0
 800cbfe:	6021      	streq	r1, [r4, #0]
 800cc00:	6054      	str	r4, [r2, #4]
 800cc02:	e7ca      	b.n	800cb9a <_free_r+0x22>
 800cc04:	bd38      	pop	{r3, r4, r5, pc}
 800cc06:	bf00      	nop
 800cc08:	20002528 	.word	0x20002528

0800cc0c <__malloc_lock>:
 800cc0c:	4801      	ldr	r0, [pc, #4]	@ (800cc14 <__malloc_lock+0x8>)
 800cc0e:	f7ff bfa3 	b.w	800cb58 <__retarget_lock_acquire_recursive>
 800cc12:	bf00      	nop
 800cc14:	20002524 	.word	0x20002524

0800cc18 <__malloc_unlock>:
 800cc18:	4801      	ldr	r0, [pc, #4]	@ (800cc20 <__malloc_unlock+0x8>)
 800cc1a:	f7ff bf9e 	b.w	800cb5a <__retarget_lock_release_recursive>
 800cc1e:	bf00      	nop
 800cc20:	20002524 	.word	0x20002524

0800cc24 <sqrtf>:
 800cc24:	b508      	push	{r3, lr}
 800cc26:	ed2d 8b02 	vpush	{d8}
 800cc2a:	eeb0 8a40 	vmov.f32	s16, s0
 800cc2e:	f000 f817 	bl	800cc60 <__ieee754_sqrtf>
 800cc32:	eeb4 8a48 	vcmp.f32	s16, s16
 800cc36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc3a:	d60c      	bvs.n	800cc56 <sqrtf+0x32>
 800cc3c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800cc5c <sqrtf+0x38>
 800cc40:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc48:	d505      	bpl.n	800cc56 <sqrtf+0x32>
 800cc4a:	f7ff ff5b 	bl	800cb04 <__errno>
 800cc4e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cc52:	2321      	movs	r3, #33	@ 0x21
 800cc54:	6003      	str	r3, [r0, #0]
 800cc56:	ecbd 8b02 	vpop	{d8}
 800cc5a:	bd08      	pop	{r3, pc}
 800cc5c:	00000000 	.word	0x00000000

0800cc60 <__ieee754_sqrtf>:
 800cc60:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cc64:	4770      	bx	lr
	...

0800cc68 <_init>:
 800cc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc6a:	bf00      	nop
 800cc6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc6e:	bc08      	pop	{r3}
 800cc70:	469e      	mov	lr, r3
 800cc72:	4770      	bx	lr

0800cc74 <_fini>:
 800cc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc76:	bf00      	nop
 800cc78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc7a:	bc08      	pop	{r3}
 800cc7c:	469e      	mov	lr, r3
 800cc7e:	4770      	bx	lr
