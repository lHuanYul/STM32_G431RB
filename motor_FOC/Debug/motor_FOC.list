
motor_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6e0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800c8c0  0800c8c0  0000d8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9d4  0800c9d4  0000e29c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c9d4  0800c9d4  0000d9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9dc  0800c9dc  0000e29c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9dc  0800c9dc  0000d9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c9e0  0800c9e0  0000d9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000029c  20000000  0800c9e4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002310  2000029c  0800cc80  0000e29c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200025ac  0800cc80  0000e5ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e29c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000319eb  00000000  00000000  0000e2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000070f3  00000000  00000000  0003fcb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002480  00000000  00000000  00046db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bd3  00000000  00000000  00049230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4ad  00000000  00000000  0004ae03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000355a4  00000000  00000000  000762b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f17f6  00000000  00000000  000ab854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019d04a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000997c  00000000  00000000  0019d090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001a6a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000029c 	.word	0x2000029c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c8a8 	.word	0x0800c8a8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002a0 	.word	0x200002a0
 800021c:	0800c8a8 	.word	0x0800c8a8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08c      	sub	sp, #48	@ 0x30
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2220      	movs	r2, #32
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f00c f887 	bl	800c678 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800056a:	4b47      	ldr	r3, [pc, #284]	@ (8000688 <MX_ADC1_Init+0x13c>)
 800056c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000570:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000572:	4b45      	ldr	r3, [pc, #276]	@ (8000688 <MX_ADC1_Init+0x13c>)
 8000574:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000578:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800057a:	4b43      	ldr	r3, [pc, #268]	@ (8000688 <MX_ADC1_Init+0x13c>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000580:	4b41      	ldr	r3, [pc, #260]	@ (8000688 <MX_ADC1_Init+0x13c>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000586:	4b40      	ldr	r3, [pc, #256]	@ (8000688 <MX_ADC1_Init+0x13c>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800058c:	4b3e      	ldr	r3, [pc, #248]	@ (8000688 <MX_ADC1_Init+0x13c>)
 800058e:	2201      	movs	r2, #1
 8000590:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000592:	4b3d      	ldr	r3, [pc, #244]	@ (8000688 <MX_ADC1_Init+0x13c>)
 8000594:	2204      	movs	r2, #4
 8000596:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000598:	4b3b      	ldr	r3, [pc, #236]	@ (8000688 <MX_ADC1_Init+0x13c>)
 800059a:	2200      	movs	r2, #0
 800059c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800059e:	4b3a      	ldr	r3, [pc, #232]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 80005a4:	4b38      	ldr	r3, [pc, #224]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005a6:	2204      	movs	r2, #4
 80005a8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005aa:	4b37      	ldr	r3, [pc, #220]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b2:	4b35      	ldr	r3, [pc, #212]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b8:	4b33      	ldr	r3, [pc, #204]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005be:	4b32      	ldr	r3, [pc, #200]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005c6:	4b30      	ldr	r3, [pc, #192]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d4:	482c      	ldr	r0, [pc, #176]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005d6:	f003 fbdb 	bl	8003d90 <HAL_ADC_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80005e0:	f000 fbd0 	bl	8000d84 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005e4:	2300      	movs	r3, #0
 80005e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ec:	4619      	mov	r1, r3
 80005ee:	4826      	ldr	r0, [pc, #152]	@ (8000688 <MX_ADC1_Init+0x13c>)
 80005f0:	f004 fb54 	bl	8004c9c <HAL_ADCEx_MultiModeConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005fa:	f000 fbc3 	bl	8000d84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005fe:	4b23      	ldr	r3, [pc, #140]	@ (800068c <MX_ADC1_Init+0x140>)
 8000600:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000602:	2306      	movs	r3, #6
 8000604:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000606:	2303      	movs	r3, #3
 8000608:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800060a:	237f      	movs	r3, #127	@ 0x7f
 800060c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800060e:	2304      	movs	r3, #4
 8000610:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	4619      	mov	r1, r3
 800061a:	481b      	ldr	r0, [pc, #108]	@ (8000688 <MX_ADC1_Init+0x13c>)
 800061c:	f003 fe0e 	bl	800423c <HAL_ADC_ConfigChannel>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000626:	f000 fbad 	bl	8000d84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800062a:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <MX_ADC1_Init+0x144>)
 800062c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800062e:	230c      	movs	r3, #12
 8000630:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	4814      	ldr	r0, [pc, #80]	@ (8000688 <MX_ADC1_Init+0x13c>)
 8000638:	f003 fe00 	bl	800423c <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000642:	f000 fb9f 	bl	8000d84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <MX_ADC1_Init+0x148>)
 8000648:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800064a:	2312      	movs	r3, #18
 800064c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	4619      	mov	r1, r3
 8000652:	480d      	ldr	r0, [pc, #52]	@ (8000688 <MX_ADC1_Init+0x13c>)
 8000654:	f003 fdf2 	bl	800423c <HAL_ADC_ConfigChannel>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800065e:	f000 fb91 	bl	8000d84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000662:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <MX_ADC1_Init+0x14c>)
 8000664:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000666:	2318      	movs	r3, #24
 8000668:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4619      	mov	r1, r3
 800066e:	4806      	ldr	r0, [pc, #24]	@ (8000688 <MX_ADC1_Init+0x13c>)
 8000670:	f003 fde4 	bl	800423c <HAL_ADC_ConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800067a:	f000 fb83 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	3730      	adds	r7, #48	@ 0x30
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200002b8 	.word	0x200002b8
 800068c:	2e300800 	.word	0x2e300800
 8000690:	32601000 	.word	0x32601000
 8000694:	3ac04000 	.word	0x3ac04000
 8000698:	3ef08000 	.word	0x3ef08000

0800069c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b09a      	sub	sp, #104	@ 0x68
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	2244      	movs	r2, #68	@ 0x44
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f00b ffdb 	bl	800c678 <memset>
  if(adcHandle->Instance==ADC1)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80006ca:	d160      	bne.n	800078e <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	4618      	mov	r0, r3
 80006de:	f006 fce5 	bl	80070ac <HAL_RCCEx_PeriphCLKConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006e8:	f000 fb4c 	bl	8000d84 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <HAL_ADC_MspInit+0xfc>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f0:	4a29      	ldr	r2, [pc, #164]	@ (8000798 <HAL_ADC_MspInit+0xfc>)
 80006f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f8:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <HAL_ADC_MspInit+0xfc>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000704:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <HAL_ADC_MspInit+0xfc>)
 8000706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000708:	4a23      	ldr	r2, [pc, #140]	@ (8000798 <HAL_ADC_MspInit+0xfc>)
 800070a:	f043 0302 	orr.w	r3, r3, #2
 800070e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000710:	4b21      	ldr	r3, [pc, #132]	@ (8000798 <HAL_ADC_MspInit+0xfc>)
 8000712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000714:	f003 0302 	and.w	r3, r3, #2
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 800071c:	f641 0303 	movw	r3, #6147	@ 0x1803
 8000720:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000722:	2303      	movs	r3, #3
 8000724:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800072e:	4619      	mov	r1, r3
 8000730:	481a      	ldr	r0, [pc, #104]	@ (800079c <HAL_ADC_MspInit+0x100>)
 8000732:	f005 fcf5 	bl	8006120 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 8000738:	4a1a      	ldr	r2, [pc, #104]	@ (80007a4 <HAL_ADC_MspInit+0x108>)
 800073a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 800073e:	2205      	movs	r2, #5
 8000740:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 8000750:	2280      	movs	r2, #128	@ 0x80
 8000752:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 8000756:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800075a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800075c:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 800075e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000762:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000764:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 8000766:	2220      	movs	r2, #32
 8000768:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800076a:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 800076c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000770:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000772:	480b      	ldr	r0, [pc, #44]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 8000774:	f004 fd50 	bl	8005218 <HAL_DMA_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 800077e:	f000 fb01 	bl	8000d84 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a06      	ldr	r2, [pc, #24]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 8000786:	655a      	str	r2, [r3, #84]	@ 0x54
 8000788:	4a05      	ldr	r2, [pc, #20]	@ (80007a0 <HAL_ADC_MspInit+0x104>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800078e:	bf00      	nop
 8000790:	3768      	adds	r7, #104	@ 0x68
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000
 800079c:	48000400 	.word	0x48000400
 80007a0:	20000324 	.word	0x20000324
 80007a4:	40020408 	.word	0x40020408

080007a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007ac:	4a0c      	ldr	r2, [pc, #48]	@ (80007e0 <MX_FREERTOS_Init+0x38>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <MX_FREERTOS_Init+0x3c>)
 80007b2:	f009 f8c0 	bl	8009936 <osThreadNew>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4a0b      	ldr	r2, [pc, #44]	@ (80007e8 <MX_FREERTOS_Init+0x40>)
 80007ba:	6013      	str	r3, [r2, #0]

  /* creation of motorTask */
  motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 80007bc:	4a0b      	ldr	r2, [pc, #44]	@ (80007ec <MX_FREERTOS_Init+0x44>)
 80007be:	2100      	movs	r1, #0
 80007c0:	480b      	ldr	r0, [pc, #44]	@ (80007f0 <MX_FREERTOS_Init+0x48>)
 80007c2:	f009 f8b8 	bl	8009936 <osThreadNew>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a0a      	ldr	r2, [pc, #40]	@ (80007f4 <MX_FREERTOS_Init+0x4c>)
 80007ca:	6013      	str	r3, [r2, #0]

  /* creation of adcTask */
  adcTaskHandle = osThreadNew(StartAdcTask, NULL, &adcTask_attributes);
 80007cc:	4a0a      	ldr	r2, [pc, #40]	@ (80007f8 <MX_FREERTOS_Init+0x50>)
 80007ce:	2100      	movs	r1, #0
 80007d0:	480a      	ldr	r0, [pc, #40]	@ (80007fc <MX_FREERTOS_Init+0x54>)
 80007d2:	f009 f8b0 	bl	8009936 <osThreadNew>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4a09      	ldr	r2, [pc, #36]	@ (8000800 <MX_FREERTOS_Init+0x58>)
 80007da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	0800c8f8 	.word	0x0800c8f8
 80007e4:	08001a69 	.word	0x08001a69
 80007e8:	20000384 	.word	0x20000384
 80007ec:	0800c91c 	.word	0x0800c91c
 80007f0:	08003051 	.word	0x08003051
 80007f4:	20000388 	.word	0x20000388
 80007f8:	0800c940 	.word	0x0800c940
 80007fc:	08001505 	.word	0x08001505
 8000800:	2000038c 	.word	0x2000038c

08000804 <MX_CORDIC_Init>:
DMA_HandleTypeDef hdma_cordic_read;
DMA_HandleTypeDef hdma_cordic_write;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_CORDIC_Init+0x20>)
 800080a:	4a07      	ldr	r2, [pc, #28]	@ (8000828 <MX_CORDIC_Init+0x24>)
 800080c:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_CORDIC_Init+0x20>)
 8000810:	f004 fae8 	bl	8004de4 <HAL_CORDIC_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800081a:	f000 fab3 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000390 	.word	0x20000390
 8000828:	40020c00 	.word	0x40020c00

0800082c <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a34      	ldr	r2, [pc, #208]	@ (800090c <HAL_CORDIC_MspInit+0xe0>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d161      	bne.n	8000902 <HAL_CORDIC_MspInit+0xd6>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800083e:	4b34      	ldr	r3, [pc, #208]	@ (8000910 <HAL_CORDIC_MspInit+0xe4>)
 8000840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000842:	4a33      	ldr	r2, [pc, #204]	@ (8000910 <HAL_CORDIC_MspInit+0xe4>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6493      	str	r3, [r2, #72]	@ 0x48
 800084a:	4b31      	ldr	r3, [pc, #196]	@ (8000910 <HAL_CORDIC_MspInit+0xe4>)
 800084c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]

    /* CORDIC DMA Init */
    /* CORDIC_READ Init */
    hdma_cordic_read.Instance = DMA2_Channel2;
 8000856:	4b2f      	ldr	r3, [pc, #188]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 8000858:	4a2f      	ldr	r2, [pc, #188]	@ (8000918 <HAL_CORDIC_MspInit+0xec>)
 800085a:	601a      	str	r2, [r3, #0]
    hdma_cordic_read.Init.Request = DMA_REQUEST_CORDIC_READ;
 800085c:	4b2d      	ldr	r3, [pc, #180]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 800085e:	2270      	movs	r2, #112	@ 0x70
 8000860:	605a      	str	r2, [r3, #4]
    hdma_cordic_read.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000862:	4b2c      	ldr	r3, [pc, #176]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
    hdma_cordic_read.Init.PeriphInc = DMA_PINC_DISABLE;
 8000868:	4b2a      	ldr	r3, [pc, #168]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
    hdma_cordic_read.Init.MemInc = DMA_MINC_ENABLE;
 800086e:	4b29      	ldr	r3, [pc, #164]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 8000870:	2280      	movs	r2, #128	@ 0x80
 8000872:	611a      	str	r2, [r3, #16]
    hdma_cordic_read.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000874:	4b27      	ldr	r3, [pc, #156]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 8000876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800087a:	615a      	str	r2, [r3, #20]
    hdma_cordic_read.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800087c:	4b25      	ldr	r3, [pc, #148]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 800087e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000882:	619a      	str	r2, [r3, #24]
    hdma_cordic_read.Init.Mode = DMA_NORMAL;
 8000884:	4b23      	ldr	r3, [pc, #140]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
    hdma_cordic_read.Init.Priority = DMA_PRIORITY_LOW;
 800088a:	4b22      	ldr	r3, [pc, #136]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_cordic_read) != HAL_OK)
 8000890:	4820      	ldr	r0, [pc, #128]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 8000892:	f004 fcc1 	bl	8005218 <HAL_DMA_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <HAL_CORDIC_MspInit+0x74>
    {
      Error_Handler();
 800089c:	f000 fa72 	bl	8000d84 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaOut,hdma_cordic_read);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 80008a4:	61da      	str	r2, [r3, #28]
 80008a6:	4a1b      	ldr	r2, [pc, #108]	@ (8000914 <HAL_CORDIC_MspInit+0xe8>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* CORDIC_WRITE Init */
    hdma_cordic_write.Instance = DMA2_Channel3;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000920 <HAL_CORDIC_MspInit+0xf4>)
 80008b0:	601a      	str	r2, [r3, #0]
    hdma_cordic_write.Init.Request = DMA_REQUEST_CORDIC_WRITE;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008b4:	2271      	movs	r2, #113	@ 0x71
 80008b6:	605a      	str	r2, [r3, #4]
    hdma_cordic_write.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008b8:	4b18      	ldr	r3, [pc, #96]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008ba:	2210      	movs	r2, #16
 80008bc:	609a      	str	r2, [r3, #8]
    hdma_cordic_write.Init.PeriphInc = DMA_PINC_DISABLE;
 80008be:	4b17      	ldr	r3, [pc, #92]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
    hdma_cordic_write.Init.MemInc = DMA_MINC_ENABLE;
 80008c4:	4b15      	ldr	r3, [pc, #84]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008c6:	2280      	movs	r2, #128	@ 0x80
 80008c8:	611a      	str	r2, [r3, #16]
    hdma_cordic_write.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008ca:	4b14      	ldr	r3, [pc, #80]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008d0:	615a      	str	r2, [r3, #20]
    hdma_cordic_write.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008d2:	4b12      	ldr	r3, [pc, #72]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008d8:	619a      	str	r2, [r3, #24]
    hdma_cordic_write.Init.Mode = DMA_NORMAL;
 80008da:	4b10      	ldr	r3, [pc, #64]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
    hdma_cordic_write.Init.Priority = DMA_PRIORITY_LOW;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_cordic_write) != HAL_OK)
 80008e6:	480d      	ldr	r0, [pc, #52]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008e8:	f004 fc96 	bl	8005218 <HAL_DMA_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_CORDIC_MspInit+0xca>
    {
      Error_Handler();
 80008f2:	f000 fa47 	bl	8000d84 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaIn,hdma_cordic_write);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a08      	ldr	r2, [pc, #32]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008fa:	619a      	str	r2, [r3, #24]
 80008fc:	4a07      	ldr	r2, [pc, #28]	@ (800091c <HAL_CORDIC_MspInit+0xf0>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40020c00 	.word	0x40020c00
 8000910:	40021000 	.word	0x40021000
 8000914:	200003b8 	.word	0x200003b8
 8000918:	4002041c 	.word	0x4002041c
 800091c:	20000418 	.word	0x20000418
 8000920:	40020430 	.word	0x40020430

08000924 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800092a:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <MX_DMA_Init+0x70>)
 800092c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800092e:	4a19      	ldr	r2, [pc, #100]	@ (8000994 <MX_DMA_Init+0x70>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6493      	str	r3, [r2, #72]	@ 0x48
 8000936:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <MX_DMA_Init+0x70>)
 8000938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000942:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <MX_DMA_Init+0x70>)
 8000944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000946:	4a13      	ldr	r2, [pc, #76]	@ (8000994 <MX_DMA_Init+0x70>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6493      	str	r3, [r2, #72]	@ 0x48
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_DMA_Init+0x70>)
 8000950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2105      	movs	r1, #5
 800095e:	2038      	movs	r0, #56	@ 0x38
 8000960:	f004 fc32 	bl	80051c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000964:	2038      	movs	r0, #56	@ 0x38
 8000966:	f004 fc49 	bl	80051fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2105      	movs	r1, #5
 800096e:	2039      	movs	r0, #57	@ 0x39
 8000970:	f004 fc2a 	bl	80051c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000974:	2039      	movs	r0, #57	@ 0x39
 8000976:	f004 fc41 	bl	80051fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2105      	movs	r1, #5
 800097e:	203a      	movs	r0, #58	@ 0x3a
 8000980:	f004 fc22 	bl	80051c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000984:	203a      	movs	r0, #58	@ 0x3a
 8000986:	f004 fc39 	bl	80051fc <HAL_NVIC_EnableIRQ>

}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000

08000998 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800099c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 800099e:	4a20      	ldr	r2, [pc, #128]	@ (8000a20 <MX_FDCAN1_Init+0x88>)
 80009a0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80009a2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80009a8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80009b4:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80009ba:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009bc:	2200      	movs	r2, #0
 80009be:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80009c0:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009c8:	2214      	movs	r2, #20
 80009ca:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80009cc:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009d4:	220e      	movs	r2, #14
 80009d6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80009d8:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009da:	2202      	movs	r2, #2
 80009dc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 80009de:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80009e4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 80009ea:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009ec:	220e      	movs	r2, #14
 80009ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009f2:	2202      	movs	r2, #2
 80009f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = FDCAN_STD_FILTER_NBR;
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009fc:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	@ (8000a1c <MX_FDCAN1_Init+0x84>)
 8000a0a:	f004 fed9 	bl	80057c0 <HAL_FDCAN_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000a14:	f000 f9b6 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000478 	.word	0x20000478
 8000a20:	40006400 	.word	0x40006400

08000a24 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b09a      	sub	sp, #104	@ 0x68
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	2244      	movs	r2, #68	@ 0x44
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f00b fe17 	bl	800c678 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a28      	ldr	r2, [pc, #160]	@ (8000af0 <HAL_FDCAN_MspInit+0xcc>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d149      	bne.n	8000ae8 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a58:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a5e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4618      	mov	r0, r3
 8000a66:	f006 fb21 	bl	80070ac <HAL_RCCEx_PeriphCLKConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a70:	f000 f988 	bl	8000d84 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a74:	4b1f      	ldr	r3, [pc, #124]	@ (8000af4 <HAL_FDCAN_MspInit+0xd0>)
 8000a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a78:	4a1e      	ldr	r2, [pc, #120]	@ (8000af4 <HAL_FDCAN_MspInit+0xd0>)
 8000a7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a80:	4b1c      	ldr	r3, [pc, #112]	@ (8000af4 <HAL_FDCAN_MspInit+0xd0>)
 8000a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	4b19      	ldr	r3, [pc, #100]	@ (8000af4 <HAL_FDCAN_MspInit+0xd0>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a90:	4a18      	ldr	r2, [pc, #96]	@ (8000af4 <HAL_FDCAN_MspInit+0xd0>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a98:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <HAL_FDCAN_MspInit+0xd0>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000aa4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000aa8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ab6:	2309      	movs	r3, #9
 8000ab8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac4:	f005 fb2c 	bl	8006120 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2105      	movs	r1, #5
 8000acc:	2015      	movs	r0, #21
 8000ace:	f004 fb7b 	bl	80051c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000ad2:	2015      	movs	r0, #21
 8000ad4:	f004 fb92 	bl	80051fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2105      	movs	r1, #5
 8000adc:	2016      	movs	r0, #22
 8000ade:	f004 fb73 	bl	80051c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000ae2:	2016      	movs	r0, #22
 8000ae4:	f004 fb8a 	bl	80051fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000ae8:	bf00      	nop
 8000aea:	3768      	adds	r7, #104	@ 0x68
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40006400 	.word	0x40006400
 8000af4:	40021000 	.word	0x40021000

08000af8 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	@ 0x28
 8000afc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	4b49      	ldr	r3, [pc, #292]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b12:	4a48      	ldr	r2, [pc, #288]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1a:	4b46      	ldr	r3, [pc, #280]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b26:	4b43      	ldr	r3, [pc, #268]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2a:	4a42      	ldr	r2, [pc, #264]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b2c:	f043 0320 	orr.w	r3, r3, #32
 8000b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b32:	4b40      	ldr	r3, [pc, #256]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b36:	f003 0320 	and.w	r3, r3, #32
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	4a3c      	ldr	r2, [pc, #240]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	4b37      	ldr	r3, [pc, #220]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5a:	4a36      	ldr	r2, [pc, #216]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b62:	4b34      	ldr	r3, [pc, #208]	@ (8000c34 <MX_GPIO_Init+0x13c>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2120      	movs	r1, #32
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b76:	f005 fc55 	bl	8006424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8000b80:	482d      	ldr	r0, [pc, #180]	@ (8000c38 <MX_GPIO_Init+0x140>)
 8000b82:	f005 fc4f 	bl	8006424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4827      	ldr	r0, [pc, #156]	@ (8000c3c <MX_GPIO_Init+0x144>)
 8000b9e:	f005 fabf 	bl	8006120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ba2:	230c      	movs	r3, #12
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc0:	f005 faae 	bl	8006120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bc4:	2320      	movs	r3, #32
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bde:	f005 fa9f 	bl	8006120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8000be2:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480f      	ldr	r0, [pc, #60]	@ (8000c38 <MX_GPIO_Init+0x140>)
 8000bfc:	f005 fa90 	bl	8006120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000c00:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c06:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4809      	ldr	r0, [pc, #36]	@ (8000c3c <MX_GPIO_Init+0x144>)
 8000c18:	f005 fa82 	bl	8006120 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2105      	movs	r1, #5
 8000c20:	2028      	movs	r0, #40	@ 0x28
 8000c22:	f004 fad1 	bl	80051c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c26:	2028      	movs	r0, #40	@ 0x28
 8000c28:	f004 fae8 	bl	80051fc <HAL_NVIC_EnableIRQ>

}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	@ 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40021000 	.word	0x40021000
 8000c38:	48000400 	.word	0x48000400
 8000c3c:	48000800 	.word	0x48000800

08000c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c44:	f002 fe50 	bl	80038e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c48:	f000 f83c 	bl	8000cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4c:	f7ff ff54 	bl	8000af8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c50:	f7ff fe68 	bl	8000924 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c54:	f7ff fc7a 	bl	800054c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000c58:	f7ff fe9e 	bl	8000998 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000c5c:	f000 f9b6 	bl	8000fcc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c60:	f000 fa66 	bl	8001130 <MX_TIM2_Init>
  MX_CORDIC_Init();
 8000c64:	f7ff fdce 	bl	8000804 <MX_CORDIC_Init>
  MX_TIM3_Init();
 8000c68:	f000 fab8 	bl	80011dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  INIT_OWN();
 8000c6c:	f000 fea2 	bl	80019b4 <INIT_OWN>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c70:	f008 fe02 	bl	8009878 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c74:	f7ff fd98 	bl	80007a8 <MX_FREERTOS_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f002 fcbd 	bl	80035f8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000c7e:	2101      	movs	r1, #1
 8000c80:	2000      	movs	r0, #0
 8000c82:	f002 fcef 	bl	8003664 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <main+0x80>)
 8000c88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c8c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <main+0x80>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <main+0x80>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <main+0x80>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <main+0x80>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000ca6:	4906      	ldr	r1, [pc, #24]	@ (8000cc0 <main+0x80>)
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f002 fd67 	bl	800377c <BSP_COM_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <main+0x78>
  {
    Error_Handler();
 8000cb4:	f000 f866 	bl	8000d84 <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 8000cb8:	f008 fe02 	bl	80098c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <main+0x7c>
 8000cc0:	200004dc 	.word	0x200004dc

08000cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b094      	sub	sp, #80	@ 0x50
 8000cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cca:	f107 0318 	add.w	r3, r7, #24
 8000cce:	2238      	movs	r2, #56	@ 0x38
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f00b fcd0 	bl	800c678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f005 fbcc 	bl	8006484 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cec:	2302      	movs	r3, #2
 8000cee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf6:	2340      	movs	r3, #64	@ 0x40
 8000cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000d02:	2304      	movs	r3, #4
 8000d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d06:	2355      	movs	r3, #85	@ 0x55
 8000d08:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d16:	f107 0318 	add.w	r3, r7, #24
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f005 fc66 	bl	80065ec <HAL_RCC_OscConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d26:	f000 f82d 	bl	8000d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2a:	230f      	movs	r3, #15
 8000d2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2104      	movs	r1, #4
 8000d42:	4618      	mov	r0, r3
 8000d44:	f005 ff64 	bl	8006c10 <HAL_RCC_ClockConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d4e:	f000 f819 	bl	8000d84 <Error_Handler>
  }
}
 8000d52:	bf00      	nop
 8000d54:	3750      	adds	r7, #80	@ 0x50
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a05      	ldr	r2, [pc, #20]	@ (8000d80 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d101      	bne.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d6e:	f002 fdd3 	bl	8003918 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  HAL_TIM_PeriodElapsedCallback_OWN(htim);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 fe66 	bl	8001a44 <HAL_TIM_PeriodElapsedCallback_OWN>
  /* USER CODE END Callback 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40001000 	.word	0x40001000

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <Error_Handler+0x8>

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_MspInit+0x50>)
 8000d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d9a:	4a11      	ldr	r2, [pc, #68]	@ (8000de0 <HAL_MspInit+0x50>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000da2:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <HAL_MspInit+0x50>)
 8000da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <HAL_MspInit+0x50>)
 8000db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db2:	4a0b      	ldr	r2, [pc, #44]	@ (8000de0 <HAL_MspInit+0x50>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <HAL_MspInit+0x50>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	210f      	movs	r1, #15
 8000dca:	f06f 0001 	mvn.w	r0, #1
 8000dce:	f004 f9fb 	bl	80051c8 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000dd2:	f005 fbfb 	bl	80065cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40021000 	.word	0x40021000

08000de4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08c      	sub	sp, #48	@ 0x30
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000df4:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea8 <HAL_InitTick+0xc4>)
 8000df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df8:	4a2b      	ldr	r2, [pc, #172]	@ (8000ea8 <HAL_InitTick+0xc4>)
 8000dfa:	f043 0310 	orr.w	r3, r3, #16
 8000dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e00:	4b29      	ldr	r3, [pc, #164]	@ (8000ea8 <HAL_InitTick+0xc4>)
 8000e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e04:	f003 0310 	and.w	r3, r3, #16
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e0c:	f107 020c 	add.w	r2, r7, #12
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4611      	mov	r1, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f006 f8d0 	bl	8006fbc <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e1c:	f006 f8a2 	bl	8006f64 <HAL_RCC_GetPCLK1Freq>
 8000e20:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e24:	4a21      	ldr	r2, [pc, #132]	@ (8000eac <HAL_InitTick+0xc8>)
 8000e26:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2a:	0c9b      	lsrs	r3, r3, #18
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e30:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb0 <HAL_InitTick+0xcc>)
 8000e32:	4a20      	ldr	r2, [pc, #128]	@ (8000eb4 <HAL_InitTick+0xd0>)
 8000e34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e36:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb0 <HAL_InitTick+0xcc>)
 8000e38:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e3c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8000eb0 <HAL_InitTick+0xcc>)
 8000e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e42:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e44:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb0 <HAL_InitTick+0xcc>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4a:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <HAL_InitTick+0xcc>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000e50:	4817      	ldr	r0, [pc, #92]	@ (8000eb0 <HAL_InitTick+0xcc>)
 8000e52:	f006 fb1b 	bl	800748c <HAL_TIM_Base_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d11b      	bne.n	8000e9c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e64:	4812      	ldr	r0, [pc, #72]	@ (8000eb0 <HAL_InitTick+0xcc>)
 8000e66:	f006 fb73 	bl	8007550 <HAL_TIM_Base_Start_IT>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d111      	bne.n	8000e9c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e78:	2036      	movs	r0, #54	@ 0x36
 8000e7a:	f004 f9bf 	bl	80051fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d808      	bhi.n	8000e96 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	2036      	movs	r0, #54	@ 0x36
 8000e8a:	f004 f99d 	bl	80051c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <HAL_InitTick+0xd4>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	e002      	b.n	8000e9c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3730      	adds	r7, #48	@ 0x30
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	431bde83 	.word	0x431bde83
 8000eb0:	200004ec 	.word	0x200004ec
 8000eb4:	40001000 	.word	0x40001000
 8000eb8:	20000240 	.word	0x20000240

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <FDCAN1_IT0_IRQHandler+0x10>)
 8000efa:	f004 ff4b 	bl	8005d94 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000478 	.word	0x20000478

08000f08 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <FDCAN1_IT1_IRQHandler+0x10>)
 8000f0e:	f004 ff41 	bl	8005d94 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000478 	.word	0x20000478

08000f1c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f22:	f006 fdc3 	bl	8007aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000538 	.word	0x20000538

08000f30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000f34:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000f38:	f005 fa8c 	bl	8006454 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000f3c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000f40:	f005 fa88 	bl	8006454 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000f44:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000f48:	f005 fa84 	bl	8006454 <HAL_GPIO_EXTI_IRQHandler>
  BSP_PB_IRQHandler(BUTTON_USER);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f002 fbf7 	bl	8003740 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f5c:	4802      	ldr	r0, [pc, #8]	@ (8000f68 <TIM6_DAC_IRQHandler+0x10>)
 8000f5e:	f006 fda5 	bl	8007aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200004ec 	.word	0x200004ec

08000f6c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <DMA2_Channel1_IRQHandler+0x10>)
 8000f72:	f004 fa74 	bl	800545e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000324 	.word	0x20000324

08000f80 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_read);
 8000f84:	4802      	ldr	r0, [pc, #8]	@ (8000f90 <DMA2_Channel2_IRQHandler+0x10>)
 8000f86:	f004 fa6a 	bl	800545e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200003b8 	.word	0x200003b8

08000f94 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_write);
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <DMA2_Channel3_IRQHandler+0x10>)
 8000f9a:	f004 fa60 	bl	800545e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000418 	.word	0x20000418

08000fa8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	@ (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b098      	sub	sp, #96	@ 0x60
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fde:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]
 8000fee:	615a      	str	r2, [r3, #20]
 8000ff0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2234      	movs	r2, #52	@ 0x34
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f00b fb3d 	bl	800c678 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8001128 <MX_TIM1_Init+0x15c>)
 8001000:	4a4a      	ldr	r2, [pc, #296]	@ (800112c <MX_TIM1_Init+0x160>)
 8001002:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC;
 8001004:	4b48      	ldr	r3, [pc, #288]	@ (8001128 <MX_TIM1_Init+0x15c>)
 8001006:	2210      	movs	r2, #16
 8001008:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800100a:	4b47      	ldr	r3, [pc, #284]	@ (8001128 <MX_TIM1_Init+0x15c>)
 800100c:	2220      	movs	r2, #32
 800100e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR;
 8001010:	4b45      	ldr	r3, [pc, #276]	@ (8001128 <MX_TIM1_Init+0x15c>)
 8001012:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001016:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001018:	4b43      	ldr	r3, [pc, #268]	@ (8001128 <MX_TIM1_Init+0x15c>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800101e:	4b42      	ldr	r3, [pc, #264]	@ (8001128 <MX_TIM1_Init+0x15c>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001024:	4b40      	ldr	r3, [pc, #256]	@ (8001128 <MX_TIM1_Init+0x15c>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800102a:	483f      	ldr	r0, [pc, #252]	@ (8001128 <MX_TIM1_Init+0x15c>)
 800102c:	f006 fb51 	bl	80076d2 <HAL_TIM_PWM_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001036:	f7ff fea5 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 800103e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001042:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001048:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800104c:	4619      	mov	r1, r3
 800104e:	4836      	ldr	r0, [pc, #216]	@ (8001128 <MX_TIM1_Init+0x15c>)
 8001050:	f007 fcfc 	bl	8008a4c <HAL_TIMEx_MasterConfigSynchronization>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800105a:	f7ff fe93 	bl	8000d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800105e:	2360      	movs	r3, #96	@ 0x60
 8001060:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001066:	2302      	movs	r3, #2
 8001068:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800106a:	2300      	movs	r3, #0
 800106c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001072:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001076:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800107c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001080:	2200      	movs	r2, #0
 8001082:	4619      	mov	r1, r3
 8001084:	4828      	ldr	r0, [pc, #160]	@ (8001128 <MX_TIM1_Init+0x15c>)
 8001086:	f006 fedb 	bl	8007e40 <HAL_TIM_PWM_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001090:	f7ff fe78 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001094:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001098:	2204      	movs	r2, #4
 800109a:	4619      	mov	r1, r3
 800109c:	4822      	ldr	r0, [pc, #136]	@ (8001128 <MX_TIM1_Init+0x15c>)
 800109e:	f006 fecf 	bl	8007e40 <HAL_TIM_PWM_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 80010a8:	f7ff fe6c 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010b0:	2208      	movs	r2, #8
 80010b2:	4619      	mov	r1, r3
 80010b4:	481c      	ldr	r0, [pc, #112]	@ (8001128 <MX_TIM1_Init+0x15c>)
 80010b6:	f006 fec3 	bl	8007e40 <HAL_TIM_PWM_ConfigChannel>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80010c0:	f7ff fe60 	bl	8000d84 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80010c4:	4818      	ldr	r0, [pc, #96]	@ (8001128 <MX_TIM1_Init+0x15c>)
 80010c6:	f007 fdcf 	bl	8008c68 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80010ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80010d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = TIM_DTG_200ns;
 80010da:	2322      	movs	r3, #34	@ 0x22
 80010dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010fe:	2300      	movs	r3, #0
 8001100:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4619      	mov	r1, r3
 800110a:	4807      	ldr	r0, [pc, #28]	@ (8001128 <MX_TIM1_Init+0x15c>)
 800110c:	f007 fd20 	bl	8008b50 <HAL_TIMEx_ConfigBreakDeadTime>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8001116:	f7ff fe35 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800111a:	4803      	ldr	r0, [pc, #12]	@ (8001128 <MX_TIM1_Init+0x15c>)
 800111c:	f000 f90e 	bl	800133c <HAL_TIM_MspPostInit>

}
 8001120:	bf00      	nop
 8001122:	3760      	adds	r7, #96	@ 0x60
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000538 	.word	0x20000538
 800112c:	40012c00 	.word	0x40012c00

08001130 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	@ 0x28
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001142:	463b      	mov	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
 8001150:	615a      	str	r2, [r3, #20]
 8001152:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001154:	4b20      	ldr	r3, [pc, #128]	@ (80011d8 <MX_TIM2_Init+0xa8>)
 8001156:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800115a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PSC;
 800115c:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <MX_TIM2_Init+0xa8>)
 800115e:	2200      	movs	r2, #0
 8001160:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001162:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <MX_TIM2_Init+0xa8>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_ARR;
 8001168:	4b1b      	ldr	r3, [pc, #108]	@ (80011d8 <MX_TIM2_Init+0xa8>)
 800116a:	f04f 32ff 	mov.w	r2, #4294967295
 800116e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001170:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <MX_TIM2_Init+0xa8>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001176:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <MX_TIM2_Init+0xa8>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800117c:	4816      	ldr	r0, [pc, #88]	@ (80011d8 <MX_TIM2_Init+0xa8>)
 800117e:	f006 fa51 	bl	8007624 <HAL_TIM_OC_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001188:	f7ff fdfc 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	480f      	ldr	r0, [pc, #60]	@ (80011d8 <MX_TIM2_Init+0xa8>)
 800119c:	f007 fc56 	bl	8008a4c <HAL_TIMEx_MasterConfigSynchronization>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80011a6:	f7ff fded 	bl	8000d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ba:	463b      	mov	r3, r7
 80011bc:	2200      	movs	r2, #0
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <MX_TIM2_Init+0xa8>)
 80011c2:	f006 fdc3 	bl	8007d4c <HAL_TIM_OC_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80011cc:	f7ff fdda 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	3728      	adds	r7, #40	@ 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000584 	.word	0x20000584

080011dc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ee:	463b      	mov	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
 80011fc:	615a      	str	r2, [r3, #20]
 80011fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001200:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <MX_TIM3_Init+0xa8>)
 8001202:	4a21      	ldr	r2, [pc, #132]	@ (8001288 <MX_TIM3_Init+0xac>)
 8001204:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = TIM3_PSC;
 8001206:	4b1f      	ldr	r3, [pc, #124]	@ (8001284 <MX_TIM3_Init+0xa8>)
 8001208:	2210      	movs	r2, #16
 800120a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <MX_TIM3_Init+0xa8>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR;
 8001212:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <MX_TIM3_Init+0xa8>)
 8001214:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001218:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <MX_TIM3_Init+0xa8>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <MX_TIM3_Init+0xa8>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001226:	4817      	ldr	r0, [pc, #92]	@ (8001284 <MX_TIM3_Init+0xa8>)
 8001228:	f006 f9fc 	bl	8007624 <HAL_TIM_OC_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001232:	f7ff fda7 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	4619      	mov	r1, r3
 8001244:	480f      	ldr	r0, [pc, #60]	@ (8001284 <MX_TIM3_Init+0xa8>)
 8001246:	f007 fc01 	bl	8008a4c <HAL_TIMEx_MasterConfigSynchronization>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001250:	f7ff fd98 	bl	8000d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001254:	2300      	movs	r3, #0
 8001256:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	2200      	movs	r2, #0
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	@ (8001284 <MX_TIM3_Init+0xa8>)
 800126c:	f006 fd6e 	bl	8007d4c <HAL_TIM_OC_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001276:	f7ff fd85 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	@ 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200005d0 	.word	0x200005d0
 8001288:	40000400 	.word	0x40000400

0800128c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0d      	ldr	r2, [pc, #52]	@ (80012d0 <HAL_TIM_PWM_MspInit+0x44>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d113      	bne.n	80012c6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800129e:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <HAL_TIM_PWM_MspInit+0x48>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a2:	4a0c      	ldr	r2, [pc, #48]	@ (80012d4 <HAL_TIM_PWM_MspInit+0x48>)
 80012a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012aa:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <HAL_TIM_PWM_MspInit+0x48>)
 80012ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2105      	movs	r1, #5
 80012ba:	2019      	movs	r0, #25
 80012bc:	f003 ff84 	bl	80051c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80012c0:	2019      	movs	r0, #25
 80012c2:	f003 ff9b 	bl	80051fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40012c00 	.word	0x40012c00
 80012d4:	40021000 	.word	0x40021000

080012d8 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012e8:	d10c      	bne.n	8001304 <HAL_TIM_OC_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ea:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <HAL_TIM_OC_MspInit+0x5c>)
 80012ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ee:	4a11      	ldr	r2, [pc, #68]	@ (8001334 <HAL_TIM_OC_MspInit+0x5c>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <HAL_TIM_OC_MspInit+0x5c>)
 80012f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001302:	e010      	b.n	8001326 <HAL_TIM_OC_MspInit+0x4e>
  else if(tim_ocHandle->Instance==TIM3)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0b      	ldr	r2, [pc, #44]	@ (8001338 <HAL_TIM_OC_MspInit+0x60>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d10b      	bne.n	8001326 <HAL_TIM_OC_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <HAL_TIM_OC_MspInit+0x5c>)
 8001310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001312:	4a08      	ldr	r2, [pc, #32]	@ (8001334 <HAL_TIM_OC_MspInit+0x5c>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	6593      	str	r3, [r2, #88]	@ 0x58
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <HAL_TIM_OC_MspInit+0x5c>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000
 8001338:	40000400 	.word	0x40000400

0800133c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	@ 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a28      	ldr	r2, [pc, #160]	@ (80013fc <HAL_TIM_MspPostInit+0xc0>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d149      	bne.n	80013f2 <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	4b28      	ldr	r3, [pc, #160]	@ (8001400 <HAL_TIM_MspPostInit+0xc4>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	4a27      	ldr	r2, [pc, #156]	@ (8001400 <HAL_TIM_MspPostInit+0xc4>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136a:	4b25      	ldr	r3, [pc, #148]	@ (8001400 <HAL_TIM_MspPostInit+0xc4>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <HAL_TIM_MspPostInit+0xc4>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	4a21      	ldr	r2, [pc, #132]	@ (8001400 <HAL_TIM_MspPostInit+0xc4>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001382:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <HAL_TIM_MspPostInit+0xc4>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800138e:	2307      	movs	r3, #7
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800139e:	2302      	movs	r3, #2
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4816      	ldr	r0, [pc, #88]	@ (8001404 <HAL_TIM_MspPostInit+0xc8>)
 80013aa:	f004 feb9 	bl	8006120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80013ae:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80013c0:	2306      	movs	r3, #6
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	480f      	ldr	r0, [pc, #60]	@ (8001408 <HAL_TIM_MspPostInit+0xcc>)
 80013cc:	f004 fea8 	bl	8006120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80013e2:	2304      	movs	r3, #4
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4806      	ldr	r0, [pc, #24]	@ (8001408 <HAL_TIM_MspPostInit+0xcc>)
 80013ee:	f004 fe97 	bl	8006120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	@ 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40012c00 	.word	0x40012c00
 8001400:	40021000 	.word	0x40021000
 8001404:	48000800 	.word	0x48000800
 8001408:	48000400 	.word	0x48000400

0800140c <average>:
//     }
//     return RESULT_OK(NULL);
// }

static void average(uint8_t adc_id, float32_t *adc_store)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
    uint16_t i;
    float32_t total = 0;
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < ADC_NEED_LEN; i++)
 800141e:	2300      	movs	r3, #0
 8001420:	81fb      	strh	r3, [r7, #14]
 8001422:	e013      	b.n	800144c <average+0x40>
    {
        total += ADC_Values[i * ADC_COUNT + adc_id];
 8001424:	89fb      	ldrh	r3, [r7, #14]
 8001426:	009a      	lsls	r2, r3, #2
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	4413      	add	r3, r2
 800142c:	4a10      	ldr	r2, [pc, #64]	@ (8001470 <average+0x64>)
 800142e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143a:	ed97 7a02 	vldr	s14, [r7, #8]
 800143e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001442:	edc7 7a02 	vstr	s15, [r7, #8]
    for (i = 0; i < ADC_NEED_LEN; i++)
 8001446:	89fb      	ldrh	r3, [r7, #14]
 8001448:	3301      	adds	r3, #1
 800144a:	81fb      	strh	r3, [r7, #14]
 800144c:	89fb      	ldrh	r3, [r7, #14]
 800144e:	2b10      	cmp	r3, #16
 8001450:	d9e8      	bls.n	8001424 <average+0x18>
    }
    *adc_store = total / (float32_t)ADC_NEED_LEN;
 8001452:	ed97 7a02 	vldr	s14, [r7, #8]
 8001456:	eef3 6a01 	vmov.f32	s13, #49	@ 0x41880000  17.0
 800145a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	edc3 7a00 	vstr	s15, [r3]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	2000061c 	.word	0x2000061c

08001474 <adc_renew>:
{
    *adc_store += ALPHA * ((float32_t)ADC_Values[adc_id] - *adc_store);
}

Result adc_renew(ADC_OWN *adc, float32_t *current)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
    average(adc->const_h.id, &adc->value);
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	3310      	adds	r3, #16
 8001488:	4619      	mov	r1, r3
 800148a:	4610      	mov	r0, r2
 800148c:	f7ff ffbe 	bl	800140c <average>
    *current = (adc->value - adc->zero) * adc->current_trs;
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	ed93 7a04 	vldr	s14, [r3, #16]
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	edd3 7a03 	vldr	s15, [r3, #12]
 800149c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80014a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	edc3 7a00 	vstr	s15, [r3]
    return RESULT_OK(NULL);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	605a      	str	r2, [r3, #4]
}
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <adc_init>:

#define ADC_TO_VOL (3.3f/4095.0f)
#define VOL_SEP (2.0f/3.0f)
#define ADC_TRANS ADC_TO_VOL/VOL_SEP
static void adc_init(ADC_OWN *adc)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
    adc->current_trs = ADC_TRANS / adc->const_h.sensitive;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80014d2:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001500 <adc_init+0x3c>
 80014d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	edc3 7a02 	vstr	s15, [r3, #8]
    average(adc->const_h.id, &adc->value);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	781a      	ldrb	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3310      	adds	r3, #16
 80014e8:	4619      	mov	r1, r3
 80014ea:	4610      	mov	r0, r2
 80014ec:	f7ff ff8e 	bl	800140c <average>
    adc->zero = adc->value;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691a      	ldr	r2, [r3, #16]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	60da      	str	r2, [r3, #12]
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	3a9e704d 	.word	0x3a9e704d

08001504 <StartAdcTask>:

bool adc_ready = 0;
float32_t current_h[3];
void StartAdcTask(void *argument)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    ERROR_CHECK_HAL_HANDLE(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Values, ADC_COUNT * ADC_NEED_LEN));
 800150c:	2244      	movs	r2, #68	@ 0x44
 800150e:	4933      	ldr	r1, [pc, #204]	@ (80015dc <StartAdcTask+0xd8>)
 8001510:	4833      	ldr	r0, [pc, #204]	@ (80015e0 <StartAdcTask+0xdc>)
 8001512:	f002 fdc1 	bl	8004098 <HAL_ADC_Start_DMA>
 8001516:	4603      	mov	r3, r0
 8001518:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800151c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <StartAdcTask+0x2c>
 8001524:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8001528:	4b2e      	ldr	r3, [pc, #184]	@ (80015e4 <StartAdcTask+0xe0>)
 800152a:	701a      	strb	r2, [r3, #0]
 800152c:	f7ff fc2a 	bl	8000d84 <Error_Handler>
    for(;;)
    {
        RESULT_CHECK_HANDLE(adc_renew(&adc_u, &current_h[0]));
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4a2c      	ldr	r2, [pc, #176]	@ (80015e8 <StartAdcTask+0xe4>)
 8001536:	492d      	ldr	r1, [pc, #180]	@ (80015ec <StartAdcTask+0xe8>)
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff9b 	bl	8001474 <adc_renew>
 800153e:	7f3b      	ldrb	r3, [r7, #28]
 8001540:	f083 0301 	eor.w	r3, r3, #1
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <StartAdcTask+0x52>
 800154a:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800154e:	4b25      	ldr	r3, [pc, #148]	@ (80015e4 <StartAdcTask+0xe0>)
 8001550:	701a      	strb	r2, [r3, #0]
 8001552:	f7ff fc17 	bl	8000d84 <Error_Handler>
        RESULT_CHECK_HANDLE(adc_renew(&adc_v, &current_h[1]));
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4a25      	ldr	r2, [pc, #148]	@ (80015f0 <StartAdcTask+0xec>)
 800155c:	4925      	ldr	r1, [pc, #148]	@ (80015f4 <StartAdcTask+0xf0>)
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff88 	bl	8001474 <adc_renew>
 8001564:	7d3b      	ldrb	r3, [r7, #20]
 8001566:	f083 0301 	eor.w	r3, r3, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <StartAdcTask+0x78>
 8001570:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8001574:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <StartAdcTask+0xe0>)
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	f7ff fc04 	bl	8000d84 <Error_Handler>
        RESULT_CHECK_HANDLE(adc_renew(&adc_w, &current_h[2]));
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	4a1d      	ldr	r2, [pc, #116]	@ (80015f8 <StartAdcTask+0xf4>)
 8001582:	491e      	ldr	r1, [pc, #120]	@ (80015fc <StartAdcTask+0xf8>)
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff75 	bl	8001474 <adc_renew>
 800158a:	7b3b      	ldrb	r3, [r7, #12]
 800158c:	f083 0301 	eor.w	r3, r3, #1
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <StartAdcTask+0x9e>
 8001596:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800159a:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <StartAdcTask+0xe0>)
 800159c:	701a      	strb	r2, [r3, #0]
 800159e:	f7ff fbf1 	bl	8000d84 <Error_Handler>
        if (!adc_ready && HAL_GetTick() >= 1000)
 80015a2:	4b17      	ldr	r3, [pc, #92]	@ (8001600 <StartAdcTask+0xfc>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	f083 0301 	eor.w	r3, r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d011      	beq.n	80015d4 <StartAdcTask+0xd0>
 80015b0:	f002 f9c4 	bl	800393c <HAL_GetTick>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015ba:	d30b      	bcc.n	80015d4 <StartAdcTask+0xd0>
        {
            adc_ready = 1;
 80015bc:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <StartAdcTask+0xfc>)
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
            adc_init(&adc_u);
 80015c2:	480a      	ldr	r0, [pc, #40]	@ (80015ec <StartAdcTask+0xe8>)
 80015c4:	f7ff ff7e 	bl	80014c4 <adc_init>
            adc_init(&adc_v);
 80015c8:	480a      	ldr	r0, [pc, #40]	@ (80015f4 <StartAdcTask+0xf0>)
 80015ca:	f7ff ff7b 	bl	80014c4 <adc_init>
            adc_init(&adc_w);
 80015ce:	480b      	ldr	r0, [pc, #44]	@ (80015fc <StartAdcTask+0xf8>)
 80015d0:	f7ff ff78 	bl	80014c4 <adc_init>
        }
        osDelay(10);
 80015d4:	200a      	movs	r0, #10
 80015d6:	f008 fa47 	bl	8009a68 <osDelay>
        RESULT_CHECK_HANDLE(adc_renew(&adc_u, &current_h[0]));
 80015da:	e7a9      	b.n	8001530 <StartAdcTask+0x2c>
 80015dc:	2000061c 	.word	0x2000061c
 80015e0:	200002b8 	.word	0x200002b8
 80015e4:	20000990 	.word	0x20000990
 80015e8:	200006a8 	.word	0x200006a8
 80015ec:	20000004 	.word	0x20000004
 80015f0:	200006ac 	.word	0x200006ac
 80015f4:	20000018 	.word	0x20000018
 80015f8:	200006b0 	.word	0x200006b0
 80015fc:	2000002c 	.word	0x2000002c
 8001600:	200006a4 	.word	0x200006a4

08001604 <fdcan_pkt_get_byte>:
bool fdcan_bus_off = false;

FncState fdacn_data_store = FNC_DISABLE;

Result fdcan_pkt_get_byte(FdcanPkt* pkt, uint8_t id, uint8_t* container)
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	@ 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	4613      	mov	r3, r2
 8001612:	71fb      	strb	r3, [r7, #7]
    if (pkt->len <= id) return RESULT_ERROR(RES_ERR_NOT_FOUND);
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	7b1b      	ldrb	r3, [r3, #12]
 8001618:	79fa      	ldrb	r2, [r7, #7]
 800161a:	429a      	cmp	r2, r3
 800161c:	d308      	bcc.n	8001630 <fdcan_pkt_get_byte+0x2c>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	461a      	mov	r2, r3
 8001622:	2300      	movs	r3, #0
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	6053      	str	r3, [r2, #4]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2208      	movs	r2, #8
 800162c:	711a      	strb	r2, [r3, #4]
 800162e:	e00b      	b.n	8001648 <fdcan_pkt_get_byte+0x44>
    *container = pkt->data[id];
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	4413      	add	r3, r2
 8001636:	791a      	ldrb	r2, [r3, #4]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	701a      	strb	r2, [r3, #0]
    return RESULT_OK(container);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	605a      	str	r2, [r3, #4]
}
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	3724      	adds	r7, #36	@ 0x24
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <fdcan_pkt_pool_alloc>:
    }
    fdcan_pkt_pool.remain = FDCAN_PKT_POOL_CAP;
}

Result fdcan_pkt_pool_alloc(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	@ 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
    if (fdcan_pkt_pool.head == NULL) {
 800165c:	4b16      	ldr	r3, [pc, #88]	@ (80016b8 <fdcan_pkt_pool_alloc+0x64>)
 800165e:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8001662:	2b00      	cmp	r3, #0
 8001664:	d108      	bne.n	8001678 <fdcan_pkt_pool_alloc+0x24>
        return RESULT_ERROR(RES_ERR_EMPTY);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	461a      	mov	r2, r3
 800166a:	2300      	movs	r3, #0
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	6053      	str	r3, [r2, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2205      	movs	r2, #5
 8001674:	711a      	strb	r2, [r3, #4]
    FdcanPkt* pkt = fdcan_pkt_pool.head;
    fdcan_pkt_pool.head = pkt->next;
    pkt->next = NULL;
    fdcan_pkt_pool.remain--;
    return RESULT_OK(pkt);
}
 8001676:	e019      	b.n	80016ac <fdcan_pkt_pool_alloc+0x58>
    FdcanPkt* pkt = fdcan_pkt_pool.head;
 8001678:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <fdcan_pkt_pool_alloc+0x64>)
 800167a:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 800167e:	61fb      	str	r3, [r7, #28]
    fdcan_pkt_pool.head = pkt->next;
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	4a0c      	ldr	r2, [pc, #48]	@ (80016b8 <fdcan_pkt_pool_alloc+0x64>)
 8001686:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    pkt->next = NULL;
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.remain--;
 8001690:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <fdcan_pkt_pool_alloc+0x64>)
 8001692:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 8001696:	3b01      	subs	r3, #1
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <fdcan_pkt_pool_alloc+0x64>)
 800169c:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
    return RESULT_OK(pkt);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	701a      	strb	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69fa      	ldr	r2, [r7, #28]
 80016aa:	605a      	str	r2, [r3, #4]
}
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	3724      	adds	r7, #36	@ 0x24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	200006b4 	.word	0x200006b4

080016bc <fdcan_pkt_pool_free>:

void fdcan_pkt_pool_free(FdcanPkt* pkt)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
    memset(pkt->data, 0, sizeof(pkt->data));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3304      	adds	r3, #4
 80016c8:	2208      	movs	r2, #8
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f00a ffd3 	bl	800c678 <memset>
    pkt->len = 0;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	731a      	strb	r2, [r3, #12]
    pkt->next = fdcan_pkt_pool.head;
 80016d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <fdcan_pkt_pool_free+0x48>)
 80016da:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	611a      	str	r2, [r3, #16]
    fdcan_pkt_pool.head = pkt;
 80016e2:	4a08      	ldr	r2, [pc, #32]	@ (8001704 <fdcan_pkt_pool_free+0x48>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
    fdcan_pkt_pool.remain++;
 80016ea:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <fdcan_pkt_pool_free+0x48>)
 80016ec:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 80016f0:	3301      	adds	r3, #1
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <fdcan_pkt_pool_free+0x48>)
 80016f6:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200006b4 	.word	0x200006b4

08001708 <fdcan_pkt_buf_push>:
    .buf = recv_pkt_buf,
    .cap = FDCAN_RECV_BUF_CAP,
};

Result fdcan_pkt_buf_push(FdcanPktBuf* self, FdcanPkt* pkt)
{
 8001708:	b480      	push	{r7}
 800170a:	b08b      	sub	sp, #44	@ 0x2c
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
    if (self->len >= self->cap) return RESULT_ERROR(RES_ERR_OVERFLOW);
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	429a      	cmp	r2, r3
 800171e:	d308      	bcc.n	8001732 <fdcan_pkt_buf_push+0x2a>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	461a      	mov	r2, r3
 8001724:	2300      	movs	r3, #0
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	6053      	str	r3, [r2, #4]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2207      	movs	r2, #7
 800172e:	711a      	strb	r2, [r3, #4]
 8001730:	e01e      	b.n	8001770 <fdcan_pkt_buf_push+0x68>
    size_t tail = (self->head + self->len) % self->cap;
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	4413      	add	r3, r2
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	68d2      	ldr	r2, [r2, #12]
 8001740:	fbb3 f1f2 	udiv	r1, r3, r2
 8001744:	fb01 f202 	mul.w	r2, r1, r2
 8001748:	1a9b      	subs	r3, r3, r2
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
    self->buf[tail] = pkt;
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	601a      	str	r2, [r3, #0]
    self->len++;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	609a      	str	r2, [r3, #8]
    return RESULT_OK(self);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	605a      	str	r2, [r3, #4]
}
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	372c      	adds	r7, #44	@ 0x2c
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_FDCAN_ErrorStatusCallback>:
#include "connectivity/fdcan/callback.h"
#include "fdcan.h"
#include "connectivity/fdcan/main.h"

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
    if (hfdcan == &hfdcan1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a08      	ldr	r2, [pc, #32]	@ (80017ac <HAL_FDCAN_ErrorStatusCallback+0x30>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d107      	bne.n	800179e <HAL_FDCAN_ErrorStatusCallback+0x22>
    {
        if (ITS_CHECK(ErrorStatusITs, FDCAN_IT_BUS_OFF))
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d002      	beq.n	800179e <HAL_FDCAN_ErrorStatusCallback+0x22>
        {
            fdcan_bus_off = true;
 8001798:	4b05      	ldr	r3, [pc, #20]	@ (80017b0 <HAL_FDCAN_ErrorStatusCallback+0x34>)
 800179a:	2201      	movs	r2, #1
 800179c:	701a      	strb	r2, [r3, #0]
        }
    }
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000478 	.word	0x20000478
 80017b0:	2000093c 	.word	0x2000093c

080017b4 <HAL_FDCAN_TxEventFifoCallback>:

void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08c      	sub	sp, #48	@ 0x30
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_NEW_DATA))
    {
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_FULL))
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_FDCAN_TxEventFifoCallback+0x20>
    {
        FDCAN_TxEventFifoTypeDef txEvent;
        HAL_FDCAN_GetTxEvent(hfdcan, &txEvent);
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	4619      	mov	r1, r3
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f004 fa58 	bl	8005c84 <HAL_FDCAN_GetTxEvent>
    }
    if (ITS_CHECK(TxEventFifoITs, FDCAN_IT_TX_EVT_FIFO_ELT_LOST))
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_FDCAN_TxEventFifoCallback+0x2e>
    {
        Error_Handler();
 80017de:	f7ff fad1 	bl	8000d84 <Error_Handler>
    }
}
 80017e2:	bf00      	nop
 80017e4:	3730      	adds	r7, #48	@ 0x30
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_FDCAN_TxBufferCompleteCallback>:

void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_FDCAN_RxFifo0Callback>:

FDCAN_RxHeaderTypeDef RxHeader0 = {0};
FDCAN_RxHeaderTypeDef RxHeader1 = {0};
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	@ 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
    if(ITS_CHECK(RxFifo0ITs, FDCAN_IT_RX_FIFO0_NEW_MESSAGE))
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b00      	cmp	r3, #0
 8001812:	d05b      	beq.n	80018cc <HAL_FDCAN_RxFifo0Callback+0xcc>
    {
        FdcanPkt* pkt = RESULT_UNWRAP_HANDLE(fdcan_pkt_pool_alloc());
 8001814:	f107 0318 	add.w	r3, r7, #24
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff1b 	bl	8001654 <fdcan_pkt_pool_alloc>
 800181e:	7e3b      	ldrb	r3, [r7, #24]
 8001820:	f083 0301 	eor.w	r3, r3, #1
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <HAL_FDCAN_RxFifo0Callback+0x36>
 800182a:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800182e:	4b29      	ldr	r3, [pc, #164]	@ (80018d4 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8001830:	701a      	strb	r2, [r3, #0]
 8001832:	f7ff faa7 	bl	8000d84 <Error_Handler>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
        ERROR_CHECK_HAL_HANDLE(HAL_FDCAN_GetRxMessage(
 800183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183c:	3304      	adds	r3, #4
 800183e:	4a26      	ldr	r2, [pc, #152]	@ (80018d8 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8001840:	2140      	movs	r1, #64	@ 0x40
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f004 f916 	bl	8005a74 <HAL_FDCAN_GetRxMessage>
 8001848:	4603      	mov	r3, r0
 800184a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800184e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_FDCAN_RxFifo0Callback+0x62>
 8001856:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 800185a:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800185c:	701a      	strb	r2, [r3, #0]
 800185e:	f7ff fa91 	bl	8000d84 <Error_Handler>
            hfdcan, FDCAN_RX_FIFO0, &RxHeader0, pkt->data));
        pkt->id = RxHeader0.Identifier;
 8001862:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001868:	601a      	str	r2, [r3, #0]
        pkt->len = RxHeader0.DataLength;
 800186a:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001872:	731a      	strb	r2, [r3, #12]
        if (pkt->id >= FDCAN_FILTER0_ID_MIN && pkt->id <= FDCAN_FILTER0_ID_MAX)
 8001874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b1f      	cmp	r3, #31
 800187a:	d90c      	bls.n	8001896 <HAL_FDCAN_RxFifo0Callback+0x96>
 800187c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b21      	cmp	r3, #33	@ 0x21
 8001882:	d808      	bhi.n	8001896 <HAL_FDCAN_RxFifo0Callback+0x96>
        {
            instant_recv_proc(pkt);
 8001884:	463b      	mov	r3, r7
 8001886:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001888:	4618      	mov	r0, r3
 800188a:	f000 f849 	bl	8001920 <instant_recv_proc>
            fdcan_pkt_pool_free(pkt);
 800188e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001890:	f7ff ff14 	bl	80016bc <fdcan_pkt_pool_free>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
        }
        else
        {}
    }
}
 8001894:	e01a      	b.n	80018cc <HAL_FDCAN_RxFifo0Callback+0xcc>
        else if (pkt->id >= FDCAN_FILTER1_ID_MIN && pkt->id <= FDCAN_FILTER1_ID_MAX)
 8001896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b21      	cmp	r3, #33	@ 0x21
 800189c:	d916      	bls.n	80018cc <HAL_FDCAN_RxFifo0Callback+0xcc>
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b23      	cmp	r3, #35	@ 0x23
 80018a4:	d812      	bhi.n	80018cc <HAL_FDCAN_RxFifo0Callback+0xcc>
            RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
 80018a6:	f107 0310 	add.w	r3, r7, #16
 80018aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ac:	490b      	ldr	r1, [pc, #44]	@ (80018dc <HAL_FDCAN_RxFifo0Callback+0xdc>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff2a 	bl	8001708 <fdcan_pkt_buf_push>
 80018b4:	7c3b      	ldrb	r3, [r7, #16]
 80018b6:	f083 0301 	eor.w	r3, r3, #1
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_FDCAN_RxFifo0Callback+0xcc>
 80018c0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80018c4:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	f7ff fa5c 	bl	8000d84 <Error_Handler>
}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	@ 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000990 	.word	0x20000990
 80018d8:	20000968 	.word	0x20000968
 80018dc:	20000040 	.word	0x20000040

080018e0 <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
        //     hfdcan, FDCAN_RX_FIFO1, &RxHeader1, pkt->data));
        // pkt->id = RxHeader1.Identifier;
        // pkt->len = RxHeader1.DataLength;
        // RESULT_CHECK_HANDLE(fdcan_pkt_buf_push(&fdcan_recv_pkt_buf, pkt));
    }
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <instant_recv_proc_inner>:
#include "fdcan.h"
#include "connectivity/cmds.h"
#include "connectivity/fdcan/pkt_write.h"

__weak Result instant_recv_proc_inner(FdcanPkt* pkt, uint8_t byte0)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b087      	sub	sp, #28
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	4613      	mov	r3, r2
 8001902:	71fb      	strb	r3, [r7, #7]
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	461a      	mov	r2, r3
 8001908:	2300      	movs	r3, #0
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	6053      	str	r3, [r2, #4]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2208      	movs	r2, #8
 8001912:	711a      	strb	r2, [r3, #4]
}
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	371c      	adds	r7, #28
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <instant_recv_proc>:
    return RESULT_ERROR(RES_ERR_NOT_FOUND);
}
#endif

Result instant_recv_proc(FdcanPkt* pkt)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	@ 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
    uint8_t code;
    RESULT_CHECK_RET_RES(fdcan_pkt_get_byte(pkt, 0, &code));
 800192a:	f107 001c 	add.w	r0, r7, #28
 800192e:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8001932:	2200      	movs	r2, #0
 8001934:	6839      	ldr	r1, [r7, #0]
 8001936:	f7ff fe65 	bl	8001604 <fdcan_pkt_get_byte>
 800193a:	7f3b      	ldrb	r3, [r7, #28]
 800193c:	f083 0301 	eor.w	r3, r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00c      	beq.n	8001960 <instant_recv_proc+0x40>
 8001946:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800194a:	4b18      	ldr	r3, [pc, #96]	@ (80019ac <instant_recv_proc+0x8c>)
 800194c:	701a      	strb	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	461a      	mov	r2, r3
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	e893 0003 	ldmia.w	r3, {r0, r1}
 800195a:	e882 0003 	stmia.w	r2, {r0, r1}
            fdacn_data_store = FNC_ENABLE;
            return RESULT_OK(NULL);
        }
        default: return instant_recv_proc_inner(pkt, code);
    }
}
 800195e:	e021      	b.n	80019a4 <instant_recv_proc+0x84>
    switch (code)
 8001960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001964:	2b11      	cmp	r3, #17
 8001966:	d002      	beq.n	800196e <instant_recv_proc+0x4e>
 8001968:	2b12      	cmp	r3, #18
 800196a:	d00a      	beq.n	8001982 <instant_recv_proc+0x62>
 800196c:	e013      	b.n	8001996 <instant_recv_proc+0x76>
            fdacn_data_store = FNC_DISABLE;
 800196e:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <instant_recv_proc+0x90>)
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	605a      	str	r2, [r3, #4]
}
 8001980:	e010      	b.n	80019a4 <instant_recv_proc+0x84>
            fdacn_data_store = FNC_ENABLE;
 8001982:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <instant_recv_proc+0x90>)
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
            return RESULT_OK(NULL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	605a      	str	r2, [r3, #4]
}
 8001994:	e006      	b.n	80019a4 <instant_recv_proc+0x84>
        default: return instant_recv_proc_inner(pkt, code);
 8001996:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6839      	ldr	r1, [r7, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ffa9 	bl	80018f6 <instant_recv_proc_inner>
}
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	3728      	adds	r7, #40	@ 0x28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000990 	.word	0x20000990
 80019b0:	2000093d 	.word	0x2000093d

080019b4 <INIT_OWN>:
#include "main/main.h"
#include "main/tim.h"
#include "motor/main.h"

void INIT_OWN(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
    tim_clk_APB1 = HAL_RCC_GetPCLK1Freq();
 80019b8:	f005 fad4 	bl	8006f64 <HAL_RCC_GetPCLK1Freq>
 80019bc:	4603      	mov	r3, r0
 80019be:	4a0f      	ldr	r2, [pc, #60]	@ (80019fc <INIT_OWN+0x48>)
 80019c0:	6013      	str	r3, [r2, #0]
    tim_clk_APB2 = HAL_RCC_GetPCLK2Freq();
 80019c2:	f005 fae5 	bl	8006f90 <HAL_RCC_GetPCLK2Freq>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a00 <INIT_OWN+0x4c>)
 80019ca:	6013      	str	r3, [r2, #0]
    if ((RCC->CFGR & RCC_CFGR_PPRE1) != RCC_CFGR_PPRE1_DIV1) tim_clk_APB1 *= 2U;
 80019cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a04 <INIT_OWN+0x50>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d004      	beq.n	80019e2 <INIT_OWN+0x2e>
 80019d8:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <INIT_OWN+0x48>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4a07      	ldr	r2, [pc, #28]	@ (80019fc <INIT_OWN+0x48>)
 80019e0:	6013      	str	r3, [r2, #0]
    if ((RCC->CFGR & RCC_CFGR_PPRE2) != RCC_CFGR_PPRE2_DIV1) tim_clk_APB2 *= 2U;
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <INIT_OWN+0x50>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <INIT_OWN+0x44>
 80019ee:	4b04      	ldr	r3, [pc, #16]	@ (8001a00 <INIT_OWN+0x4c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4a02      	ldr	r2, [pc, #8]	@ (8001a00 <INIT_OWN+0x4c>)
 80019f6:	6013      	str	r3, [r2, #0]
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000998 	.word	0x20000998
 8001a00:	2000099c 	.word	0x2000099c
 8001a04:	40021000 	.word	0x40021000

08001a08 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]
    if (
           (GPIO_Pin == motor_h.const_h.Hall_GPIO_Pin_x[0])
 8001a12:	4b0b      	ldr	r3, [pc, #44]	@ (8001a40 <HAL_GPIO_EXTI_Callback+0x38>)
 8001a14:	899b      	ldrh	r3, [r3, #12]
    if (
 8001a16:	88fa      	ldrh	r2, [r7, #6]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d009      	beq.n	8001a30 <HAL_GPIO_EXTI_Callback+0x28>
        || (GPIO_Pin == motor_h.const_h.Hall_GPIO_Pin_x[1])
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <HAL_GPIO_EXTI_Callback+0x38>)
 8001a1e:	89db      	ldrh	r3, [r3, #14]
 8001a20:	88fa      	ldrh	r2, [r7, #6]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d004      	beq.n	8001a30 <HAL_GPIO_EXTI_Callback+0x28>
        || (GPIO_Pin == motor_h.const_h.Hall_GPIO_Pin_x[2])
 8001a26:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <HAL_GPIO_EXTI_Callback+0x38>)
 8001a28:	8a1b      	ldrh	r3, [r3, #16]
 8001a2a:	88fa      	ldrh	r2, [r7, #6]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d102      	bne.n	8001a36 <HAL_GPIO_EXTI_Callback+0x2e>
    ) {
        motor_hall_exti(&motor_h);
 8001a30:	4803      	ldr	r0, [pc, #12]	@ (8001a40 <HAL_GPIO_EXTI_Callback+0x38>)
 8001a32:	f001 f9e7 	bl	8002e04 <motor_hall_exti>
    }
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000050 	.word	0x20000050

08001a44 <HAL_TIM_PeriodElapsedCallback_OWN>:

inline void HAL_TIM_PeriodElapsedCallback_OWN(TIM_HandleTypeDef *htim)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
    if (htim == motor_h.const_h.TIM_htimx)
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <HAL_TIM_PeriodElapsedCallback_OWN+0x20>)
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d102      	bne.n	8001a5c <HAL_TIM_PeriodElapsedCallback_OWN+0x18>
    {
        motor_pwm_pulse(&motor_h);
 8001a56:	4803      	ldr	r0, [pc, #12]	@ (8001a64 <HAL_TIM_PeriodElapsedCallback_OWN+0x20>)
 8001a58:	f001 fa76 	bl	8002f48 <motor_pwm_pulse>
    }
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000050 	.word	0x20000050

08001a68 <StartDefaultTask>:

#define DEFALT_TASK_DELAY_MS 50
uint32_t defalt_running;
void StartDefaultTask(void *argument)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
    const uint32_t osPeriod = pdMS_TO_TICKS(DEFALT_TASK_DELAY_MS);
 8001a70:	2332      	movs	r3, #50	@ 0x32
 8001a72:	60bb      	str	r3, [r7, #8]
    uint32_t next_wake = osKernelGetTickCount() + osPeriod;
 8001a74:	f007 ff4a 	bl	800990c <osKernelGetTickCount>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
    for(;;)
    {
        defalt_running = HAL_GetTick();
 8001a80:	f001 ff5c 	bl	800393c <HAL_GetTick>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a05      	ldr	r2, [pc, #20]	@ (8001a9c <StartDefaultTask+0x34>)
 8001a88:	6013      	str	r3, [r2, #0]
        osDelayUntil(next_wake);
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f008 f807 	bl	8009a9e <osDelayUntil>
        next_wake += osPeriod;
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	4413      	add	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
        defalt_running = HAL_GetTick();
 8001a98:	bf00      	nop
 8001a9a:	e7f1      	b.n	8001a80 <StartDefaultTask+0x18>
 8001a9c:	20000994 	.word	0x20000994

08001aa0 <motor_hall_to_angle>:
    },
    .pwm_it_angle_acc = 0.0f,
};

inline Result motor_hall_to_angle(uint8_t hall, volatile float32_t *angle)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	@ 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	72fb      	strb	r3, [r7, #11]
    switch(hall)
 8001aae:	7afb      	ldrb	r3, [r7, #11]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	2b05      	cmp	r3, #5
 8001ab4:	d827      	bhi.n	8001b06 <motor_hall_to_angle+0x66>
 8001ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8001abc <motor_hall_to_angle+0x1c>)
 8001ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abc:	08001aef 	.word	0x08001aef
 8001ac0:	08001adf 	.word	0x08001adf
 8001ac4:	08001ae7 	.word	0x08001ae7
 8001ac8:	08001aff 	.word	0x08001aff
 8001acc:	08001af7 	.word	0x08001af7
 8001ad0:	08001ad5 	.word	0x08001ad5
    {
        case 6:
        {
            *angle = 0.0f * DEG_TO_RAD;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
            break;
 8001adc:	e01c      	b.n	8001b18 <motor_hall_to_angle+0x78>
        }
        case 2:
        {
            *angle = 60.0f * DEG_TO_RAD;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a13      	ldr	r2, [pc, #76]	@ (8001b30 <motor_hall_to_angle+0x90>)
 8001ae2:	601a      	str	r2, [r3, #0]
            break;
 8001ae4:	e018      	b.n	8001b18 <motor_hall_to_angle+0x78>
        }
        case 3:
        {
            *angle = 120.0f * DEG_TO_RAD;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a12      	ldr	r2, [pc, #72]	@ (8001b34 <motor_hall_to_angle+0x94>)
 8001aea:	601a      	str	r2, [r3, #0]
            break;
 8001aec:	e014      	b.n	8001b18 <motor_hall_to_angle+0x78>
        }
        case 1:
        {
            *angle = 180.0f * DEG_TO_RAD;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a11      	ldr	r2, [pc, #68]	@ (8001b38 <motor_hall_to_angle+0x98>)
 8001af2:	601a      	str	r2, [r3, #0]
            break;
 8001af4:	e010      	b.n	8001b18 <motor_hall_to_angle+0x78>
        }
        case 5:
        {
            *angle = 240.0f * DEG_TO_RAD;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a10      	ldr	r2, [pc, #64]	@ (8001b3c <motor_hall_to_angle+0x9c>)
 8001afa:	601a      	str	r2, [r3, #0]
            break;
 8001afc:	e00c      	b.n	8001b18 <motor_hall_to_angle+0x78>
        }
        case 4:
        {
            *angle = 300.0f * DEG_TO_RAD;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a0f      	ldr	r2, [pc, #60]	@ (8001b40 <motor_hall_to_angle+0xa0>)
 8001b02:	601a      	str	r2, [r3, #0]
            break;
 8001b04:	e008      	b.n	8001b18 <motor_hall_to_angle+0x78>
        }
        default: return RESULT_ERROR(RES_ERR_NOT_FOUND);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	6053      	str	r3, [r2, #4]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2208      	movs	r2, #8
 8001b14:	711a      	strb	r2, [r3, #4]
    }
    return RESULT_OK(NULL);
}
 8001b16:	e005      	b.n	8001b24 <motor_hall_to_angle+0x84>
    return RESULT_OK(NULL);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
}
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	3724      	adds	r7, #36	@ 0x24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	3f860a92 	.word	0x3f860a92
 8001b34:	40060a92 	.word	0x40060a92
 8001b38:	40490fdb 	.word	0x40490fdb
 8001b3c:	40860a92 	.word	0x40860a92
 8001b40:	40a78d36 	.word	0x40a78d36

08001b44 <clampf>:

inline float32_t clampf(float32_t val, float32_t min, float32_t max)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b4e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b52:	ed87 1a01 	vstr	s2, [r7, #4]
    if (val > max) return max;
 8001b56:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b66:	dd01      	ble.n	8001b6c <clampf+0x28>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	e00b      	b.n	8001b84 <clampf+0x40>
    if (val < min) return min;
 8001b6c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b70:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7c:	d501      	bpl.n	8001b82 <clampf+0x3e>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	e000      	b.n	8001b84 <clampf+0x40>
    return val;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <wrap_0_2pi>:

inline float32_t wrap_0_2pi(float32_t x)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t n = (int32_t)(x / MUL_2_PI);
 8001ba2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ba6:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001c08 <wrap_0_2pi+0x70>
 8001baa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bb2:	ee17 3a90 	vmov	r3, s15
 8001bb6:	60fb      	str	r3, [r7, #12]
    x -= (float32_t)n * MUL_2_PI;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	ee07 3a90 	vmov	s15, r3
 8001bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001c08 <wrap_0_2pi+0x70>
 8001bc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bca:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd2:	edc7 7a01 	vstr	s15, [r7, #4]
    if (x < 0) x += MUL_2_PI;
 8001bd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be2:	d507      	bpl.n	8001bf4 <wrap_0_2pi+0x5c>
 8001be4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001be8:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001c08 <wrap_0_2pi+0x70>
 8001bec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bf0:	edc7 7a01 	vstr	s15, [r7, #4]
    return x;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	ee07 3a90 	vmov	s15, r3
}
 8001bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	40c90fdb 	.word	0x40c90fdb

08001c0c <wrap_m1_1pi>:

inline float32_t wrap_m1_1pi(float32_t x)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t n = (int32_t)(x / MUL_2_PI);
 8001c16:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c1a:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001ca4 <wrap_m1_1pi+0x98>
 8001c1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c26:	ee17 3a90 	vmov	r3, s15
 8001c2a:	60fb      	str	r3, [r7, #12]
    x -= (float32_t)n * MUL_2_PI;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c36:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001ca4 <wrap_m1_1pi+0x98>
 8001c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c46:	edc7 7a01 	vstr	s15, [r7, #4]
    if      (x < -PI) x += MUL_2_PI;
 8001c4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c4e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001ca8 <wrap_m1_1pi+0x9c>
 8001c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	d508      	bpl.n	8001c6e <wrap_m1_1pi+0x62>
 8001c5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c60:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001ca4 <wrap_m1_1pi+0x98>
 8001c64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c68:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c6c:	e010      	b.n	8001c90 <wrap_m1_1pi+0x84>
    else if (x >= PI) x -= MUL_2_PI;
 8001c6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c72:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001cac <wrap_m1_1pi+0xa0>
 8001c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7e:	db07      	blt.n	8001c90 <wrap_m1_1pi+0x84>
 8001c80:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c84:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001ca4 <wrap_m1_1pi+0x98>
 8001c88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c8c:	edc7 7a01 	vstr	s15, [r7, #4]
    return x;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	ee07 3a90 	vmov	s15, r3
}
 8001c96:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40c90fdb 	.word	0x40c90fdb
 8001ca8:	c0490fdb 	.word	0xc0490fdb
 8001cac:	40490fdb 	.word	0x40490fdb

08001cb0 <fast_fabsf>:

inline float32_t fast_fabsf(float32_t x)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	ed87 0a01 	vstr	s0, [r7, #4]
    union {
        float32_t f;
        uint32_t u;
    } v = { x };
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]
    v.u &= 0x7FFFFFFF;  // 清除最高位 sign bit
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cc4:	60fb      	str	r3, [r7, #12]
    return v.f;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	ee07 3a90 	vmov	s15, r3
}
 8001ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <CLARKE_run_ideal>:
#include "motor/clarke.h"
#include "motor/basic.h"

inline void CLARKE_run_ideal(volatile CLARKE *clarke)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
    clarke->Alpha = clarke->As;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	60da      	str	r2, [r3, #12]
    clarke->Beta = (clarke->As + clarke->Bs * 2.0f) * ONEbySQRT3;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	ed93 7a00 	vldr	s14, [r3]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cf8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d00:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001d1c <CLARKE_run_ideal+0x40>
 8001d04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	3f13cd3a 	.word	0x3f13cd3a

08001d20 <motor_120_hall_update>:
};
static const uint8_t motor_seq_index[] = {0xFF, 5, 3, 4, 1, 0, 2, 0xFF};

// 120 deg cntrol
void motor_120_hall_update(const MotorParameter *motor)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
    uint8_t idx = motor_seq_index[motor->exti_hall_curt];
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b89      	ldr	r3, [pc, #548]	@ (8001f58 <motor_120_hall_update+0x238>)
 8001d34:	5c9b      	ldrb	r3, [r3, r2]
 8001d36:	73fb      	strb	r3, [r7, #15]
    if (motor->reverse) idx = (idx + 3) % 6; // CCW
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00d      	beq.n	8001d5e <motor_120_hall_update+0x3e>
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	1cda      	adds	r2, r3, #3
 8001d46:	4b85      	ldr	r3, [pc, #532]	@ (8001f5c <motor_120_hall_update+0x23c>)
 8001d48:	fb83 3102 	smull	r3, r1, r3, r2
 8001d4c:	17d3      	asrs	r3, r2, #31
 8001d4e:	1ac9      	subs	r1, r1, r3
 8001d50:	460b      	mov	r3, r1
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	440b      	add	r3, r1
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	1ad1      	subs	r1, r2, r3
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	73fb      	strb	r3, [r7, #15]
    // idx = 5;
    uint8_t i;
    uint32_t compare = (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_u);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	edd3 7a65 	vldr	s15, [r3, #404]	@ 0x194
 8001d64:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8001f60 <motor_120_hall_update+0x240>
 8001d68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d70:	ee17 3a90 	vmov	r3, s15
 8001d74:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < 3; i++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	73bb      	strb	r3, [r7, #14]
 8001d7a:	e0e3      	b.n	8001f44 <motor_120_hall_update+0x224>
    {
        switch (motor_seq_map[idx][i])
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	7bb9      	ldrb	r1, [r7, #14]
 8001d80:	4878      	ldr	r0, [pc, #480]	@ (8001f64 <motor_120_hall_update+0x244>)
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	4403      	add	r3, r0
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f993 3000 	ldrsb.w	r3, [r3]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d05d      	beq.n	8001e52 <motor_120_hall_update+0x132>
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	f040 80bc 	bne.w	8001f14 <motor_120_hall_update+0x1f4>
        {
            case HIGH_PASS:
            {
                __HAL_TIM_SET_COMPARE(motor->const_h.PWM_htimx, motor->const_h.PWM_TIM_CHANNEL_x[i], compare);
 8001d9c:	7bba      	ldrb	r2, [r7, #14]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3206      	adds	r2, #6
 8001da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d105      	bne.n	8001db6 <motor_120_hall_update+0x96>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001db4:	e038      	b.n	8001e28 <motor_120_hall_update+0x108>
 8001db6:	7bba      	ldrb	r2, [r7, #14]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3206      	adds	r2, #6
 8001dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d105      	bne.n	8001dd0 <motor_120_hall_update+0xb0>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	6393      	str	r3, [r2, #56]	@ 0x38
 8001dce:	e02b      	b.n	8001e28 <motor_120_hall_update+0x108>
 8001dd0:	7bba      	ldrb	r2, [r7, #14]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3206      	adds	r2, #6
 8001dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d105      	bne.n	8001dea <motor_120_hall_update+0xca>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001de8:	e01e      	b.n	8001e28 <motor_120_hall_update+0x108>
 8001dea:	7bba      	ldrb	r2, [r7, #14]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3206      	adds	r2, #6
 8001df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df4:	2b0c      	cmp	r3, #12
 8001df6:	d105      	bne.n	8001e04 <motor_120_hall_update+0xe4>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e02:	e011      	b.n	8001e28 <motor_120_hall_update+0x108>
 8001e04:	7bba      	ldrb	r2, [r7, #14]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3206      	adds	r2, #6
 8001e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0e:	2b10      	cmp	r3, #16
 8001e10:	d105      	bne.n	8001e1e <motor_120_hall_update+0xfe>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e1c:	e004      	b.n	8001e28 <motor_120_hall_update+0x108>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	64d3      	str	r3, [r2, #76]	@ 0x4c
                HAL_TIM_PWM_Start(motor->const_h.PWM_htimx, motor->const_h.PWM_TIM_CHANNEL_x[i]);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6958      	ldr	r0, [r3, #20]
 8001e2c:	7bba      	ldrb	r2, [r7, #14]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3206      	adds	r2, #6
 8001e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e36:	4619      	mov	r1, r3
 8001e38:	f005 fca2 	bl	8007780 <HAL_TIM_PWM_Start>
                HAL_TIMEx_PWMN_Stop(motor->const_h.PWM_htimx, motor->const_h.PWM_TIM_CHANNEL_x[i]);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6958      	ldr	r0, [r3, #20]
 8001e40:	7bba      	ldrb	r2, [r7, #14]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3206      	adds	r2, #6
 8001e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f006 fda0 	bl	8008990 <HAL_TIMEx_PWMN_Stop>
                // HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
                break;
 8001e50:	e075      	b.n	8001f3e <motor_120_hall_update+0x21e>
            }
            case LOW_PASS:
            {
                HAL_TIM_PWM_Stop(motor->const_h.PWM_htimx, motor->const_h.PWM_TIM_CHANNEL_x[i]);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6958      	ldr	r0, [r3, #20]
 8001e56:	7bba      	ldrb	r2, [r7, #14]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3206      	adds	r2, #6
 8001e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e60:	4619      	mov	r1, r3
 8001e62:	f005 fd8d 	bl	8007980 <HAL_TIM_PWM_Stop>
                __HAL_TIM_SET_COMPARE(motor->const_h.PWM_htimx, motor->const_h.PWM_TIM_CHANNEL_x[i], TIM1_ARR);
 8001e66:	7bba      	ldrb	r2, [r7, #14]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3206      	adds	r2, #6
 8001e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d106      	bne.n	8001e82 <motor_120_hall_update+0x162>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001e7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e80:	e03d      	b.n	8001efe <motor_120_hall_update+0x1de>
 8001e82:	7bba      	ldrb	r2, [r7, #14]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3206      	adds	r2, #6
 8001e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d106      	bne.n	8001e9e <motor_120_hall_update+0x17e>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001e9a:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e9c:	e02f      	b.n	8001efe <motor_120_hall_update+0x1de>
 8001e9e:	7bba      	ldrb	r2, [r7, #14]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3206      	adds	r2, #6
 8001ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d106      	bne.n	8001eba <motor_120_hall_update+0x19a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001eb6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001eb8:	e021      	b.n	8001efe <motor_120_hall_update+0x1de>
 8001eba:	7bba      	ldrb	r2, [r7, #14]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3206      	adds	r2, #6
 8001ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec4:	2b0c      	cmp	r3, #12
 8001ec6:	d106      	bne.n	8001ed6 <motor_120_hall_update+0x1b6>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001ed2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed4:	e013      	b.n	8001efe <motor_120_hall_update+0x1de>
 8001ed6:	7bba      	ldrb	r2, [r7, #14]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3206      	adds	r2, #6
 8001edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee0:	2b10      	cmp	r3, #16
 8001ee2:	d106      	bne.n	8001ef2 <motor_120_hall_update+0x1d2>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001eee:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ef0:	e005      	b.n	8001efe <motor_120_hall_update+0x1de>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
                HAL_TIMEx_PWMN_Start(motor->const_h.PWM_htimx, motor->const_h.PWM_TIM_CHANNEL_x[i]);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6958      	ldr	r0, [r3, #20]
 8001f02:	7bba      	ldrb	r2, [r7, #14]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3206      	adds	r2, #6
 8001f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f006 fc8b 	bl	8008828 <HAL_TIMEx_PWMN_Start>
                // HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_SET);
                break;
 8001f12:	e014      	b.n	8001f3e <motor_120_hall_update+0x21e>
            }
            default:
            {
                HAL_TIM_PWM_Stop(motor->const_h.PWM_htimx, motor->const_h.PWM_TIM_CHANNEL_x[i]);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6958      	ldr	r0, [r3, #20]
 8001f18:	7bba      	ldrb	r2, [r7, #14]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3206      	adds	r2, #6
 8001f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f22:	4619      	mov	r1, r3
 8001f24:	f005 fd2c 	bl	8007980 <HAL_TIM_PWM_Stop>
                HAL_TIMEx_PWMN_Stop(motor->const_h.PWM_htimx, motor->const_h.PWM_TIM_CHANNEL_x[i]);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6958      	ldr	r0, [r3, #20]
 8001f2c:	7bba      	ldrb	r2, [r7, #14]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3206      	adds	r2, #6
 8001f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f36:	4619      	mov	r1, r3
 8001f38:	f006 fd2a 	bl	8008990 <HAL_TIMEx_PWMN_Stop>
                // HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
                break;
 8001f3c:	bf00      	nop
    for (i = 0; i < 3; i++)
 8001f3e:	7bbb      	ldrb	r3, [r7, #14]
 8001f40:	3301      	adds	r3, #1
 8001f42:	73bb      	strb	r3, [r7, #14]
 8001f44:	7bbb      	ldrb	r3, [r7, #14]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	f67f af18 	bls.w	8001d7c <motor_120_hall_update+0x5c>
            }
        }
    }
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	0800c9a0 	.word	0x0800c9a0
 8001f5c:	2aaaaaab 	.word	0x2aaaaaab
 8001f60:	43fa0000 	.word	0x43fa0000
 8001f64:	0800c98c 	.word	0x0800c98c

08001f68 <motor_foc_hall_update>:
    return RESULT_OK(NULL);
}

// Thread - hallExti - 0
Result motor_foc_hall_update(MotorParameter *motor)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
    float32_t htim_cnt = (float32_t)__HAL_TIM_GET_COUNTER(motor->const_h.ELE_htimx);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f82:	edc7 7a05 	vstr	s15, [r7, #20]
    __HAL_TIM_SET_COUNTER(motor->const_h.ELE_htimx, 0);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (htim_cnt == 0U) htim_cnt = 1U;
 8001f90:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9c:	d102      	bne.n	8001fa4 <motor_foc_hall_update+0x3c>
 8001f9e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001fa2:	617b      	str	r3, [r7, #20]
    motor->rpm_fbk = motor->rpm_fbk_trans / htim_cnt;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8001faa:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
    motor->pwm_per_it_angle_itpl = motor->pwm_per_it_angle_itpl_trans / htim_cnt;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 8001fbe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c

    uint16_t expected = (!motor->reverse)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
 8001fd2:	f083 0301 	eor.w	r3, r3, #1
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d006      	beq.n	8001fea <motor_foc_hall_update+0x82>
        ? hall_seq_clw[motor->exti_hall_last]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <motor_foc_hall_update+0xc8>)
 8001fe6:	5c9b      	ldrb	r3, [r3, r2]
 8001fe8:	e005      	b.n	8001ff6 <motor_foc_hall_update+0x8e>
        : hall_seq_ccw[motor->exti_hall_last];
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <motor_foc_hall_update+0xcc>)
 8001ff4:	5c9b      	ldrb	r3, [r3, r2]
    uint16_t expected = (!motor->reverse)
 8001ff6:	827b      	strh	r3, [r7, #18]
    // if (hall_last == 0) // ? CHECK
    // {
    //     hall_last = expected;
    // }
    if (motor->exti_hall_curt == expected)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	8a7b      	ldrh	r3, [r7, #18]
 8002004:	4293      	cmp	r3, r2
 8002006:	d107      	bne.n	8002018 <motor_foc_hall_update+0xb0>
    {
        // rotated
        motor->hall_angle_acc = 0;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	665a      	str	r2, [r3, #100]	@ 0x64
        motor->pwm_it_angle_acc = 0;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	671a      	str	r2, [r3, #112]	@ 0x70
    }
    
    return RESULT_OK(NULL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	605a      	str	r2, [r3, #4]
}
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	371c      	adds	r7, #28
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	0800c97c 	.word	0x0800c97c
 8002034:	0800c984 	.word	0x0800c984

08002038 <stop_check>:

static inline void stop_check(MotorParameter *motor)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    // 停轉判斷
    // 現在與上一個霍爾的總和與之前的總和相同，視為馬達靜止不動
    uint8_t hall_current = motor->exti_hall_curt;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002046:	73fb      	strb	r3, [r7, #15]
    uint16_t hall_total = motor->pwm_hall_last * 10 + hall_current;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800204e:	461a      	mov	r2, r3
 8002050:	0092      	lsls	r2, r2, #2
 8002052:	4413      	add	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	b29b      	uxth	r3, r3
 800205c:	4413      	add	r3, r2
 800205e:	81bb      	strh	r3, [r7, #12]
    if(hall_total == motor->pwm_hall_acc)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8002066:	b29b      	uxth	r3, r3
 8002068:	89ba      	ldrh	r2, [r7, #12]
 800206a:	429a      	cmp	r2, r3
 800206c:	d124      	bne.n	80020b8 <stop_check+0x80>
    {
        motor->spin_stop_acc++;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8002074:	3301      	adds	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
        if (motor->spin_stop_acc >= MOTOR_STOP_TRI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8002084:	2b31      	cmp	r3, #49	@ 0x31
 8002086:	d91b      	bls.n	80020c0 <stop_check+0x88>
        {
            motor->spin_stop_acc = 0;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
            // timerclockvalue_onecycle_electric = 0;   // 歸零一電氣週期之時間
            motor->pi_speed.i1 = 0;                     // 重置i控制舊值
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
            motor->pi_speed.Fbk = 0;                    // 歸零速度實際值
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
            motor->pi_Iq.Out=0;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
            motor->pwm_it_angle_acc = 0.0f;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	671a      	str	r2, [r3, #112]	@ 0x70
 80020b6:	e003      	b.n	80020c0 <stop_check+0x88>
        }
    }
    else
    {
        motor->spin_stop_acc = 0;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
    }
    motor->pwm_hall_acc = hall_total;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	89ba      	ldrh	r2, [r7, #12]
 80020c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    motor->pwm_hall_last = hall_current;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <pi_speed>:

static inline void pi_speed(MotorParameter *motor)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
    // 計算 速度PI (每100個PWM中斷)
    // if(Speed.Fbk>0 && stop_flag==0)
    motor->pi_speed.Fbk = motor->rpm_fbk;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    PI_run(&motor->pi_speed);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3384      	adds	r3, #132	@ 0x84
 80020f2:	4618      	mov	r0, r3
 80020f4:	f001 f830 	bl	8003158 <PI_run>
    motor->pi_speed_cmd = clampf((motor->pi_speed_cmd + motor->pi_speed.Out), 0.15f, 0.2f);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8002104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002108:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800212c <pi_speed+0x50>
 800210c:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8002130 <pi_speed+0x54>
 8002110:	eeb0 0a67 	vmov.f32	s0, s15
 8002114:	f7ff fd16 	bl	8001b44 <clampf>
 8002118:	eef0 7a40 	vmov.f32	s15, s0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	edc3 7a2e 	vstr	s15, [r3, #184]	@ 0xb8
    // else if(Speed.Fbk==0 | stop_flag==1)
    //     motor->pi_speed_cmd=0.18;
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	3e4ccccd 	.word	0x3e4ccccd
 8002130:	3e19999a 	.word	0x3e19999a

08002134 <angal_cal>:

static inline void angal_cal(MotorParameter *motor)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
    // ?
    if((motor->hall_angle_acc + motor->pwm_per_it_angle_itpl) < 60)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8002148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800214c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80021b0 <angal_cal+0x7c>
 8002150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002158:	d51a      	bpl.n	8002190 <angal_cal+0x5c>
    {
        motor->hall_angle_acc += motor->pwm_per_it_angle_itpl;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
        motor->hall_angle_acc = clampf(motor->hall_angle_acc, 0.0f, 60.0f);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002176:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 80021b0 <angal_cal+0x7c>
 800217a:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 80021b4 <angal_cal+0x80>
 800217e:	eeb0 0a67 	vmov.f32	s0, s15
 8002182:	f7ff fcdf 	bl	8001b44 <clampf>
 8002186:	eef0 7a40 	vmov.f32	s15, s0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
    }
    motor->pwm_it_angle_acc += motor->pwm_per_it_angle_itpl;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 800219c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	42700000 	.word	0x42700000
 80021b4:	00000000 	.word	0x00000000

080021b8 <vec_ctrl_clarke>:

// #define ADC_TO_CURRENT (3.3f / 4095.0f / 0.185f ) // ~ 0.004356 A/LSB
static inline Result vec_ctrl_clarke(MotorParameter *motor)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	@ 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
    // I bata = (根號3/3)Ib - (根號3/3)Ic
    // (根號3/3) = 0.57735

    // 三相電流向量
    // RESULT_CHECK_RET_RES(adc_renew(&adc_test));
    RESULT_CHECK_RET_RES(adc_renew(motor->adc_u, &motor->clarke.As));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 80021cc:	f107 0318 	add.w	r3, r7, #24
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff f94f 	bl	8001474 <adc_renew>
 80021d6:	7e3b      	ldrb	r3, [r7, #24]
 80021d8:	f083 0301 	eor.w	r3, r3, #1
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00c      	beq.n	80021fc <vec_ctrl_clarke+0x44>
 80021e2:	f997 201c 	ldrsb.w	r2, [r7, #28]
 80021e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002294 <vec_ctrl_clarke+0xdc>)
 80021e8:	701a      	strb	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	461a      	mov	r2, r3
 80021ee:	f107 0318 	add.w	r3, r7, #24
 80021f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021f6:	e882 0003 	stmia.w	r2, {r0, r1}
    // PeriodFilter_w = (float32_t)PeriodStateVar_w;//0.9
    // motor->clarke.Cs =PeriodFilter_w;

    CLARKE_run_ideal(&motor->clarke);//Id.Out=CLAMP((Id.Out + Id.delta), 0.1, 0)
    return RESULT_OK(NULL);
}
 80021fa:	e046      	b.n	800228a <vec_ctrl_clarke+0xd2>
    RESULT_CHECK_RET_RES(adc_renew(motor->adc_v, &motor->clarke.Bs));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 8002206:	f107 0310 	add.w	r3, r7, #16
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff f932 	bl	8001474 <adc_renew>
 8002210:	7c3b      	ldrb	r3, [r7, #16]
 8002212:	f083 0301 	eor.w	r3, r3, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00c      	beq.n	8002236 <vec_ctrl_clarke+0x7e>
 800221c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002220:	4b1c      	ldr	r3, [pc, #112]	@ (8002294 <vec_ctrl_clarke+0xdc>)
 8002222:	701a      	strb	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	461a      	mov	r2, r3
 8002228:	f107 0310 	add.w	r3, r7, #16
 800222c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002230:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002234:	e029      	b.n	800228a <vec_ctrl_clarke+0xd2>
    RESULT_CHECK_RET_RES(adc_renew(motor->adc_w, &motor->clarke.Cs));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	f503 7296 	add.w	r2, r3, #300	@ 0x12c
 8002242:	f107 0308 	add.w	r3, r7, #8
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff f914 	bl	8001474 <adc_renew>
 800224c:	7a3b      	ldrb	r3, [r7, #8]
 800224e:	f083 0301 	eor.w	r3, r3, #1
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00c      	beq.n	8002272 <vec_ctrl_clarke+0xba>
 8002258:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800225c:	4b0d      	ldr	r3, [pc, #52]	@ (8002294 <vec_ctrl_clarke+0xdc>)
 800225e:	701a      	strb	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	461a      	mov	r2, r3
 8002264:	f107 0308 	add.w	r3, r7, #8
 8002268:	e893 0003 	ldmia.w	r3, {r0, r1}
 800226c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002270:	e00b      	b.n	800228a <vec_ctrl_clarke+0xd2>
    CLARKE_run_ideal(&motor->clarke);//Id.Out=CLAMP((Id.Out + Id.delta), 0.1, 0)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fd2f 	bl	8001cdc <CLARKE_run_ideal>
    return RESULT_OK(NULL);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	605a      	str	r2, [r3, #4]
}
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	3728      	adds	r7, #40	@ 0x28
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000990 	.word	0x20000990

08002298 <vec_ctrl_park>:

static inline Result vec_ctrl_park(MotorParameter *motor)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
    // park
    // Id = I alpha cos(theta) + I bata sin(theta)
    motor->park.Alpha = motor->clarke.Alpha;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor->park.Beta = motor->clarke.Beta;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    RESULT_CHECK_RET_RES(trigo_sin_cosf(
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80022c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ca:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002334 <vec_ctrl_park+0x9c>
 80022ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	f503 71a6 	add.w	r1, r3, #332	@ 0x14c
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f503 72a8 	add.w	r2, r3, #336	@ 0x150
 80022de:	f107 0308 	add.w	r3, r7, #8
 80022e2:	eeb0 0a67 	vmov.f32	s0, s15
 80022e6:	4618      	mov	r0, r3
 80022e8:	f001 f80e 	bl	8003308 <trigo_sin_cosf>
 80022ec:	7a3b      	ldrb	r3, [r7, #8]
 80022ee:	f083 0301 	eor.w	r3, r3, #1
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00c      	beq.n	8002312 <vec_ctrl_park+0x7a>
 80022f8:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80022fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002338 <vec_ctrl_park+0xa0>)
 80022fe:	701a      	strb	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	461a      	mov	r2, r3
 8002304:	f107 0308 	add.w	r3, r7, #8
 8002308:	e893 0003 	ldmia.w	r3, {r0, r1}
 800230c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002310:	e00b      	b.n	800232a <vec_ctrl_park+0x92>
        motor->exti_hall_angal + motor->pwm_it_angle_acc + DIV_PI_2 * 3.0f,
        &motor->park.Sine, &motor->park.Cosine
    ));
    PARK_run(&motor->park);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002318:	4618      	mov	r0, r3
 800231a:	f000 feb5 	bl	8003088 <PARK_run>
    // motor->park.Ds = PeriodFilter_id;
        
    // PeriodStateVar_iq += ( ( (float32_t)motor->park.Qs - (float32_t)PeriodFilter_iq)*(float32_t)PeriodKFilter );
    // PeriodFilter_iq = (float32_t)PeriodStateVar_iq;
    // motor->park.Qs = PeriodFilter_iq;
    return RESULT_OK(NULL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	605a      	str	r2, [r3, #4]
}
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	4096cbe4 	.word	0x4096cbe4
 8002338:	20000990 	.word	0x20000990

0800233c <vec_ctrl_pi_id_iq>:

#define IQ_REF_ADD 0.0f
static inline void vec_ctrl_pi_id_iq(MotorParameter *motor)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
    // Id、Iq 之 PI 控制
    if(motor->pi_speed.Fbk > 0)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 800234a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800234e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002352:	dd3f      	ble.n	80023d4 <vec_ctrl_pi_id_iq+0x98>
    {
        motor->pi_Id.Ref = 0;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        motor->pi_Id.Fbk = motor->park.Ds;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        
        // Id.Fbk=CLAMP(( motor->park.Ds), 0.1, -0.1);
        
        PI_run(&motor->pi_Id); 
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	33f0      	adds	r3, #240	@ 0xf0
 800236e:	4618      	mov	r0, r3
 8002370:	f000 fef2 	bl	8003158 <PI_run>
        // if(Id.Ref > Id.Fbk)
        //     Id.delta = 0.002;
        // else
        //     Id.delta = -0.002;
        
        motor->pi_Id.Out = clampf(motor->pi_Id.Out, -0.01f, 0.01f);//限制最大與最小參數
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	edd3 7a3e 	vldr	s15, [r3, #248]	@ 0xf8
 800237a:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 80023e4 <vec_ctrl_pi_id_iq+0xa8>
 800237e:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 80023e8 <vec_ctrl_pi_id_iq+0xac>
 8002382:	eeb0 0a67 	vmov.f32	s0, s15
 8002386:	f7ff fbdd 	bl	8001b44 <clampf>
 800238a:	eef0 7a40 	vmov.f32	s15, s0
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
        // motor->pi_Iq.delta = (motor->pi_Iq.Ref - motor->pi_Iq.Fbk) * (motor->pi_Iq.Kp);
        // motor->pi_Iq.delta = CLAMP((motor->pi_Iq.delta), 0.1, -0.1);//限制最大與最小參數
        // motor->pi_Iq.Out = CLAMP((motor->pi_Iq.Ref + motor->pi_Iq.delta), 0.75, 0);//限制最大與最小參數

        // motor->pi_Iq.Ref = motor->pi_speed_cmd + IQ_REF_ADD;  // 外環給轉矩命令
        motor->pi_Iq.Ref = 0.3f;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a15      	ldr	r2, [pc, #84]	@ (80023ec <vec_ctrl_pi_id_iq+0xb0>)
 8002398:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        motor->pi_Iq.Fbk = motor->park.Qs;                    // q 軸量測
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        PI_run(&motor->pi_Iq);                                // 統一用 PI_run + anti-windup
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	33bc      	adds	r3, #188	@ 0xbc
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 fed3 	bl	8003158 <PI_run>
        // 視匯流排/過調制上限，做一次幅值限幅（可留在這或放到 Vqref 指派前）
        motor->pi_Iq.Out = clampf(motor->pi_Iq.Out, 0.0f, 0.75f);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 80023b8:	eeb6 1a08 	vmov.f32	s2, #104	@ 0x3f400000  0.750
 80023bc:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 80023f0 <vec_ctrl_pi_id_iq+0xb4>
 80023c0:	eeb0 0a67 	vmov.f32	s0, s15
 80023c4:	f7ff fbbe 	bl	8001b44 <clampf>
 80023c8:	eef0 7a40 	vmov.f32	s15, s0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
    }
    else
    {
        motor->pi_Iq.Out = 0.18;
    }
}
 80023d2:	e003      	b.n	80023dc <vec_ctrl_pi_id_iq+0xa0>
        motor->pi_Iq.Out = 0.18;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a07      	ldr	r2, [pc, #28]	@ (80023f4 <vec_ctrl_pi_id_iq+0xb8>)
 80023d8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	3c23d70a 	.word	0x3c23d70a
 80023e8:	bc23d70a 	.word	0xbc23d70a
 80023ec:	3e99999a 	.word	0x3e99999a
 80023f0:	00000000 	.word	0x00000000
 80023f4:	3e3851ec 	.word	0x3e3851ec

080023f8 <vec_ctrl_ipark>:

static inline Result vec_ctrl_ipark(MotorParameter *motor)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
    // ipark
    // V alpha = Vd cos(theta) - Vq sin(theta)
    // V bata = Vd sin(theta) + Vq cos(theta)
    // ?
    motor->ipark.Vdref = clampf(motor->ipark.Vdref + motor->pi_Id.Out, -0.06f, 0.06f);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	ed93 7a58 	vldr	s14, [r3, #352]	@ 0x160
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	edd3 7a3e 	vldr	s15, [r3, #248]	@ 0xf8
 800240e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002412:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 80024e8 <vec_ctrl_ipark+0xf0>
 8002416:	eddf 0a35 	vldr	s1, [pc, #212]	@ 80024ec <vec_ctrl_ipark+0xf4>
 800241a:	eeb0 0a67 	vmov.f32	s0, s15
 800241e:	f7ff fb91 	bl	8001b44 <clampf>
 8002422:	eef0 7a40 	vmov.f32	s15, s0
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
    motor->ipark.Vqref = motor->pi_Iq.Out;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
    motor->ipark.Sine = motor->park.Sine;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
    motor->ipark.Cosine = motor->park.Cosine;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    IPARK_run(&motor->ipark);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fe4a 	bl	80030f0 <IPARK_run>
    RESULT_CHECK_RET_RES(trigo_atan(motor->ipark.Alpha, motor->ipark.Beta, &motor->elec_theta_rad));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	edd3 7a55 	vldr	s15, [r3, #340]	@ 0x154
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	ed93 7a56 	vldr	s14, [r3, #344]	@ 0x158
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800246e:	f107 0308 	add.w	r3, r7, #8
 8002472:	4611      	mov	r1, r2
 8002474:	eef0 0a47 	vmov.f32	s1, s14
 8002478:	eeb0 0a67 	vmov.f32	s0, s15
 800247c:	4618      	mov	r0, r3
 800247e:	f000 ffcb 	bl	8003418 <trigo_atan>
 8002482:	7a3b      	ldrb	r3, [r7, #8]
 8002484:	f083 0301 	eor.w	r3, r3, #1
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00c      	beq.n	80024a8 <vec_ctrl_ipark+0xb0>
 800248e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8002492:	4b17      	ldr	r3, [pc, #92]	@ (80024f0 <vec_ctrl_ipark+0xf8>)
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	461a      	mov	r2, r3
 800249a:	f107 0308 	add.w	r3, r7, #8
 800249e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024a2:	e882 0003 	stmia.w	r2, {r0, r1}
 80024a6:	e01b      	b.n	80024e0 <vec_ctrl_ipark+0xe8>
    motor->elec_theta_rad = wrap_0_2pi(motor->elec_theta_rad);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 80024ae:	eeb0 0a67 	vmov.f32	s0, s15
 80024b2:	f7ff fb71 	bl	8001b98 <wrap_0_2pi>
 80024b6:	eef0 7a40 	vmov.f32	s15, s0
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
    motor->elec_theta_deg = motor->elec_theta_rad * RAD_TO_DEG;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 80024c6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80024f4 <vec_ctrl_ipark+0xfc>
 80024ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
    return RESULT_OK(NULL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	605a      	str	r2, [r3, #4]
}
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	3d75c28f 	.word	0x3d75c28f
 80024ec:	bd75c28f 	.word	0xbd75c28f
 80024f0:	20000990 	.word	0x20000990
 80024f4:	42652ee1 	.word	0x42652ee1

080024f8 <vec_ctrl_svgen>:

static inline void vec_ctrl_svgen(MotorParameter *motor)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
    motor->svgendq.Ualpha = motor->ipark.Alpha;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    motor->svgendq.Ubeta = motor->ipark.Beta;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
    SVGEN_run(&motor->svgendq);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fe8a 	bl	8003238 <SVGEN_run>
}
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <vec_ctrl_vref>:

static inline Result vec_ctrl_vref(MotorParameter *motor)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	@ 0x28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
    //     else
    //         motor->svpwm_Vref=0;
    //     }
    // else
    arm_status status = arm_sqrt_f32(
        motor->svgendq.Ualpha * motor->svgendq.Ualpha 
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	ed93 7a5c 	vldr	s14, [r3, #368]	@ 0x170
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	edd3 7a5c 	vldr	s15, [r3, #368]	@ 0x170
 8002542:	ee27 7a27 	vmul.f32	s14, s14, s15
            + motor->svgendq.Ubeta * motor->svgendq.Ubeta,
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	edd3 6a5d 	vldr	s13, [r3, #372]	@ 0x174
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	edd3 7a5d 	vldr	s15, [r3, #372]	@ 0x174
 8002552:	ee66 7aa7 	vmul.f32	s15, s13, s15
    arm_status status = arm_sqrt_f32(
 8002556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002560:	edc7 7a08 	vstr	s15, [r7, #32]
 8002564:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8002566:	edd7 7a08 	vldr	s15, [r7, #32]
 800256a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800256e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002572:	db0a      	blt.n	800258a <vec_ctrl_vref+0x5e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8002574:	ed97 0a08 	vldr	s0, [r7, #32]
 8002578:	f00a f974 	bl	800c864 <sqrtf>
 800257c:	eef0 7a40 	vmov.f32	s15, s0
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8002586:	2300      	movs	r3, #0
 8002588:	e005      	b.n	8002596 <vec_ctrl_vref+0x6a>
    }
    else
    {
      *pOut = 0.0f;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        &motor->svpwm_Vref
    );
    if (status != ARM_MATH_SUCCESS) return RESULT_ERROR(RES_ERR_FAIL);
 800259a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <vec_ctrl_vref+0x88>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	461a      	mov	r2, r3
 80025a6:	2300      	movs	r3, #0
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	6053      	str	r3, [r2, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	711a      	strb	r2, [r3, #4]
 80025b2:	e005      	b.n	80025c0 <vec_ctrl_vref+0x94>
    //		motor->elec_theta_deg      =  (int)motor_angle % 60;
    
    /*
        svpwm_interval = ((int)cmd_deg / 60) % 6;
        motor->elec_theta_deg      =  (int)cmd_deg % 60;*/
    return RESULT_OK(NULL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	605a      	str	r2, [r3, #4]
}
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	3728      	adds	r7, #40	@ 0x28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <vec_ctrl_svpwm>:

float32_t thete_t[6];
static inline Result vec_ctrl_svpwm(MotorParameter *motor)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b092      	sub	sp, #72	@ 0x48
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
    float32_t theta = motor->elec_theta_rad;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80025d8:	647b      	str	r3, [r7, #68]	@ 0x44
    int32_t n = (int32_t)(theta / DIV_PI_3);
 80025da:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80025de:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002920 <vec_ctrl_svpwm+0x358>
 80025e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ea:	ee17 3a90 	vmov	r3, s15
 80025ee:	643b      	str	r3, [r7, #64]	@ 0x40
    theta -= (float32_t)n * DIV_PI_3;
 80025f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025fa:	ed9f 7ac9 	vldr	s14, [pc, #804]	@ 8002920 <vec_ctrl_svpwm+0x358>
 80025fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002602:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800260a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    if (theta < 0) theta += DIV_PI_3;
 800260e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002612:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261a:	d507      	bpl.n	800262c <vec_ctrl_svpwm+0x64>
 800261c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002620:	ed9f 7abf 	vldr	s14, [pc, #764]	@ 8002920 <vec_ctrl_svpwm+0x358>
 8002624:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002628:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    // ? CHECK
    float32_t T1, T2;
    if(!motor->reverse)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
 8002632:	f083 0301 	eor.w	r3, r3, #1
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d040      	beq.n	80026be <vec_ctrl_svpwm+0xf6>
    {
        RESULT_CHECK_RET_RES(trigo_sin_cosf(DIV_PI_3 - theta, &T1, NULL));
 800263c:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8002920 <vec_ctrl_svpwm+0x358>
 8002640:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002648:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800264c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002650:	2200      	movs	r2, #0
 8002652:	eeb0 0a67 	vmov.f32	s0, s15
 8002656:	4618      	mov	r0, r3
 8002658:	f000 fe56 	bl	8003308 <trigo_sin_cosf>
 800265c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002660:	f083 0301 	eor.w	r3, r3, #1
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00c      	beq.n	8002684 <vec_ctrl_svpwm+0xbc>
 800266a:	f997 2028 	ldrsb.w	r2, [r7, #40]	@ 0x28
 800266e:	4bad      	ldr	r3, [pc, #692]	@ (8002924 <vec_ctrl_svpwm+0x35c>)
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	461a      	mov	r2, r3
 8002676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800267a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800267e:	e882 0003 	stmia.w	r2, {r0, r1}
    }
    __HAL_TIM_SET_COMPARE(motor->const_h.PWM_htimx, motor->const_h.PWM_TIM_CHANNEL_x[0], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_u));
    __HAL_TIM_SET_COMPARE(motor->const_h.PWM_htimx, motor->const_h.PWM_TIM_CHANNEL_x[1], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_v));
    __HAL_TIM_SET_COMPARE(motor->const_h.PWM_htimx, motor->const_h.PWM_TIM_CHANNEL_x[2], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_w));
    return RESULT_OK(NULL);
}
 8002682:	e28a      	b.n	8002b9a <vec_ctrl_svpwm+0x5d2>
        RESULT_CHECK_RET_RES(trigo_sin_cosf(theta, &T2, NULL));
 8002684:	f107 031c 	add.w	r3, r7, #28
 8002688:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800268c:	2200      	movs	r2, #0
 800268e:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fe38 	bl	8003308 <trigo_sin_cosf>
 8002698:	7f3b      	ldrb	r3, [r7, #28]
 800269a:	f083 0301 	eor.w	r3, r3, #1
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d04c      	beq.n	800273e <vec_ctrl_svpwm+0x176>
 80026a4:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80026a8:	4b9e      	ldr	r3, [pc, #632]	@ (8002924 <vec_ctrl_svpwm+0x35c>)
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f107 031c 	add.w	r3, r7, #28
 80026b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026b8:	e882 0003 	stmia.w	r2, {r0, r1}
 80026bc:	e26d      	b.n	8002b9a <vec_ctrl_svpwm+0x5d2>
        RESULT_CHECK_RET_RES(trigo_sin_cosf(theta, &T1, NULL));
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80026c6:	2200      	movs	r2, #0
 80026c8:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fe1b 	bl	8003308 <trigo_sin_cosf>
 80026d2:	7d3b      	ldrb	r3, [r7, #20]
 80026d4:	f083 0301 	eor.w	r3, r3, #1
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00c      	beq.n	80026f8 <vec_ctrl_svpwm+0x130>
 80026de:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80026e2:	4b90      	ldr	r3, [pc, #576]	@ (8002924 <vec_ctrl_svpwm+0x35c>)
 80026e4:	701a      	strb	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	461a      	mov	r2, r3
 80026ea:	f107 0314 	add.w	r3, r7, #20
 80026ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026f2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80026f6:	e250      	b.n	8002b9a <vec_ctrl_svpwm+0x5d2>
        RESULT_CHECK_RET_RES(trigo_sin_cosf(DIV_PI_3 - theta, &T2, NULL));
 80026f8:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8002920 <vec_ctrl_svpwm+0x358>
 80026fc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800270c:	2200      	movs	r2, #0
 800270e:	eeb0 0a67 	vmov.f32	s0, s15
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fdf8 	bl	8003308 <trigo_sin_cosf>
 8002718:	7b3b      	ldrb	r3, [r7, #12]
 800271a:	f083 0301 	eor.w	r3, r3, #1
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00c      	beq.n	800273e <vec_ctrl_svpwm+0x176>
 8002724:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8002728:	4b7e      	ldr	r3, [pc, #504]	@ (8002924 <vec_ctrl_svpwm+0x35c>)
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	461a      	mov	r2, r3
 8002730:	f107 030c 	add.w	r3, r7, #12
 8002734:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002738:	e882 0003 	stmia.w	r2, {r0, r1}
 800273c:	e22d      	b.n	8002b9a <vec_ctrl_svpwm+0x5d2>
    float32_t T0div2 = (1 - (T1 + T2)) / 2;
 800273e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002742:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800274e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002752:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002756:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800275a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    switch(motor->svgendq.Sector)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8002764:	3b01      	subs	r3, #1
 8002766:	2b05      	cmp	r3, #5
 8002768:	f200 80b2 	bhi.w	80028d0 <vec_ctrl_svpwm+0x308>
 800276c:	a201      	add	r2, pc, #4	@ (adr r2, 8002774 <vec_ctrl_svpwm+0x1ac>)
 800276e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002772:	bf00      	nop
 8002774:	0800282f 	.word	0x0800282f
 8002778:	080027c3 	.word	0x080027c3
 800277c:	080027f9 	.word	0x080027f9
 8002780:	0800289b 	.word	0x0800289b
 8002784:	08002865 	.word	0x08002865
 8002788:	0800278d 	.word	0x0800278d
            motor->pwm_duty_u = T0div2;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002790:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
            motor->pwm_duty_v = T0div2 + T1;
 8002794:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002798:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800279c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	edc3 7a66 	vstr	s15, [r3, #408]	@ 0x198
            motor->pwm_duty_w = T0div2 + T1 + T2;
 80027a6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80027aa:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80027ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027b2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80027b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	edc3 7a67 	vstr	s15, [r3, #412]	@ 0x19c
            break;
 80027c0:	e086      	b.n	80028d0 <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2 + T2;
 80027c2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80027c6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80027ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	edc3 7a65 	vstr	s15, [r3, #404]	@ 0x194
            motor->pwm_duty_v = T0div2;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027d8:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
            motor->pwm_duty_w = T0div2 + T1 + T2;
 80027dc:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80027e0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80027e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027e8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80027ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	edc3 7a67 	vstr	s15, [r3, #412]	@ 0x19c
            break;
 80027f6:	e06b      	b.n	80028d0 <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2 + T1 + T2;
 80027f8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80027fc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002800:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002804:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	edc3 7a65 	vstr	s15, [r3, #404]	@ 0x194
            motor->pwm_duty_v = T0div2;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002816:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
            motor->pwm_duty_w = T0div2 + T1;
 800281a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800281e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	edc3 7a67 	vstr	s15, [r3, #412]	@ 0x19c
            break;
 800282c:	e050      	b.n	80028d0 <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2 + T1 + T2;
 800282e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002832:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002836:	ee37 7a27 	vadd.f32	s14, s14, s15
 800283a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800283e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	edc3 7a65 	vstr	s15, [r3, #404]	@ 0x194
            motor->pwm_duty_v = T0div2 + T2;
 8002848:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800284c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	edc3 7a66 	vstr	s15, [r3, #408]	@ 0x198
            motor->pwm_duty_w = T0div2;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800285e:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
            break;
 8002862:	e035      	b.n	80028d0 <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2 + T1;
 8002864:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002868:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800286c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	edc3 7a65 	vstr	s15, [r3, #404]	@ 0x194
            motor->pwm_duty_v = T0div2 + T1 + T2;
 8002876:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800287a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800287e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002882:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	edc3 7a66 	vstr	s15, [r3, #408]	@ 0x198
            motor->pwm_duty_w = T0div2;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002894:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
            break;
 8002898:	e01a      	b.n	80028d0 <vec_ctrl_svpwm+0x308>
            motor->pwm_duty_u = T0div2;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800289e:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
            motor->pwm_duty_v = T0div2 + T1 + T2;
 80028a2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80028a6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80028aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ae:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80028b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	edc3 7a66 	vstr	s15, [r3, #408]	@ 0x198
            motor->pwm_duty_w = T0div2 + T2;
 80028bc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80028c0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80028c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	edc3 7a67 	vstr	s15, [r3, #412]	@ 0x19c
            break;
 80028ce:	bf00      	nop
    __HAL_TIM_SET_COMPARE(motor->const_h.PWM_htimx, motor->const_h.PWM_TIM_CHANNEL_x[0], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_u));
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10f      	bne.n	80028f8 <vec_ctrl_svpwm+0x330>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	edd3 7a65 	vldr	s15, [r3, #404]	@ 0x194
 80028de:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002928 <vec_ctrl_svpwm+0x360>
 80028e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028f0:	ee17 2a90 	vmov	r2, s15
 80028f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80028f6:	e064      	b.n	80029c2 <vec_ctrl_svpwm+0x3fa>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d115      	bne.n	800292c <vec_ctrl_svpwm+0x364>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	edd3 7a65 	vldr	s15, [r3, #404]	@ 0x194
 8002906:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002928 <vec_ctrl_svpwm+0x360>
 800290a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002918:	ee17 3a90 	vmov	r3, s15
 800291c:	6393      	str	r3, [r2, #56]	@ 0x38
 800291e:	e050      	b.n	80029c2 <vec_ctrl_svpwm+0x3fa>
 8002920:	3f860a92 	.word	0x3f860a92
 8002924:	20000990 	.word	0x20000990
 8002928:	43fa0000 	.word	0x43fa0000
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b08      	cmp	r3, #8
 8002932:	d10f      	bne.n	8002954 <vec_ctrl_svpwm+0x38c>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	edd3 7a65 	vldr	s15, [r3, #404]	@ 0x194
 800293a:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8002928 <vec_ctrl_svpwm+0x360>
 800293e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800294c:	ee17 3a90 	vmov	r3, s15
 8002950:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002952:	e036      	b.n	80029c2 <vec_ctrl_svpwm+0x3fa>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	2b0c      	cmp	r3, #12
 800295a:	d10f      	bne.n	800297c <vec_ctrl_svpwm+0x3b4>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	edd3 7a65 	vldr	s15, [r3, #404]	@ 0x194
 8002962:	ed1f 7a0f 	vldr	s14, [pc, #-60]	@ 8002928 <vec_ctrl_svpwm+0x360>
 8002966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002974:	ee17 3a90 	vmov	r3, s15
 8002978:	6413      	str	r3, [r2, #64]	@ 0x40
 800297a:	e022      	b.n	80029c2 <vec_ctrl_svpwm+0x3fa>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	2b10      	cmp	r3, #16
 8002982:	d10f      	bne.n	80029a4 <vec_ctrl_svpwm+0x3dc>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	edd3 7a65 	vldr	s15, [r3, #404]	@ 0x194
 800298a:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 8002928 <vec_ctrl_svpwm+0x360>
 800298e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800299c:	ee17 3a90 	vmov	r3, s15
 80029a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80029a2:	e00e      	b.n	80029c2 <vec_ctrl_svpwm+0x3fa>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	edd3 7a65 	vldr	s15, [r3, #404]	@ 0x194
 80029aa:	ed1f 7a21 	vldr	s14, [pc, #-132]	@ 8002928 <vec_ctrl_svpwm+0x360>
 80029ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029bc:	ee17 3a90 	vmov	r3, s15
 80029c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_TIM_SET_COMPARE(motor->const_h.PWM_htimx, motor->const_h.PWM_TIM_CHANNEL_x[1], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_v));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10f      	bne.n	80029ea <vec_ctrl_svpwm+0x422>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	edd3 7a66 	vldr	s15, [r3, #408]	@ 0x198
 80029d0:	ed1f 7a2b 	vldr	s14, [pc, #-172]	@ 8002928 <vec_ctrl_svpwm+0x360>
 80029d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029e2:	ee17 2a90 	vmov	r2, s15
 80029e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80029e8:	e05e      	b.n	8002aa8 <vec_ctrl_svpwm+0x4e0>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d10f      	bne.n	8002a12 <vec_ctrl_svpwm+0x44a>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	edd3 7a66 	vldr	s15, [r3, #408]	@ 0x198
 80029f8:	ed1f 7a35 	vldr	s14, [pc, #-212]	@ 8002928 <vec_ctrl_svpwm+0x360>
 80029fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a0a:	ee17 3a90 	vmov	r3, s15
 8002a0e:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a10:	e04a      	b.n	8002aa8 <vec_ctrl_svpwm+0x4e0>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d10f      	bne.n	8002a3a <vec_ctrl_svpwm+0x472>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	edd3 7a66 	vldr	s15, [r3, #408]	@ 0x198
 8002a20:	ed1f 7a3f 	vldr	s14, [pc, #-252]	@ 8002928 <vec_ctrl_svpwm+0x360>
 8002a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a32:	ee17 3a90 	vmov	r3, s15
 8002a36:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002a38:	e036      	b.n	8002aa8 <vec_ctrl_svpwm+0x4e0>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	2b0c      	cmp	r3, #12
 8002a40:	d10f      	bne.n	8002a62 <vec_ctrl_svpwm+0x49a>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	edd3 7a66 	vldr	s15, [r3, #408]	@ 0x198
 8002a48:	ed1f 7a49 	vldr	s14, [pc, #-292]	@ 8002928 <vec_ctrl_svpwm+0x360>
 8002a4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a5a:	ee17 3a90 	vmov	r3, s15
 8002a5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a60:	e022      	b.n	8002aa8 <vec_ctrl_svpwm+0x4e0>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	2b10      	cmp	r3, #16
 8002a68:	d10f      	bne.n	8002a8a <vec_ctrl_svpwm+0x4c2>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	edd3 7a66 	vldr	s15, [r3, #408]	@ 0x198
 8002a70:	ed1f 7a53 	vldr	s14, [pc, #-332]	@ 8002928 <vec_ctrl_svpwm+0x360>
 8002a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a82:	ee17 3a90 	vmov	r3, s15
 8002a86:	6493      	str	r3, [r2, #72]	@ 0x48
 8002a88:	e00e      	b.n	8002aa8 <vec_ctrl_svpwm+0x4e0>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	edd3 7a66 	vldr	s15, [r3, #408]	@ 0x198
 8002a90:	ed1f 7a5b 	vldr	s14, [pc, #-364]	@ 8002928 <vec_ctrl_svpwm+0x360>
 8002a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aa2:	ee17 3a90 	vmov	r3, s15
 8002aa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_TIM_SET_COMPARE(motor->const_h.PWM_htimx, motor->const_h.PWM_TIM_CHANNEL_x[2], (uint32_t)((float32_t)TIM1_ARR * motor->pwm_duty_w));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10f      	bne.n	8002ad0 <vec_ctrl_svpwm+0x508>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	edd3 7a67 	vldr	s15, [r3, #412]	@ 0x19c
 8002ab6:	ed1f 7a64 	vldr	s14, [pc, #-400]	@ 8002928 <vec_ctrl_svpwm+0x360>
 8002aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ac8:	ee17 2a90 	vmov	r2, s15
 8002acc:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ace:	e05e      	b.n	8002b8e <vec_ctrl_svpwm+0x5c6>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d10f      	bne.n	8002af8 <vec_ctrl_svpwm+0x530>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	edd3 7a67 	vldr	s15, [r3, #412]	@ 0x19c
 8002ade:	ed1f 7a6e 	vldr	s14, [pc, #-440]	@ 8002928 <vec_ctrl_svpwm+0x360>
 8002ae2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002af0:	ee17 3a90 	vmov	r3, s15
 8002af4:	6393      	str	r3, [r2, #56]	@ 0x38
 8002af6:	e04a      	b.n	8002b8e <vec_ctrl_svpwm+0x5c6>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d10f      	bne.n	8002b20 <vec_ctrl_svpwm+0x558>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	edd3 7a67 	vldr	s15, [r3, #412]	@ 0x19c
 8002b06:	ed1f 7a78 	vldr	s14, [pc, #-480]	@ 8002928 <vec_ctrl_svpwm+0x360>
 8002b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b18:	ee17 3a90 	vmov	r3, s15
 8002b1c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002b1e:	e036      	b.n	8002b8e <vec_ctrl_svpwm+0x5c6>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	2b0c      	cmp	r3, #12
 8002b26:	d10f      	bne.n	8002b48 <vec_ctrl_svpwm+0x580>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	edd3 7a67 	vldr	s15, [r3, #412]	@ 0x19c
 8002b2e:	ed1f 7a82 	vldr	s14, [pc, #-520]	@ 8002928 <vec_ctrl_svpwm+0x360>
 8002b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b40:	ee17 3a90 	vmov	r3, s15
 8002b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b46:	e022      	b.n	8002b8e <vec_ctrl_svpwm+0x5c6>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d10f      	bne.n	8002b70 <vec_ctrl_svpwm+0x5a8>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	edd3 7a67 	vldr	s15, [r3, #412]	@ 0x19c
 8002b56:	ed1f 7a8c 	vldr	s14, [pc, #-560]	@ 8002928 <vec_ctrl_svpwm+0x360>
 8002b5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b68:	ee17 3a90 	vmov	r3, s15
 8002b6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8002b6e:	e00e      	b.n	8002b8e <vec_ctrl_svpwm+0x5c6>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	edd3 7a67 	vldr	s15, [r3, #412]	@ 0x19c
 8002b76:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 8002928 <vec_ctrl_svpwm+0x360>
 8002b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b88:	ee17 3a90 	vmov	r3, s15
 8002b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
    return RESULT_OK(NULL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	605a      	str	r2, [r3, #4]
}
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	3748      	adds	r7, #72	@ 0x48
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop

08002ba4 <motor_foc_pwm_pulse>:

#define CYCLE_CNT(id) ({cycle[id] = __HAL_TIM_GET_COUNTER(&htim2) - cycle[id-1];})
// FOC 20kHz
// Thread - pwmIt - 0
Result motor_foc_pwm_pulse(MotorParameter *motor)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08e      	sub	sp, #56	@ 0x38
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002bae:	4b91      	ldr	r3, [pc, #580]	@ (8002df4 <motor_foc_pwm_pulse+0x250>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (motor->pwm_count % 100 == 0)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8002bbc:	4a8e      	ldr	r2, [pc, #568]	@ (8002df8 <motor_foc_pwm_pulse+0x254>)
 8002bbe:	fba2 1203 	umull	r1, r2, r2, r3
 8002bc2:	0952      	lsrs	r2, r2, #5
 8002bc4:	2164      	movs	r1, #100	@ 0x64
 8002bc6:	fb01 f202 	mul.w	r2, r1, r2
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d11a      	bne.n	8002c08 <motor_foc_pwm_pulse+0x64>
    {
        cycle[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8002bd2:	4b88      	ldr	r3, [pc, #544]	@ (8002df4 <motor_foc_pwm_pulse+0x250>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	4a88      	ldr	r2, [pc, #544]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002bda:	6013      	str	r3, [r2, #0]
        // Thread - pwmIt(100) - 1
        stop_check(motor);
 8002bdc:	6838      	ldr	r0, [r7, #0]
 8002bde:	f7ff fa2b 	bl	8002038 <stop_check>
        CYCLE_CNT(1);
 8002be2:	4b84      	ldr	r3, [pc, #528]	@ (8002df4 <motor_foc_pwm_pulse+0x250>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002be8:	4b84      	ldr	r3, [pc, #528]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	4a83      	ldr	r2, [pc, #524]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002bf0:	6053      	str	r3, [r2, #4]
        // Thread - pwmIt(100) - 2
        pi_speed(motor); // !
 8002bf2:	6838      	ldr	r0, [r7, #0]
 8002bf4:	f7ff fa72 	bl	80020dc <pi_speed>
        CYCLE_CNT(2);
 8002bf8:	4b7e      	ldr	r3, [pc, #504]	@ (8002df4 <motor_foc_pwm_pulse+0x250>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bfe:	4b7f      	ldr	r3, [pc, #508]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	4a7d      	ldr	r2, [pc, #500]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002c06:	6093      	str	r3, [r2, #8]
    }
    // motor->pwm_count % 2 == 0
    if (motor->pwm_count % 2 == 0)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f040 80cd 	bne.w	8002db4 <motor_foc_pwm_pulse+0x210>
    {
        cycle[3] = __HAL_TIM_GET_COUNTER(&htim2);
 8002c1a:	4b76      	ldr	r3, [pc, #472]	@ (8002df4 <motor_foc_pwm_pulse+0x250>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	4a76      	ldr	r2, [pc, #472]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002c22:	60d3      	str	r3, [r2, #12]
        // Thread - pwmIt - 1
        angal_cal(motor);
 8002c24:	6838      	ldr	r0, [r7, #0]
 8002c26:	f7ff fa85 	bl	8002134 <angal_cal>
        CYCLE_CNT(4);
 8002c2a:	4b72      	ldr	r3, [pc, #456]	@ (8002df4 <motor_foc_pwm_pulse+0x250>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c30:	4b72      	ldr	r3, [pc, #456]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	4a71      	ldr	r2, [pc, #452]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002c38:	6113      	str	r3, [r2, #16]
        // Thread - pwmIt - 2
        RESULT_CHECK_RET_RES(vec_ctrl_clarke(motor));
 8002c3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c3e:	6839      	ldr	r1, [r7, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fab9 	bl	80021b8 <vec_ctrl_clarke>
 8002c46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002c4a:	f083 0301 	eor.w	r3, r3, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00c      	beq.n	8002c6e <motor_foc_pwm_pulse+0xca>
 8002c54:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 8002c58:	4b69      	ldr	r3, [pc, #420]	@ (8002e00 <motor_foc_pwm_pulse+0x25c>)
 8002c5a:	701a      	strb	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c64:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c68:	e882 0003 	stmia.w	r2, {r0, r1}
        motor->pwm_count = 0;
        motor->exti_hall_cnt = 0;
    }
    motor->pwm_count++;
    return RESULT_OK(NULL);
}
 8002c6c:	e0be      	b.n	8002dec <motor_foc_pwm_pulse+0x248>
        CYCLE_CNT(5);
 8002c6e:	4b61      	ldr	r3, [pc, #388]	@ (8002df4 <motor_foc_pwm_pulse+0x250>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c74:	4b61      	ldr	r3, [pc, #388]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	4a60      	ldr	r2, [pc, #384]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002c7c:	6153      	str	r3, [r2, #20]
        RESULT_CHECK_RET_RES(vec_ctrl_park(motor));
 8002c7e:	f107 0320 	add.w	r3, r7, #32
 8002c82:	6839      	ldr	r1, [r7, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fb07 	bl	8002298 <vec_ctrl_park>
 8002c8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c8e:	f083 0301 	eor.w	r3, r3, #1
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00c      	beq.n	8002cb2 <motor_foc_pwm_pulse+0x10e>
 8002c98:	f997 2024 	ldrsb.w	r2, [r7, #36]	@ 0x24
 8002c9c:	4b58      	ldr	r3, [pc, #352]	@ (8002e00 <motor_foc_pwm_pulse+0x25c>)
 8002c9e:	701a      	strb	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f107 0320 	add.w	r3, r7, #32
 8002ca8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002cac:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002cb0:	e09c      	b.n	8002dec <motor_foc_pwm_pulse+0x248>
        CYCLE_CNT(6);
 8002cb2:	4b50      	ldr	r3, [pc, #320]	@ (8002df4 <motor_foc_pwm_pulse+0x250>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cb8:	4b50      	ldr	r3, [pc, #320]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	4a4f      	ldr	r2, [pc, #316]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002cc0:	6193      	str	r3, [r2, #24]
        vec_ctrl_pi_id_iq(motor);
 8002cc2:	6838      	ldr	r0, [r7, #0]
 8002cc4:	f7ff fb3a 	bl	800233c <vec_ctrl_pi_id_iq>
        CYCLE_CNT(7);
 8002cc8:	4b4a      	ldr	r3, [pc, #296]	@ (8002df4 <motor_foc_pwm_pulse+0x250>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cce:	4b4b      	ldr	r3, [pc, #300]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	4a49      	ldr	r2, [pc, #292]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002cd6:	61d3      	str	r3, [r2, #28]
        RESULT_CHECK_RET_RES(vec_ctrl_ipark(motor)); // !
 8002cd8:	f107 0318 	add.w	r3, r7, #24
 8002cdc:	6839      	ldr	r1, [r7, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fb8a 	bl	80023f8 <vec_ctrl_ipark>
 8002ce4:	7e3b      	ldrb	r3, [r7, #24]
 8002ce6:	f083 0301 	eor.w	r3, r3, #1
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00c      	beq.n	8002d0a <motor_foc_pwm_pulse+0x166>
 8002cf0:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8002cf4:	4b42      	ldr	r3, [pc, #264]	@ (8002e00 <motor_foc_pwm_pulse+0x25c>)
 8002cf6:	701a      	strb	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f107 0318 	add.w	r3, r7, #24
 8002d00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d04:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002d08:	e070      	b.n	8002dec <motor_foc_pwm_pulse+0x248>
        CYCLE_CNT(8);
 8002d0a:	4b3a      	ldr	r3, [pc, #232]	@ (8002df4 <motor_foc_pwm_pulse+0x250>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d10:	4b3a      	ldr	r3, [pc, #232]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	4a39      	ldr	r2, [pc, #228]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002d18:	6213      	str	r3, [r2, #32]
        vec_ctrl_svgen(motor);
 8002d1a:	6838      	ldr	r0, [r7, #0]
 8002d1c:	f7ff fbec 	bl	80024f8 <vec_ctrl_svgen>
        CYCLE_CNT(9);
 8002d20:	4b34      	ldr	r3, [pc, #208]	@ (8002df4 <motor_foc_pwm_pulse+0x250>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d26:	4b35      	ldr	r3, [pc, #212]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	4a33      	ldr	r2, [pc, #204]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002d2e:	6253      	str	r3, [r2, #36]	@ 0x24
        RESULT_CHECK_RET_RES(vec_ctrl_vref(motor));  // !
 8002d30:	f107 0310 	add.w	r3, r7, #16
 8002d34:	6839      	ldr	r1, [r7, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fbf8 	bl	800252c <vec_ctrl_vref>
 8002d3c:	7c3b      	ldrb	r3, [r7, #16]
 8002d3e:	f083 0301 	eor.w	r3, r3, #1
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00c      	beq.n	8002d62 <motor_foc_pwm_pulse+0x1be>
 8002d48:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e00 <motor_foc_pwm_pulse+0x25c>)
 8002d4e:	701a      	strb	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	461a      	mov	r2, r3
 8002d54:	f107 0310 	add.w	r3, r7, #16
 8002d58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d5c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002d60:	e044      	b.n	8002dec <motor_foc_pwm_pulse+0x248>
        CYCLE_CNT(10);
 8002d62:	4b24      	ldr	r3, [pc, #144]	@ (8002df4 <motor_foc_pwm_pulse+0x250>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d68:	4b24      	ldr	r3, [pc, #144]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	4a23      	ldr	r2, [pc, #140]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002d70:	6293      	str	r3, [r2, #40]	@ 0x28
        RESULT_CHECK_RET_RES(vec_ctrl_svpwm(motor));
 8002d72:	f107 0308 	add.w	r3, r7, #8
 8002d76:	6839      	ldr	r1, [r7, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fc25 	bl	80025c8 <vec_ctrl_svpwm>
 8002d7e:	7a3b      	ldrb	r3, [r7, #8]
 8002d80:	f083 0301 	eor.w	r3, r3, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00c      	beq.n	8002da4 <motor_foc_pwm_pulse+0x200>
 8002d8a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8002d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002e00 <motor_foc_pwm_pulse+0x25c>)
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	461a      	mov	r2, r3
 8002d96:	f107 0308 	add.w	r3, r7, #8
 8002d9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d9e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002da2:	e023      	b.n	8002dec <motor_foc_pwm_pulse+0x248>
        CYCLE_CNT(11);
 8002da4:	4b13      	ldr	r3, [pc, #76]	@ (8002df4 <motor_foc_pwm_pulse+0x250>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002daa:	4b14      	ldr	r3, [pc, #80]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	4a12      	ldr	r2, [pc, #72]	@ (8002dfc <motor_foc_pwm_pulse+0x258>)
 8002db2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (motor->pwm_count >= 1000)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8002dba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002dbe:	d307      	bcc.n	8002dd0 <motor_foc_pwm_pulse+0x22c>
        motor->pwm_count = 0;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
        motor->exti_hall_cnt = 0;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    motor->pwm_count++;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
    return RESULT_OK(NULL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	605a      	str	r2, [r3, #4]
}
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	3738      	adds	r7, #56	@ 0x38
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20000584 	.word	0x20000584
 8002df8:	51eb851f 	.word	0x51eb851f
 8002dfc:	200009a0 	.word	0x200009a0
 8002e00:	20000990 	.word	0x20000990

08002e04 <motor_hall_exti>:
#include "motor/ctrl_foc.h"
#include "analog/adc1/main.h"
#include "motor/trigonometric.h"

void motor_hall_exti(MotorParameter *motor)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
    motor->exti_hall_cnt++;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3301      	adds	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uint8_t hall_last = motor->exti_hall_curt;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002e24:	77bb      	strb	r3, [r7, #30]
    uint8_t hall_current =
          ((motor->const_h.Hall_GPIOx[0]->IDR & motor->const_h.Hall_GPIO_Pin_x[0]) ? 4U : 0U)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	8992      	ldrh	r2, [r2, #12]
 8002e30:	4013      	ands	r3, r2
        | ((motor->const_h.Hall_GPIOx[1]->IDR & motor->const_h.Hall_GPIO_Pin_x[1]) ? 2U : 0U)
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <motor_hall_exti+0x36>
 8002e36:	2204      	movs	r2, #4
 8002e38:	e000      	b.n	8002e3c <motor_hall_exti+0x38>
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	68f9      	ldr	r1, [r7, #12]
 8002e44:	89c9      	ldrh	r1, [r1, #14]
 8002e46:	400b      	ands	r3, r1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <motor_hall_exti+0x4c>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e000      	b.n	8002e52 <motor_hall_exti+0x4e>
 8002e50:	2300      	movs	r3, #0
 8002e52:	4313      	orrs	r3, r2
 8002e54:	b2db      	uxtb	r3, r3
        | ((motor->const_h.Hall_GPIOx[2]->IDR & motor->const_h.Hall_GPIO_Pin_x[2]) ? 1U : 0U);
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	6892      	ldr	r2, [r2, #8]
 8002e5a:	6912      	ldr	r2, [r2, #16]
 8002e5c:	68f9      	ldr	r1, [r7, #12]
 8002e5e:	8a09      	ldrh	r1, [r1, #16]
 8002e60:	400a      	ands	r2, r1
 8002e62:	2a00      	cmp	r2, #0
 8002e64:	d001      	beq.n	8002e6a <motor_hall_exti+0x66>
 8002e66:	2201      	movs	r2, #1
 8002e68:	e000      	b.n	8002e6c <motor_hall_exti+0x68>
 8002e6a:	2200      	movs	r2, #0
    uint8_t hall_current =
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	777b      	strb	r3, [r7, #29]
    motor->exti_hall_last = hall_last;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	7fba      	ldrb	r2, [r7, #30]
 8002e74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    motor->exti_hall_curt = hall_current;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	7f7a      	ldrb	r2, [r7, #29]
 8002e7c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    if (hall_current == 0 || hall_current == 7) 
 8002e80:	7f7b      	ldrb	r3, [r7, #29]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <motor_hall_exti+0x88>
 8002e86:	7f7b      	ldrb	r3, [r7, #29]
 8002e88:	2b07      	cmp	r3, #7
 8002e8a:	d12c      	bne.n	8002ee6 <motor_hall_exti+0xe2>
    {
        uint8_t i;
        for (i = 0; i < 3; i++)
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	77fb      	strb	r3, [r7, #31]
 8002e90:	e025      	b.n	8002ede <motor_hall_exti+0xda>
        {
            HAL_TIM_PWM_Stop(motor->const_h.PWM_htimx, motor->const_h.PWM_TIM_CHANNEL_x[i]);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6958      	ldr	r0, [r3, #20]
 8002e96:	7ffa      	ldrb	r2, [r7, #31]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3206      	adds	r2, #6
 8002e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	f004 fd6d 	bl	8007980 <HAL_TIM_PWM_Stop>
            HAL_TIMEx_PWMN_Stop(motor->const_h.PWM_htimx, motor->const_h.PWM_TIM_CHANNEL_x[i]);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6958      	ldr	r0, [r3, #20]
 8002eaa:	7ffa      	ldrb	r2, [r7, #31]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3206      	adds	r2, #6
 8002eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f005 fd6b 	bl	8008990 <HAL_TIMEx_PWMN_Stop>
            HAL_GPIO_WritePin(motor->const_h.Coil_GPIOx[i], motor->const_h.Coil_GPIO_Pin_x[i],  GPIO_PIN_RESET);
 8002eba:	7ffb      	ldrb	r3, [r7, #31]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	330a      	adds	r3, #10
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	6858      	ldr	r0, [r3, #4]
 8002ec6:	7ffa      	ldrb	r2, [r7, #31]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	321c      	adds	r2, #28
 8002ecc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f003 faa6 	bl	8006424 <HAL_GPIO_WritePin>
        for (i = 0; i < 3; i++)
 8002ed8:	7ffb      	ldrb	r3, [r7, #31]
 8002eda:	3301      	adds	r3, #1
 8002edc:	77fb      	strb	r3, [r7, #31]
 8002ede:	7ffb      	ldrb	r3, [r7, #31]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d9d6      	bls.n	8002e92 <motor_hall_exti+0x8e>
        }
        return;
 8002ee4:	e02a      	b.n	8002f3c <motor_hall_exti+0x138>
    }
    RESULT_CHECK_RET_VOID(motor_hall_to_angle(hall_current, &motor->exti_hall_angal));
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f103 025c 	add.w	r2, r3, #92	@ 0x5c
 8002eec:	f107 0314 	add.w	r3, r7, #20
 8002ef0:	7f79      	ldrb	r1, [r7, #29]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe fdd4 	bl	8001aa0 <motor_hall_to_angle>
 8002ef8:	7d3b      	ldrb	r3, [r7, #20]
 8002efa:	f083 0301 	eor.w	r3, r3, #1
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d004      	beq.n	8002f0e <motor_hall_exti+0x10a>
 8002f04:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8002f08:	4b0e      	ldr	r3, [pc, #56]	@ (8002f44 <motor_hall_exti+0x140>)
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	e016      	b.n	8002f3c <motor_hall_exti+0x138>
    switch (motor->mode)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <motor_hall_exti+0x11a>
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d009      	beq.n	8002f30 <motor_hall_exti+0x12c>
 8002f1c:	e00e      	b.n	8002f3c <motor_hall_exti+0x138>
    {
        case MOTOR_CTRL_120:
        {
            motor->pwm_duty_u = 1.0f;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002f24:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
            motor_120_hall_update(motor);
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f7fe fef9 	bl	8001d20 <motor_120_hall_update>
            break;
 8002f2e:	e005      	b.n	8002f3c <motor_hall_exti+0x138>
        }
        case MOTOR_CTRL_FOC:
        {
            motor_foc_hall_update(motor);
 8002f30:	463b      	mov	r3, r7
 8002f32:	68f9      	ldr	r1, [r7, #12]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff f817 	bl	8001f68 <motor_foc_hall_update>
            break;
 8002f3a:	bf00      	nop
        }
    }
}
 8002f3c:	3720      	adds	r7, #32
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000990 	.word	0x20000990

08002f48 <motor_pwm_pulse>:

void motor_pwm_pulse(MotorParameter *motor)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
    switch (motor->mode)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d008      	beq.n	8002f6c <motor_pwm_pulse+0x24>
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d000      	beq.n	8002f60 <motor_pwm_pulse+0x18>
        {
            motor_foc_pwm_pulse(motor);
            break;
        }
    }
}
 8002f5e:	e006      	b.n	8002f6e <motor_pwm_pulse+0x26>
            motor_foc_pwm_pulse(motor);
 8002f60:	463b      	mov	r3, r7
 8002f62:	68f9      	ldr	r1, [r7, #12]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fe1d 	bl	8002ba4 <motor_foc_pwm_pulse>
            break;
 8002f6a:	e000      	b.n	8002f6e <motor_pwm_pulse+0x26>
            break;
 8002f6c:	bf00      	nop
}
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <motor_init>:

static void motor_init(MotorParameter *motor)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
    // ELE_tim_f：霍爾計時器的實際計數頻率 (Hz)
    // = ELE_timer_clock / (PSC + 1)
    const float32_t ELE_tim_f =
        (float32_t)*motor->const_h.ELE_tim_clk /
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	ee07 3a90 	vmov	s15, r3
 8002f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
        (float32_t)(motor->const_h.ELE_htimx->Init.Prescaler + 1U);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	3301      	adds	r3, #1
 8002f96:	ee07 3a90 	vmov	s15, r3
 8002f9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    const float32_t ELE_tim_f =
 8002f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fa2:	edc7 7a05 	vstr	s15, [r7, #20]
    // TIM_tim_t：PWM 控制定時器每個計數週期的時間 (秒/計數)
    // = (PSC + 1) / TIM_timer_clock
    const float32_t TIM_tim_t =
        (float32_t)(motor->const_h.TIM_htimx->Init.Prescaler + 1U) /
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	3301      	adds	r3, #1
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
        (float32_t)*motor->const_h.TIM_tim_clk;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	ee07 3a90 	vmov	s15, r3
 8002fc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    const float32_t TIM_tim_t =
 8002fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fc8:	edc7 7a04 	vstr	s15, [r7, #16]
    // ELE_tim_t：霍爾計時器每個計數週期的時間 (秒/計數)
    // = (PSC + 1) / ELE_timer_clock
    const float32_t ELE_tim_t =
        (float32_t)(motor->const_h.ELE_htimx->Init.Prescaler + 1U) /
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	ee07 3a90 	vmov	s15, r3
 8002fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
        (float32_t)*motor->const_h.ELE_tim_clk;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    const float32_t ELE_tim_t =
 8002fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fee:	edc7 7a03 	vstr	s15, [r7, #12]
    // rpm_fbk_trans：霍爾間隔 → 輸出軸轉速(RPM) 轉換常數
    // 公式：RPM = [ELE_tim_f * 60] / [6 × (POLE/2) × GEAR × htim_cnt]
    motor->rpm_fbk_trans =
        ELE_tim_f / (6.0f * (float32_t)MOTOR_42BLF01_POLE / 2.0f * MOTOR_42BLF01_GEAR) * 60.0f;
 8002ff2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ff6:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8003044 <motor_init+0xcc>
 8002ffa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ffe:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8003048 <motor_init+0xd0>
 8003002:	ee67 7a87 	vmul.f32	s15, s15, s14
    motor->rpm_fbk_trans =
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    // pwm_per_it_angle_itpl_trans：PWM 週期 → 電角度內插轉換常數
    // 公式：Δθ_elec(rad) = [ (TIM_tim_t * ARR) / ELE_tim_t ] × (π/3) / htim_cnt
    motor->pwm_per_it_angle_itpl_trans =
        TIM_tim_t / ELE_tim_t * (float32_t)(motor->const_h.TIM_htimx->Init.Period) * DIV_PI_3;
 800300c:	edd7 6a04 	vldr	s13, [r7, #16]
 8003010:	edd7 7a03 	vldr	s15, [r7, #12]
 8003014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800304c <motor_init+0xd4>
 800302e:	ee67 7a87 	vmul.f32	s15, s15, s14
    motor->pwm_per_it_angle_itpl_trans =
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
}
 8003038:	bf00      	nop
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	42533334 	.word	0x42533334
 8003048:	42700000 	.word	0x42700000
 800304c:	3f860a92 	.word	0x3f860a92

08003050 <StartMotorTask>:

void StartMotorTask(void *argument)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
    motor_init(&motor_h);
 8003058:	4809      	ldr	r0, [pc, #36]	@ (8003080 <StartMotorTask+0x30>)
 800305a:	f7ff ff8d 	bl	8002f78 <motor_init>
    motor_h.pi_speed.Ref = 80.0f;
 800305e:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <StartMotorTask+0x30>)
 8003060:	4a08      	ldr	r2, [pc, #32]	@ (8003084 <StartMotorTask+0x34>)
 8003062:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    // motor_h.reverse = true;
    while(HAL_GetTick() < 3000) osDelay(10);
 8003066:	e002      	b.n	800306e <StartMotorTask+0x1e>
 8003068:	200a      	movs	r0, #10
 800306a:	f006 fcfd 	bl	8009a68 <osDelay>
 800306e:	f000 fc65 	bl	800393c <HAL_GetTick>
 8003072:	4603      	mov	r3, r0
 8003074:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8003078:	4293      	cmp	r3, r2
 800307a:	d9f5      	bls.n	8003068 <StartMotorTask+0x18>

    // motor_h.mode = MOTOR_CTRL_FOC;
    // motor_foc_tim_setup(&motor_h);
    // motor_hall_exti(&motor_h);

    StopTask();
 800307c:	f006 fced 	bl	8009a5a <osThreadExit>
 8003080:	20000050 	.word	0x20000050
 8003084:	42a00000 	.word	0x42a00000

08003088 <PARK_run>:
#include "motor/park.h"

inline void PARK_run(volatile PARK *park)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
    park->Ds = (park->Alpha * park->Cosine) + (park->Beta  * park->Sine);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	ed93 7a00 	vldr	s14, [r3]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	edd3 7a06 	vldr	s15, [r3, #24]
 800309c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80030ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	edc3 7a03 	vstr	s15, [r3, #12]
    park->Qs = (park->Beta  * park->Cosine) - (park->Alpha * park->Sine);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80030c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	edd3 6a00 	vldr	s13, [r3]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	edd3 7a05 	vldr	s15, [r3, #20]
 80030d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <IPARK_run>:

inline void IPARK_run(volatile IPARK *ipark)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
    ipark->Alpha = (ipark->Vdref * ipark->Cosine) - (ipark->Vqref * ipark->Sine);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	ed93 7a03 	vldr	s14, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	edd3 7a06 	vldr	s15, [r3, #24]
 8003104:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	edd3 6a04 	vldr	s13, [r3, #16]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	edd3 7a05 	vldr	s15, [r3, #20]
 8003114:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	edc3 7a00 	vstr	s15, [r3]
    ipark->Beta  = (ipark->Vqref * ipark->Cosine) + (ipark->Vdref * ipark->Sine);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	ed93 7a04 	vldr	s14, [r3, #16]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	edd3 7a06 	vldr	s15, [r3, #24]
 800312e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	edd3 6a03 	vldr	s13, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	edd3 7a05 	vldr	s15, [r3, #20]
 800313e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <PI_run>:
#include "motor/pi.h"
#include "motor/basic.h"

void PI_run(volatile PI_CTRL *pi)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
    pi->up = pi->Kp * (pi->Ref - pi->Fbk);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	ed93 7a03 	vldr	s14, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	edd3 6a00 	vldr	s13, [r3]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003172:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	edc3 7a07 	vstr	s15, [r3, #28]

    if (pi->Out == pi->v1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	ed93 7a02 	vldr	s14, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800318c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003194:	d110      	bne.n	80031b8 <PI_run+0x60>
    {
        pi->ui = pi->Ki * pi->up + pi->i1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	ed93 7a04 	vldr	s14, [r3, #16]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	edd3 7a07 	vldr	s15, [r3, #28]
 80031a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80031ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	edc3 7a08 	vstr	s15, [r3, #32]
 80031b6:	e003      	b.n	80031c0 <PI_run+0x68>
    }
    else
    {
        pi->ui = pi->i1;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	621a      	str	r2, [r3, #32]
    }
    pi->i1 = pi->ui;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1a      	ldr	r2, [r3, #32]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	629a      	str	r2, [r3, #40]	@ 0x28
    pi->v1 = pi->up + pi->ui;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	ed93 7a07 	vldr	s14, [r3, #28]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	edd3 7a08 	vldr	s15, [r3, #32]
 80031d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    pi->Out = clampf(pi->v1, pi->Umin, pi->Umax);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	ed93 7a06 	vldr	s14, [r3, #24]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	edd3 6a05 	vldr	s13, [r3, #20]
 80031f0:	eeb0 1a66 	vmov.f32	s2, s13
 80031f4:	eef0 0a47 	vmov.f32	s1, s14
 80031f8:	eeb0 0a67 	vmov.f32	s0, s15
 80031fc:	f7fe fca2 	bl	8001b44 <clampf>
 8003200:	eef0 7a40 	vmov.f32	s15, s0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	edc3 7a02 	vstr	s15, [r3, #8]
    pi->w1 = (pi->Out == pi->v1) ? 1.0f : 0.0f;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003216:	eeb4 7a67 	vcmp.f32	s14, s15
 800321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321e:	d102      	bne.n	8003226 <PI_run+0xce>
 8003220:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003224:	e001      	b.n	800322a <PI_run+0xd2>
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <SVGEN_run>:
#include "motor/svgendq.h"

inline void SVGEN_run(volatile SVGENDQ *svgq)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
    float32_t t1 = svgq->Ubeta * 0.5f;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	edd3 7a01 	vldr	s15, [r3, #4]
 8003246:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800324a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800324e:	edc7 7a03 	vstr	s15, [r7, #12]
    float32_t t2 = 0.8660254f * svgq->Ualpha;   // sqrt(3)/2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	edd3 7a00 	vldr	s15, [r3]
 8003258:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003304 <SVGEN_run+0xcc>
 800325c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003260:	edc7 7a02 	vstr	s15, [r7, #8]
    // Inverse clarke transformation
    svgq->Va = svgq->Ubeta;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	609a      	str	r2, [r3, #8]
    svgq->Vb = -t1 + t2;
 800326c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003270:	edd7 7a03 	vldr	s15, [r7, #12]
 8003274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	edc3 7a03 	vstr	s15, [r3, #12]
    svgq->Vc = -t1 - t2;
 800327e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003282:	eeb1 7a67 	vneg.f32	s14, s15
 8003286:	edd7 7a02 	vldr	s15, [r7, #8]
 800328a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	edc3 7a04 	vstr	s15, [r3, #16]
    // 60 degree Sector determination
    svgq->Sector = 0;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	829a      	strh	r2, [r3, #20]
    if (svgq->Va > 0.0f) svgq->Sector += 2;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	edd3 7a02 	vldr	s15, [r3, #8]
 80032a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a8:	dd06      	ble.n	80032b8 <SVGEN_run+0x80>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	8a9b      	ldrh	r3, [r3, #20]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3302      	adds	r3, #2
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	829a      	strh	r2, [r3, #20]
    if (svgq->Vb > 0.0f) svgq->Sector += 4;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80032be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c6:	dd06      	ble.n	80032d6 <SVGEN_run+0x9e>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	8a9b      	ldrh	r3, [r3, #20]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3304      	adds	r3, #4
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	829a      	strh	r2, [r3, #20]
    if (svgq->Vc > 0.0f) svgq->Sector += 1;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80032dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e4:	dc00      	bgt.n	80032e8 <SVGEN_run+0xb0>
    // Sector 0: this is special case for (Ualpha,Ubeta) = (0,0)
}
 80032e6:	e006      	b.n	80032f6 <SVGEN_run+0xbe>
    if (svgq->Vc > 0.0f) svgq->Sector += 1;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	8a9b      	ldrh	r3, [r3, #20]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3301      	adds	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	829a      	strh	r2, [r3, #20]
}
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	3f5db3d7 	.word	0x3f5db3d7

08003308 <trigo_sin_cosf>:
    .OutSize    = CORDIC_OUTSIZE_32BITS,
};
static CORDIC_ConfigTypeDef *cordic_currunt;

Result trigo_sin_cosf(float32_t theta, float32_t *sin, float32_t *cos)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b092      	sub	sp, #72	@ 0x48
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	ed87 0a02 	vstr	s0, [r7, #8]
 8003314:	6079      	str	r1, [r7, #4]
 8003316:	603a      	str	r2, [r7, #0]
    if (cordic_currunt != &cordic_cfg_sin_cos)
 8003318:	4b3a      	ldr	r3, [pc, #232]	@ (8003404 <trigo_sin_cosf+0xfc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a3a      	ldr	r2, [pc, #232]	@ (8003408 <trigo_sin_cosf+0x100>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01a      	beq.n	8003358 <trigo_sin_cosf+0x50>
    {
        cordic_currunt = &cordic_cfg_sin_cos;
 8003322:	4b38      	ldr	r3, [pc, #224]	@ (8003404 <trigo_sin_cosf+0xfc>)
 8003324:	4a38      	ldr	r2, [pc, #224]	@ (8003408 <trigo_sin_cosf+0x100>)
 8003326:	601a      	str	r2, [r3, #0]
        ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Configure(&hcordic, cordic_currunt));
 8003328:	4b36      	ldr	r3, [pc, #216]	@ (8003404 <trigo_sin_cosf+0xfc>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4619      	mov	r1, r3
 800332e:	4837      	ldr	r0, [pc, #220]	@ (800340c <trigo_sin_cosf+0x104>)
 8003330:	f001 fd8a 	bl	8004e48 <HAL_CORDIC_Configure>
 8003334:	4603      	mov	r3, r0
 8003336:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800333a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <trigo_sin_cosf+0x50>
 8003342:	f997 103f 	ldrsb.w	r1, [r7, #63]	@ 0x3f
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	461a      	mov	r2, r3
 800334a:	2300      	movs	r3, #0
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	6053      	str	r3, [r2, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	460a      	mov	r2, r1
 8003354:	711a      	strb	r2, [r3, #4]
 8003356:	e050      	b.n	80033fa <trigo_sin_cosf+0xf2>
    }
    int32_t in[2];
    in[0] = (int32_t)((wrap_m1_1pi(theta) / PI) * 2147483648.0f);
 8003358:	ed97 0a02 	vldr	s0, [r7, #8]
 800335c:	f7fe fc56 	bl	8001c0c <wrap_m1_1pi>
 8003360:	eeb0 7a40 	vmov.f32	s14, s0
 8003364:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8003410 <trigo_sin_cosf+0x108>
 8003368:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800336c:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8003414 <trigo_sin_cosf+0x10c>
 8003370:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003374:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003378:	ee17 3a90 	vmov	r3, s15
 800337c:	637b      	str	r3, [r7, #52]	@ 0x34
    in[1] = 0x7FFFFFFF;
 800337e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8003382:	63bb      	str	r3, [r7, #56]	@ 0x38
    int32_t out[2];
    ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Calculate(&hcordic, in, out, 1, HAL_MAX_DELAY));
 8003384:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003388:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800338c:	f04f 33ff 	mov.w	r3, #4294967295
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	2301      	movs	r3, #1
 8003394:	481d      	ldr	r0, [pc, #116]	@ (800340c <trigo_sin_cosf+0x104>)
 8003396:	f001 fd93 	bl	8004ec0 <HAL_CORDIC_Calculate>
 800339a:	4603      	mov	r3, r0
 800339c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80033a0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <trigo_sin_cosf+0xb6>
 80033a8:	f997 103e 	ldrsb.w	r1, [r7, #62]	@ 0x3e
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	461a      	mov	r2, r3
 80033b0:	2300      	movs	r3, #0
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	6053      	str	r3, [r2, #4]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	460a      	mov	r2, r1
 80033ba:	711a      	strb	r2, [r3, #4]
 80033bc:	e01d      	b.n	80033fa <trigo_sin_cosf+0xf2>
    *sin = (float32_t)out[0] / 2147483648.0f;
 80033be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c0:	ee07 3a90 	vmov	s15, r3
 80033c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033c8:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8003414 <trigo_sin_cosf+0x10c>
 80033cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	edc3 7a00 	vstr	s15, [r3]
    *cos = (float32_t)out[1] / 2147483648.0f;
 80033d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d8:	ee07 3a90 	vmov	s15, r3
 80033dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033e0:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8003414 <trigo_sin_cosf+0x10c>
 80033e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	edc3 7a00 	vstr	s15, [r3]
    return RESULT_OK(NULL);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	701a      	strb	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	605a      	str	r2, [r3, #4]
}
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	3740      	adds	r7, #64	@ 0x40
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	200009e0 	.word	0x200009e0
 8003408:	200001f4 	.word	0x200001f4
 800340c:	20000390 	.word	0x20000390
 8003410:	40490fdb 	.word	0x40490fdb
 8003414:	4f000000 	.word	0x4f000000

08003418 <trigo_atan>:

Result trigo_atan(float32_t x, float32_t y, float32_t *theta)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b098      	sub	sp, #96	@ 0x60
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	ed87 0a02 	vstr	s0, [r7, #8]
 8003424:	edc7 0a01 	vstr	s1, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
    if (cordic_currunt != &cordic_cfg_atan)
 800342a:	4b59      	ldr	r3, [pc, #356]	@ (8003590 <trigo_atan+0x178>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a59      	ldr	r2, [pc, #356]	@ (8003594 <trigo_atan+0x17c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d01a      	beq.n	800346a <trigo_atan+0x52>
    {
        cordic_currunt = &cordic_cfg_atan;
 8003434:	4b56      	ldr	r3, [pc, #344]	@ (8003590 <trigo_atan+0x178>)
 8003436:	4a57      	ldr	r2, [pc, #348]	@ (8003594 <trigo_atan+0x17c>)
 8003438:	601a      	str	r2, [r3, #0]
        ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Configure(&hcordic, cordic_currunt));
 800343a:	4b55      	ldr	r3, [pc, #340]	@ (8003590 <trigo_atan+0x178>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4619      	mov	r1, r3
 8003440:	4855      	ldr	r0, [pc, #340]	@ (8003598 <trigo_atan+0x180>)
 8003442:	f001 fd01 	bl	8004e48 <HAL_CORDIC_Configure>
 8003446:	4603      	mov	r3, r0
 8003448:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800344c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <trigo_atan+0x52>
 8003454:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	461a      	mov	r2, r3
 800345c:	2300      	movs	r3, #0
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	6053      	str	r3, [r2, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	460a      	mov	r2, r1
 8003466:	711a      	strb	r2, [r3, #4]
 8003468:	e08e      	b.n	8003588 <trigo_atan+0x170>
    }
    float32_t ax = fast_fabsf(x);
 800346a:	ed97 0a02 	vldr	s0, [r7, #8]
 800346e:	f7fe fc1f 	bl	8001cb0 <fast_fabsf>
 8003472:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
    float32_t ay = fast_fabsf(y);
 8003476:	ed97 0a01 	vldr	s0, [r7, #4]
 800347a:	f7fe fc19 	bl	8001cb0 <fast_fabsf>
 800347e:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    float32_t norm = (ax > ay) ? ax : ay;
 8003482:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003486:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800348a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800348e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003492:	dd01      	ble.n	8003498 <trigo_atan+0x80>
 8003494:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003496:	e000      	b.n	800349a <trigo_atan+0x82>
 8003498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800349a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (norm == 0.0f) return RESULT_ERROR(RES_ERR_DIV_0);
 800349c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80034a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a8:	d108      	bne.n	80034bc <trigo_atan+0xa4>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	461a      	mov	r2, r3
 80034ae:	2300      	movs	r3, #0
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	6053      	str	r3, [r2, #4]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	220b      	movs	r2, #11
 80034b8:	711a      	strb	r2, [r3, #4]
 80034ba:	e065      	b.n	8003588 <trigo_atan+0x170>
    x /= norm;
 80034bc:	edd7 6a02 	vldr	s13, [r7, #8]
 80034c0:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80034c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c8:	edc7 7a02 	vstr	s15, [r7, #8]
    y /= norm;
 80034cc:	edd7 6a01 	vldr	s13, [r7, #4]
 80034d0:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80034d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034d8:	edc7 7a01 	vstr	s15, [r7, #4]
    int32_t in[2], out;
    in[0] = (int32_t)(x * 2147483648.0f);  
 80034dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80034e0:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800359c <trigo_atan+0x184>
 80034e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034ec:	ee17 3a90 	vmov	r3, s15
 80034f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    in[1] = (int32_t)(y * 2147483648.0f);
 80034f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80034f6:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800359c <trigo_atan+0x184>
 80034fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003502:	ee17 3a90 	vmov	r3, s15
 8003506:	63fb      	str	r3, [r7, #60]	@ 0x3c
    ERROR_CHECK_HAL_RET_RES(HAL_CORDIC_Calculate(&hcordic, in, &out, 1, HAL_MAX_DELAY));
 8003508:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800350c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8003510:	f04f 33ff 	mov.w	r3, #4294967295
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	2301      	movs	r3, #1
 8003518:	481f      	ldr	r0, [pc, #124]	@ (8003598 <trigo_atan+0x180>)
 800351a:	f001 fcd1 	bl	8004ec0 <HAL_CORDIC_Calculate>
 800351e:	4603      	mov	r3, r0
 8003520:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003524:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <trigo_atan+0x12a>
 800352c:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	461a      	mov	r2, r3
 8003534:	2300      	movs	r3, #0
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	6053      	str	r3, [r2, #4]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	460a      	mov	r2, r1
 800353e:	711a      	strb	r2, [r3, #4]
 8003540:	e022      	b.n	8003588 <trigo_atan+0x170>
    float32_t angle = (float32_t)out / 2147483648.0f; // [-π, π)
 8003542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003544:	ee07 3a90 	vmov	s15, r3
 8003548:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800354c:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800359c <trigo_atan+0x184>
 8003550:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003554:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    if (angle < 0) angle += MUL_2_PI;
 8003558:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800355c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003564:	d507      	bpl.n	8003576 <trigo_atan+0x15e>
 8003566:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800356a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80035a0 <trigo_atan+0x188>
 800356e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003572:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    *theta = angle;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800357a:	601a      	str	r2, [r3, #0]
    return RESULT_OK(NULL);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2201      	movs	r2, #1
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	605a      	str	r2, [r3, #4]
}
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	3758      	adds	r7, #88	@ 0x58
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	200009e0 	.word	0x200009e0
 8003594:	20000210 	.word	0x20000210
 8003598:	20000390 	.word	0x20000390
 800359c:	4f000000 	.word	0x4f000000
 80035a0:	40c90fdb 	.word	0x40c90fdb

080035a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035a4:	480d      	ldr	r0, [pc, #52]	@ (80035dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035a6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80035a8:	f7fd fcfe 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035ac:	480c      	ldr	r0, [pc, #48]	@ (80035e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80035ae:	490d      	ldr	r1, [pc, #52]	@ (80035e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035b0:	4a0d      	ldr	r2, [pc, #52]	@ (80035e8 <LoopForever+0xe>)
  movs r3, #0
 80035b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80035b4:	e002      	b.n	80035bc <LoopCopyDataInit>

080035b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ba:	3304      	adds	r3, #4

080035bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035c0:	d3f9      	bcc.n	80035b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035c2:	4a0a      	ldr	r2, [pc, #40]	@ (80035ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80035c4:	4c0a      	ldr	r4, [pc, #40]	@ (80035f0 <LoopForever+0x16>)
  movs r3, #0
 80035c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035c8:	e001      	b.n	80035ce <LoopFillZerobss>

080035ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035cc:	3204      	adds	r2, #4

080035ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035d0:	d3fb      	bcc.n	80035ca <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80035d2:	f009 f8bd 	bl	800c750 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035d6:	f7fd fb33 	bl	8000c40 <main>

080035da <LoopForever>:

LoopForever:
    b LoopForever
 80035da:	e7fe      	b.n	80035da <LoopForever>
  ldr   r0, =_estack
 80035dc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80035e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035e4:	2000029c 	.word	0x2000029c
  ldr r2, =_sidata
 80035e8:	0800c9e4 	.word	0x0800c9e4
  ldr r2, =_sbss
 80035ec:	2000029c 	.word	0x2000029c
  ldr r4, =_ebss
 80035f0:	200025ac 	.word	0x200025ac

080035f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80035f4:	e7fe      	b.n	80035f4 <ADC1_2_IRQHandler>
	...

080035f8 <BSP_LED_Init>:
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	71fb      	strb	r3, [r7, #7]
 8003602:	4b16      	ldr	r3, [pc, #88]	@ (800365c <BSP_LED_Init+0x64>)
 8003604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003606:	4a15      	ldr	r2, [pc, #84]	@ (800365c <BSP_LED_Init+0x64>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800360e:	4b13      	ldr	r3, [pc, #76]	@ (800365c <BSP_LED_Init+0x64>)
 8003610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2320      	movs	r3, #32
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	2301      	movs	r3, #1
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
 8003626:	2303      	movs	r3, #3
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	4a0c      	ldr	r2, [pc, #48]	@ (8003660 <BSP_LED_Init+0x68>)
 800362e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003632:	f107 020c 	add.w	r2, r7, #12
 8003636:	4611      	mov	r1, r2
 8003638:	4618      	mov	r0, r3
 800363a:	f002 fd71 	bl	8006120 <HAL_GPIO_Init>
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	4a07      	ldr	r2, [pc, #28]	@ (8003660 <BSP_LED_Init+0x68>)
 8003642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003646:	2120      	movs	r1, #32
 8003648:	2200      	movs	r2, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f002 feea 	bl	8006424 <HAL_GPIO_WritePin>
 8003650:	2300      	movs	r3, #0
 8003652:	4618      	mov	r0, r3
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	2000022c 	.word	0x2000022c

08003664 <BSP_PB_Init>:
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	460a      	mov	r2, r1
 800366e:	71fb      	strb	r3, [r7, #7]
 8003670:	4613      	mov	r3, r2
 8003672:	71bb      	strb	r3, [r7, #6]
 8003674:	4b2c      	ldr	r3, [pc, #176]	@ (8003728 <BSP_PB_Init+0xc4>)
 8003676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003678:	4a2b      	ldr	r2, [pc, #172]	@ (8003728 <BSP_PB_Init+0xc4>)
 800367a:	f043 0304 	orr.w	r3, r3, #4
 800367e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003680:	4b29      	ldr	r3, [pc, #164]	@ (8003728 <BSP_PB_Init+0xc4>)
 8003682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	2302      	movs	r3, #2
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	2302      	movs	r3, #2
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	79bb      	ldrb	r3, [r7, #6]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10c      	bne.n	80036ba <BSP_PB_Init+0x56>
 80036a0:	2300      	movs	r3, #0
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	4a21      	ldr	r2, [pc, #132]	@ (800372c <BSP_PB_Init+0xc8>)
 80036a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ac:	f107 020c 	add.w	r2, r7, #12
 80036b0:	4611      	mov	r1, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f002 fd34 	bl	8006120 <HAL_GPIO_Init>
 80036b8:	e031      	b.n	800371e <BSP_PB_Init+0xba>
 80036ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	4a1a      	ldr	r2, [pc, #104]	@ (800372c <BSP_PB_Init+0xc8>)
 80036c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c8:	f107 020c 	add.w	r2, r7, #12
 80036cc:	4611      	mov	r1, r2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f002 fd26 	bl	8006120 <HAL_GPIO_Init>
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4a15      	ldr	r2, [pc, #84]	@ (8003730 <BSP_PB_Init+0xcc>)
 80036da:	441a      	add	r2, r3
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	4915      	ldr	r1, [pc, #84]	@ (8003734 <BSP_PB_Init+0xd0>)
 80036e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f002 f825 	bl	8005736 <HAL_EXTI_GetHandle>
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003730 <BSP_PB_Init+0xcc>)
 80036f2:	1898      	adds	r0, r3, r2
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	4a10      	ldr	r2, [pc, #64]	@ (8003738 <BSP_PB_Init+0xd4>)
 80036f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fc:	461a      	mov	r2, r3
 80036fe:	2100      	movs	r1, #0
 8003700:	f001 fffc 	bl	80056fc <HAL_EXTI_RegisterCallback>
 8003704:	2028      	movs	r0, #40	@ 0x28
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	4a0c      	ldr	r2, [pc, #48]	@ (800373c <BSP_PB_Init+0xd8>)
 800370a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800370e:	2200      	movs	r2, #0
 8003710:	4619      	mov	r1, r3
 8003712:	f001 fd59 	bl	80051c8 <HAL_NVIC_SetPriority>
 8003716:	2328      	movs	r3, #40	@ 0x28
 8003718:	4618      	mov	r0, r3
 800371a:	f001 fd6f 	bl	80051fc <HAL_NVIC_EnableIRQ>
 800371e:	2300      	movs	r3, #0
 8003720:	4618      	mov	r0, r3
 8003722:	3720      	adds	r7, #32
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021000 	.word	0x40021000
 800372c:	20000230 	.word	0x20000230
 8003730:	200009e4 	.word	0x200009e4
 8003734:	0800c9a8 	.word	0x0800c9a8
 8003738:	20000238 	.word	0x20000238
 800373c:	2000023c 	.word	0x2000023c

08003740 <BSP_PB_IRQHandler>:
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	71fb      	strb	r3, [r7, #7]
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4a04      	ldr	r2, [pc, #16]	@ (8003760 <BSP_PB_IRQHandler+0x20>)
 8003750:	4413      	add	r3, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f002 f804 	bl	8005760 <HAL_EXTI_IRQHandler>
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	200009e4 	.word	0x200009e4

08003764 <BSP_PB_Callback>:
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	71fb      	strb	r3, [r7, #7]
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <BSP_COM_Init>:
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	6039      	str	r1, [r7, #0]
 8003786:	71fb      	strb	r3, [r7, #7]
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d903      	bls.n	800379a <BSP_COM_Init+0x1e>
 8003792:	f06f 0301 	mvn.w	r3, #1
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	e018      	b.n	80037cc <BSP_COM_Init+0x50>
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	2294      	movs	r2, #148	@ 0x94
 800379e:	fb02 f303 	mul.w	r3, r2, r3
 80037a2:	4a0d      	ldr	r2, [pc, #52]	@ (80037d8 <BSP_COM_Init+0x5c>)
 80037a4:	4413      	add	r3, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f852 	bl	8003850 <COM1_MspInit>
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	2294      	movs	r2, #148	@ 0x94
 80037b0:	fb02 f303 	mul.w	r3, r2, r3
 80037b4:	4a08      	ldr	r2, [pc, #32]	@ (80037d8 <BSP_COM_Init+0x5c>)
 80037b6:	4413      	add	r3, r2
 80037b8:	6839      	ldr	r1, [r7, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f80e 	bl	80037dc <MX_LPUART1_Init>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <BSP_COM_Init+0x50>
 80037c6:	f06f 0303 	mvn.w	r3, #3
 80037ca:	e000      	b.n	80037ce <BSP_COM_Init+0x52>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	200009ec 	.word	0x200009ec

080037dc <MX_LPUART1_Init>:
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
 80037e6:	4b15      	ldr	r3, [pc, #84]	@ (800383c <MX_LPUART1_Init+0x60>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	220c      	movs	r2, #12
 80037fa:	615a      	str	r2, [r3, #20]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	895b      	ldrh	r3, [r3, #10]
 8003800:	461a      	mov	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	611a      	str	r2, [r3, #16]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	609a      	str	r2, [r3, #8]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	891b      	ldrh	r3, [r3, #8]
 8003812:	461a      	mov	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	60da      	str	r2, [r3, #12]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	899b      	ldrh	r3, [r3, #12]
 800381c:	461a      	mov	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	619a      	str	r2, [r3, #24]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003828:	61da      	str	r2, [r3, #28]
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f005 fa9a 	bl	8008d64 <HAL_UART_Init>
 8003830:	4603      	mov	r3, r0
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000234 	.word	0x20000234

08003840 <BUTTON_USER_EXTI_Callback>:
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
 8003844:	2000      	movs	r0, #0
 8003846:	f7ff ff8d 	bl	8003764 <BSP_PB_Callback>
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <COM1_MspInit>:
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	@ 0x28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	4b22      	ldr	r3, [pc, #136]	@ (80038e4 <COM1_MspInit+0x94>)
 800385a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800385c:	4a21      	ldr	r2, [pc, #132]	@ (80038e4 <COM1_MspInit+0x94>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003864:	4b1f      	ldr	r3, [pc, #124]	@ (80038e4 <COM1_MspInit+0x94>)
 8003866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4b1c      	ldr	r3, [pc, #112]	@ (80038e4 <COM1_MspInit+0x94>)
 8003872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003874:	4a1b      	ldr	r2, [pc, #108]	@ (80038e4 <COM1_MspInit+0x94>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800387c:	4b19      	ldr	r3, [pc, #100]	@ (80038e4 <COM1_MspInit+0x94>)
 800387e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4b16      	ldr	r3, [pc, #88]	@ (80038e4 <COM1_MspInit+0x94>)
 800388a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388c:	4a15      	ldr	r2, [pc, #84]	@ (80038e4 <COM1_MspInit+0x94>)
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003894:	4b13      	ldr	r3, [pc, #76]	@ (80038e4 <COM1_MspInit+0x94>)
 8003896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2304      	movs	r3, #4
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	2302      	movs	r3, #2
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	2302      	movs	r3, #2
 80038aa:	623b      	str	r3, [r7, #32]
 80038ac:	2301      	movs	r3, #1
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	230c      	movs	r3, #12
 80038b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b4:	f107 0314 	add.w	r3, r7, #20
 80038b8:	4619      	mov	r1, r3
 80038ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038be:	f002 fc2f 	bl	8006120 <HAL_GPIO_Init>
 80038c2:	2308      	movs	r3, #8
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	2302      	movs	r3, #2
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	230c      	movs	r3, #12
 80038cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ce:	f107 0314 	add.w	r3, r7, #20
 80038d2:	4619      	mov	r1, r3
 80038d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038d8:	f002 fc22 	bl	8006120 <HAL_GPIO_Init>
 80038dc:	bf00      	nop
 80038de:	3728      	adds	r7, #40	@ 0x28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40021000 	.word	0x40021000

080038e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038f2:	2003      	movs	r0, #3
 80038f4:	f001 fc5d 	bl	80051b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038f8:	200f      	movs	r0, #15
 80038fa:	f7fd fa73 	bl	8000de4 <HAL_InitTick>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	71fb      	strb	r3, [r7, #7]
 8003908:	e001      	b.n	800390e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800390a:	f7fd fa41 	bl	8000d90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800390e:	79fb      	ldrb	r3, [r7, #7]

}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800391c:	4b05      	ldr	r3, [pc, #20]	@ (8003934 <HAL_IncTick+0x1c>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	4b05      	ldr	r3, [pc, #20]	@ (8003938 <HAL_IncTick+0x20>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4413      	add	r3, r2
 8003926:	4a03      	ldr	r2, [pc, #12]	@ (8003934 <HAL_IncTick+0x1c>)
 8003928:	6013      	str	r3, [r2, #0]
}
 800392a:	bf00      	nop
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	20000a80 	.word	0x20000a80
 8003938:	20000244 	.word	0x20000244

0800393c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return uwTick;
 8003940:	4b03      	ldr	r3, [pc, #12]	@ (8003950 <HAL_GetTick+0x14>)
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	4618      	mov	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	20000a80 	.word	0x20000a80

08003954 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	609a      	str	r2, [r3, #8]
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	609a      	str	r2, [r3, #8]
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3360      	adds	r3, #96	@ 0x60
 80039ce:	461a      	mov	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4b08      	ldr	r3, [pc, #32]	@ (8003a00 <LL_ADC_SetOffset+0x44>)
 80039de:	4013      	ands	r3, r2
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80039f4:	bf00      	nop
 80039f6:	371c      	adds	r7, #28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	03fff000 	.word	0x03fff000

08003a04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3360      	adds	r3, #96	@ 0x60
 8003a12:	461a      	mov	r2, r3
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3360      	adds	r3, #96	@ 0x60
 8003a40:	461a      	mov	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	431a      	orrs	r2, r3
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003a5a:	bf00      	nop
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b087      	sub	sp, #28
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3360      	adds	r3, #96	@ 0x60
 8003a76:	461a      	mov	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003a90:	bf00      	nop
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3360      	adds	r3, #96	@ 0x60
 8003aac:	461a      	mov	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	615a      	str	r2, [r3, #20]
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b087      	sub	sp, #28
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	3330      	adds	r3, #48	@ 0x30
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	0a1b      	lsrs	r3, r3, #8
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	4413      	add	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	211f      	movs	r1, #31
 8003b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	401a      	ands	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	0e9b      	lsrs	r3, r3, #26
 8003b56:	f003 011f 	and.w	r1, r3, #31
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	fa01 f303 	lsl.w	r3, r1, r3
 8003b64:	431a      	orrs	r2, r3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b087      	sub	sp, #28
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3314      	adds	r3, #20
 8003b86:	461a      	mov	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	0e5b      	lsrs	r3, r3, #25
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	4413      	add	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	0d1b      	lsrs	r3, r3, #20
 8003b9e:	f003 031f 	and.w	r3, r3, #31
 8003ba2:	2107      	movs	r1, #7
 8003ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	401a      	ands	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	0d1b      	lsrs	r3, r3, #20
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003bc0:	bf00      	nop
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be4:	43db      	mvns	r3, r3
 8003be6:	401a      	ands	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f003 0318 	and.w	r3, r3, #24
 8003bee:	4908      	ldr	r1, [pc, #32]	@ (8003c10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003bf0:	40d9      	lsrs	r1, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	400b      	ands	r3, r1
 8003bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003c02:	bf00      	nop
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	0007ffff 	.word	0x0007ffff

08003c14 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 031f 	and.w	r3, r3, #31
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003c40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6093      	str	r3, [r2, #8]
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c68:	d101      	bne.n	8003c6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003c8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cb8:	d101      	bne.n	8003cbe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003cdc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ce0:	f043 0201 	orr.w	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <LL_ADC_IsEnabled+0x18>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <LL_ADC_IsEnabled+0x1a>
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d2a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d2e:	f043 0204 	orr.w	r2, r3, #4
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d101      	bne.n	8003d5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d101      	bne.n	8003d80 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
	...

08003d90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d90:	b590      	push	{r4, r7, lr}
 8003d92:	b089      	sub	sp, #36	@ 0x24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e167      	b.n	800407a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d109      	bne.n	8003dcc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7fc fc6f 	bl	800069c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff ff3f 	bl	8003c54 <LL_ADC_IsDeepPowerDownEnabled>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff25 	bl	8003c30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff ff5a 	bl	8003ca4 <LL_ADC_IsInternalRegulatorEnabled>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d115      	bne.n	8003e22 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff ff3e 	bl	8003c7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e00:	4ba0      	ldr	r3, [pc, #640]	@ (8004084 <HAL_ADC_Init+0x2f4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	099b      	lsrs	r3, r3, #6
 8003e06:	4aa0      	ldr	r2, [pc, #640]	@ (8004088 <HAL_ADC_Init+0x2f8>)
 8003e08:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0c:	099b      	lsrs	r3, r3, #6
 8003e0e:	3301      	adds	r3, #1
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e14:	e002      	b.n	8003e1c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f9      	bne.n	8003e16 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff ff3c 	bl	8003ca4 <LL_ADC_IsInternalRegulatorEnabled>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10d      	bne.n	8003e4e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e36:	f043 0210 	orr.w	r2, r3, #16
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e42:	f043 0201 	orr.w	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff ff75 	bl	8003d42 <LL_ADC_REG_IsConversionOngoing>
 8003e58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f040 8100 	bne.w	8004068 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f040 80fc 	bne.w	8004068 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e74:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003e78:	f043 0202 	orr.w	r2, r3, #2
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff ff35 	bl	8003cf4 <LL_ADC_IsEnabled>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d111      	bne.n	8003eb4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e90:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e94:	f7ff ff2e 	bl	8003cf4 <LL_ADC_IsEnabled>
 8003e98:	4604      	mov	r4, r0
 8003e9a:	487c      	ldr	r0, [pc, #496]	@ (800408c <HAL_ADC_Init+0x2fc>)
 8003e9c:	f7ff ff2a 	bl	8003cf4 <LL_ADC_IsEnabled>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4323      	orrs	r3, r4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d105      	bne.n	8003eb4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	4619      	mov	r1, r3
 8003eae:	4878      	ldr	r0, [pc, #480]	@ (8004090 <HAL_ADC_Init+0x300>)
 8003eb0:	f7ff fd50 	bl	8003954 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	7f5b      	ldrb	r3, [r3, #29]
 8003eb8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ebe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003ec4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003eca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ed2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d106      	bne.n	8003ef0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	045b      	lsls	r3, r3, #17
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d009      	beq.n	8003f0c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f04:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	4b60      	ldr	r3, [pc, #384]	@ (8004094 <HAL_ADC_Init+0x304>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	69b9      	ldr	r1, [r7, #24]
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff ff14 	bl	8003d68 <LL_ADC_INJ_IsConversionOngoing>
 8003f40:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d16d      	bne.n	8004024 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d16a      	bne.n	8004024 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f52:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f5a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f6a:	f023 0302 	bic.w	r3, r3, #2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6812      	ldr	r2, [r2, #0]
 8003f72:	69b9      	ldr	r1, [r7, #24]
 8003f74:	430b      	orrs	r3, r1
 8003f76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d017      	beq.n	8003fb0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691a      	ldr	r2, [r3, #16]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003f8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003f98:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003f9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6911      	ldr	r1, [r2, #16]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003fae:	e013      	b.n	8003fd8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003fbe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003fd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fd4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d118      	bne.n	8004014 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003fec:	f023 0304 	bic.w	r3, r3, #4
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ff8:	4311      	orrs	r1, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003ffe:	4311      	orrs	r1, r2
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004004:	430a      	orrs	r2, r1
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0201 	orr.w	r2, r2, #1
 8004010:	611a      	str	r2, [r3, #16]
 8004012:	e007      	b.n	8004024 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d10c      	bne.n	8004046 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004032:	f023 010f 	bic.w	r1, r3, #15
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	1e5a      	subs	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	631a      	str	r2, [r3, #48]	@ 0x30
 8004044:	e007      	b.n	8004056 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 020f 	bic.w	r2, r2, #15
 8004054:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800405a:	f023 0303 	bic.w	r3, r3, #3
 800405e:	f043 0201 	orr.w	r2, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004066:	e007      	b.n	8004078 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406c:	f043 0210 	orr.w	r2, r3, #16
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004078:	7ffb      	ldrb	r3, [r7, #31]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3724      	adds	r7, #36	@ 0x24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd90      	pop	{r4, r7, pc}
 8004082:	bf00      	nop
 8004084:	20000000 	.word	0x20000000
 8004088:	053e2d63 	.word	0x053e2d63
 800408c:	50000100 	.word	0x50000100
 8004090:	50000300 	.word	0x50000300
 8004094:	fff04007 	.word	0xfff04007

08004098 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040a4:	4851      	ldr	r0, [pc, #324]	@ (80041ec <HAL_ADC_Start_DMA+0x154>)
 80040a6:	f7ff fdb5 	bl	8003c14 <LL_ADC_GetMultimode>
 80040aa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff fe46 	bl	8003d42 <LL_ADC_REG_IsConversionOngoing>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f040 808f 	bne.w	80041dc <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_ADC_Start_DMA+0x34>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e08a      	b.n	80041e2 <HAL_ADC_Start_DMA+0x14a>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b05      	cmp	r3, #5
 80040de:	d002      	beq.n	80040e6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	2b09      	cmp	r3, #9
 80040e4:	d173      	bne.n	80041ce <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fc98 	bl	8004a1c <ADC_Enable>
 80040ec:	4603      	mov	r3, r0
 80040ee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80040f0:	7dfb      	ldrb	r3, [r7, #23]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d166      	bne.n	80041c4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040fa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040fe:	f023 0301 	bic.w	r3, r3, #1
 8004102:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a38      	ldr	r2, [pc, #224]	@ (80041f0 <HAL_ADC_Start_DMA+0x158>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d002      	beq.n	800411a <HAL_ADC_Start_DMA+0x82>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	e001      	b.n	800411e <HAL_ADC_Start_DMA+0x86>
 800411a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	6812      	ldr	r2, [r2, #0]
 8004122:	4293      	cmp	r3, r2
 8004124:	d002      	beq.n	800412c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d105      	bne.n	8004138 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004130:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800413c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d006      	beq.n	8004152 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004148:	f023 0206 	bic.w	r2, r3, #6
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	661a      	str	r2, [r3, #96]	@ 0x60
 8004150:	e002      	b.n	8004158 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415c:	4a25      	ldr	r2, [pc, #148]	@ (80041f4 <HAL_ADC_Start_DMA+0x15c>)
 800415e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004164:	4a24      	ldr	r2, [pc, #144]	@ (80041f8 <HAL_ADC_Start_DMA+0x160>)
 8004166:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800416c:	4a23      	ldr	r2, [pc, #140]	@ (80041fc <HAL_ADC_Start_DMA+0x164>)
 800416e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	221c      	movs	r2, #28
 8004176:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0210 	orr.w	r2, r2, #16
 800418e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3340      	adds	r3, #64	@ 0x40
 80041aa:	4619      	mov	r1, r3
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f001 f8da 	bl	8005368 <HAL_DMA_Start_IT>
 80041b4:	4603      	mov	r3, r0
 80041b6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff fdac 	bl	8003d1a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80041c2:	e00d      	b.n	80041e0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80041cc:	e008      	b.n	80041e0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80041da:	e001      	b.n	80041e0 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80041dc:	2302      	movs	r3, #2
 80041de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80041e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	50000300 	.word	0x50000300
 80041f0:	50000100 	.word	0x50000100
 80041f4:	08004b29 	.word	0x08004b29
 80041f8:	08004c01 	.word	0x08004c01
 80041fc:	08004c1d 	.word	0x08004c1d

08004200 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b0b6      	sub	sp, #216	@ 0xd8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <HAL_ADC_ConfigChannel+0x22>
 800425a:	2302      	movs	r3, #2
 800425c:	e3c8      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x7b4>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fd69 	bl	8003d42 <LL_ADC_REG_IsConversionOngoing>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	f040 83ad 	bne.w	80049d2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	6859      	ldr	r1, [r3, #4]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	f7ff fc4a 	bl	8003b1e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fd57 	bl	8003d42 <LL_ADC_REG_IsConversionOngoing>
 8004294:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff fd63 	bl	8003d68 <LL_ADC_INJ_IsConversionOngoing>
 80042a2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f040 81d9 	bne.w	8004662 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f040 81d4 	bne.w	8004662 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042c2:	d10f      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2200      	movs	r2, #0
 80042ce:	4619      	mov	r1, r3
 80042d0:	f7ff fc51 	bl	8003b76 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff fbf8 	bl	8003ad2 <LL_ADC_SetSamplingTimeCommonConfig>
 80042e2:	e00e      	b.n	8004302 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	6819      	ldr	r1, [r3, #0]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	461a      	mov	r2, r3
 80042f2:	f7ff fc40 	bl	8003b76 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2100      	movs	r1, #0
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff fbe8 	bl	8003ad2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	695a      	ldr	r2, [r3, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	08db      	lsrs	r3, r3, #3
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b04      	cmp	r3, #4
 8004322:	d022      	beq.n	800436a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	6919      	ldr	r1, [r3, #16]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004334:	f7ff fb42 	bl	80039bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	6919      	ldr	r1, [r3, #16]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	461a      	mov	r2, r3
 8004346:	f7ff fb8e 	bl	8003a66 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004356:	2b01      	cmp	r3, #1
 8004358:	d102      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x124>
 800435a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800435e:	e000      	b.n	8004362 <HAL_ADC_ConfigChannel+0x126>
 8004360:	2300      	movs	r3, #0
 8004362:	461a      	mov	r2, r3
 8004364:	f7ff fb9a 	bl	8003a9c <LL_ADC_SetOffsetSaturation>
 8004368:	e17b      	b.n	8004662 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff fb47 	bl	8003a04 <LL_ADC_GetOffsetChannel>
 8004376:	4603      	mov	r3, r0
 8004378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <HAL_ADC_ConfigChannel+0x15a>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2100      	movs	r1, #0
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff fb3c 	bl	8003a04 <LL_ADC_GetOffsetChannel>
 800438c:	4603      	mov	r3, r0
 800438e:	0e9b      	lsrs	r3, r3, #26
 8004390:	f003 021f 	and.w	r2, r3, #31
 8004394:	e01e      	b.n	80043d4 <HAL_ADC_ConfigChannel+0x198>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2100      	movs	r1, #0
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fb31 	bl	8003a04 <LL_ADC_GetOffsetChannel>
 80043a2:	4603      	mov	r3, r0
 80043a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80043ac:	fa93 f3a3 	rbit	r3, r3
 80043b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80043b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80043bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80043c4:	2320      	movs	r3, #32
 80043c6:	e004      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80043c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80043cc:	fab3 f383 	clz	r3, r3
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d105      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x1b0>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	0e9b      	lsrs	r3, r3, #26
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	e018      	b.n	800441e <HAL_ADC_ConfigChannel+0x1e2>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80043f8:	fa93 f3a3 	rbit	r3, r3
 80043fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004404:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004408:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004410:	2320      	movs	r3, #32
 8004412:	e004      	b.n	800441e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004414:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004418:	fab3 f383 	clz	r3, r3
 800441c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800441e:	429a      	cmp	r2, r3
 8004420:	d106      	bne.n	8004430 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2200      	movs	r2, #0
 8004428:	2100      	movs	r1, #0
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff fb00 	bl	8003a30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2101      	movs	r1, #1
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff fae4 	bl	8003a04 <LL_ADC_GetOffsetChannel>
 800443c:	4603      	mov	r3, r0
 800443e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10a      	bne.n	800445c <HAL_ADC_ConfigChannel+0x220>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2101      	movs	r1, #1
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff fad9 	bl	8003a04 <LL_ADC_GetOffsetChannel>
 8004452:	4603      	mov	r3, r0
 8004454:	0e9b      	lsrs	r3, r3, #26
 8004456:	f003 021f 	and.w	r2, r3, #31
 800445a:	e01e      	b.n	800449a <HAL_ADC_ConfigChannel+0x25e>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2101      	movs	r1, #1
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff face 	bl	8003a04 <LL_ADC_GetOffsetChannel>
 8004468:	4603      	mov	r3, r0
 800446a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004472:	fa93 f3a3 	rbit	r3, r3
 8004476:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800447a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800447e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004482:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800448a:	2320      	movs	r3, #32
 800448c:	e004      	b.n	8004498 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800448e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004492:	fab3 f383 	clz	r3, r3
 8004496:	b2db      	uxtb	r3, r3
 8004498:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d105      	bne.n	80044b2 <HAL_ADC_ConfigChannel+0x276>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	0e9b      	lsrs	r3, r3, #26
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	e018      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x2a8>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044be:	fa93 f3a3 	rbit	r3, r3
 80044c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80044c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80044ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80044d6:	2320      	movs	r3, #32
 80044d8:	e004      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80044da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044de:	fab3 f383 	clz	r3, r3
 80044e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d106      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2200      	movs	r2, #0
 80044ee:	2101      	movs	r1, #1
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fa9d 	bl	8003a30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2102      	movs	r1, #2
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff fa81 	bl	8003a04 <LL_ADC_GetOffsetChannel>
 8004502:	4603      	mov	r3, r0
 8004504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10a      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x2e6>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2102      	movs	r1, #2
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fa76 	bl	8003a04 <LL_ADC_GetOffsetChannel>
 8004518:	4603      	mov	r3, r0
 800451a:	0e9b      	lsrs	r3, r3, #26
 800451c:	f003 021f 	and.w	r2, r3, #31
 8004520:	e01e      	b.n	8004560 <HAL_ADC_ConfigChannel+0x324>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2102      	movs	r1, #2
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff fa6b 	bl	8003a04 <LL_ADC_GetOffsetChannel>
 800452e:	4603      	mov	r3, r0
 8004530:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004534:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004538:	fa93 f3a3 	rbit	r3, r3
 800453c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004540:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004544:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004548:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004550:	2320      	movs	r3, #32
 8004552:	e004      	b.n	800455e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004554:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004558:	fab3 f383 	clz	r3, r3
 800455c:	b2db      	uxtb	r3, r3
 800455e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004568:	2b00      	cmp	r3, #0
 800456a:	d105      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x33c>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	0e9b      	lsrs	r3, r3, #26
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	e016      	b.n	80045a6 <HAL_ADC_ConfigChannel+0x36a>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004580:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004584:	fa93 f3a3 	rbit	r3, r3
 8004588:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800458a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800458c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004590:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004598:	2320      	movs	r3, #32
 800459a:	e004      	b.n	80045a6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800459c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045a0:	fab3 f383 	clz	r3, r3
 80045a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d106      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	2102      	movs	r1, #2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff fa3c 	bl	8003a30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2103      	movs	r1, #3
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fa20 	bl	8003a04 <LL_ADC_GetOffsetChannel>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x3a8>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2103      	movs	r1, #3
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fa15 	bl	8003a04 <LL_ADC_GetOffsetChannel>
 80045da:	4603      	mov	r3, r0
 80045dc:	0e9b      	lsrs	r3, r3, #26
 80045de:	f003 021f 	and.w	r2, r3, #31
 80045e2:	e017      	b.n	8004614 <HAL_ADC_ConfigChannel+0x3d8>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2103      	movs	r1, #3
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff fa0a 	bl	8003a04 <LL_ADC_GetOffsetChannel>
 80045f0:	4603      	mov	r3, r0
 80045f2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045f6:	fa93 f3a3 	rbit	r3, r3
 80045fa:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80045fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045fe:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004600:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004606:	2320      	movs	r3, #32
 8004608:	e003      	b.n	8004612 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800460a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800460c:	fab3 f383 	clz	r3, r3
 8004610:	b2db      	uxtb	r3, r3
 8004612:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800461c:	2b00      	cmp	r3, #0
 800461e:	d105      	bne.n	800462c <HAL_ADC_ConfigChannel+0x3f0>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	0e9b      	lsrs	r3, r3, #26
 8004626:	f003 031f 	and.w	r3, r3, #31
 800462a:	e011      	b.n	8004650 <HAL_ADC_ConfigChannel+0x414>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004632:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004634:	fa93 f3a3 	rbit	r3, r3
 8004638:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800463a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800463c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800463e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004644:	2320      	movs	r3, #32
 8004646:	e003      	b.n	8004650 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004648:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800464a:	fab3 f383 	clz	r3, r3
 800464e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004650:	429a      	cmp	r2, r3
 8004652:	d106      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2200      	movs	r2, #0
 800465a:	2103      	movs	r1, #3
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff f9e7 	bl	8003a30 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff fb44 	bl	8003cf4 <LL_ADC_IsEnabled>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	f040 8140 	bne.w	80048f4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6818      	ldr	r0, [r3, #0]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	6819      	ldr	r1, [r3, #0]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	461a      	mov	r2, r3
 8004682:	f7ff faa3 	bl	8003bcc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	4a8f      	ldr	r2, [pc, #572]	@ (80048c8 <HAL_ADC_ConfigChannel+0x68c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	f040 8131 	bne.w	80048f4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10b      	bne.n	80046ba <HAL_ADC_ConfigChannel+0x47e>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	0e9b      	lsrs	r3, r3, #26
 80046a8:	3301      	adds	r3, #1
 80046aa:	f003 031f 	and.w	r3, r3, #31
 80046ae:	2b09      	cmp	r3, #9
 80046b0:	bf94      	ite	ls
 80046b2:	2301      	movls	r3, #1
 80046b4:	2300      	movhi	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	e019      	b.n	80046ee <HAL_ADC_ConfigChannel+0x4b2>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046c2:	fa93 f3a3 	rbit	r3, r3
 80046c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80046c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046ca:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80046cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80046d2:	2320      	movs	r3, #32
 80046d4:	e003      	b.n	80046de <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80046d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046d8:	fab3 f383 	clz	r3, r3
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	3301      	adds	r3, #1
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	2b09      	cmp	r3, #9
 80046e6:	bf94      	ite	ls
 80046e8:	2301      	movls	r3, #1
 80046ea:	2300      	movhi	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d079      	beq.n	80047e6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d107      	bne.n	800470e <HAL_ADC_ConfigChannel+0x4d2>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	0e9b      	lsrs	r3, r3, #26
 8004704:	3301      	adds	r3, #1
 8004706:	069b      	lsls	r3, r3, #26
 8004708:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800470c:	e015      	b.n	800473a <HAL_ADC_ConfigChannel+0x4fe>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004714:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004716:	fa93 f3a3 	rbit	r3, r3
 800471a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800471c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800471e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004726:	2320      	movs	r3, #32
 8004728:	e003      	b.n	8004732 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800472a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800472c:	fab3 f383 	clz	r3, r3
 8004730:	b2db      	uxtb	r3, r3
 8004732:	3301      	adds	r3, #1
 8004734:	069b      	lsls	r3, r3, #26
 8004736:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004742:	2b00      	cmp	r3, #0
 8004744:	d109      	bne.n	800475a <HAL_ADC_ConfigChannel+0x51e>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	0e9b      	lsrs	r3, r3, #26
 800474c:	3301      	adds	r3, #1
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	2101      	movs	r1, #1
 8004754:	fa01 f303 	lsl.w	r3, r1, r3
 8004758:	e017      	b.n	800478a <HAL_ADC_ConfigChannel+0x54e>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004762:	fa93 f3a3 	rbit	r3, r3
 8004766:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800476a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800476c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004772:	2320      	movs	r3, #32
 8004774:	e003      	b.n	800477e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004778:	fab3 f383 	clz	r3, r3
 800477c:	b2db      	uxtb	r3, r3
 800477e:	3301      	adds	r3, #1
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	2101      	movs	r1, #1
 8004786:	fa01 f303 	lsl.w	r3, r1, r3
 800478a:	ea42 0103 	orr.w	r1, r2, r3
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x574>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	0e9b      	lsrs	r3, r3, #26
 80047a0:	3301      	adds	r3, #1
 80047a2:	f003 021f 	and.w	r2, r3, #31
 80047a6:	4613      	mov	r3, r2
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	4413      	add	r3, r2
 80047ac:	051b      	lsls	r3, r3, #20
 80047ae:	e018      	b.n	80047e2 <HAL_ADC_ConfigChannel+0x5a6>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b8:	fa93 f3a3 	rbit	r3, r3
 80047bc:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80047be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80047c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80047c8:	2320      	movs	r3, #32
 80047ca:	e003      	b.n	80047d4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80047cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047ce:	fab3 f383 	clz	r3, r3
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	3301      	adds	r3, #1
 80047d6:	f003 021f 	and.w	r2, r3, #31
 80047da:	4613      	mov	r3, r2
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	4413      	add	r3, r2
 80047e0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047e2:	430b      	orrs	r3, r1
 80047e4:	e081      	b.n	80048ea <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d107      	bne.n	8004802 <HAL_ADC_ConfigChannel+0x5c6>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	0e9b      	lsrs	r3, r3, #26
 80047f8:	3301      	adds	r3, #1
 80047fa:	069b      	lsls	r3, r3, #26
 80047fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004800:	e015      	b.n	800482e <HAL_ADC_ConfigChannel+0x5f2>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800480a:	fa93 f3a3 	rbit	r3, r3
 800480e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004812:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800481a:	2320      	movs	r3, #32
 800481c:	e003      	b.n	8004826 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800481e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004820:	fab3 f383 	clz	r3, r3
 8004824:	b2db      	uxtb	r3, r3
 8004826:	3301      	adds	r3, #1
 8004828:	069b      	lsls	r3, r3, #26
 800482a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <HAL_ADC_ConfigChannel+0x612>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	0e9b      	lsrs	r3, r3, #26
 8004840:	3301      	adds	r3, #1
 8004842:	f003 031f 	and.w	r3, r3, #31
 8004846:	2101      	movs	r1, #1
 8004848:	fa01 f303 	lsl.w	r3, r1, r3
 800484c:	e017      	b.n	800487e <HAL_ADC_ConfigChannel+0x642>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	fa93 f3a3 	rbit	r3, r3
 800485a:	61fb      	str	r3, [r7, #28]
  return result;
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004866:	2320      	movs	r3, #32
 8004868:	e003      	b.n	8004872 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	fab3 f383 	clz	r3, r3
 8004870:	b2db      	uxtb	r3, r3
 8004872:	3301      	adds	r3, #1
 8004874:	f003 031f 	and.w	r3, r3, #31
 8004878:	2101      	movs	r1, #1
 800487a:	fa01 f303 	lsl.w	r3, r1, r3
 800487e:	ea42 0103 	orr.w	r1, r2, r3
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10d      	bne.n	80048aa <HAL_ADC_ConfigChannel+0x66e>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	0e9b      	lsrs	r3, r3, #26
 8004894:	3301      	adds	r3, #1
 8004896:	f003 021f 	and.w	r2, r3, #31
 800489a:	4613      	mov	r3, r2
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	4413      	add	r3, r2
 80048a0:	3b1e      	subs	r3, #30
 80048a2:	051b      	lsls	r3, r3, #20
 80048a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80048a8:	e01e      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x6ac>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	fa93 f3a3 	rbit	r3, r3
 80048b6:	613b      	str	r3, [r7, #16]
  return result;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d104      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80048c2:	2320      	movs	r3, #32
 80048c4:	e006      	b.n	80048d4 <HAL_ADC_ConfigChannel+0x698>
 80048c6:	bf00      	nop
 80048c8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	fab3 f383 	clz	r3, r3
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	3301      	adds	r3, #1
 80048d6:	f003 021f 	and.w	r2, r3, #31
 80048da:	4613      	mov	r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4413      	add	r3, r2
 80048e0:	3b1e      	subs	r3, #30
 80048e2:	051b      	lsls	r3, r3, #20
 80048e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048e8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048ee:	4619      	mov	r1, r3
 80048f0:	f7ff f941 	bl	8003b76 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	4b3f      	ldr	r3, [pc, #252]	@ (80049f8 <HAL_ADC_ConfigChannel+0x7bc>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d071      	beq.n	80049e4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004900:	483e      	ldr	r0, [pc, #248]	@ (80049fc <HAL_ADC_ConfigChannel+0x7c0>)
 8004902:	f7ff f84d 	bl	80039a0 <LL_ADC_GetCommonPathInternalCh>
 8004906:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a3c      	ldr	r2, [pc, #240]	@ (8004a00 <HAL_ADC_ConfigChannel+0x7c4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d004      	beq.n	800491e <HAL_ADC_ConfigChannel+0x6e2>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a3a      	ldr	r2, [pc, #232]	@ (8004a04 <HAL_ADC_ConfigChannel+0x7c8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d127      	bne.n	800496e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800491e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004922:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d121      	bne.n	800496e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004932:	d157      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004934:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004938:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800493c:	4619      	mov	r1, r3
 800493e:	482f      	ldr	r0, [pc, #188]	@ (80049fc <HAL_ADC_ConfigChannel+0x7c0>)
 8004940:	f7ff f81b 	bl	800397a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004944:	4b30      	ldr	r3, [pc, #192]	@ (8004a08 <HAL_ADC_ConfigChannel+0x7cc>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	099b      	lsrs	r3, r3, #6
 800494a:	4a30      	ldr	r2, [pc, #192]	@ (8004a0c <HAL_ADC_ConfigChannel+0x7d0>)
 800494c:	fba2 2303 	umull	r2, r3, r2, r3
 8004950:	099b      	lsrs	r3, r3, #6
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	4613      	mov	r3, r2
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800495e:	e002      	b.n	8004966 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	3b01      	subs	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f9      	bne.n	8004960 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800496c:	e03a      	b.n	80049e4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a27      	ldr	r2, [pc, #156]	@ (8004a10 <HAL_ADC_ConfigChannel+0x7d4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d113      	bne.n	80049a0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004978:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800497c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10d      	bne.n	80049a0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a22      	ldr	r2, [pc, #136]	@ (8004a14 <HAL_ADC_ConfigChannel+0x7d8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d02a      	beq.n	80049e4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800498e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004992:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004996:	4619      	mov	r1, r3
 8004998:	4818      	ldr	r0, [pc, #96]	@ (80049fc <HAL_ADC_ConfigChannel+0x7c0>)
 800499a:	f7fe ffee 	bl	800397a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800499e:	e021      	b.n	80049e4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a18 <HAL_ADC_ConfigChannel+0x7dc>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d11c      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d116      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a16      	ldr	r2, [pc, #88]	@ (8004a14 <HAL_ADC_ConfigChannel+0x7d8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d011      	beq.n	80049e4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80049c8:	4619      	mov	r1, r3
 80049ca:	480c      	ldr	r0, [pc, #48]	@ (80049fc <HAL_ADC_ConfigChannel+0x7c0>)
 80049cc:	f7fe ffd5 	bl	800397a <LL_ADC_SetCommonPathInternalCh>
 80049d0:	e008      	b.n	80049e4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d6:	f043 0220 	orr.w	r2, r3, #32
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80049ec:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	37d8      	adds	r7, #216	@ 0xd8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	80080000 	.word	0x80080000
 80049fc:	50000300 	.word	0x50000300
 8004a00:	c3210000 	.word	0xc3210000
 8004a04:	90c00010 	.word	0x90c00010
 8004a08:	20000000 	.word	0x20000000
 8004a0c:	053e2d63 	.word	0x053e2d63
 8004a10:	c7520000 	.word	0xc7520000
 8004a14:	50000100 	.word	0x50000100
 8004a18:	cb840000 	.word	0xcb840000

08004a1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff f961 	bl	8003cf4 <LL_ADC_IsEnabled>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d169      	bne.n	8004b0c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	4b36      	ldr	r3, [pc, #216]	@ (8004b18 <ADC_Enable+0xfc>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00d      	beq.n	8004a62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4a:	f043 0210 	orr.w	r2, r3, #16
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a56:	f043 0201 	orr.w	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e055      	b.n	8004b0e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff f930 	bl	8003ccc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004a6c:	482b      	ldr	r0, [pc, #172]	@ (8004b1c <ADC_Enable+0x100>)
 8004a6e:	f7fe ff97 	bl	80039a0 <LL_ADC_GetCommonPathInternalCh>
 8004a72:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004a74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d013      	beq.n	8004aa4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a7c:	4b28      	ldr	r3, [pc, #160]	@ (8004b20 <ADC_Enable+0x104>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	099b      	lsrs	r3, r3, #6
 8004a82:	4a28      	ldr	r2, [pc, #160]	@ (8004b24 <ADC_Enable+0x108>)
 8004a84:	fba2 2303 	umull	r2, r3, r2, r3
 8004a88:	099b      	lsrs	r3, r3, #6
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a96:	e002      	b.n	8004a9e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1f9      	bne.n	8004a98 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004aa4:	f7fe ff4a 	bl	800393c <HAL_GetTick>
 8004aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004aaa:	e028      	b.n	8004afe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff f91f 	bl	8003cf4 <LL_ADC_IsEnabled>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d104      	bne.n	8004ac6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff f903 	bl	8003ccc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ac6:	f7fe ff39 	bl	800393c <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d914      	bls.n	8004afe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d00d      	beq.n	8004afe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae6:	f043 0210 	orr.w	r2, r3, #16
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af2:	f043 0201 	orr.w	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e007      	b.n	8004b0e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d1cf      	bne.n	8004aac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	8000003f 	.word	0x8000003f
 8004b1c:	50000300 	.word	0x50000300
 8004b20:	20000000 	.word	0x20000000
 8004b24:	053e2d63 	.word	0x053e2d63

08004b28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d14b      	bne.n	8004bda <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0308 	and.w	r3, r3, #8
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d021      	beq.n	8004ba0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fe ffc9 	bl	8003af8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d032      	beq.n	8004bd2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d12b      	bne.n	8004bd2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b7e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d11f      	bne.n	8004bd2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b96:	f043 0201 	orr.w	r2, r3, #1
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b9e:	e018      	b.n	8004bd2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d111      	bne.n	8004bd2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d105      	bne.n	8004bd2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bca:	f043 0201 	orr.w	r2, r3, #1
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f7ff fb14 	bl	8004200 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004bd8:	e00e      	b.n	8004bf8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bde:	f003 0310 	and.w	r3, r3, #16
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff fb1e 	bl	8004228 <HAL_ADC_ErrorCallback>
}
 8004bec:	e004      	b.n	8004bf8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	4798      	blx	r3
}
 8004bf8:	bf00      	nop
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f7ff fb00 	bl	8004214 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c14:	bf00      	nop
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c3a:	f043 0204 	orr.w	r2, r3, #4
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f7ff faf0 	bl	8004228 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c48:	bf00      	nop
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <LL_ADC_IsEnabled>:
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d101      	bne.n	8004c68 <LL_ADC_IsEnabled+0x18>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <LL_ADC_IsEnabled+0x1a>
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <LL_ADC_REG_IsConversionOngoing>:
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d101      	bne.n	8004c8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004c9c:	b590      	push	{r4, r7, lr}
 8004c9e:	b0a1      	sub	sp, #132	@ 0x84
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d101      	bne.n	8004cba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e08b      	b.n	8004dd2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cd2:	d102      	bne.n	8004cda <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004cd4:	4b41      	ldr	r3, [pc, #260]	@ (8004ddc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004cd6:	60bb      	str	r3, [r7, #8]
 8004cd8:	e001      	b.n	8004cde <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10b      	bne.n	8004cfc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce8:	f043 0220 	orr.w	r2, r3, #32
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e06a      	b.n	8004dd2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff ffb9 	bl	8004c76 <LL_ADC_REG_IsConversionOngoing>
 8004d04:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff ffb3 	bl	8004c76 <LL_ADC_REG_IsConversionOngoing>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d14c      	bne.n	8004db0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004d16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d149      	bne.n	8004db0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d1c:	4b30      	ldr	r3, [pc, #192]	@ (8004de0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004d1e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d028      	beq.n	8004d7a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004d28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	6859      	ldr	r1, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d3a:	035b      	lsls	r3, r3, #13
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d44:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d48:	f7ff ff82 	bl	8004c50 <LL_ADC_IsEnabled>
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	4823      	ldr	r0, [pc, #140]	@ (8004ddc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004d50:	f7ff ff7e 	bl	8004c50 <LL_ADC_IsEnabled>
 8004d54:	4603      	mov	r3, r0
 8004d56:	4323      	orrs	r3, r4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d133      	bne.n	8004dc4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d64:	f023 030f 	bic.w	r3, r3, #15
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	6811      	ldr	r1, [r2, #0]
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	6892      	ldr	r2, [r2, #8]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	431a      	orrs	r2, r3
 8004d74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d76:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d78:	e024      	b.n	8004dc4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004d7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d84:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d86:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d8a:	f7ff ff61 	bl	8004c50 <LL_ADC_IsEnabled>
 8004d8e:	4604      	mov	r4, r0
 8004d90:	4812      	ldr	r0, [pc, #72]	@ (8004ddc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004d92:	f7ff ff5d 	bl	8004c50 <LL_ADC_IsEnabled>
 8004d96:	4603      	mov	r3, r0
 8004d98:	4323      	orrs	r3, r4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d112      	bne.n	8004dc4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004da6:	f023 030f 	bic.w	r3, r3, #15
 8004daa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004dac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004dae:	e009      	b.n	8004dc4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db4:	f043 0220 	orr.w	r2, r3, #32
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004dc2:	e000      	b.n	8004dc6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004dc4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004dce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3784      	adds	r7, #132	@ 0x84
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd90      	pop	{r4, r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	50000100 	.word	0x50000100
 8004de0:	50000300 	.word	0x50000300

08004de4 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e023      	b.n	8004e3e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fb fd0e 	bl	800082c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, const CORDIC_ConfigTypeDef *sConfig)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d11d      	bne.n	8004e9e <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	4b14      	ldr	r3, [pc, #80]	@ (8004ebc <HAL_CORDIC_Configure+0x74>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	6811      	ldr	r1, [r2, #0]
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	6992      	ldr	r2, [r2, #24]
 8004e74:	4311      	orrs	r1, r2
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	6852      	ldr	r2, [r2, #4]
 8004e7a:	4311      	orrs	r1, r2
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	6912      	ldr	r2, [r2, #16]
 8004e80:	4311      	orrs	r1, r2
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	6952      	ldr	r2, [r2, #20]
 8004e86:	4311      	orrs	r1, r2
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	6892      	ldr	r2, [r2, #8]
 8004e8c:	4311      	orrs	r1, r2
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	68d2      	ldr	r2, [r2, #12]
 8004e92:	4311      	orrs	r1, r2
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	e007      	b.n	8004eae <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea2:	f043 0202 	orr.w	r2, r3, #2
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	ff87f800 	.word	0xff87f800

08004ec0 <HAL_CORDIC_Calculate>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Calculate(CORDIC_HandleTypeDef *hcordic, const int32_t *pInBuff, int32_t *pOutBuff,
                                       uint32_t NbCalc, uint32_t Timeout)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t index;
  const int32_t *p_tmp_in_buff = pInBuff;
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	617b      	str	r3, [r7, #20]
  int32_t *p_tmp_out_buff = pOutBuff;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	613b      	str	r3, [r7, #16]

  /* Check parameters setting */
  if ((pInBuff == NULL) || (pOutBuff == NULL) || (NbCalc == 0U))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <HAL_CORDIC_Calculate+0x28>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <HAL_CORDIC_Calculate+0x28>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d107      	bne.n	8004ef8 <HAL_CORDIC_Calculate+0x38>
  {
    /* Update the error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	f043 0201 	orr.w	r2, r3, #1
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e058      	b.n	8004faa <HAL_CORDIC_Calculate+0xea>
  }

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d14b      	bne.n	8004f9c <HAL_CORDIC_Calculate+0xdc>
  {
    /* Reset CORDIC error code */
    hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_BUSY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f12:	f7fe fd13 	bl	800393c <HAL_GetTick>
 8004f16:	61b8      	str	r0, [r7, #24]

    /* Write of input data in Write Data register, and increment input buffer pointer */
    CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8004f18:	f107 0314 	add.w	r3, r7, #20
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f847 	bl	8004fb2 <CORDIC_WriteInDataIncrementPtr>

    /* Calculation is started.
       Provide next set of input data, until number of calculation is achieved */
    for (index = (NbCalc - 1U); index > 0U; index--)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	61fb      	str	r3, [r7, #28]
 8004f2a:	e028      	b.n	8004f7e <HAL_CORDIC_Calculate+0xbe>
    {
      /* Write of input data in Write Data register, and increment input buffer pointer */
      CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8004f2c:	f107 0314 	add.w	r3, r7, #20
 8004f30:	4619      	mov	r1, r3
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f83d 	bl	8004fb2 <CORDIC_WriteInDataIncrementPtr>

      /* Wait for RRDY flag to be raised */
      do
      {
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY)
 8004f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3e:	d010      	beq.n	8004f62 <HAL_CORDIC_Calculate+0xa2>
        {
          if ((HAL_GetTick() - tickstart) > Timeout)
 8004f40:	f7fe fcfc 	bl	800393c <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d208      	bcs.n	8004f62 <HAL_CORDIC_Calculate+0xa2>
          {
            /* Set CORDIC error code */
            hcordic->ErrorCode = HAL_CORDIC_ERROR_TIMEOUT;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2204      	movs	r2, #4
 8004f54:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Change the CORDIC state */
            hcordic->State = HAL_CORDIC_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Return function status */
            return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e023      	b.n	8004faa <HAL_CORDIC_Calculate+0xea>
          }
        }
      } while (HAL_IS_BIT_CLR(hcordic->Instance->CSR, CORDIC_CSR_RRDY));
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	dae5      	bge.n	8004f38 <HAL_CORDIC_Calculate+0x78>

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8004f6c:	f107 0310 	add.w	r3, r7, #16
 8004f70:	4619      	mov	r1, r3
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 f846 	bl	8005004 <CORDIC_ReadOutDataIncrementPtr>
    for (index = (NbCalc - 1U); index > 0U; index--)
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1d3      	bne.n	8004f2c <HAL_CORDIC_Calculate+0x6c>
    }

    /* Read output data from Read Data register, and increment output buffer pointer */
    CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8004f84:	f107 0310 	add.w	r3, r7, #16
 8004f88:	4619      	mov	r1, r3
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f83a 	bl	8005004 <CORDIC_ReadOutDataIncrementPtr>

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Return function status */
    return HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e006      	b.n	8004faa <HAL_CORDIC_Calculate+0xea>
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa0:	f043 0202 	orr.w	r2, r3, #2
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
  }
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	1d1a      	adds	r2, r3, #4
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fe0:	d10a      	bne.n	8004ff8 <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	1d1a      	adds	r2, r3, #4
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	601a      	str	r2, [r3, #0]
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	1d1a      	adds	r2, r3, #4
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800502e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005032:	d10a      	bne.n	800504a <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	1d1a      	adds	r2, r3, #4
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	601a      	str	r2, [r3, #0]
  }
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
	...

08005058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005068:	4b0c      	ldr	r3, [pc, #48]	@ (800509c <__NVIC_SetPriorityGrouping+0x44>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005074:	4013      	ands	r3, r2
 8005076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005080:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800508a:	4a04      	ldr	r2, [pc, #16]	@ (800509c <__NVIC_SetPriorityGrouping+0x44>)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	60d3      	str	r3, [r2, #12]
}
 8005090:	bf00      	nop
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	e000ed00 	.word	0xe000ed00

080050a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050a4:	4b04      	ldr	r3, [pc, #16]	@ (80050b8 <__NVIC_GetPriorityGrouping+0x18>)
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	0a1b      	lsrs	r3, r3, #8
 80050aa:	f003 0307 	and.w	r3, r3, #7
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	e000ed00 	.word	0xe000ed00

080050bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	4603      	mov	r3, r0
 80050c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	db0b      	blt.n	80050e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050ce:	79fb      	ldrb	r3, [r7, #7]
 80050d0:	f003 021f 	and.w	r2, r3, #31
 80050d4:	4907      	ldr	r1, [pc, #28]	@ (80050f4 <__NVIC_EnableIRQ+0x38>)
 80050d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	2001      	movs	r0, #1
 80050de:	fa00 f202 	lsl.w	r2, r0, r2
 80050e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	e000e100 	.word	0xe000e100

080050f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	4603      	mov	r3, r0
 8005100:	6039      	str	r1, [r7, #0]
 8005102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005108:	2b00      	cmp	r3, #0
 800510a:	db0a      	blt.n	8005122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	b2da      	uxtb	r2, r3
 8005110:	490c      	ldr	r1, [pc, #48]	@ (8005144 <__NVIC_SetPriority+0x4c>)
 8005112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005116:	0112      	lsls	r2, r2, #4
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	440b      	add	r3, r1
 800511c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005120:	e00a      	b.n	8005138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	b2da      	uxtb	r2, r3
 8005126:	4908      	ldr	r1, [pc, #32]	@ (8005148 <__NVIC_SetPriority+0x50>)
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	3b04      	subs	r3, #4
 8005130:	0112      	lsls	r2, r2, #4
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	440b      	add	r3, r1
 8005136:	761a      	strb	r2, [r3, #24]
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	e000e100 	.word	0xe000e100
 8005148:	e000ed00 	.word	0xe000ed00

0800514c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800514c:	b480      	push	{r7}
 800514e:	b089      	sub	sp, #36	@ 0x24
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f1c3 0307 	rsb	r3, r3, #7
 8005166:	2b04      	cmp	r3, #4
 8005168:	bf28      	it	cs
 800516a:	2304      	movcs	r3, #4
 800516c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	3304      	adds	r3, #4
 8005172:	2b06      	cmp	r3, #6
 8005174:	d902      	bls.n	800517c <NVIC_EncodePriority+0x30>
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	3b03      	subs	r3, #3
 800517a:	e000      	b.n	800517e <NVIC_EncodePriority+0x32>
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005180:	f04f 32ff 	mov.w	r2, #4294967295
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	43da      	mvns	r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	401a      	ands	r2, r3
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005194:	f04f 31ff 	mov.w	r1, #4294967295
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	fa01 f303 	lsl.w	r3, r1, r3
 800519e:	43d9      	mvns	r1, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051a4:	4313      	orrs	r3, r2
         );
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3724      	adds	r7, #36	@ 0x24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff ff4c 	bl	8005058 <__NVIC_SetPriorityGrouping>
}
 80051c0:	bf00      	nop
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80051d6:	f7ff ff63 	bl	80050a0 <__NVIC_GetPriorityGrouping>
 80051da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	68b9      	ldr	r1, [r7, #8]
 80051e0:	6978      	ldr	r0, [r7, #20]
 80051e2:	f7ff ffb3 	bl	800514c <NVIC_EncodePriority>
 80051e6:	4602      	mov	r2, r0
 80051e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051ec:	4611      	mov	r1, r2
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7ff ff82 	bl	80050f8 <__NVIC_SetPriority>
}
 80051f4:	bf00      	nop
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	4603      	mov	r3, r0
 8005204:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff ff56 	bl	80050bc <__NVIC_EnableIRQ>
}
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e08d      	b.n	8005346 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	4b47      	ldr	r3, [pc, #284]	@ (8005350 <HAL_DMA_Init+0x138>)
 8005232:	429a      	cmp	r2, r3
 8005234:	d80f      	bhi.n	8005256 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	4b45      	ldr	r3, [pc, #276]	@ (8005354 <HAL_DMA_Init+0x13c>)
 800523e:	4413      	add	r3, r2
 8005240:	4a45      	ldr	r2, [pc, #276]	@ (8005358 <HAL_DMA_Init+0x140>)
 8005242:	fba2 2303 	umull	r2, r3, r2, r3
 8005246:	091b      	lsrs	r3, r3, #4
 8005248:	009a      	lsls	r2, r3, #2
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a42      	ldr	r2, [pc, #264]	@ (800535c <HAL_DMA_Init+0x144>)
 8005252:	641a      	str	r2, [r3, #64]	@ 0x40
 8005254:	e00e      	b.n	8005274 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	4b40      	ldr	r3, [pc, #256]	@ (8005360 <HAL_DMA_Init+0x148>)
 800525e:	4413      	add	r3, r2
 8005260:	4a3d      	ldr	r2, [pc, #244]	@ (8005358 <HAL_DMA_Init+0x140>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	091b      	lsrs	r3, r3, #4
 8005268:	009a      	lsls	r2, r3, #2
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a3c      	ldr	r2, [pc, #240]	@ (8005364 <HAL_DMA_Init+0x14c>)
 8005272:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800528a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800528e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005298:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f9b6 	bl	8005638 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052d4:	d102      	bne.n	80052dc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80052f0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d010      	beq.n	800531c <HAL_DMA_Init+0x104>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d80c      	bhi.n	800531c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f9d6 	bl	80056b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005318:	605a      	str	r2, [r3, #4]
 800531a:	e008      	b.n	800532e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40020407 	.word	0x40020407
 8005354:	bffdfff8 	.word	0xbffdfff8
 8005358:	cccccccd 	.word	0xcccccccd
 800535c:	40020000 	.word	0x40020000
 8005360:	bffdfbf8 	.word	0xbffdfbf8
 8005364:	40020400 	.word	0x40020400

08005368 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_DMA_Start_IT+0x20>
 8005384:	2302      	movs	r3, #2
 8005386:	e066      	b.n	8005456 <HAL_DMA_Start_IT+0xee>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	d155      	bne.n	8005448 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0201 	bic.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	68b9      	ldr	r1, [r7, #8]
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 f8fb 	bl	80055bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d008      	beq.n	80053e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 020e 	orr.w	r2, r2, #14
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	e00f      	b.n	8005400 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0204 	bic.w	r2, r2, #4
 80053ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 020a 	orr.w	r2, r2, #10
 80053fe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d007      	beq.n	800541e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005418:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800541c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005430:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005434:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0201 	orr.w	r2, r2, #1
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e005      	b.n	8005454 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005450:	2302      	movs	r3, #2
 8005452:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005454:	7dfb      	ldrb	r3, [r7, #23]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547a:	f003 031f 	and.w	r3, r3, #31
 800547e:	2204      	movs	r2, #4
 8005480:	409a      	lsls	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4013      	ands	r3, r2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d026      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x7a>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d021      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d107      	bne.n	80054b2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0204 	bic.w	r2, r2, #4
 80054b0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b6:	f003 021f 	and.w	r2, r3, #31
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054be:	2104      	movs	r1, #4
 80054c0:	fa01 f202 	lsl.w	r2, r1, r2
 80054c4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d071      	beq.n	80055b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80054d6:	e06c      	b.n	80055b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054dc:	f003 031f 	and.w	r3, r3, #31
 80054e0:	2202      	movs	r2, #2
 80054e2:	409a      	lsls	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4013      	ands	r3, r2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d02e      	beq.n	800554a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d029      	beq.n	800554a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10b      	bne.n	800551c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 020a 	bic.w	r2, r2, #10
 8005512:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005520:	f003 021f 	and.w	r2, r3, #31
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005528:	2102      	movs	r1, #2
 800552a:	fa01 f202 	lsl.w	r2, r1, r2
 800552e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d038      	beq.n	80055b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005548:	e033      	b.n	80055b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800554e:	f003 031f 	and.w	r3, r3, #31
 8005552:	2208      	movs	r2, #8
 8005554:	409a      	lsls	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4013      	ands	r3, r2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d02a      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d025      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 020e 	bic.w	r2, r2, #14
 8005576:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800557c:	f003 021f 	and.w	r2, r3, #31
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005584:	2101      	movs	r1, #1
 8005586:	fa01 f202 	lsl.w	r2, r1, r2
 800558a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d004      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80055b2:	bf00      	nop
 80055b4:	bf00      	nop
}
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055d2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d004      	beq.n	80055e6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80055e4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ea:	f003 021f 	and.w	r2, r3, #31
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f2:	2101      	movs	r1, #1
 80055f4:	fa01 f202 	lsl.w	r2, r1, r2
 80055f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	2b10      	cmp	r3, #16
 8005608:	d108      	bne.n	800561c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800561a:	e007      	b.n	800562c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	60da      	str	r2, [r3, #12]
}
 800562c:	bf00      	nop
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	4b16      	ldr	r3, [pc, #88]	@ (80056a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005648:	429a      	cmp	r2, r3
 800564a:	d802      	bhi.n	8005652 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800564c:	4b15      	ldr	r3, [pc, #84]	@ (80056a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	e001      	b.n	8005656 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005652:	4b15      	ldr	r3, [pc, #84]	@ (80056a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005654:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	3b08      	subs	r3, #8
 8005662:	4a12      	ldr	r2, [pc, #72]	@ (80056ac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005664:	fba2 2303 	umull	r2, r3, r2, r3
 8005668:	091b      	lsrs	r3, r3, #4
 800566a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005670:	089b      	lsrs	r3, r3, #2
 8005672:	009a      	lsls	r2, r3, #2
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4413      	add	r3, r2
 8005678:	461a      	mov	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a0b      	ldr	r2, [pc, #44]	@ (80056b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005682:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f003 031f 	and.w	r3, r3, #31
 800568a:	2201      	movs	r2, #1
 800568c:	409a      	lsls	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40020407 	.word	0x40020407
 80056a4:	40020800 	.word	0x40020800
 80056a8:	40020820 	.word	0x40020820
 80056ac:	cccccccd 	.word	0xcccccccd
 80056b0:	40020880 	.word	0x40020880

080056b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4b0b      	ldr	r3, [pc, #44]	@ (80056f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	461a      	mov	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a08      	ldr	r2, [pc, #32]	@ (80056f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80056d6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	3b01      	subs	r3, #1
 80056dc:	f003 031f 	and.w	r3, r3, #31
 80056e0:	2201      	movs	r2, #1
 80056e2:	409a      	lsls	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80056e8:	bf00      	nop
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	1000823f 	.word	0x1000823f
 80056f8:	40020940 	.word	0x40020940

080056fc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	460b      	mov	r3, r1
 8005706:	607a      	str	r2, [r7, #4]
 8005708:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 800570e:	7afb      	ldrb	r3, [r7, #11]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d103      	bne.n	800571c <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	605a      	str	r2, [r3, #4]
      break;
 800571a:	e005      	b.n	8005728 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	75fb      	strb	r3, [r7, #23]
      break;
 8005726:	bf00      	nop
  }

  return status;
 8005728:	7dfb      	ldrb	r3, [r7, #23]
}
 800572a:	4618      	mov	r0, r3
 800572c:	371c      	adds	r7, #28
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005736:	b480      	push	{r7}
 8005738:	b083      	sub	sp, #12
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e003      	b.n	8005752 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005750:	2300      	movs	r3, #0
  }
}
 8005752:	4618      	mov	r0, r3
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
	...

08005760 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	0c1b      	lsrs	r3, r3, #16
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	2201      	movs	r2, #1
 800577e:	fa02 f303 	lsl.w	r3, r2, r3
 8005782:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	4b0c      	ldr	r3, [pc, #48]	@ (80057bc <HAL_EXTI_IRQHandler+0x5c>)
 800578a:	4413      	add	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4013      	ands	r3, r2
 8005796:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d009      	beq.n	80057b2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	4798      	blx	r3
    }
  }
}
 80057b2:	bf00      	nop
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	40010414 	.word	0x40010414

080057c0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e147      	b.n	8005a62 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fb f91c 	bl	8000a24 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0210 	bic.w	r2, r2, #16
 80057fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057fc:	f7fe f89e 	bl	800393c <HAL_GetTick>
 8005800:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005802:	e012      	b.n	800582a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005804:	f7fe f89a 	bl	800393c <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b0a      	cmp	r3, #10
 8005810:	d90b      	bls.n	800582a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005816:	f043 0201 	orr.w	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2203      	movs	r2, #3
 8005822:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e11b      	b.n	8005a62 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	f003 0308 	and.w	r3, r3, #8
 8005834:	2b08      	cmp	r3, #8
 8005836:	d0e5      	beq.n	8005804 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005848:	f7fe f878 	bl	800393c <HAL_GetTick>
 800584c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800584e:	e012      	b.n	8005876 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005850:	f7fe f874 	bl	800393c <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b0a      	cmp	r3, #10
 800585c:	d90b      	bls.n	8005876 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005862:	f043 0201 	orr.w	r2, r3, #1
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2203      	movs	r2, #3
 800586e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e0f5      	b.n	8005a62 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0e5      	beq.n	8005850 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0202 	orr.w	r2, r2, #2
 8005892:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a74      	ldr	r2, [pc, #464]	@ (8005a6c <HAL_FDCAN_Init+0x2ac>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d103      	bne.n	80058a6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800589e:	4a74      	ldr	r2, [pc, #464]	@ (8005a70 <HAL_FDCAN_Init+0x2b0>)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	7c1b      	ldrb	r3, [r3, #16]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d108      	bne.n	80058c0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	699a      	ldr	r2, [r3, #24]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058bc:	619a      	str	r2, [r3, #24]
 80058be:	e007      	b.n	80058d0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699a      	ldr	r2, [r3, #24]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058ce:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	7c5b      	ldrb	r3, [r3, #17]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d108      	bne.n	80058ea <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058e6:	619a      	str	r2, [r3, #24]
 80058e8:	e007      	b.n	80058fa <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	699a      	ldr	r2, [r3, #24]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80058f8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	7c9b      	ldrb	r3, [r3, #18]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d108      	bne.n	8005914 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699a      	ldr	r2, [r3, #24]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005910:	619a      	str	r2, [r3, #24]
 8005912:	e007      	b.n	8005924 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005922:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	699a      	ldr	r2, [r3, #24]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005948:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0210 	bic.w	r2, r2, #16
 8005958:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d108      	bne.n	8005974 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699a      	ldr	r2, [r3, #24]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0204 	orr.w	r2, r2, #4
 8005970:	619a      	str	r2, [r3, #24]
 8005972:	e02c      	b.n	80059ce <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d028      	beq.n	80059ce <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d01c      	beq.n	80059be <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699a      	ldr	r2, [r3, #24]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005992:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691a      	ldr	r2, [r3, #16]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0210 	orr.w	r2, r2, #16
 80059a2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d110      	bne.n	80059ce <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0220 	orr.w	r2, r2, #32
 80059ba:	619a      	str	r2, [r3, #24]
 80059bc:	e007      	b.n	80059ce <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	699a      	ldr	r2, [r3, #24]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0220 	orr.w	r2, r2, #32
 80059cc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	3b01      	subs	r3, #1
 80059dc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059de:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80059e6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80059f6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059f8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a02:	d115      	bne.n	8005a30 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a08:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a12:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a1c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a24:	3b01      	subs	r3, #1
 8005a26:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a2c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a2e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fb14 	bl	8006074 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40006400 	.word	0x40006400
 8005a70:	40006500 	.word	0x40006500

08005a74 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b08b      	sub	sp, #44	@ 0x2c
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
 8005a80:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a8c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005a8e:	7efb      	ldrb	r3, [r7, #27]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	f040 80e8 	bne.w	8005c66 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2b40      	cmp	r3, #64	@ 0x40
 8005a9a:	d137      	bne.n	8005b0c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa4:	f003 030f 	and.w	r3, r3, #15
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d107      	bne.n	8005abc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e0db      	b.n	8005c74 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ac4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ac8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005acc:	d10a      	bne.n	8005ae4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ad6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ada:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ade:	d101      	bne.n	8005ae4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aec:	0a1b      	lsrs	r3, r3, #8
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	69fa      	ldr	r2, [r7, #28]
 8005af4:	4413      	add	r3, r2
 8005af6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	4613      	mov	r3, r2
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	4413      	add	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	440b      	add	r3, r1
 8005b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b0a:	e036      	b.n	8005b7a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d107      	bne.n	8005b2c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b20:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e0a3      	b.n	8005c74 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b3c:	d10a      	bne.n	8005b54 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b4e:	d101      	bne.n	8005b54 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005b50:	2301      	movs	r3, #1
 8005b52:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b5c:	0a1b      	lsrs	r3, r3, #8
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	4413      	add	r3, r2
 8005b66:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	4413      	add	r3, r2
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	440b      	add	r3, r1
 8005b78:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d107      	bne.n	8005b9e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	0c9b      	lsrs	r3, r3, #18
 8005b94:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	e005      	b.n	8005baa <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	0c1b      	lsrs	r3, r3, #16
 8005bd8:	f003 020f 	and.w	r2, r3, #15
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	0e1b      	lsrs	r3, r3, #24
 8005bfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	0fda      	lsrs	r2, r3, #31
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c12:	3304      	adds	r3, #4
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	623b      	str	r3, [r7, #32]
 8005c1e:	e00a      	b.n	8005c36 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	441a      	add	r2, r3
 8005c26:	6839      	ldr	r1, [r7, #0]
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	440b      	add	r3, r1
 8005c2c:	7812      	ldrb	r2, [r2, #0]
 8005c2e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	3301      	adds	r3, #1
 8005c34:	623b      	str	r3, [r7, #32]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	4a11      	ldr	r2, [pc, #68]	@ (8005c80 <HAL_FDCAN_GetRxMessage+0x20c>)
 8005c3c:	5cd3      	ldrb	r3, [r2, r3]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d3ec      	bcc.n	8005c20 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b40      	cmp	r3, #64	@ 0x40
 8005c4a:	d105      	bne.n	8005c58 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	69fa      	ldr	r2, [r7, #28]
 8005c52:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8005c56:	e004      	b.n	8005c62 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69fa      	ldr	r2, [r7, #28]
 8005c5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	e006      	b.n	8005c74 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c6a:	f043 0208 	orr.w	r2, r3, #8
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
  }
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	372c      	adds	r7, #44	@ 0x2c
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	0800c9ac 	.word	0x0800c9ac

08005c84 <HAL_FDCAN_GetTxEvent>:
  *         the configuration information for the specified FDCAN.
  * @param  pTxEvent pointer to a FDCAN_TxEventFifoTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetTxEvent(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxEventFifoTypeDef *pTxEvent)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t *TxEventAddress;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c94:	75fb      	strb	r3, [r7, #23]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d16e      	bne.n	8005d7a <HAL_FDCAN_GetTxEvent+0xf6>
  {
    /* Check that the Tx event FIFO is not empty */
    if ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFFL) == 0U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ca4:	f003 0307 	and.w	r3, r3, #7
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d107      	bne.n	8005cbc <HAL_FDCAN_GetTxEvent+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cb0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e065      	b.n	8005d88 <HAL_FDCAN_GetTxEvent+0x104>
    }

    /* Calculate Tx event FIFO element address */
    GetIndex = ((hfdcan->Instance->TXEFS & FDCAN_TXEFS_EFGI) >> FDCAN_TXEFS_EFGI_Pos);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cc4:	0a1b      	lsrs	r3, r3, #8
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	613b      	str	r3, [r7, #16]
    TxEventAddress = (uint32_t *)(hfdcan->msgRam.TxEventFIFOSA + (GetIndex * SRAMCAN_TEF_SIZE));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	4413      	add	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]

    /* Retrieve IdType */
    pTxEvent->IdType = *TxEventAddress & FDCAN_ELEMENT_MASK_XTD;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pTxEvent->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d107      	bne.n	8005cfc <HAL_FDCAN_GetTxEvent+0x78>
    {
      pTxEvent->Identifier = ((*TxEventAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	0c9b      	lsrs	r3, r3, #18
 8005cf2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	e005      	b.n	8005d08 <HAL_FDCAN_GetTxEvent+0x84>
    }
    else /* Extended ID element */
    {
      pTxEvent->Identifier = (*TxEventAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve TxFrameType */
    pTxEvent->TxFrameType = (*TxEventAddress & FDCAN_ELEMENT_MASK_RTR);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pTxEvent->ErrorStateIndicator = (*TxEventAddress & FDCAN_ELEMENT_MASK_ESI);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	611a      	str	r2, [r3, #16]

    /* Increment TxEventAddress pointer to second word of Tx Event FIFO element */
    TxEventAddress++;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3304      	adds	r3, #4
 8005d24:	60fb      	str	r3, [r7, #12]

    /* Retrieve TxTimestamp */
    pTxEvent->TxTimestamp = (*TxEventAddress & FDCAN_ELEMENT_MASK_TS);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pTxEvent->DataLength = ((*TxEventAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	0c1b      	lsrs	r3, r3, #16
 8005d36:	f003 020f 	and.w	r2, r3, #15
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pTxEvent->BitRateSwitch = (*TxEventAddress & FDCAN_ELEMENT_MASK_BRS);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pTxEvent->FDFormat = (*TxEventAddress & FDCAN_ELEMENT_MASK_FDF);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	619a      	str	r2, [r3, #24]

    /* Retrieve EventType */
    pTxEvent->EventType = (*TxEventAddress & FDCAN_ELEMENT_MASK_ET);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Retrieve MessageMarker */
    pTxEvent->MessageMarker = ((*TxEventAddress & FDCAN_ELEMENT_MASK_MM) >> 24U);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	0e1a      	lsrs	r2, r3, #24
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	621a      	str	r2, [r3, #32]

    /* Acknowledge the Tx Event FIFO that the oldest element is read so that it increments the GetIndex */
    hfdcan->Instance->TXEFA = GetIndex;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

    /* Return function status */
    return HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	e006      	b.n	8005d88 <HAL_FDCAN_GetTxEvent+0x104>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d7e:	f043 0208 	orr.w	r2, r3, #8
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
  }
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	371c      	adds	r7, #28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08c      	sub	sp, #48	@ 0x30
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005da2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005db0:	4013      	ands	r3, r2
 8005db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dc8:	4013      	ands	r3, r2
 8005dca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005de0:	4013      	ands	r3, r2
 8005de2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dea:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005dee:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df6:	6a3a      	ldr	r2, [r7, #32]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e02:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005e06:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	4013      	ands	r3, r2
 8005e12:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e1a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e22:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	099b      	lsrs	r3, r3, #6
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00c      	beq.n	8005e4a <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	099b      	lsrs	r3, r3, #6
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d006      	beq.n	8005e4a <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2240      	movs	r2, #64	@ 0x40
 8005e42:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f901 	bl	800604c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	0a1b      	lsrs	r3, r3, #8
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d01a      	beq.n	8005e8c <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	0a1b      	lsrs	r3, r3, #8
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d014      	beq.n	8005e8c <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e6a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	4013      	ands	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e82:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005e84:	6939      	ldr	r1, [r7, #16]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f8c1 	bl	800600e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d007      	beq.n	8005ea2 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e98:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005e9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7fb fc89 	bl	80017b4 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d007      	beq.n	8005eb8 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005eae:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005eb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7fb fca4 	bl	8001800 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d007      	beq.n	8005ece <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ec4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005ec6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7fb fd09 	bl	80018e0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	0a5b      	lsrs	r3, r3, #9
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00d      	beq.n	8005ef6 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	0a5b      	lsrs	r3, r3, #9
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d007      	beq.n	8005ef6 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f882 	bl	8005ffa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	09db      	lsrs	r3, r3, #7
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d019      	beq.n	8005f36 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	09db      	lsrs	r3, r3, #7
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d013      	beq.n	8005f36 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005f16:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4013      	ands	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2280      	movs	r2, #128	@ 0x80
 8005f2c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005f2e:	68f9      	ldr	r1, [r7, #12]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7fb fc5a 	bl	80017ea <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	0b5b      	lsrs	r3, r3, #13
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00d      	beq.n	8005f5e <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	0b5b      	lsrs	r3, r3, #13
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005f56:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f863 	bl	8006024 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	0bdb      	lsrs	r3, r3, #15
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00d      	beq.n	8005f86 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	0bdb      	lsrs	r3, r3, #15
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d007      	beq.n	8005f86 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005f7e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f859 	bl	8006038 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	0b9b      	lsrs	r3, r3, #14
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d010      	beq.n	8005fb4 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	0b9b      	lsrs	r3, r3, #14
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00a      	beq.n	8005fb4 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005fa6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d007      	beq.n	8005fca <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005fc2:	69f9      	ldr	r1, [r7, #28]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7fb fbd9 	bl	800177c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d009      	beq.n	8005fe4 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6a3a      	ldr	r2, [r7, #32]
 8005fd6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f837 	bl	8006060 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005ff2:	bf00      	nop
 8005ff4:	3730      	adds	r7, #48	@ 0x30
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800607c:	4b27      	ldr	r3, [pc, #156]	@ (800611c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800607e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800608e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006096:	041a      	lsls	r2, r3, #16
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060b4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060bc:	061a      	lsls	r2, r3, #24
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	e005      	b.n	8006102 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	3304      	adds	r3, #4
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	429a      	cmp	r2, r3
 800610c:	d3f3      	bcc.n	80060f6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800610e:	bf00      	nop
 8006110:	bf00      	nop
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	4000a400 	.word	0x4000a400

08006120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800612a:	2300      	movs	r3, #0
 800612c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800612e:	e15a      	b.n	80063e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	2101      	movs	r1, #1
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	fa01 f303 	lsl.w	r3, r1, r3
 800613c:	4013      	ands	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 814c 	beq.w	80063e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f003 0303 	and.w	r3, r3, #3
 8006150:	2b01      	cmp	r3, #1
 8006152:	d005      	beq.n	8006160 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800615c:	2b02      	cmp	r3, #2
 800615e:	d130      	bne.n	80061c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	2203      	movs	r2, #3
 800616c:	fa02 f303 	lsl.w	r3, r2, r3
 8006170:	43db      	mvns	r3, r3
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4013      	ands	r3, r2
 8006176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4313      	orrs	r3, r2
 8006188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006196:	2201      	movs	r2, #1
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	fa02 f303 	lsl.w	r3, r2, r3
 800619e:	43db      	mvns	r3, r3
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	4013      	ands	r3, r2
 80061a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	091b      	lsrs	r3, r3, #4
 80061ac:	f003 0201 	and.w	r2, r3, #1
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d017      	beq.n	80061fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	2203      	movs	r2, #3
 80061da:	fa02 f303 	lsl.w	r3, r2, r3
 80061de:	43db      	mvns	r3, r3
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4013      	ands	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	005b      	lsls	r3, r3, #1
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	2b02      	cmp	r3, #2
 8006208:	d123      	bne.n	8006252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	08da      	lsrs	r2, r3, #3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	3208      	adds	r2, #8
 8006212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f003 0307 	and.w	r3, r3, #7
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	220f      	movs	r2, #15
 8006222:	fa02 f303 	lsl.w	r3, r2, r3
 8006226:	43db      	mvns	r3, r3
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4013      	ands	r3, r2
 800622c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	691a      	ldr	r2, [r3, #16]
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f003 0307 	and.w	r3, r3, #7
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	fa02 f303 	lsl.w	r3, r2, r3
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	08da      	lsrs	r2, r3, #3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3208      	adds	r2, #8
 800624c:	6939      	ldr	r1, [r7, #16]
 800624e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	005b      	lsls	r3, r3, #1
 800625c:	2203      	movs	r2, #3
 800625e:	fa02 f303 	lsl.w	r3, r2, r3
 8006262:	43db      	mvns	r3, r3
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	4013      	ands	r3, r2
 8006268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f003 0203 	and.w	r2, r3, #3
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	fa02 f303 	lsl.w	r3, r2, r3
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 80a6 	beq.w	80063e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006294:	4b5b      	ldr	r3, [pc, #364]	@ (8006404 <HAL_GPIO_Init+0x2e4>)
 8006296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006298:	4a5a      	ldr	r2, [pc, #360]	@ (8006404 <HAL_GPIO_Init+0x2e4>)
 800629a:	f043 0301 	orr.w	r3, r3, #1
 800629e:	6613      	str	r3, [r2, #96]	@ 0x60
 80062a0:	4b58      	ldr	r3, [pc, #352]	@ (8006404 <HAL_GPIO_Init+0x2e4>)
 80062a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	60bb      	str	r3, [r7, #8]
 80062aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062ac:	4a56      	ldr	r2, [pc, #344]	@ (8006408 <HAL_GPIO_Init+0x2e8>)
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	089b      	lsrs	r3, r3, #2
 80062b2:	3302      	adds	r3, #2
 80062b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f003 0303 	and.w	r3, r3, #3
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	220f      	movs	r2, #15
 80062c4:	fa02 f303 	lsl.w	r3, r2, r3
 80062c8:	43db      	mvns	r3, r3
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4013      	ands	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80062d6:	d01f      	beq.n	8006318 <HAL_GPIO_Init+0x1f8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a4c      	ldr	r2, [pc, #304]	@ (800640c <HAL_GPIO_Init+0x2ec>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d019      	beq.n	8006314 <HAL_GPIO_Init+0x1f4>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a4b      	ldr	r2, [pc, #300]	@ (8006410 <HAL_GPIO_Init+0x2f0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d013      	beq.n	8006310 <HAL_GPIO_Init+0x1f0>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a4a      	ldr	r2, [pc, #296]	@ (8006414 <HAL_GPIO_Init+0x2f4>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00d      	beq.n	800630c <HAL_GPIO_Init+0x1ec>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a49      	ldr	r2, [pc, #292]	@ (8006418 <HAL_GPIO_Init+0x2f8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d007      	beq.n	8006308 <HAL_GPIO_Init+0x1e8>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a48      	ldr	r2, [pc, #288]	@ (800641c <HAL_GPIO_Init+0x2fc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d101      	bne.n	8006304 <HAL_GPIO_Init+0x1e4>
 8006300:	2305      	movs	r3, #5
 8006302:	e00a      	b.n	800631a <HAL_GPIO_Init+0x1fa>
 8006304:	2306      	movs	r3, #6
 8006306:	e008      	b.n	800631a <HAL_GPIO_Init+0x1fa>
 8006308:	2304      	movs	r3, #4
 800630a:	e006      	b.n	800631a <HAL_GPIO_Init+0x1fa>
 800630c:	2303      	movs	r3, #3
 800630e:	e004      	b.n	800631a <HAL_GPIO_Init+0x1fa>
 8006310:	2302      	movs	r3, #2
 8006312:	e002      	b.n	800631a <HAL_GPIO_Init+0x1fa>
 8006314:	2301      	movs	r3, #1
 8006316:	e000      	b.n	800631a <HAL_GPIO_Init+0x1fa>
 8006318:	2300      	movs	r3, #0
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	f002 0203 	and.w	r2, r2, #3
 8006320:	0092      	lsls	r2, r2, #2
 8006322:	4093      	lsls	r3, r2
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800632a:	4937      	ldr	r1, [pc, #220]	@ (8006408 <HAL_GPIO_Init+0x2e8>)
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	089b      	lsrs	r3, r3, #2
 8006330:	3302      	adds	r3, #2
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006338:	4b39      	ldr	r3, [pc, #228]	@ (8006420 <HAL_GPIO_Init+0x300>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	43db      	mvns	r3, r3
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4013      	ands	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4313      	orrs	r3, r2
 800635a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800635c:	4a30      	ldr	r2, [pc, #192]	@ (8006420 <HAL_GPIO_Init+0x300>)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006362:	4b2f      	ldr	r3, [pc, #188]	@ (8006420 <HAL_GPIO_Init+0x300>)
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	43db      	mvns	r3, r3
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	4013      	ands	r3, r2
 8006370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006386:	4a26      	ldr	r2, [pc, #152]	@ (8006420 <HAL_GPIO_Init+0x300>)
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800638c:	4b24      	ldr	r3, [pc, #144]	@ (8006420 <HAL_GPIO_Init+0x300>)
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	43db      	mvns	r3, r3
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4013      	ands	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80063b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006420 <HAL_GPIO_Init+0x300>)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80063b6:	4b1a      	ldr	r3, [pc, #104]	@ (8006420 <HAL_GPIO_Init+0x300>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	43db      	mvns	r3, r3
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	4013      	ands	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80063da:	4a11      	ldr	r2, [pc, #68]	@ (8006420 <HAL_GPIO_Init+0x300>)
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	3301      	adds	r3, #1
 80063e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	fa22 f303 	lsr.w	r3, r2, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f47f ae9d 	bne.w	8006130 <HAL_GPIO_Init+0x10>
  }
}
 80063f6:	bf00      	nop
 80063f8:	bf00      	nop
 80063fa:	371c      	adds	r7, #28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	40021000 	.word	0x40021000
 8006408:	40010000 	.word	0x40010000
 800640c:	48000400 	.word	0x48000400
 8006410:	48000800 	.word	0x48000800
 8006414:	48000c00 	.word	0x48000c00
 8006418:	48001000 	.word	0x48001000
 800641c:	48001400 	.word	0x48001400
 8006420:	40010400 	.word	0x40010400

08006424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	807b      	strh	r3, [r7, #2]
 8006430:	4613      	mov	r3, r2
 8006432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006434:	787b      	ldrb	r3, [r7, #1]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800643a:	887a      	ldrh	r2, [r7, #2]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006440:	e002      	b.n	8006448 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006442:	887a      	ldrh	r2, [r7, #2]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800645e:	4b08      	ldr	r3, [pc, #32]	@ (8006480 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006460:	695a      	ldr	r2, [r3, #20]
 8006462:	88fb      	ldrh	r3, [r7, #6]
 8006464:	4013      	ands	r3, r2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d006      	beq.n	8006478 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800646a:	4a05      	ldr	r2, [pc, #20]	@ (8006480 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800646c:	88fb      	ldrh	r3, [r7, #6]
 800646e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006470:	88fb      	ldrh	r3, [r7, #6]
 8006472:	4618      	mov	r0, r3
 8006474:	f7fb fac8 	bl	8001a08 <HAL_GPIO_EXTI_Callback>
  }
}
 8006478:	bf00      	nop
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40010400 	.word	0x40010400

08006484 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d141      	bne.n	8006516 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006492:	4b4b      	ldr	r3, [pc, #300]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800649a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800649e:	d131      	bne.n	8006504 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064a0:	4b47      	ldr	r3, [pc, #284]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064a6:	4a46      	ldr	r2, [pc, #280]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80064b0:	4b43      	ldr	r3, [pc, #268]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80064b8:	4a41      	ldr	r2, [pc, #260]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80064be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80064c0:	4b40      	ldr	r3, [pc, #256]	@ (80065c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2232      	movs	r2, #50	@ 0x32
 80064c6:	fb02 f303 	mul.w	r3, r2, r3
 80064ca:	4a3f      	ldr	r2, [pc, #252]	@ (80065c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80064cc:	fba2 2303 	umull	r2, r3, r2, r3
 80064d0:	0c9b      	lsrs	r3, r3, #18
 80064d2:	3301      	adds	r3, #1
 80064d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064d6:	e002      	b.n	80064de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3b01      	subs	r3, #1
 80064dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064de:	4b38      	ldr	r3, [pc, #224]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ea:	d102      	bne.n	80064f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1f2      	bne.n	80064d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80064f2:	4b33      	ldr	r3, [pc, #204]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064fe:	d158      	bne.n	80065b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e057      	b.n	80065b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006504:	4b2e      	ldr	r3, [pc, #184]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800650a:	4a2d      	ldr	r2, [pc, #180]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800650c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006510:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006514:	e04d      	b.n	80065b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800651c:	d141      	bne.n	80065a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800651e:	4b28      	ldr	r3, [pc, #160]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800652a:	d131      	bne.n	8006590 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800652c:	4b24      	ldr	r3, [pc, #144]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800652e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006532:	4a23      	ldr	r2, [pc, #140]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006538:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800653c:	4b20      	ldr	r3, [pc, #128]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006544:	4a1e      	ldr	r2, [pc, #120]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800654a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800654c:	4b1d      	ldr	r3, [pc, #116]	@ (80065c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2232      	movs	r2, #50	@ 0x32
 8006552:	fb02 f303 	mul.w	r3, r2, r3
 8006556:	4a1c      	ldr	r2, [pc, #112]	@ (80065c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006558:	fba2 2303 	umull	r2, r3, r2, r3
 800655c:	0c9b      	lsrs	r3, r3, #18
 800655e:	3301      	adds	r3, #1
 8006560:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006562:	e002      	b.n	800656a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3b01      	subs	r3, #1
 8006568:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800656a:	4b15      	ldr	r3, [pc, #84]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006576:	d102      	bne.n	800657e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f2      	bne.n	8006564 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800657e:	4b10      	ldr	r3, [pc, #64]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800658a:	d112      	bne.n	80065b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e011      	b.n	80065b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006590:	4b0b      	ldr	r3, [pc, #44]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006596:	4a0a      	ldr	r2, [pc, #40]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800659c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80065a0:	e007      	b.n	80065b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80065a2:	4b07      	ldr	r3, [pc, #28]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80065aa:	4a05      	ldr	r2, [pc, #20]	@ (80065c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80065b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	40007000 	.word	0x40007000
 80065c4:	20000000 	.word	0x20000000
 80065c8:	431bde83 	.word	0x431bde83

080065cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80065d0:	4b05      	ldr	r3, [pc, #20]	@ (80065e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	4a04      	ldr	r2, [pc, #16]	@ (80065e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80065d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065da:	6093      	str	r3, [r2, #8]
}
 80065dc:	bf00      	nop
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	40007000 	.word	0x40007000

080065ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b088      	sub	sp, #32
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e2fe      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d075      	beq.n	80066f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800660a:	4b97      	ldr	r3, [pc, #604]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 030c 	and.w	r3, r3, #12
 8006612:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006614:	4b94      	ldr	r3, [pc, #592]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f003 0303 	and.w	r3, r3, #3
 800661c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	2b0c      	cmp	r3, #12
 8006622:	d102      	bne.n	800662a <HAL_RCC_OscConfig+0x3e>
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	2b03      	cmp	r3, #3
 8006628:	d002      	beq.n	8006630 <HAL_RCC_OscConfig+0x44>
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	2b08      	cmp	r3, #8
 800662e:	d10b      	bne.n	8006648 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006630:	4b8d      	ldr	r3, [pc, #564]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d05b      	beq.n	80066f4 <HAL_RCC_OscConfig+0x108>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d157      	bne.n	80066f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e2d9      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006650:	d106      	bne.n	8006660 <HAL_RCC_OscConfig+0x74>
 8006652:	4b85      	ldr	r3, [pc, #532]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a84      	ldr	r2, [pc, #528]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 8006658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	e01d      	b.n	800669c <HAL_RCC_OscConfig+0xb0>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006668:	d10c      	bne.n	8006684 <HAL_RCC_OscConfig+0x98>
 800666a:	4b7f      	ldr	r3, [pc, #508]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a7e      	ldr	r2, [pc, #504]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 8006670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	4b7c      	ldr	r3, [pc, #496]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a7b      	ldr	r2, [pc, #492]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 800667c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	e00b      	b.n	800669c <HAL_RCC_OscConfig+0xb0>
 8006684:	4b78      	ldr	r3, [pc, #480]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a77      	ldr	r2, [pc, #476]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 800668a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	4b75      	ldr	r3, [pc, #468]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a74      	ldr	r2, [pc, #464]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 8006696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800669a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d013      	beq.n	80066cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a4:	f7fd f94a 	bl	800393c <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066ac:	f7fd f946 	bl	800393c <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b64      	cmp	r3, #100	@ 0x64
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e29e      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066be:	4b6a      	ldr	r3, [pc, #424]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0f0      	beq.n	80066ac <HAL_RCC_OscConfig+0xc0>
 80066ca:	e014      	b.n	80066f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066cc:	f7fd f936 	bl	800393c <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066d4:	f7fd f932 	bl	800393c <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b64      	cmp	r3, #100	@ 0x64
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e28a      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066e6:	4b60      	ldr	r3, [pc, #384]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1f0      	bne.n	80066d4 <HAL_RCC_OscConfig+0xe8>
 80066f2:	e000      	b.n	80066f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d075      	beq.n	80067ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006702:	4b59      	ldr	r3, [pc, #356]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f003 030c 	and.w	r3, r3, #12
 800670a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800670c:	4b56      	ldr	r3, [pc, #344]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f003 0303 	and.w	r3, r3, #3
 8006714:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	2b0c      	cmp	r3, #12
 800671a:	d102      	bne.n	8006722 <HAL_RCC_OscConfig+0x136>
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	2b02      	cmp	r3, #2
 8006720:	d002      	beq.n	8006728 <HAL_RCC_OscConfig+0x13c>
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	2b04      	cmp	r3, #4
 8006726:	d11f      	bne.n	8006768 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006728:	4b4f      	ldr	r3, [pc, #316]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <HAL_RCC_OscConfig+0x154>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e25d      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006740:	4b49      	ldr	r3, [pc, #292]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	061b      	lsls	r3, r3, #24
 800674e:	4946      	ldr	r1, [pc, #280]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 8006750:	4313      	orrs	r3, r2
 8006752:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006754:	4b45      	ldr	r3, [pc, #276]	@ (800686c <HAL_RCC_OscConfig+0x280>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4618      	mov	r0, r3
 800675a:	f7fa fb43 	bl	8000de4 <HAL_InitTick>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d043      	beq.n	80067ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e249      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d023      	beq.n	80067b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006770:	4b3d      	ldr	r3, [pc, #244]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a3c      	ldr	r2, [pc, #240]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 8006776:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800677a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677c:	f7fd f8de 	bl	800393c <HAL_GetTick>
 8006780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006782:	e008      	b.n	8006796 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006784:	f7fd f8da 	bl	800393c <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e232      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006796:	4b34      	ldr	r3, [pc, #208]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0f0      	beq.n	8006784 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067a2:	4b31      	ldr	r3, [pc, #196]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	061b      	lsls	r3, r3, #24
 80067b0:	492d      	ldr	r1, [pc, #180]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	604b      	str	r3, [r1, #4]
 80067b6:	e01a      	b.n	80067ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067b8:	4b2b      	ldr	r3, [pc, #172]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a2a      	ldr	r2, [pc, #168]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 80067be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c4:	f7fd f8ba 	bl	800393c <HAL_GetTick>
 80067c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067ca:	e008      	b.n	80067de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067cc:	f7fd f8b6 	bl	800393c <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d901      	bls.n	80067de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e20e      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067de:	4b22      	ldr	r3, [pc, #136]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1f0      	bne.n	80067cc <HAL_RCC_OscConfig+0x1e0>
 80067ea:	e000      	b.n	80067ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0308 	and.w	r3, r3, #8
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d041      	beq.n	800687e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d01c      	beq.n	800683c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006802:	4b19      	ldr	r3, [pc, #100]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 8006804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006808:	4a17      	ldr	r2, [pc, #92]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 800680a:	f043 0301 	orr.w	r3, r3, #1
 800680e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006812:	f7fd f893 	bl	800393c <HAL_GetTick>
 8006816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006818:	e008      	b.n	800682c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800681a:	f7fd f88f 	bl	800393c <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d901      	bls.n	800682c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e1e7      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800682c:	4b0e      	ldr	r3, [pc, #56]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 800682e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0ef      	beq.n	800681a <HAL_RCC_OscConfig+0x22e>
 800683a:	e020      	b.n	800687e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800683c:	4b0a      	ldr	r3, [pc, #40]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 800683e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006842:	4a09      	ldr	r2, [pc, #36]	@ (8006868 <HAL_RCC_OscConfig+0x27c>)
 8006844:	f023 0301 	bic.w	r3, r3, #1
 8006848:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800684c:	f7fd f876 	bl	800393c <HAL_GetTick>
 8006850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006852:	e00d      	b.n	8006870 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006854:	f7fd f872 	bl	800393c <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b02      	cmp	r3, #2
 8006860:	d906      	bls.n	8006870 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e1ca      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>
 8006866:	bf00      	nop
 8006868:	40021000 	.word	0x40021000
 800686c:	20000240 	.word	0x20000240
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006870:	4b8c      	ldr	r3, [pc, #560]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 8006872:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1ea      	bne.n	8006854 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0304 	and.w	r3, r3, #4
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 80a6 	beq.w	80069d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800688c:	2300      	movs	r3, #0
 800688e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006890:	4b84      	ldr	r3, [pc, #528]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 8006892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <HAL_RCC_OscConfig+0x2b4>
 800689c:	2301      	movs	r3, #1
 800689e:	e000      	b.n	80068a2 <HAL_RCC_OscConfig+0x2b6>
 80068a0:	2300      	movs	r3, #0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00d      	beq.n	80068c2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068a6:	4b7f      	ldr	r3, [pc, #508]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 80068a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068aa:	4a7e      	ldr	r2, [pc, #504]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 80068ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80068b2:	4b7c      	ldr	r3, [pc, #496]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 80068b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80068be:	2301      	movs	r3, #1
 80068c0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068c2:	4b79      	ldr	r3, [pc, #484]	@ (8006aa8 <HAL_RCC_OscConfig+0x4bc>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d118      	bne.n	8006900 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068ce:	4b76      	ldr	r3, [pc, #472]	@ (8006aa8 <HAL_RCC_OscConfig+0x4bc>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a75      	ldr	r2, [pc, #468]	@ (8006aa8 <HAL_RCC_OscConfig+0x4bc>)
 80068d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068da:	f7fd f82f 	bl	800393c <HAL_GetTick>
 80068de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068e0:	e008      	b.n	80068f4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e2:	f7fd f82b 	bl	800393c <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d901      	bls.n	80068f4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e183      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068f4:	4b6c      	ldr	r3, [pc, #432]	@ (8006aa8 <HAL_RCC_OscConfig+0x4bc>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d0f0      	beq.n	80068e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d108      	bne.n	800691a <HAL_RCC_OscConfig+0x32e>
 8006908:	4b66      	ldr	r3, [pc, #408]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 800690a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800690e:	4a65      	ldr	r2, [pc, #404]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 8006910:	f043 0301 	orr.w	r3, r3, #1
 8006914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006918:	e024      	b.n	8006964 <HAL_RCC_OscConfig+0x378>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	2b05      	cmp	r3, #5
 8006920:	d110      	bne.n	8006944 <HAL_RCC_OscConfig+0x358>
 8006922:	4b60      	ldr	r3, [pc, #384]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 8006924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006928:	4a5e      	ldr	r2, [pc, #376]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 800692a:	f043 0304 	orr.w	r3, r3, #4
 800692e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006932:	4b5c      	ldr	r3, [pc, #368]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 8006934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006938:	4a5a      	ldr	r2, [pc, #360]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 800693a:	f043 0301 	orr.w	r3, r3, #1
 800693e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006942:	e00f      	b.n	8006964 <HAL_RCC_OscConfig+0x378>
 8006944:	4b57      	ldr	r3, [pc, #348]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 8006946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800694a:	4a56      	ldr	r2, [pc, #344]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 800694c:	f023 0301 	bic.w	r3, r3, #1
 8006950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006954:	4b53      	ldr	r3, [pc, #332]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 8006956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800695a:	4a52      	ldr	r2, [pc, #328]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 800695c:	f023 0304 	bic.w	r3, r3, #4
 8006960:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d016      	beq.n	800699a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800696c:	f7fc ffe6 	bl	800393c <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006972:	e00a      	b.n	800698a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006974:	f7fc ffe2 	bl	800393c <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006982:	4293      	cmp	r3, r2
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e138      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800698a:	4b46      	ldr	r3, [pc, #280]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 800698c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0ed      	beq.n	8006974 <HAL_RCC_OscConfig+0x388>
 8006998:	e015      	b.n	80069c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699a:	f7fc ffcf 	bl	800393c <HAL_GetTick>
 800699e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069a0:	e00a      	b.n	80069b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069a2:	f7fc ffcb 	bl	800393c <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d901      	bls.n	80069b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e121      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069b8:	4b3a      	ldr	r3, [pc, #232]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 80069ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1ed      	bne.n	80069a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069c6:	7ffb      	ldrb	r3, [r7, #31]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d105      	bne.n	80069d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069cc:	4b35      	ldr	r3, [pc, #212]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 80069ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069d0:	4a34      	ldr	r2, [pc, #208]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 80069d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d03c      	beq.n	8006a5e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01c      	beq.n	8006a26 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80069ec:	4b2d      	ldr	r3, [pc, #180]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 80069ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069f2:	4a2c      	ldr	r2, [pc, #176]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 80069f4:	f043 0301 	orr.w	r3, r3, #1
 80069f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069fc:	f7fc ff9e 	bl	800393c <HAL_GetTick>
 8006a00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a02:	e008      	b.n	8006a16 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a04:	f7fc ff9a 	bl	800393c <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e0f2      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a16:	4b23      	ldr	r3, [pc, #140]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 8006a18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0ef      	beq.n	8006a04 <HAL_RCC_OscConfig+0x418>
 8006a24:	e01b      	b.n	8006a5e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a26:	4b1f      	ldr	r3, [pc, #124]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 8006a28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 8006a2e:	f023 0301 	bic.w	r3, r3, #1
 8006a32:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a36:	f7fc ff81 	bl	800393c <HAL_GetTick>
 8006a3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a3c:	e008      	b.n	8006a50 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a3e:	f7fc ff7d 	bl	800393c <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d901      	bls.n	8006a50 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e0d5      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a50:	4b14      	ldr	r3, [pc, #80]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 8006a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1ef      	bne.n	8006a3e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 80c9 	beq.w	8006bfa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a68:	4b0e      	ldr	r3, [pc, #56]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f003 030c 	and.w	r3, r3, #12
 8006a70:	2b0c      	cmp	r3, #12
 8006a72:	f000 8083 	beq.w	8006b7c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d15e      	bne.n	8006b3c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a7e:	4b09      	ldr	r3, [pc, #36]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a08      	ldr	r2, [pc, #32]	@ (8006aa4 <HAL_RCC_OscConfig+0x4b8>)
 8006a84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a8a:	f7fc ff57 	bl	800393c <HAL_GetTick>
 8006a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a90:	e00c      	b.n	8006aac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a92:	f7fc ff53 	bl	800393c <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d905      	bls.n	8006aac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e0ab      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>
 8006aa4:	40021000 	.word	0x40021000
 8006aa8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006aac:	4b55      	ldr	r3, [pc, #340]	@ (8006c04 <HAL_RCC_OscConfig+0x618>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1ec      	bne.n	8006a92 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ab8:	4b52      	ldr	r3, [pc, #328]	@ (8006c04 <HAL_RCC_OscConfig+0x618>)
 8006aba:	68da      	ldr	r2, [r3, #12]
 8006abc:	4b52      	ldr	r3, [pc, #328]	@ (8006c08 <HAL_RCC_OscConfig+0x61c>)
 8006abe:	4013      	ands	r3, r2
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6a11      	ldr	r1, [r2, #32]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ac8:	3a01      	subs	r2, #1
 8006aca:	0112      	lsls	r2, r2, #4
 8006acc:	4311      	orrs	r1, r2
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006ad2:	0212      	lsls	r2, r2, #8
 8006ad4:	4311      	orrs	r1, r2
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006ada:	0852      	lsrs	r2, r2, #1
 8006adc:	3a01      	subs	r2, #1
 8006ade:	0552      	lsls	r2, r2, #21
 8006ae0:	4311      	orrs	r1, r2
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006ae6:	0852      	lsrs	r2, r2, #1
 8006ae8:	3a01      	subs	r2, #1
 8006aea:	0652      	lsls	r2, r2, #25
 8006aec:	4311      	orrs	r1, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006af2:	06d2      	lsls	r2, r2, #27
 8006af4:	430a      	orrs	r2, r1
 8006af6:	4943      	ldr	r1, [pc, #268]	@ (8006c04 <HAL_RCC_OscConfig+0x618>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006afc:	4b41      	ldr	r3, [pc, #260]	@ (8006c04 <HAL_RCC_OscConfig+0x618>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a40      	ldr	r2, [pc, #256]	@ (8006c04 <HAL_RCC_OscConfig+0x618>)
 8006b02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b08:	4b3e      	ldr	r3, [pc, #248]	@ (8006c04 <HAL_RCC_OscConfig+0x618>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	4a3d      	ldr	r2, [pc, #244]	@ (8006c04 <HAL_RCC_OscConfig+0x618>)
 8006b0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b14:	f7fc ff12 	bl	800393c <HAL_GetTick>
 8006b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b1a:	e008      	b.n	8006b2e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b1c:	f7fc ff0e 	bl	800393c <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d901      	bls.n	8006b2e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e066      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b2e:	4b35      	ldr	r3, [pc, #212]	@ (8006c04 <HAL_RCC_OscConfig+0x618>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0f0      	beq.n	8006b1c <HAL_RCC_OscConfig+0x530>
 8006b3a:	e05e      	b.n	8006bfa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b3c:	4b31      	ldr	r3, [pc, #196]	@ (8006c04 <HAL_RCC_OscConfig+0x618>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a30      	ldr	r2, [pc, #192]	@ (8006c04 <HAL_RCC_OscConfig+0x618>)
 8006b42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b48:	f7fc fef8 	bl	800393c <HAL_GetTick>
 8006b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b4e:	e008      	b.n	8006b62 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b50:	f7fc fef4 	bl	800393c <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e04c      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b62:	4b28      	ldr	r3, [pc, #160]	@ (8006c04 <HAL_RCC_OscConfig+0x618>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1f0      	bne.n	8006b50 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006b6e:	4b25      	ldr	r3, [pc, #148]	@ (8006c04 <HAL_RCC_OscConfig+0x618>)
 8006b70:	68da      	ldr	r2, [r3, #12]
 8006b72:	4924      	ldr	r1, [pc, #144]	@ (8006c04 <HAL_RCC_OscConfig+0x618>)
 8006b74:	4b25      	ldr	r3, [pc, #148]	@ (8006c0c <HAL_RCC_OscConfig+0x620>)
 8006b76:	4013      	ands	r3, r2
 8006b78:	60cb      	str	r3, [r1, #12]
 8006b7a:	e03e      	b.n	8006bfa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d101      	bne.n	8006b88 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e039      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006b88:	4b1e      	ldr	r3, [pc, #120]	@ (8006c04 <HAL_RCC_OscConfig+0x618>)
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f003 0203 	and.w	r2, r3, #3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d12c      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d123      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d11b      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d113      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd8:	085b      	lsrs	r3, r3, #1
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d109      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bec:	085b      	lsrs	r3, r3, #1
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d001      	beq.n	8006bfa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e000      	b.n	8006bfc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3720      	adds	r7, #32
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	40021000 	.word	0x40021000
 8006c08:	019f800c 	.word	0x019f800c
 8006c0c:	feeefffc 	.word	0xfeeefffc

08006c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e11e      	b.n	8006e66 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c28:	4b91      	ldr	r3, [pc, #580]	@ (8006e70 <HAL_RCC_ClockConfig+0x260>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 030f 	and.w	r3, r3, #15
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d910      	bls.n	8006c58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c36:	4b8e      	ldr	r3, [pc, #568]	@ (8006e70 <HAL_RCC_ClockConfig+0x260>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f023 020f 	bic.w	r2, r3, #15
 8006c3e:	498c      	ldr	r1, [pc, #560]	@ (8006e70 <HAL_RCC_ClockConfig+0x260>)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c46:	4b8a      	ldr	r3, [pc, #552]	@ (8006e70 <HAL_RCC_ClockConfig+0x260>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d001      	beq.n	8006c58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e106      	b.n	8006e66 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d073      	beq.n	8006d4c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	2b03      	cmp	r3, #3
 8006c6a:	d129      	bne.n	8006cc0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c6c:	4b81      	ldr	r3, [pc, #516]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e0f4      	b.n	8006e66 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006c7c:	f000 f9d0 	bl	8007020 <RCC_GetSysClockFreqFromPLLSource>
 8006c80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	4a7c      	ldr	r2, [pc, #496]	@ (8006e78 <HAL_RCC_ClockConfig+0x268>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d93f      	bls.n	8006d0a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006c8a:	4b7a      	ldr	r3, [pc, #488]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d009      	beq.n	8006caa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d033      	beq.n	8006d0a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d12f      	bne.n	8006d0a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006caa:	4b72      	ldr	r3, [pc, #456]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cb2:	4a70      	ldr	r2, [pc, #448]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cb8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006cba:	2380      	movs	r3, #128	@ 0x80
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	e024      	b.n	8006d0a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d107      	bne.n	8006cd8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cc8:	4b6a      	ldr	r3, [pc, #424]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d109      	bne.n	8006ce8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e0c6      	b.n	8006e66 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cd8:	4b66      	ldr	r3, [pc, #408]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e0be      	b.n	8006e66 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006ce8:	f000 f8ce 	bl	8006e88 <HAL_RCC_GetSysClockFreq>
 8006cec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	4a61      	ldr	r2, [pc, #388]	@ (8006e78 <HAL_RCC_ClockConfig+0x268>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d909      	bls.n	8006d0a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006cf6:	4b5f      	ldr	r3, [pc, #380]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cfe:	4a5d      	ldr	r2, [pc, #372]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006d00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d04:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006d06:	2380      	movs	r3, #128	@ 0x80
 8006d08:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d0a:	4b5a      	ldr	r3, [pc, #360]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f023 0203 	bic.w	r2, r3, #3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	4957      	ldr	r1, [pc, #348]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d1c:	f7fc fe0e 	bl	800393c <HAL_GetTick>
 8006d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d22:	e00a      	b.n	8006d3a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d24:	f7fc fe0a 	bl	800393c <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e095      	b.n	8006e66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f003 020c 	and.w	r2, r3, #12
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d1eb      	bne.n	8006d24 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d023      	beq.n	8006da0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d005      	beq.n	8006d70 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d64:	4b43      	ldr	r3, [pc, #268]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	4a42      	ldr	r2, [pc, #264]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006d6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006d6e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0308 	and.w	r3, r3, #8
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d007      	beq.n	8006d8c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006d84:	4a3b      	ldr	r2, [pc, #236]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006d86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006d8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d8c:	4b39      	ldr	r3, [pc, #228]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	4936      	ldr	r1, [pc, #216]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	608b      	str	r3, [r1, #8]
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2b80      	cmp	r3, #128	@ 0x80
 8006da4:	d105      	bne.n	8006db2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006da6:	4b33      	ldr	r3, [pc, #204]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	4a32      	ldr	r2, [pc, #200]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006dac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006db0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006db2:	4b2f      	ldr	r3, [pc, #188]	@ (8006e70 <HAL_RCC_ClockConfig+0x260>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 030f 	and.w	r3, r3, #15
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d21d      	bcs.n	8006dfc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8006e70 <HAL_RCC_ClockConfig+0x260>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f023 020f 	bic.w	r2, r3, #15
 8006dc8:	4929      	ldr	r1, [pc, #164]	@ (8006e70 <HAL_RCC_ClockConfig+0x260>)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006dd0:	f7fc fdb4 	bl	800393c <HAL_GetTick>
 8006dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dd6:	e00a      	b.n	8006dee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dd8:	f7fc fdb0 	bl	800393c <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e03b      	b.n	8006e66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dee:	4b20      	ldr	r3, [pc, #128]	@ (8006e70 <HAL_RCC_ClockConfig+0x260>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 030f 	and.w	r3, r3, #15
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d1ed      	bne.n	8006dd8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d008      	beq.n	8006e1a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e08:	4b1a      	ldr	r3, [pc, #104]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	4917      	ldr	r1, [pc, #92]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0308 	and.w	r3, r3, #8
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d009      	beq.n	8006e3a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e26:	4b13      	ldr	r3, [pc, #76]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	00db      	lsls	r3, r3, #3
 8006e34:	490f      	ldr	r1, [pc, #60]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e3a:	f000 f825 	bl	8006e88 <HAL_RCC_GetSysClockFreq>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	4b0c      	ldr	r3, [pc, #48]	@ (8006e74 <HAL_RCC_ClockConfig+0x264>)
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	091b      	lsrs	r3, r3, #4
 8006e46:	f003 030f 	and.w	r3, r3, #15
 8006e4a:	490c      	ldr	r1, [pc, #48]	@ (8006e7c <HAL_RCC_ClockConfig+0x26c>)
 8006e4c:	5ccb      	ldrb	r3, [r1, r3]
 8006e4e:	f003 031f 	and.w	r3, r3, #31
 8006e52:	fa22 f303 	lsr.w	r3, r2, r3
 8006e56:	4a0a      	ldr	r2, [pc, #40]	@ (8006e80 <HAL_RCC_ClockConfig+0x270>)
 8006e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e84 <HAL_RCC_ClockConfig+0x274>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7f9 ffc0 	bl	8000de4 <HAL_InitTick>
 8006e64:	4603      	mov	r3, r0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	40022000 	.word	0x40022000
 8006e74:	40021000 	.word	0x40021000
 8006e78:	04c4b400 	.word	0x04c4b400
 8006e7c:	0800c964 	.word	0x0800c964
 8006e80:	20000000 	.word	0x20000000
 8006e84:	20000240 	.word	0x20000240

08006e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8006f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f003 030c 	and.w	r3, r3, #12
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d102      	bne.n	8006ea0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8006f44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006e9c:	613b      	str	r3, [r7, #16]
 8006e9e:	e047      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006ea0:	4b27      	ldr	r3, [pc, #156]	@ (8006f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f003 030c 	and.w	r3, r3, #12
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d102      	bne.n	8006eb2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006eac:	4b26      	ldr	r3, [pc, #152]	@ (8006f48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006eae:	613b      	str	r3, [r7, #16]
 8006eb0:	e03e      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006eb2:	4b23      	ldr	r3, [pc, #140]	@ (8006f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f003 030c 	and.w	r3, r3, #12
 8006eba:	2b0c      	cmp	r3, #12
 8006ebc:	d136      	bne.n	8006f2c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ebe:	4b20      	ldr	r3, [pc, #128]	@ (8006f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	f003 0303 	and.w	r3, r3, #3
 8006ec6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8006f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	091b      	lsrs	r3, r3, #4
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d10c      	bne.n	8006ef6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006edc:	4a1a      	ldr	r2, [pc, #104]	@ (8006f48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee4:	4a16      	ldr	r2, [pc, #88]	@ (8006f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ee6:	68d2      	ldr	r2, [r2, #12]
 8006ee8:	0a12      	lsrs	r2, r2, #8
 8006eea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006eee:	fb02 f303 	mul.w	r3, r2, r3
 8006ef2:	617b      	str	r3, [r7, #20]
      break;
 8006ef4:	e00c      	b.n	8006f10 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ef6:	4a13      	ldr	r2, [pc, #76]	@ (8006f44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006efe:	4a10      	ldr	r2, [pc, #64]	@ (8006f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f00:	68d2      	ldr	r2, [r2, #12]
 8006f02:	0a12      	lsrs	r2, r2, #8
 8006f04:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f08:	fb02 f303 	mul.w	r3, r2, r3
 8006f0c:	617b      	str	r3, [r7, #20]
      break;
 8006f0e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f10:	4b0b      	ldr	r3, [pc, #44]	@ (8006f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	0e5b      	lsrs	r3, r3, #25
 8006f16:	f003 0303 	and.w	r3, r3, #3
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f28:	613b      	str	r3, [r7, #16]
 8006f2a:	e001      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006f30:	693b      	ldr	r3, [r7, #16]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	371c      	adds	r7, #28
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	40021000 	.word	0x40021000
 8006f44:	00f42400 	.word	0x00f42400
 8006f48:	016e3600 	.word	0x016e3600

08006f4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f50:	4b03      	ldr	r3, [pc, #12]	@ (8006f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f52:	681b      	ldr	r3, [r3, #0]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	20000000 	.word	0x20000000

08006f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f68:	f7ff fff0 	bl	8006f4c <HAL_RCC_GetHCLKFreq>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	4b06      	ldr	r3, [pc, #24]	@ (8006f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	0a1b      	lsrs	r3, r3, #8
 8006f74:	f003 0307 	and.w	r3, r3, #7
 8006f78:	4904      	ldr	r1, [pc, #16]	@ (8006f8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f7a:	5ccb      	ldrb	r3, [r1, r3]
 8006f7c:	f003 031f 	and.w	r3, r3, #31
 8006f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	40021000 	.word	0x40021000
 8006f8c:	0800c974 	.word	0x0800c974

08006f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006f94:	f7ff ffda 	bl	8006f4c <HAL_RCC_GetHCLKFreq>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	4b06      	ldr	r3, [pc, #24]	@ (8006fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	0adb      	lsrs	r3, r3, #11
 8006fa0:	f003 0307 	and.w	r3, r3, #7
 8006fa4:	4904      	ldr	r1, [pc, #16]	@ (8006fb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006fa6:	5ccb      	ldrb	r3, [r1, r3]
 8006fa8:	f003 031f 	and.w	r3, r3, #31
 8006fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	40021000 	.word	0x40021000
 8006fb8:	0800c974 	.word	0x0800c974

08006fbc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	220f      	movs	r2, #15
 8006fca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006fcc:	4b12      	ldr	r3, [pc, #72]	@ (8007018 <HAL_RCC_GetClockConfig+0x5c>)
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f003 0203 	and.w	r2, r3, #3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8007018 <HAL_RCC_GetClockConfig+0x5c>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8007018 <HAL_RCC_GetClockConfig+0x5c>)
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006ff0:	4b09      	ldr	r3, [pc, #36]	@ (8007018 <HAL_RCC_GetClockConfig+0x5c>)
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	08db      	lsrs	r3, r3, #3
 8006ff6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006ffe:	4b07      	ldr	r3, [pc, #28]	@ (800701c <HAL_RCC_GetClockConfig+0x60>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 020f 	and.w	r2, r3, #15
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	601a      	str	r2, [r3, #0]
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	40021000 	.word	0x40021000
 800701c:	40022000 	.word	0x40022000

08007020 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007026:	4b1e      	ldr	r3, [pc, #120]	@ (80070a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f003 0303 	and.w	r3, r3, #3
 800702e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007030:	4b1b      	ldr	r3, [pc, #108]	@ (80070a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	091b      	lsrs	r3, r3, #4
 8007036:	f003 030f 	and.w	r3, r3, #15
 800703a:	3301      	adds	r3, #1
 800703c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	2b03      	cmp	r3, #3
 8007042:	d10c      	bne.n	800705e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007044:	4a17      	ldr	r2, [pc, #92]	@ (80070a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	fbb2 f3f3 	udiv	r3, r2, r3
 800704c:	4a14      	ldr	r2, [pc, #80]	@ (80070a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800704e:	68d2      	ldr	r2, [r2, #12]
 8007050:	0a12      	lsrs	r2, r2, #8
 8007052:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007056:	fb02 f303 	mul.w	r3, r2, r3
 800705a:	617b      	str	r3, [r7, #20]
    break;
 800705c:	e00c      	b.n	8007078 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800705e:	4a12      	ldr	r2, [pc, #72]	@ (80070a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	fbb2 f3f3 	udiv	r3, r2, r3
 8007066:	4a0e      	ldr	r2, [pc, #56]	@ (80070a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007068:	68d2      	ldr	r2, [r2, #12]
 800706a:	0a12      	lsrs	r2, r2, #8
 800706c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007070:	fb02 f303 	mul.w	r3, r2, r3
 8007074:	617b      	str	r3, [r7, #20]
    break;
 8007076:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007078:	4b09      	ldr	r3, [pc, #36]	@ (80070a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	0e5b      	lsrs	r3, r3, #25
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	3301      	adds	r3, #1
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007090:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007092:	687b      	ldr	r3, [r7, #4]
}
 8007094:	4618      	mov	r0, r3
 8007096:	371c      	adds	r7, #28
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	40021000 	.word	0x40021000
 80070a4:	016e3600 	.word	0x016e3600
 80070a8:	00f42400 	.word	0x00f42400

080070ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070b4:	2300      	movs	r3, #0
 80070b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070b8:	2300      	movs	r3, #0
 80070ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 8098 	beq.w	80071fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070ca:	2300      	movs	r3, #0
 80070cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070ce:	4b43      	ldr	r3, [pc, #268]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10d      	bne.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070da:	4b40      	ldr	r3, [pc, #256]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070de:	4a3f      	ldr	r2, [pc, #252]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80070e6:	4b3d      	ldr	r3, [pc, #244]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070ee:	60bb      	str	r3, [r7, #8]
 80070f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070f2:	2301      	movs	r3, #1
 80070f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070f6:	4b3a      	ldr	r3, [pc, #232]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a39      	ldr	r2, [pc, #228]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80070fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007100:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007102:	f7fc fc1b 	bl	800393c <HAL_GetTick>
 8007106:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007108:	e009      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800710a:	f7fc fc17 	bl	800393c <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	2b02      	cmp	r3, #2
 8007116:	d902      	bls.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	74fb      	strb	r3, [r7, #19]
        break;
 800711c:	e005      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800711e:	4b30      	ldr	r3, [pc, #192]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0ef      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800712a:	7cfb      	ldrb	r3, [r7, #19]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d159      	bne.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007130:	4b2a      	ldr	r3, [pc, #168]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800713a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d01e      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	429a      	cmp	r2, r3
 800714a:	d019      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800714c:	4b23      	ldr	r3, [pc, #140]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800714e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007156:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007158:	4b20      	ldr	r3, [pc, #128]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800715a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800715e:	4a1f      	ldr	r2, [pc, #124]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007168:	4b1c      	ldr	r3, [pc, #112]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800716a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800716e:	4a1b      	ldr	r2, [pc, #108]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007170:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007174:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007178:	4a18      	ldr	r2, [pc, #96]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d016      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718a:	f7fc fbd7 	bl	800393c <HAL_GetTick>
 800718e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007190:	e00b      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007192:	f7fc fbd3 	bl	800393c <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d902      	bls.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	74fb      	strb	r3, [r7, #19]
            break;
 80071a8:	e006      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071aa:	4b0c      	ldr	r3, [pc, #48]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0ec      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80071b8:	7cfb      	ldrb	r3, [r7, #19]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10b      	bne.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071be:	4b07      	ldr	r3, [pc, #28]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071cc:	4903      	ldr	r1, [pc, #12]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80071d4:	e008      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071d6:	7cfb      	ldrb	r3, [r7, #19]
 80071d8:	74bb      	strb	r3, [r7, #18]
 80071da:	e005      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80071dc:	40021000 	.word	0x40021000
 80071e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e4:	7cfb      	ldrb	r3, [r7, #19]
 80071e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071e8:	7c7b      	ldrb	r3, [r7, #17]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d105      	bne.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071ee:	4ba6      	ldr	r3, [pc, #664]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071f2:	4aa5      	ldr	r2, [pc, #660]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007206:	4ba0      	ldr	r3, [pc, #640]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800720c:	f023 0203 	bic.w	r2, r3, #3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	499c      	ldr	r1, [pc, #624]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007216:	4313      	orrs	r3, r2
 8007218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00a      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007228:	4b97      	ldr	r3, [pc, #604]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800722a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800722e:	f023 020c 	bic.w	r2, r3, #12
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	4994      	ldr	r1, [pc, #592]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007238:	4313      	orrs	r3, r2
 800723a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0304 	and.w	r3, r3, #4
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00a      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800724a:	4b8f      	ldr	r3, [pc, #572]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800724c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007250:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	498b      	ldr	r1, [pc, #556]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800725a:	4313      	orrs	r3, r2
 800725c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0308 	and.w	r3, r3, #8
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00a      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800726c:	4b86      	ldr	r3, [pc, #536]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800726e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007272:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	4983      	ldr	r1, [pc, #524]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800727c:	4313      	orrs	r3, r2
 800727e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0320 	and.w	r3, r3, #32
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800728e:	4b7e      	ldr	r3, [pc, #504]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007294:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	497a      	ldr	r1, [pc, #488]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00a      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072b0:	4b75      	ldr	r3, [pc, #468]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072b6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	4972      	ldr	r1, [pc, #456]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00a      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80072d2:	4b6d      	ldr	r3, [pc, #436]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	4969      	ldr	r1, [pc, #420]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00a      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80072f4:	4b64      	ldr	r3, [pc, #400]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072fa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	4961      	ldr	r1, [pc, #388]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007304:	4313      	orrs	r3, r2
 8007306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007316:	4b5c      	ldr	r3, [pc, #368]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800731c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007324:	4958      	ldr	r1, [pc, #352]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007326:	4313      	orrs	r3, r2
 8007328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007334:	2b00      	cmp	r3, #0
 8007336:	d015      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007338:	4b53      	ldr	r3, [pc, #332]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800733a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800733e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007346:	4950      	ldr	r1, [pc, #320]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007348:	4313      	orrs	r3, r2
 800734a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007352:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007356:	d105      	bne.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007358:	4b4b      	ldr	r3, [pc, #300]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	4a4a      	ldr	r2, [pc, #296]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800735e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007362:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800736c:	2b00      	cmp	r3, #0
 800736e:	d015      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007370:	4b45      	ldr	r3, [pc, #276]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007376:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737e:	4942      	ldr	r1, [pc, #264]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007380:	4313      	orrs	r3, r2
 8007382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800738e:	d105      	bne.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007390:	4b3d      	ldr	r3, [pc, #244]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	4a3c      	ldr	r2, [pc, #240]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007396:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800739a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d015      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80073a8:	4b37      	ldr	r3, [pc, #220]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b6:	4934      	ldr	r1, [pc, #208]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073c6:	d105      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073c8:	4b2f      	ldr	r3, [pc, #188]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	4a2e      	ldr	r2, [pc, #184]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d015      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073e0:	4b29      	ldr	r3, [pc, #164]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ee:	4926      	ldr	r1, [pc, #152]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073fe:	d105      	bne.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007400:	4b21      	ldr	r3, [pc, #132]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	4a20      	ldr	r2, [pc, #128]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007406:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800740a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d015      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007418:	4b1b      	ldr	r3, [pc, #108]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800741a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800741e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007426:	4918      	ldr	r1, [pc, #96]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007428:	4313      	orrs	r3, r2
 800742a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007432:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007436:	d105      	bne.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007438:	4b13      	ldr	r3, [pc, #76]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	4a12      	ldr	r2, [pc, #72]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800743e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007442:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d015      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007450:	4b0d      	ldr	r3, [pc, #52]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007456:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800745e:	490a      	ldr	r1, [pc, #40]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007460:	4313      	orrs	r3, r2
 8007462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800746a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800746e:	d105      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007470:	4b05      	ldr	r3, [pc, #20]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	4a04      	ldr	r2, [pc, #16]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800747a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800747c:	7cbb      	ldrb	r3, [r7, #18]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3718      	adds	r7, #24
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	40021000 	.word	0x40021000

0800748c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e049      	b.n	8007532 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d106      	bne.n	80074b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f841 	bl	800753a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2202      	movs	r2, #2
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3304      	adds	r3, #4
 80074c8:	4619      	mov	r1, r3
 80074ca:	4610      	mov	r0, r2
 80074cc:	f000 fdf4 	bl	80080b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007542:	bf00      	nop
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
	...

08007550 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b01      	cmp	r3, #1
 8007562:	d001      	beq.n	8007568 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e04a      	b.n	80075fe <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68da      	ldr	r2, [r3, #12]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f042 0201 	orr.w	r2, r2, #1
 800757e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a21      	ldr	r2, [pc, #132]	@ (800760c <HAL_TIM_Base_Start_IT+0xbc>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d018      	beq.n	80075bc <HAL_TIM_Base_Start_IT+0x6c>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007592:	d013      	beq.n	80075bc <HAL_TIM_Base_Start_IT+0x6c>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a1d      	ldr	r2, [pc, #116]	@ (8007610 <HAL_TIM_Base_Start_IT+0xc0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d00e      	beq.n	80075bc <HAL_TIM_Base_Start_IT+0x6c>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a1c      	ldr	r2, [pc, #112]	@ (8007614 <HAL_TIM_Base_Start_IT+0xc4>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d009      	beq.n	80075bc <HAL_TIM_Base_Start_IT+0x6c>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a1a      	ldr	r2, [pc, #104]	@ (8007618 <HAL_TIM_Base_Start_IT+0xc8>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d004      	beq.n	80075bc <HAL_TIM_Base_Start_IT+0x6c>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a19      	ldr	r2, [pc, #100]	@ (800761c <HAL_TIM_Base_Start_IT+0xcc>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d115      	bne.n	80075e8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689a      	ldr	r2, [r3, #8]
 80075c2:	4b17      	ldr	r3, [pc, #92]	@ (8007620 <HAL_TIM_Base_Start_IT+0xd0>)
 80075c4:	4013      	ands	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b06      	cmp	r3, #6
 80075cc:	d015      	beq.n	80075fa <HAL_TIM_Base_Start_IT+0xaa>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075d4:	d011      	beq.n	80075fa <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f042 0201 	orr.w	r2, r2, #1
 80075e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075e6:	e008      	b.n	80075fa <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f042 0201 	orr.w	r2, r2, #1
 80075f6:	601a      	str	r2, [r3, #0]
 80075f8:	e000      	b.n	80075fc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	40012c00 	.word	0x40012c00
 8007610:	40000400 	.word	0x40000400
 8007614:	40000800 	.word	0x40000800
 8007618:	40013400 	.word	0x40013400
 800761c:	40014000 	.word	0x40014000
 8007620:	00010007 	.word	0x00010007

08007624 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d101      	bne.n	8007636 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e049      	b.n	80076ca <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d106      	bne.n	8007650 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7f9 fe44 	bl	80012d8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	3304      	adds	r3, #4
 8007660:	4619      	mov	r1, r3
 8007662:	4610      	mov	r0, r2
 8007664:	f000 fd28 	bl	80080b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b082      	sub	sp, #8
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e049      	b.n	8007778 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d106      	bne.n	80076fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7f9 fdc7 	bl	800128c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2202      	movs	r2, #2
 8007702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3304      	adds	r3, #4
 800770e:	4619      	mov	r1, r3
 8007710:	4610      	mov	r0, r2
 8007712:	f000 fcd1 	bl	80080b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d109      	bne.n	80077a4 <HAL_TIM_PWM_Start+0x24>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b01      	cmp	r3, #1
 800779a:	bf14      	ite	ne
 800779c:	2301      	movne	r3, #1
 800779e:	2300      	moveq	r3, #0
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	e03c      	b.n	800781e <HAL_TIM_PWM_Start+0x9e>
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	d109      	bne.n	80077be <HAL_TIM_PWM_Start+0x3e>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	bf14      	ite	ne
 80077b6:	2301      	movne	r3, #1
 80077b8:	2300      	moveq	r3, #0
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	e02f      	b.n	800781e <HAL_TIM_PWM_Start+0x9e>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d109      	bne.n	80077d8 <HAL_TIM_PWM_Start+0x58>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	bf14      	ite	ne
 80077d0:	2301      	movne	r3, #1
 80077d2:	2300      	moveq	r3, #0
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	e022      	b.n	800781e <HAL_TIM_PWM_Start+0x9e>
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	2b0c      	cmp	r3, #12
 80077dc:	d109      	bne.n	80077f2 <HAL_TIM_PWM_Start+0x72>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	bf14      	ite	ne
 80077ea:	2301      	movne	r3, #1
 80077ec:	2300      	moveq	r3, #0
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	e015      	b.n	800781e <HAL_TIM_PWM_Start+0x9e>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b10      	cmp	r3, #16
 80077f6:	d109      	bne.n	800780c <HAL_TIM_PWM_Start+0x8c>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b01      	cmp	r3, #1
 8007802:	bf14      	ite	ne
 8007804:	2301      	movne	r3, #1
 8007806:	2300      	moveq	r3, #0
 8007808:	b2db      	uxtb	r3, r3
 800780a:	e008      	b.n	800781e <HAL_TIM_PWM_Start+0x9e>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b01      	cmp	r3, #1
 8007816:	bf14      	ite	ne
 8007818:	2301      	movne	r3, #1
 800781a:	2300      	moveq	r3, #0
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e097      	b.n	8007956 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d104      	bne.n	8007836 <HAL_TIM_PWM_Start+0xb6>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007834:	e023      	b.n	800787e <HAL_TIM_PWM_Start+0xfe>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b04      	cmp	r3, #4
 800783a:	d104      	bne.n	8007846 <HAL_TIM_PWM_Start+0xc6>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007844:	e01b      	b.n	800787e <HAL_TIM_PWM_Start+0xfe>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b08      	cmp	r3, #8
 800784a:	d104      	bne.n	8007856 <HAL_TIM_PWM_Start+0xd6>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2202      	movs	r2, #2
 8007850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007854:	e013      	b.n	800787e <HAL_TIM_PWM_Start+0xfe>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b0c      	cmp	r3, #12
 800785a:	d104      	bne.n	8007866 <HAL_TIM_PWM_Start+0xe6>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007864:	e00b      	b.n	800787e <HAL_TIM_PWM_Start+0xfe>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b10      	cmp	r3, #16
 800786a:	d104      	bne.n	8007876 <HAL_TIM_PWM_Start+0xf6>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007874:	e003      	b.n	800787e <HAL_TIM_PWM_Start+0xfe>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2202      	movs	r2, #2
 800787a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2201      	movs	r2, #1
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	4618      	mov	r0, r3
 8007888:	f000 ffa8 	bl	80087dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a33      	ldr	r2, [pc, #204]	@ (8007960 <HAL_TIM_PWM_Start+0x1e0>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d013      	beq.n	80078be <HAL_TIM_PWM_Start+0x13e>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a32      	ldr	r2, [pc, #200]	@ (8007964 <HAL_TIM_PWM_Start+0x1e4>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d00e      	beq.n	80078be <HAL_TIM_PWM_Start+0x13e>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a30      	ldr	r2, [pc, #192]	@ (8007968 <HAL_TIM_PWM_Start+0x1e8>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d009      	beq.n	80078be <HAL_TIM_PWM_Start+0x13e>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a2f      	ldr	r2, [pc, #188]	@ (800796c <HAL_TIM_PWM_Start+0x1ec>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d004      	beq.n	80078be <HAL_TIM_PWM_Start+0x13e>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a2d      	ldr	r2, [pc, #180]	@ (8007970 <HAL_TIM_PWM_Start+0x1f0>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d101      	bne.n	80078c2 <HAL_TIM_PWM_Start+0x142>
 80078be:	2301      	movs	r3, #1
 80078c0:	e000      	b.n	80078c4 <HAL_TIM_PWM_Start+0x144>
 80078c2:	2300      	movs	r3, #0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d007      	beq.n	80078d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a20      	ldr	r2, [pc, #128]	@ (8007960 <HAL_TIM_PWM_Start+0x1e0>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d018      	beq.n	8007914 <HAL_TIM_PWM_Start+0x194>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ea:	d013      	beq.n	8007914 <HAL_TIM_PWM_Start+0x194>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a20      	ldr	r2, [pc, #128]	@ (8007974 <HAL_TIM_PWM_Start+0x1f4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d00e      	beq.n	8007914 <HAL_TIM_PWM_Start+0x194>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a1f      	ldr	r2, [pc, #124]	@ (8007978 <HAL_TIM_PWM_Start+0x1f8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d009      	beq.n	8007914 <HAL_TIM_PWM_Start+0x194>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a17      	ldr	r2, [pc, #92]	@ (8007964 <HAL_TIM_PWM_Start+0x1e4>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d004      	beq.n	8007914 <HAL_TIM_PWM_Start+0x194>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a16      	ldr	r2, [pc, #88]	@ (8007968 <HAL_TIM_PWM_Start+0x1e8>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d115      	bne.n	8007940 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	689a      	ldr	r2, [r3, #8]
 800791a:	4b18      	ldr	r3, [pc, #96]	@ (800797c <HAL_TIM_PWM_Start+0x1fc>)
 800791c:	4013      	ands	r3, r2
 800791e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2b06      	cmp	r3, #6
 8007924:	d015      	beq.n	8007952 <HAL_TIM_PWM_Start+0x1d2>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800792c:	d011      	beq.n	8007952 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f042 0201 	orr.w	r2, r2, #1
 800793c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800793e:	e008      	b.n	8007952 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f042 0201 	orr.w	r2, r2, #1
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	e000      	b.n	8007954 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007952:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	40012c00 	.word	0x40012c00
 8007964:	40013400 	.word	0x40013400
 8007968:	40014000 	.word	0x40014000
 800796c:	40014400 	.word	0x40014400
 8007970:	40014800 	.word	0x40014800
 8007974:	40000400 	.word	0x40000400
 8007978:	40000800 	.word	0x40000800
 800797c:	00010007 	.word	0x00010007

08007980 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2200      	movs	r2, #0
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	4618      	mov	r0, r3
 8007994:	f000 ff22 	bl	80087dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a3e      	ldr	r2, [pc, #248]	@ (8007a98 <HAL_TIM_PWM_Stop+0x118>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d013      	beq.n	80079ca <HAL_TIM_PWM_Stop+0x4a>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a3d      	ldr	r2, [pc, #244]	@ (8007a9c <HAL_TIM_PWM_Stop+0x11c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d00e      	beq.n	80079ca <HAL_TIM_PWM_Stop+0x4a>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a3b      	ldr	r2, [pc, #236]	@ (8007aa0 <HAL_TIM_PWM_Stop+0x120>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d009      	beq.n	80079ca <HAL_TIM_PWM_Stop+0x4a>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a3a      	ldr	r2, [pc, #232]	@ (8007aa4 <HAL_TIM_PWM_Stop+0x124>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d004      	beq.n	80079ca <HAL_TIM_PWM_Stop+0x4a>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a38      	ldr	r2, [pc, #224]	@ (8007aa8 <HAL_TIM_PWM_Stop+0x128>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d101      	bne.n	80079ce <HAL_TIM_PWM_Stop+0x4e>
 80079ca:	2301      	movs	r3, #1
 80079cc:	e000      	b.n	80079d0 <HAL_TIM_PWM_Stop+0x50>
 80079ce:	2300      	movs	r3, #0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d017      	beq.n	8007a04 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6a1a      	ldr	r2, [r3, #32]
 80079da:	f241 1311 	movw	r3, #4369	@ 0x1111
 80079de:	4013      	ands	r3, r2
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10f      	bne.n	8007a04 <HAL_TIM_PWM_Stop+0x84>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6a1a      	ldr	r2, [r3, #32]
 80079ea:	f244 4344 	movw	r3, #17476	@ 0x4444
 80079ee:	4013      	ands	r3, r2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d107      	bne.n	8007a04 <HAL_TIM_PWM_Stop+0x84>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a02:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6a1a      	ldr	r2, [r3, #32]
 8007a0a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007a0e:	4013      	ands	r3, r2
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10f      	bne.n	8007a34 <HAL_TIM_PWM_Stop+0xb4>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6a1a      	ldr	r2, [r3, #32]
 8007a1a:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007a1e:	4013      	ands	r3, r2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d107      	bne.n	8007a34 <HAL_TIM_PWM_Stop+0xb4>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f022 0201 	bic.w	r2, r2, #1
 8007a32:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d104      	bne.n	8007a44 <HAL_TIM_PWM_Stop+0xc4>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a42:	e023      	b.n	8007a8c <HAL_TIM_PWM_Stop+0x10c>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d104      	bne.n	8007a54 <HAL_TIM_PWM_Stop+0xd4>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a52:	e01b      	b.n	8007a8c <HAL_TIM_PWM_Stop+0x10c>
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	2b08      	cmp	r3, #8
 8007a58:	d104      	bne.n	8007a64 <HAL_TIM_PWM_Stop+0xe4>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a62:	e013      	b.n	8007a8c <HAL_TIM_PWM_Stop+0x10c>
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2b0c      	cmp	r3, #12
 8007a68:	d104      	bne.n	8007a74 <HAL_TIM_PWM_Stop+0xf4>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a72:	e00b      	b.n	8007a8c <HAL_TIM_PWM_Stop+0x10c>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b10      	cmp	r3, #16
 8007a78:	d104      	bne.n	8007a84 <HAL_TIM_PWM_Stop+0x104>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a82:	e003      	b.n	8007a8c <HAL_TIM_PWM_Stop+0x10c>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	40012c00 	.word	0x40012c00
 8007a9c:	40013400 	.word	0x40013400
 8007aa0:	40014000 	.word	0x40014000
 8007aa4:	40014400 	.word	0x40014400
 8007aa8:	40014800 	.word	0x40014800

08007aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d020      	beq.n	8007b10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01b      	beq.n	8007b10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f06f 0202 	mvn.w	r2, #2
 8007ae0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	f003 0303 	and.w	r3, r3, #3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fac0 	bl	800807c <HAL_TIM_IC_CaptureCallback>
 8007afc:	e005      	b.n	8007b0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fab2 	bl	8008068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fac3 	bl	8008090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f003 0304 	and.w	r3, r3, #4
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d020      	beq.n	8007b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f003 0304 	and.w	r3, r3, #4
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d01b      	beq.n	8007b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f06f 0204 	mvn.w	r2, #4
 8007b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2202      	movs	r2, #2
 8007b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fa9a 	bl	800807c <HAL_TIM_IC_CaptureCallback>
 8007b48:	e005      	b.n	8007b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fa8c 	bl	8008068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fa9d 	bl	8008090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	f003 0308 	and.w	r3, r3, #8
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d020      	beq.n	8007ba8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f003 0308 	and.w	r3, r3, #8
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d01b      	beq.n	8007ba8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f06f 0208 	mvn.w	r2, #8
 8007b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2204      	movs	r2, #4
 8007b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	f003 0303 	and.w	r3, r3, #3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fa74 	bl	800807c <HAL_TIM_IC_CaptureCallback>
 8007b94:	e005      	b.n	8007ba2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa66 	bl	8008068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fa77 	bl	8008090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	f003 0310 	and.w	r3, r3, #16
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d020      	beq.n	8007bf4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f003 0310 	and.w	r3, r3, #16
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d01b      	beq.n	8007bf4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f06f 0210 	mvn.w	r2, #16
 8007bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2208      	movs	r2, #8
 8007bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fa4e 	bl	800807c <HAL_TIM_IC_CaptureCallback>
 8007be0:	e005      	b.n	8007bee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fa40 	bl	8008068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fa51 	bl	8008090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00c      	beq.n	8007c18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d007      	beq.n	8007c18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f06f 0201 	mvn.w	r2, #1
 8007c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7f9 f8a2 	bl	8000d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d104      	bne.n	8007c2c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00c      	beq.n	8007c46 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d007      	beq.n	8007c46 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f001 f82e 	bl	8008ca2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00c      	beq.n	8007c6a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d007      	beq.n	8007c6a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f001 f826 	bl	8008cb6 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00c      	beq.n	8007c8e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d007      	beq.n	8007c8e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fa0b 	bl	80080a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f003 0320 	and.w	r3, r3, #32
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00c      	beq.n	8007cb2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f003 0320 	and.w	r3, r3, #32
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d007      	beq.n	8007cb2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f06f 0220 	mvn.w	r2, #32
 8007caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 ffee 	bl	8008c8e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00c      	beq.n	8007cd6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d007      	beq.n	8007cd6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fffa 	bl	8008cca <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00c      	beq.n	8007cfa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d007      	beq.n	8007cfa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fff2 	bl	8008cde <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00c      	beq.n	8007d1e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d007      	beq.n	8007d1e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 ffea 	bl	8008cf2 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00c      	beq.n	8007d42 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d007      	beq.n	8007d42 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 ffe2 	bl	8008d06 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d42:	bf00      	nop
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
	...

08007d4c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d101      	bne.n	8007d6a <HAL_TIM_OC_ConfigChannel+0x1e>
 8007d66:	2302      	movs	r3, #2
 8007d68:	e066      	b.n	8007e38 <HAL_TIM_OC_ConfigChannel+0xec>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b14      	cmp	r3, #20
 8007d76:	d857      	bhi.n	8007e28 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007d78:	a201      	add	r2, pc, #4	@ (adr r2, 8007d80 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7e:	bf00      	nop
 8007d80:	08007dd5 	.word	0x08007dd5
 8007d84:	08007e29 	.word	0x08007e29
 8007d88:	08007e29 	.word	0x08007e29
 8007d8c:	08007e29 	.word	0x08007e29
 8007d90:	08007de3 	.word	0x08007de3
 8007d94:	08007e29 	.word	0x08007e29
 8007d98:	08007e29 	.word	0x08007e29
 8007d9c:	08007e29 	.word	0x08007e29
 8007da0:	08007df1 	.word	0x08007df1
 8007da4:	08007e29 	.word	0x08007e29
 8007da8:	08007e29 	.word	0x08007e29
 8007dac:	08007e29 	.word	0x08007e29
 8007db0:	08007dff 	.word	0x08007dff
 8007db4:	08007e29 	.word	0x08007e29
 8007db8:	08007e29 	.word	0x08007e29
 8007dbc:	08007e29 	.word	0x08007e29
 8007dc0:	08007e0d 	.word	0x08007e0d
 8007dc4:	08007e29 	.word	0x08007e29
 8007dc8:	08007e29 	.word	0x08007e29
 8007dcc:	08007e29 	.word	0x08007e29
 8007dd0:	08007e1b 	.word	0x08007e1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68b9      	ldr	r1, [r7, #8]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 fa08 	bl	80081f0 <TIM_OC1_SetConfig>
      break;
 8007de0:	e025      	b.n	8007e2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68b9      	ldr	r1, [r7, #8]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 fa91 	bl	8008310 <TIM_OC2_SetConfig>
      break;
 8007dee:	e01e      	b.n	8007e2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68b9      	ldr	r1, [r7, #8]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 fb14 	bl	8008424 <TIM_OC3_SetConfig>
      break;
 8007dfc:	e017      	b.n	8007e2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68b9      	ldr	r1, [r7, #8]
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 fb95 	bl	8008534 <TIM_OC4_SetConfig>
      break;
 8007e0a:	e010      	b.n	8007e2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68b9      	ldr	r1, [r7, #8]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fc18 	bl	8008648 <TIM_OC5_SetConfig>
      break;
 8007e18:	e009      	b.n	8007e2e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68b9      	ldr	r1, [r7, #8]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 fc75 	bl	8008710 <TIM_OC6_SetConfig>
      break;
 8007e26:	e002      	b.n	8007e2e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d101      	bne.n	8007e5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	e0ff      	b.n	800805e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2b14      	cmp	r3, #20
 8007e6a:	f200 80f0 	bhi.w	800804e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e74:	08007ec9 	.word	0x08007ec9
 8007e78:	0800804f 	.word	0x0800804f
 8007e7c:	0800804f 	.word	0x0800804f
 8007e80:	0800804f 	.word	0x0800804f
 8007e84:	08007f09 	.word	0x08007f09
 8007e88:	0800804f 	.word	0x0800804f
 8007e8c:	0800804f 	.word	0x0800804f
 8007e90:	0800804f 	.word	0x0800804f
 8007e94:	08007f4b 	.word	0x08007f4b
 8007e98:	0800804f 	.word	0x0800804f
 8007e9c:	0800804f 	.word	0x0800804f
 8007ea0:	0800804f 	.word	0x0800804f
 8007ea4:	08007f8b 	.word	0x08007f8b
 8007ea8:	0800804f 	.word	0x0800804f
 8007eac:	0800804f 	.word	0x0800804f
 8007eb0:	0800804f 	.word	0x0800804f
 8007eb4:	08007fcd 	.word	0x08007fcd
 8007eb8:	0800804f 	.word	0x0800804f
 8007ebc:	0800804f 	.word	0x0800804f
 8007ec0:	0800804f 	.word	0x0800804f
 8007ec4:	0800800d 	.word	0x0800800d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68b9      	ldr	r1, [r7, #8]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 f98e 	bl	80081f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	699a      	ldr	r2, [r3, #24]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f042 0208 	orr.w	r2, r2, #8
 8007ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	699a      	ldr	r2, [r3, #24]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 0204 	bic.w	r2, r2, #4
 8007ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6999      	ldr	r1, [r3, #24]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	691a      	ldr	r2, [r3, #16]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	619a      	str	r2, [r3, #24]
      break;
 8007f06:	e0a5      	b.n	8008054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68b9      	ldr	r1, [r7, #8]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f9fe 	bl	8008310 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	699a      	ldr	r2, [r3, #24]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699a      	ldr	r2, [r3, #24]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6999      	ldr	r1, [r3, #24]
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	021a      	lsls	r2, r3, #8
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	430a      	orrs	r2, r1
 8007f46:	619a      	str	r2, [r3, #24]
      break;
 8007f48:	e084      	b.n	8008054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68b9      	ldr	r1, [r7, #8]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 fa67 	bl	8008424 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	69da      	ldr	r2, [r3, #28]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f042 0208 	orr.w	r2, r2, #8
 8007f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	69da      	ldr	r2, [r3, #28]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 0204 	bic.w	r2, r2, #4
 8007f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	69d9      	ldr	r1, [r3, #28]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	691a      	ldr	r2, [r3, #16]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	430a      	orrs	r2, r1
 8007f86:	61da      	str	r2, [r3, #28]
      break;
 8007f88:	e064      	b.n	8008054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68b9      	ldr	r1, [r7, #8]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 facf 	bl	8008534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	69da      	ldr	r2, [r3, #28]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	69da      	ldr	r2, [r3, #28]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	69d9      	ldr	r1, [r3, #28]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	021a      	lsls	r2, r3, #8
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	61da      	str	r2, [r3, #28]
      break;
 8007fca:	e043      	b.n	8008054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68b9      	ldr	r1, [r7, #8]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 fb38 	bl	8008648 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f042 0208 	orr.w	r2, r2, #8
 8007fe6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f022 0204 	bic.w	r2, r2, #4
 8007ff6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	691a      	ldr	r2, [r3, #16]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	430a      	orrs	r2, r1
 8008008:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800800a:	e023      	b.n	8008054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68b9      	ldr	r1, [r7, #8]
 8008012:	4618      	mov	r0, r3
 8008014:	f000 fb7c 	bl	8008710 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008026:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008036:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	021a      	lsls	r2, r3, #8
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	430a      	orrs	r2, r1
 800804a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800804c:	e002      	b.n	8008054 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	75fb      	strb	r3, [r7, #23]
      break;
 8008052:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800805c:	7dfb      	ldrb	r3, [r7, #23]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3718      	adds	r7, #24
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop

08008068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a42      	ldr	r2, [pc, #264]	@ (80081d4 <TIM_Base_SetConfig+0x11c>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d00f      	beq.n	80080f0 <TIM_Base_SetConfig+0x38>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080d6:	d00b      	beq.n	80080f0 <TIM_Base_SetConfig+0x38>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a3f      	ldr	r2, [pc, #252]	@ (80081d8 <TIM_Base_SetConfig+0x120>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d007      	beq.n	80080f0 <TIM_Base_SetConfig+0x38>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a3e      	ldr	r2, [pc, #248]	@ (80081dc <TIM_Base_SetConfig+0x124>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d003      	beq.n	80080f0 <TIM_Base_SetConfig+0x38>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a3d      	ldr	r2, [pc, #244]	@ (80081e0 <TIM_Base_SetConfig+0x128>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d108      	bne.n	8008102 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a33      	ldr	r2, [pc, #204]	@ (80081d4 <TIM_Base_SetConfig+0x11c>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d01b      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008110:	d017      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a30      	ldr	r2, [pc, #192]	@ (80081d8 <TIM_Base_SetConfig+0x120>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d013      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a2f      	ldr	r2, [pc, #188]	@ (80081dc <TIM_Base_SetConfig+0x124>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d00f      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a2e      	ldr	r2, [pc, #184]	@ (80081e0 <TIM_Base_SetConfig+0x128>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d00b      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a2d      	ldr	r2, [pc, #180]	@ (80081e4 <TIM_Base_SetConfig+0x12c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d007      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a2c      	ldr	r2, [pc, #176]	@ (80081e8 <TIM_Base_SetConfig+0x130>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d003      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a2b      	ldr	r2, [pc, #172]	@ (80081ec <TIM_Base_SetConfig+0x134>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d108      	bne.n	8008154 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	4313      	orrs	r3, r2
 8008152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	4313      	orrs	r3, r2
 8008160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a16      	ldr	r2, [pc, #88]	@ (80081d4 <TIM_Base_SetConfig+0x11c>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d00f      	beq.n	80081a0 <TIM_Base_SetConfig+0xe8>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a17      	ldr	r2, [pc, #92]	@ (80081e0 <TIM_Base_SetConfig+0x128>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d00b      	beq.n	80081a0 <TIM_Base_SetConfig+0xe8>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a16      	ldr	r2, [pc, #88]	@ (80081e4 <TIM_Base_SetConfig+0x12c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d007      	beq.n	80081a0 <TIM_Base_SetConfig+0xe8>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a15      	ldr	r2, [pc, #84]	@ (80081e8 <TIM_Base_SetConfig+0x130>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d003      	beq.n	80081a0 <TIM_Base_SetConfig+0xe8>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a14      	ldr	r2, [pc, #80]	@ (80081ec <TIM_Base_SetConfig+0x134>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d103      	bne.n	80081a8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	691a      	ldr	r2, [r3, #16]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d105      	bne.n	80081c6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	f023 0201 	bic.w	r2, r3, #1
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	611a      	str	r2, [r3, #16]
  }
}
 80081c6:	bf00      	nop
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	40012c00 	.word	0x40012c00
 80081d8:	40000400 	.word	0x40000400
 80081dc:	40000800 	.word	0x40000800
 80081e0:	40013400 	.word	0x40013400
 80081e4:	40014000 	.word	0x40014000
 80081e8:	40014400 	.word	0x40014400
 80081ec:	40014800 	.word	0x40014800

080081f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b087      	sub	sp, #28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	f023 0201 	bic.w	r2, r3, #1
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800821e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f023 0303 	bic.w	r3, r3, #3
 800822a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	4313      	orrs	r3, r2
 8008234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f023 0302 	bic.w	r3, r3, #2
 800823c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	4313      	orrs	r3, r2
 8008246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a2c      	ldr	r2, [pc, #176]	@ (80082fc <TIM_OC1_SetConfig+0x10c>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d00f      	beq.n	8008270 <TIM_OC1_SetConfig+0x80>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a2b      	ldr	r2, [pc, #172]	@ (8008300 <TIM_OC1_SetConfig+0x110>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d00b      	beq.n	8008270 <TIM_OC1_SetConfig+0x80>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a2a      	ldr	r2, [pc, #168]	@ (8008304 <TIM_OC1_SetConfig+0x114>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d007      	beq.n	8008270 <TIM_OC1_SetConfig+0x80>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a29      	ldr	r2, [pc, #164]	@ (8008308 <TIM_OC1_SetConfig+0x118>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d003      	beq.n	8008270 <TIM_OC1_SetConfig+0x80>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a28      	ldr	r2, [pc, #160]	@ (800830c <TIM_OC1_SetConfig+0x11c>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d10c      	bne.n	800828a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	f023 0308 	bic.w	r3, r3, #8
 8008276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	4313      	orrs	r3, r2
 8008280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	f023 0304 	bic.w	r3, r3, #4
 8008288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a1b      	ldr	r2, [pc, #108]	@ (80082fc <TIM_OC1_SetConfig+0x10c>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d00f      	beq.n	80082b2 <TIM_OC1_SetConfig+0xc2>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a1a      	ldr	r2, [pc, #104]	@ (8008300 <TIM_OC1_SetConfig+0x110>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d00b      	beq.n	80082b2 <TIM_OC1_SetConfig+0xc2>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a19      	ldr	r2, [pc, #100]	@ (8008304 <TIM_OC1_SetConfig+0x114>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d007      	beq.n	80082b2 <TIM_OC1_SetConfig+0xc2>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a18      	ldr	r2, [pc, #96]	@ (8008308 <TIM_OC1_SetConfig+0x118>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d003      	beq.n	80082b2 <TIM_OC1_SetConfig+0xc2>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a17      	ldr	r2, [pc, #92]	@ (800830c <TIM_OC1_SetConfig+0x11c>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d111      	bne.n	80082d6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80082c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	621a      	str	r2, [r3, #32]
}
 80082f0:	bf00      	nop
 80082f2:	371c      	adds	r7, #28
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	40012c00 	.word	0x40012c00
 8008300:	40013400 	.word	0x40013400
 8008304:	40014000 	.word	0x40014000
 8008308:	40014400 	.word	0x40014400
 800830c:	40014800 	.word	0x40014800

08008310 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008310:	b480      	push	{r7}
 8008312:	b087      	sub	sp, #28
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a1b      	ldr	r3, [r3, #32]
 8008324:	f023 0210 	bic.w	r2, r3, #16
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800833e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800834a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	021b      	lsls	r3, r3, #8
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	4313      	orrs	r3, r2
 8008356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f023 0320 	bic.w	r3, r3, #32
 800835e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	011b      	lsls	r3, r3, #4
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	4313      	orrs	r3, r2
 800836a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a28      	ldr	r2, [pc, #160]	@ (8008410 <TIM_OC2_SetConfig+0x100>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d003      	beq.n	800837c <TIM_OC2_SetConfig+0x6c>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a27      	ldr	r2, [pc, #156]	@ (8008414 <TIM_OC2_SetConfig+0x104>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d10d      	bne.n	8008398 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	011b      	lsls	r3, r3, #4
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	4313      	orrs	r3, r2
 800838e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008396:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a1d      	ldr	r2, [pc, #116]	@ (8008410 <TIM_OC2_SetConfig+0x100>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d00f      	beq.n	80083c0 <TIM_OC2_SetConfig+0xb0>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a1c      	ldr	r2, [pc, #112]	@ (8008414 <TIM_OC2_SetConfig+0x104>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00b      	beq.n	80083c0 <TIM_OC2_SetConfig+0xb0>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a1b      	ldr	r2, [pc, #108]	@ (8008418 <TIM_OC2_SetConfig+0x108>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d007      	beq.n	80083c0 <TIM_OC2_SetConfig+0xb0>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a1a      	ldr	r2, [pc, #104]	@ (800841c <TIM_OC2_SetConfig+0x10c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d003      	beq.n	80083c0 <TIM_OC2_SetConfig+0xb0>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a19      	ldr	r2, [pc, #100]	@ (8008420 <TIM_OC2_SetConfig+0x110>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d113      	bne.n	80083e8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80083ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	4313      	orrs	r3, r2
 80083da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	621a      	str	r2, [r3, #32]
}
 8008402:	bf00      	nop
 8008404:	371c      	adds	r7, #28
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	40012c00 	.word	0x40012c00
 8008414:	40013400 	.word	0x40013400
 8008418:	40014000 	.word	0x40014000
 800841c:	40014400 	.word	0x40014400
 8008420:	40014800 	.word	0x40014800

08008424 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008424:	b480      	push	{r7}
 8008426:	b087      	sub	sp, #28
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a1b      	ldr	r3, [r3, #32]
 8008438:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f023 0303 	bic.w	r3, r3, #3
 800845e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	4313      	orrs	r3, r2
 8008468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	021b      	lsls	r3, r3, #8
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	4313      	orrs	r3, r2
 800847c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a27      	ldr	r2, [pc, #156]	@ (8008520 <TIM_OC3_SetConfig+0xfc>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d003      	beq.n	800848e <TIM_OC3_SetConfig+0x6a>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a26      	ldr	r2, [pc, #152]	@ (8008524 <TIM_OC3_SetConfig+0x100>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d10d      	bne.n	80084aa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008494:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	021b      	lsls	r3, r3, #8
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	4313      	orrs	r3, r2
 80084a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a1c      	ldr	r2, [pc, #112]	@ (8008520 <TIM_OC3_SetConfig+0xfc>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d00f      	beq.n	80084d2 <TIM_OC3_SetConfig+0xae>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a1b      	ldr	r2, [pc, #108]	@ (8008524 <TIM_OC3_SetConfig+0x100>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d00b      	beq.n	80084d2 <TIM_OC3_SetConfig+0xae>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a1a      	ldr	r2, [pc, #104]	@ (8008528 <TIM_OC3_SetConfig+0x104>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d007      	beq.n	80084d2 <TIM_OC3_SetConfig+0xae>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a19      	ldr	r2, [pc, #100]	@ (800852c <TIM_OC3_SetConfig+0x108>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d003      	beq.n	80084d2 <TIM_OC3_SetConfig+0xae>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a18      	ldr	r2, [pc, #96]	@ (8008530 <TIM_OC3_SetConfig+0x10c>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d113      	bne.n	80084fa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	011b      	lsls	r3, r3, #4
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	011b      	lsls	r3, r3, #4
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	685a      	ldr	r2, [r3, #4]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	621a      	str	r2, [r3, #32]
}
 8008514:	bf00      	nop
 8008516:	371c      	adds	r7, #28
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr
 8008520:	40012c00 	.word	0x40012c00
 8008524:	40013400 	.word	0x40013400
 8008528:	40014000 	.word	0x40014000
 800852c:	40014400 	.word	0x40014400
 8008530:	40014800 	.word	0x40014800

08008534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008534:	b480      	push	{r7}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a1b      	ldr	r3, [r3, #32]
 8008548:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800856e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	021b      	lsls	r3, r3, #8
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4313      	orrs	r3, r2
 800857a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008582:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	031b      	lsls	r3, r3, #12
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	4313      	orrs	r3, r2
 800858e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a28      	ldr	r2, [pc, #160]	@ (8008634 <TIM_OC4_SetConfig+0x100>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d003      	beq.n	80085a0 <TIM_OC4_SetConfig+0x6c>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a27      	ldr	r2, [pc, #156]	@ (8008638 <TIM_OC4_SetConfig+0x104>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d10d      	bne.n	80085bc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80085a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	031b      	lsls	r3, r3, #12
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a1d      	ldr	r2, [pc, #116]	@ (8008634 <TIM_OC4_SetConfig+0x100>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d00f      	beq.n	80085e4 <TIM_OC4_SetConfig+0xb0>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a1c      	ldr	r2, [pc, #112]	@ (8008638 <TIM_OC4_SetConfig+0x104>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d00b      	beq.n	80085e4 <TIM_OC4_SetConfig+0xb0>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a1b      	ldr	r2, [pc, #108]	@ (800863c <TIM_OC4_SetConfig+0x108>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d007      	beq.n	80085e4 <TIM_OC4_SetConfig+0xb0>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a1a      	ldr	r2, [pc, #104]	@ (8008640 <TIM_OC4_SetConfig+0x10c>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d003      	beq.n	80085e4 <TIM_OC4_SetConfig+0xb0>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a19      	ldr	r2, [pc, #100]	@ (8008644 <TIM_OC4_SetConfig+0x110>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d113      	bne.n	800860c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80085f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	019b      	lsls	r3, r3, #6
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	019b      	lsls	r3, r3, #6
 8008606:	693a      	ldr	r2, [r7, #16]
 8008608:	4313      	orrs	r3, r2
 800860a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	621a      	str	r2, [r3, #32]
}
 8008626:	bf00      	nop
 8008628:	371c      	adds	r7, #28
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	40012c00 	.word	0x40012c00
 8008638:	40013400 	.word	0x40013400
 800863c:	40014000 	.word	0x40014000
 8008640:	40014400 	.word	0x40014400
 8008644:	40014800 	.word	0x40014800

08008648 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008648:	b480      	push	{r7}
 800864a:	b087      	sub	sp, #28
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a1b      	ldr	r3, [r3, #32]
 8008656:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800866e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800867a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	4313      	orrs	r3, r2
 8008684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800868c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	041b      	lsls	r3, r3, #16
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	4313      	orrs	r3, r2
 8008698:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a17      	ldr	r2, [pc, #92]	@ (80086fc <TIM_OC5_SetConfig+0xb4>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d00f      	beq.n	80086c2 <TIM_OC5_SetConfig+0x7a>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a16      	ldr	r2, [pc, #88]	@ (8008700 <TIM_OC5_SetConfig+0xb8>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d00b      	beq.n	80086c2 <TIM_OC5_SetConfig+0x7a>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a15      	ldr	r2, [pc, #84]	@ (8008704 <TIM_OC5_SetConfig+0xbc>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d007      	beq.n	80086c2 <TIM_OC5_SetConfig+0x7a>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a14      	ldr	r2, [pc, #80]	@ (8008708 <TIM_OC5_SetConfig+0xc0>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d003      	beq.n	80086c2 <TIM_OC5_SetConfig+0x7a>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a13      	ldr	r2, [pc, #76]	@ (800870c <TIM_OC5_SetConfig+0xc4>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d109      	bne.n	80086d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	021b      	lsls	r3, r3, #8
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	621a      	str	r2, [r3, #32]
}
 80086f0:	bf00      	nop
 80086f2:	371c      	adds	r7, #28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	40012c00 	.word	0x40012c00
 8008700:	40013400 	.word	0x40013400
 8008704:	40014000 	.word	0x40014000
 8008708:	40014400 	.word	0x40014400
 800870c:	40014800 	.word	0x40014800

08008710 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008710:	b480      	push	{r7}
 8008712:	b087      	sub	sp, #28
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a1b      	ldr	r3, [r3, #32]
 8008724:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800873e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	021b      	lsls	r3, r3, #8
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	4313      	orrs	r3, r2
 800874e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	051b      	lsls	r3, r3, #20
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	4313      	orrs	r3, r2
 8008762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a18      	ldr	r2, [pc, #96]	@ (80087c8 <TIM_OC6_SetConfig+0xb8>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d00f      	beq.n	800878c <TIM_OC6_SetConfig+0x7c>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a17      	ldr	r2, [pc, #92]	@ (80087cc <TIM_OC6_SetConfig+0xbc>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d00b      	beq.n	800878c <TIM_OC6_SetConfig+0x7c>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a16      	ldr	r2, [pc, #88]	@ (80087d0 <TIM_OC6_SetConfig+0xc0>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d007      	beq.n	800878c <TIM_OC6_SetConfig+0x7c>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a15      	ldr	r2, [pc, #84]	@ (80087d4 <TIM_OC6_SetConfig+0xc4>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d003      	beq.n	800878c <TIM_OC6_SetConfig+0x7c>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a14      	ldr	r2, [pc, #80]	@ (80087d8 <TIM_OC6_SetConfig+0xc8>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d109      	bne.n	80087a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008792:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	695b      	ldr	r3, [r3, #20]
 8008798:	029b      	lsls	r3, r3, #10
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	4313      	orrs	r3, r2
 800879e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	685a      	ldr	r2, [r3, #4]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	621a      	str	r2, [r3, #32]
}
 80087ba:	bf00      	nop
 80087bc:	371c      	adds	r7, #28
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	40012c00 	.word	0x40012c00
 80087cc:	40013400 	.word	0x40013400
 80087d0:	40014000 	.word	0x40014000
 80087d4:	40014400 	.word	0x40014400
 80087d8:	40014800 	.word	0x40014800

080087dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	f003 031f 	and.w	r3, r3, #31
 80087ee:	2201      	movs	r2, #1
 80087f0:	fa02 f303 	lsl.w	r3, r2, r3
 80087f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6a1a      	ldr	r2, [r3, #32]
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	43db      	mvns	r3, r3
 80087fe:	401a      	ands	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6a1a      	ldr	r2, [r3, #32]
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	f003 031f 	and.w	r3, r3, #31
 800880e:	6879      	ldr	r1, [r7, #4]
 8008810:	fa01 f303 	lsl.w	r3, r1, r3
 8008814:	431a      	orrs	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	621a      	str	r2, [r3, #32]
}
 800881a:	bf00      	nop
 800881c:	371c      	adds	r7, #28
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
	...

08008828 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d109      	bne.n	800884c <HAL_TIMEx_PWMN_Start+0x24>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b01      	cmp	r3, #1
 8008842:	bf14      	ite	ne
 8008844:	2301      	movne	r3, #1
 8008846:	2300      	moveq	r3, #0
 8008848:	b2db      	uxtb	r3, r3
 800884a:	e022      	b.n	8008892 <HAL_TIMEx_PWMN_Start+0x6a>
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	2b04      	cmp	r3, #4
 8008850:	d109      	bne.n	8008866 <HAL_TIMEx_PWMN_Start+0x3e>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b01      	cmp	r3, #1
 800885c:	bf14      	ite	ne
 800885e:	2301      	movne	r3, #1
 8008860:	2300      	moveq	r3, #0
 8008862:	b2db      	uxtb	r3, r3
 8008864:	e015      	b.n	8008892 <HAL_TIMEx_PWMN_Start+0x6a>
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	2b08      	cmp	r3, #8
 800886a:	d109      	bne.n	8008880 <HAL_TIMEx_PWMN_Start+0x58>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008872:	b2db      	uxtb	r3, r3
 8008874:	2b01      	cmp	r3, #1
 8008876:	bf14      	ite	ne
 8008878:	2301      	movne	r3, #1
 800887a:	2300      	moveq	r3, #0
 800887c:	b2db      	uxtb	r3, r3
 800887e:	e008      	b.n	8008892 <HAL_TIMEx_PWMN_Start+0x6a>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b01      	cmp	r3, #1
 800888a:	bf14      	ite	ne
 800888c:	2301      	movne	r3, #1
 800888e:	2300      	moveq	r3, #0
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e069      	b.n	800896e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d104      	bne.n	80088aa <HAL_TIMEx_PWMN_Start+0x82>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088a8:	e013      	b.n	80088d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	2b04      	cmp	r3, #4
 80088ae:	d104      	bne.n	80088ba <HAL_TIMEx_PWMN_Start+0x92>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2202      	movs	r2, #2
 80088b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088b8:	e00b      	b.n	80088d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	2b08      	cmp	r3, #8
 80088be:	d104      	bne.n	80088ca <HAL_TIMEx_PWMN_Start+0xa2>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2202      	movs	r2, #2
 80088c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80088c8:	e003      	b.n	80088d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2202      	movs	r2, #2
 80088ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2204      	movs	r2, #4
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 fa1d 	bl	8008d1a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80088ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a20      	ldr	r2, [pc, #128]	@ (8008978 <HAL_TIMEx_PWMN_Start+0x150>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d018      	beq.n	800892c <HAL_TIMEx_PWMN_Start+0x104>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008902:	d013      	beq.n	800892c <HAL_TIMEx_PWMN_Start+0x104>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a1c      	ldr	r2, [pc, #112]	@ (800897c <HAL_TIMEx_PWMN_Start+0x154>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d00e      	beq.n	800892c <HAL_TIMEx_PWMN_Start+0x104>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a1b      	ldr	r2, [pc, #108]	@ (8008980 <HAL_TIMEx_PWMN_Start+0x158>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d009      	beq.n	800892c <HAL_TIMEx_PWMN_Start+0x104>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a19      	ldr	r2, [pc, #100]	@ (8008984 <HAL_TIMEx_PWMN_Start+0x15c>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d004      	beq.n	800892c <HAL_TIMEx_PWMN_Start+0x104>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a18      	ldr	r2, [pc, #96]	@ (8008988 <HAL_TIMEx_PWMN_Start+0x160>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d115      	bne.n	8008958 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	689a      	ldr	r2, [r3, #8]
 8008932:	4b16      	ldr	r3, [pc, #88]	@ (800898c <HAL_TIMEx_PWMN_Start+0x164>)
 8008934:	4013      	ands	r3, r2
 8008936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2b06      	cmp	r3, #6
 800893c:	d015      	beq.n	800896a <HAL_TIMEx_PWMN_Start+0x142>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008944:	d011      	beq.n	800896a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f042 0201 	orr.w	r2, r2, #1
 8008954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008956:	e008      	b.n	800896a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f042 0201 	orr.w	r2, r2, #1
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	e000      	b.n	800896c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800896a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	40012c00 	.word	0x40012c00
 800897c:	40000400 	.word	0x40000400
 8008980:	40000800 	.word	0x40000800
 8008984:	40013400 	.word	0x40013400
 8008988:	40014000 	.word	0x40014000
 800898c:	00010007 	.word	0x00010007

08008990 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2200      	movs	r2, #0
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 f9b9 	bl	8008d1a <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6a1a      	ldr	r2, [r3, #32]
 80089ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80089b2:	4013      	ands	r3, r2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10f      	bne.n	80089d8 <HAL_TIMEx_PWMN_Stop+0x48>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6a1a      	ldr	r2, [r3, #32]
 80089be:	f244 4344 	movw	r3, #17476	@ 0x4444
 80089c2:	4013      	ands	r3, r2
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d107      	bne.n	80089d8 <HAL_TIMEx_PWMN_Stop+0x48>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80089d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6a1a      	ldr	r2, [r3, #32]
 80089de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80089e2:	4013      	ands	r3, r2
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10f      	bne.n	8008a08 <HAL_TIMEx_PWMN_Stop+0x78>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6a1a      	ldr	r2, [r3, #32]
 80089ee:	f244 4344 	movw	r3, #17476	@ 0x4444
 80089f2:	4013      	ands	r3, r2
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d107      	bne.n	8008a08 <HAL_TIMEx_PWMN_Stop+0x78>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f022 0201 	bic.w	r2, r2, #1
 8008a06:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d104      	bne.n	8008a18 <HAL_TIMEx_PWMN_Stop+0x88>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a16:	e013      	b.n	8008a40 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	2b04      	cmp	r3, #4
 8008a1c:	d104      	bne.n	8008a28 <HAL_TIMEx_PWMN_Stop+0x98>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a26:	e00b      	b.n	8008a40 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	2b08      	cmp	r3, #8
 8008a2c:	d104      	bne.n	8008a38 <HAL_TIMEx_PWMN_Stop+0xa8>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008a36:	e003      	b.n	8008a40 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
	...

08008a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d101      	bne.n	8008a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a60:	2302      	movs	r3, #2
 8008a62:	e065      	b.n	8008b30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2202      	movs	r2, #2
 8008a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a2c      	ldr	r2, [pc, #176]	@ (8008b3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d004      	beq.n	8008a98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a2b      	ldr	r2, [pc, #172]	@ (8008b40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d108      	bne.n	8008aaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008a9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008ab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ab4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a1b      	ldr	r2, [pc, #108]	@ (8008b3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d018      	beq.n	8008b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ada:	d013      	beq.n	8008b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a18      	ldr	r2, [pc, #96]	@ (8008b44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d00e      	beq.n	8008b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a17      	ldr	r2, [pc, #92]	@ (8008b48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d009      	beq.n	8008b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a12      	ldr	r2, [pc, #72]	@ (8008b40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d004      	beq.n	8008b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a13      	ldr	r2, [pc, #76]	@ (8008b4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d10c      	bne.n	8008b1e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3714      	adds	r7, #20
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr
 8008b3c:	40012c00 	.word	0x40012c00
 8008b40:	40013400 	.word	0x40013400
 8008b44:	40000400 	.word	0x40000400
 8008b48:	40000800 	.word	0x40000800
 8008b4c:	40014000 	.word	0x40014000

08008b50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d101      	bne.n	8008b6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b68:	2302      	movs	r3, #2
 8008b6a:	e073      	b.n	8008c54 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	041b      	lsls	r3, r3, #16
 8008be2:	4313      	orrs	r3, r2
 8008be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	69db      	ldr	r3, [r3, #28]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a19      	ldr	r2, [pc, #100]	@ (8008c60 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d004      	beq.n	8008c08 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a18      	ldr	r2, [pc, #96]	@ (8008c64 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d11c      	bne.n	8008c42 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c12:	051b      	lsls	r3, r3, #20
 8008c14:	4313      	orrs	r3, r2
 8008c16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c30:	4313      	orrs	r3, r2
 8008c32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr
 8008c60:	40012c00 	.word	0x40012c00
 8008c64:	40013400 	.word	0x40013400

08008c68 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008c7e:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b083      	sub	sp, #12
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c96:	bf00      	nop
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b083      	sub	sp, #12
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008caa:	bf00      	nop
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008cbe:	bf00      	nop
 8008cc0:	370c      	adds	r7, #12
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b083      	sub	sp, #12
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008cd2:	bf00      	nop
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b083      	sub	sp, #12
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008ce6:	bf00      	nop
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b083      	sub	sp, #12
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008cfa:	bf00      	nop
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b083      	sub	sp, #12
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008d0e:	bf00      	nop
 8008d10:	370c      	adds	r7, #12
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr

08008d1a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b087      	sub	sp, #28
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	60f8      	str	r0, [r7, #12]
 8008d22:	60b9      	str	r1, [r7, #8]
 8008d24:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	f003 030f 	and.w	r3, r3, #15
 8008d2c:	2204      	movs	r2, #4
 8008d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d32:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6a1a      	ldr	r2, [r3, #32]
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	43db      	mvns	r3, r3
 8008d3c:	401a      	ands	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6a1a      	ldr	r2, [r3, #32]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	f003 030f 	and.w	r3, r3, #15
 8008d4c:	6879      	ldr	r1, [r7, #4]
 8008d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d52:	431a      	orrs	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	621a      	str	r2, [r3, #32]
}
 8008d58:	bf00      	nop
 8008d5a:	371c      	adds	r7, #28
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e042      	b.n	8008dfc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d106      	bne.n	8008d8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f83b 	bl	8008e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2224      	movs	r2, #36	@ 0x24
 8008d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f022 0201 	bic.w	r2, r2, #1
 8008da4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d002      	beq.n	8008db4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fafe 	bl	80093b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f82f 	bl	8008e18 <UART_SetConfig>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d101      	bne.n	8008dc4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e01b      	b.n	8008dfc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	685a      	ldr	r2, [r3, #4]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008dd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	689a      	ldr	r2, [r3, #8]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008de2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f042 0201 	orr.w	r2, r2, #1
 8008df2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fb7d 	bl	80094f4 <UART_CheckIdleState>
 8008dfa:	4603      	mov	r3, r0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e1c:	b08c      	sub	sp, #48	@ 0x30
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	431a      	orrs	r2, r3
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	431a      	orrs	r2, r3
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	69db      	ldr	r3, [r3, #28]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	4bab      	ldr	r3, [pc, #684]	@ (80090f4 <UART_SetConfig+0x2dc>)
 8008e48:	4013      	ands	r3, r2
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	6812      	ldr	r2, [r2, #0]
 8008e4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e50:	430b      	orrs	r3, r1
 8008e52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	68da      	ldr	r2, [r3, #12]
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4aa0      	ldr	r2, [pc, #640]	@ (80090f8 <UART_SetConfig+0x2e0>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d004      	beq.n	8008e84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e80:	4313      	orrs	r3, r2
 8008e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008e8e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	6812      	ldr	r2, [r2, #0]
 8008e96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e98:	430b      	orrs	r3, r1
 8008e9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea2:	f023 010f 	bic.w	r1, r3, #15
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	430a      	orrs	r2, r1
 8008eb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a91      	ldr	r2, [pc, #580]	@ (80090fc <UART_SetConfig+0x2e4>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d125      	bne.n	8008f08 <UART_SetConfig+0xf0>
 8008ebc:	4b90      	ldr	r3, [pc, #576]	@ (8009100 <UART_SetConfig+0x2e8>)
 8008ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ec2:	f003 0303 	and.w	r3, r3, #3
 8008ec6:	2b03      	cmp	r3, #3
 8008ec8:	d81a      	bhi.n	8008f00 <UART_SetConfig+0xe8>
 8008eca:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed0 <UART_SetConfig+0xb8>)
 8008ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed0:	08008ee1 	.word	0x08008ee1
 8008ed4:	08008ef1 	.word	0x08008ef1
 8008ed8:	08008ee9 	.word	0x08008ee9
 8008edc:	08008ef9 	.word	0x08008ef9
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ee6:	e0d6      	b.n	8009096 <UART_SetConfig+0x27e>
 8008ee8:	2302      	movs	r3, #2
 8008eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eee:	e0d2      	b.n	8009096 <UART_SetConfig+0x27e>
 8008ef0:	2304      	movs	r3, #4
 8008ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ef6:	e0ce      	b.n	8009096 <UART_SetConfig+0x27e>
 8008ef8:	2308      	movs	r3, #8
 8008efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008efe:	e0ca      	b.n	8009096 <UART_SetConfig+0x27e>
 8008f00:	2310      	movs	r3, #16
 8008f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f06:	e0c6      	b.n	8009096 <UART_SetConfig+0x27e>
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a7d      	ldr	r2, [pc, #500]	@ (8009104 <UART_SetConfig+0x2ec>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d138      	bne.n	8008f84 <UART_SetConfig+0x16c>
 8008f12:	4b7b      	ldr	r3, [pc, #492]	@ (8009100 <UART_SetConfig+0x2e8>)
 8008f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f18:	f003 030c 	and.w	r3, r3, #12
 8008f1c:	2b0c      	cmp	r3, #12
 8008f1e:	d82d      	bhi.n	8008f7c <UART_SetConfig+0x164>
 8008f20:	a201      	add	r2, pc, #4	@ (adr r2, 8008f28 <UART_SetConfig+0x110>)
 8008f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f26:	bf00      	nop
 8008f28:	08008f5d 	.word	0x08008f5d
 8008f2c:	08008f7d 	.word	0x08008f7d
 8008f30:	08008f7d 	.word	0x08008f7d
 8008f34:	08008f7d 	.word	0x08008f7d
 8008f38:	08008f6d 	.word	0x08008f6d
 8008f3c:	08008f7d 	.word	0x08008f7d
 8008f40:	08008f7d 	.word	0x08008f7d
 8008f44:	08008f7d 	.word	0x08008f7d
 8008f48:	08008f65 	.word	0x08008f65
 8008f4c:	08008f7d 	.word	0x08008f7d
 8008f50:	08008f7d 	.word	0x08008f7d
 8008f54:	08008f7d 	.word	0x08008f7d
 8008f58:	08008f75 	.word	0x08008f75
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f62:	e098      	b.n	8009096 <UART_SetConfig+0x27e>
 8008f64:	2302      	movs	r3, #2
 8008f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f6a:	e094      	b.n	8009096 <UART_SetConfig+0x27e>
 8008f6c:	2304      	movs	r3, #4
 8008f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f72:	e090      	b.n	8009096 <UART_SetConfig+0x27e>
 8008f74:	2308      	movs	r3, #8
 8008f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f7a:	e08c      	b.n	8009096 <UART_SetConfig+0x27e>
 8008f7c:	2310      	movs	r3, #16
 8008f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f82:	e088      	b.n	8009096 <UART_SetConfig+0x27e>
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a5f      	ldr	r2, [pc, #380]	@ (8009108 <UART_SetConfig+0x2f0>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d125      	bne.n	8008fda <UART_SetConfig+0x1c2>
 8008f8e:	4b5c      	ldr	r3, [pc, #368]	@ (8009100 <UART_SetConfig+0x2e8>)
 8008f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008f98:	2b30      	cmp	r3, #48	@ 0x30
 8008f9a:	d016      	beq.n	8008fca <UART_SetConfig+0x1b2>
 8008f9c:	2b30      	cmp	r3, #48	@ 0x30
 8008f9e:	d818      	bhi.n	8008fd2 <UART_SetConfig+0x1ba>
 8008fa0:	2b20      	cmp	r3, #32
 8008fa2:	d00a      	beq.n	8008fba <UART_SetConfig+0x1a2>
 8008fa4:	2b20      	cmp	r3, #32
 8008fa6:	d814      	bhi.n	8008fd2 <UART_SetConfig+0x1ba>
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d002      	beq.n	8008fb2 <UART_SetConfig+0x19a>
 8008fac:	2b10      	cmp	r3, #16
 8008fae:	d008      	beq.n	8008fc2 <UART_SetConfig+0x1aa>
 8008fb0:	e00f      	b.n	8008fd2 <UART_SetConfig+0x1ba>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fb8:	e06d      	b.n	8009096 <UART_SetConfig+0x27e>
 8008fba:	2302      	movs	r3, #2
 8008fbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fc0:	e069      	b.n	8009096 <UART_SetConfig+0x27e>
 8008fc2:	2304      	movs	r3, #4
 8008fc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fc8:	e065      	b.n	8009096 <UART_SetConfig+0x27e>
 8008fca:	2308      	movs	r3, #8
 8008fcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fd0:	e061      	b.n	8009096 <UART_SetConfig+0x27e>
 8008fd2:	2310      	movs	r3, #16
 8008fd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fd8:	e05d      	b.n	8009096 <UART_SetConfig+0x27e>
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a4b      	ldr	r2, [pc, #300]	@ (800910c <UART_SetConfig+0x2f4>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d125      	bne.n	8009030 <UART_SetConfig+0x218>
 8008fe4:	4b46      	ldr	r3, [pc, #280]	@ (8009100 <UART_SetConfig+0x2e8>)
 8008fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008fee:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ff0:	d016      	beq.n	8009020 <UART_SetConfig+0x208>
 8008ff2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ff4:	d818      	bhi.n	8009028 <UART_SetConfig+0x210>
 8008ff6:	2b80      	cmp	r3, #128	@ 0x80
 8008ff8:	d00a      	beq.n	8009010 <UART_SetConfig+0x1f8>
 8008ffa:	2b80      	cmp	r3, #128	@ 0x80
 8008ffc:	d814      	bhi.n	8009028 <UART_SetConfig+0x210>
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d002      	beq.n	8009008 <UART_SetConfig+0x1f0>
 8009002:	2b40      	cmp	r3, #64	@ 0x40
 8009004:	d008      	beq.n	8009018 <UART_SetConfig+0x200>
 8009006:	e00f      	b.n	8009028 <UART_SetConfig+0x210>
 8009008:	2300      	movs	r3, #0
 800900a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800900e:	e042      	b.n	8009096 <UART_SetConfig+0x27e>
 8009010:	2302      	movs	r3, #2
 8009012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009016:	e03e      	b.n	8009096 <UART_SetConfig+0x27e>
 8009018:	2304      	movs	r3, #4
 800901a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800901e:	e03a      	b.n	8009096 <UART_SetConfig+0x27e>
 8009020:	2308      	movs	r3, #8
 8009022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009026:	e036      	b.n	8009096 <UART_SetConfig+0x27e>
 8009028:	2310      	movs	r3, #16
 800902a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800902e:	e032      	b.n	8009096 <UART_SetConfig+0x27e>
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a30      	ldr	r2, [pc, #192]	@ (80090f8 <UART_SetConfig+0x2e0>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d12a      	bne.n	8009090 <UART_SetConfig+0x278>
 800903a:	4b31      	ldr	r3, [pc, #196]	@ (8009100 <UART_SetConfig+0x2e8>)
 800903c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009040:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009044:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009048:	d01a      	beq.n	8009080 <UART_SetConfig+0x268>
 800904a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800904e:	d81b      	bhi.n	8009088 <UART_SetConfig+0x270>
 8009050:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009054:	d00c      	beq.n	8009070 <UART_SetConfig+0x258>
 8009056:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800905a:	d815      	bhi.n	8009088 <UART_SetConfig+0x270>
 800905c:	2b00      	cmp	r3, #0
 800905e:	d003      	beq.n	8009068 <UART_SetConfig+0x250>
 8009060:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009064:	d008      	beq.n	8009078 <UART_SetConfig+0x260>
 8009066:	e00f      	b.n	8009088 <UART_SetConfig+0x270>
 8009068:	2300      	movs	r3, #0
 800906a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800906e:	e012      	b.n	8009096 <UART_SetConfig+0x27e>
 8009070:	2302      	movs	r3, #2
 8009072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009076:	e00e      	b.n	8009096 <UART_SetConfig+0x27e>
 8009078:	2304      	movs	r3, #4
 800907a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800907e:	e00a      	b.n	8009096 <UART_SetConfig+0x27e>
 8009080:	2308      	movs	r3, #8
 8009082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009086:	e006      	b.n	8009096 <UART_SetConfig+0x27e>
 8009088:	2310      	movs	r3, #16
 800908a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800908e:	e002      	b.n	8009096 <UART_SetConfig+0x27e>
 8009090:	2310      	movs	r3, #16
 8009092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a17      	ldr	r2, [pc, #92]	@ (80090f8 <UART_SetConfig+0x2e0>)
 800909c:	4293      	cmp	r3, r2
 800909e:	f040 80a8 	bne.w	80091f2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80090a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80090a6:	2b08      	cmp	r3, #8
 80090a8:	d834      	bhi.n	8009114 <UART_SetConfig+0x2fc>
 80090aa:	a201      	add	r2, pc, #4	@ (adr r2, 80090b0 <UART_SetConfig+0x298>)
 80090ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b0:	080090d5 	.word	0x080090d5
 80090b4:	08009115 	.word	0x08009115
 80090b8:	080090dd 	.word	0x080090dd
 80090bc:	08009115 	.word	0x08009115
 80090c0:	080090e3 	.word	0x080090e3
 80090c4:	08009115 	.word	0x08009115
 80090c8:	08009115 	.word	0x08009115
 80090cc:	08009115 	.word	0x08009115
 80090d0:	080090eb 	.word	0x080090eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090d4:	f7fd ff46 	bl	8006f64 <HAL_RCC_GetPCLK1Freq>
 80090d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80090da:	e021      	b.n	8009120 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009110 <UART_SetConfig+0x2f8>)
 80090de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80090e0:	e01e      	b.n	8009120 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090e2:	f7fd fed1 	bl	8006e88 <HAL_RCC_GetSysClockFreq>
 80090e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80090e8:	e01a      	b.n	8009120 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80090f0:	e016      	b.n	8009120 <UART_SetConfig+0x308>
 80090f2:	bf00      	nop
 80090f4:	cfff69f3 	.word	0xcfff69f3
 80090f8:	40008000 	.word	0x40008000
 80090fc:	40013800 	.word	0x40013800
 8009100:	40021000 	.word	0x40021000
 8009104:	40004400 	.word	0x40004400
 8009108:	40004800 	.word	0x40004800
 800910c:	40004c00 	.word	0x40004c00
 8009110:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009114:	2300      	movs	r3, #0
 8009116:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800911e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 812a 	beq.w	800937c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800912c:	4a9e      	ldr	r2, [pc, #632]	@ (80093a8 <UART_SetConfig+0x590>)
 800912e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009132:	461a      	mov	r2, r3
 8009134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009136:	fbb3 f3f2 	udiv	r3, r3, r2
 800913a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	4613      	mov	r3, r2
 8009142:	005b      	lsls	r3, r3, #1
 8009144:	4413      	add	r3, r2
 8009146:	69ba      	ldr	r2, [r7, #24]
 8009148:	429a      	cmp	r2, r3
 800914a:	d305      	bcc.n	8009158 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009152:	69ba      	ldr	r2, [r7, #24]
 8009154:	429a      	cmp	r2, r3
 8009156:	d903      	bls.n	8009160 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800915e:	e10d      	b.n	800937c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009162:	2200      	movs	r2, #0
 8009164:	60bb      	str	r3, [r7, #8]
 8009166:	60fa      	str	r2, [r7, #12]
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800916c:	4a8e      	ldr	r2, [pc, #568]	@ (80093a8 <UART_SetConfig+0x590>)
 800916e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009172:	b29b      	uxth	r3, r3
 8009174:	2200      	movs	r2, #0
 8009176:	603b      	str	r3, [r7, #0]
 8009178:	607a      	str	r2, [r7, #4]
 800917a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800917e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009182:	f7f7 f84d 	bl	8000220 <__aeabi_uldivmod>
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	4610      	mov	r0, r2
 800918c:	4619      	mov	r1, r3
 800918e:	f04f 0200 	mov.w	r2, #0
 8009192:	f04f 0300 	mov.w	r3, #0
 8009196:	020b      	lsls	r3, r1, #8
 8009198:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800919c:	0202      	lsls	r2, r0, #8
 800919e:	6979      	ldr	r1, [r7, #20]
 80091a0:	6849      	ldr	r1, [r1, #4]
 80091a2:	0849      	lsrs	r1, r1, #1
 80091a4:	2000      	movs	r0, #0
 80091a6:	460c      	mov	r4, r1
 80091a8:	4605      	mov	r5, r0
 80091aa:	eb12 0804 	adds.w	r8, r2, r4
 80091ae:	eb43 0905 	adc.w	r9, r3, r5
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	469a      	mov	sl, r3
 80091ba:	4693      	mov	fp, r2
 80091bc:	4652      	mov	r2, sl
 80091be:	465b      	mov	r3, fp
 80091c0:	4640      	mov	r0, r8
 80091c2:	4649      	mov	r1, r9
 80091c4:	f7f7 f82c 	bl	8000220 <__aeabi_uldivmod>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	4613      	mov	r3, r2
 80091ce:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80091d0:	6a3b      	ldr	r3, [r7, #32]
 80091d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091d6:	d308      	bcc.n	80091ea <UART_SetConfig+0x3d2>
 80091d8:	6a3b      	ldr	r3, [r7, #32]
 80091da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091de:	d204      	bcs.n	80091ea <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6a3a      	ldr	r2, [r7, #32]
 80091e6:	60da      	str	r2, [r3, #12]
 80091e8:	e0c8      	b.n	800937c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80091f0:	e0c4      	b.n	800937c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	69db      	ldr	r3, [r3, #28]
 80091f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091fa:	d167      	bne.n	80092cc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80091fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009200:	2b08      	cmp	r3, #8
 8009202:	d828      	bhi.n	8009256 <UART_SetConfig+0x43e>
 8009204:	a201      	add	r2, pc, #4	@ (adr r2, 800920c <UART_SetConfig+0x3f4>)
 8009206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920a:	bf00      	nop
 800920c:	08009231 	.word	0x08009231
 8009210:	08009239 	.word	0x08009239
 8009214:	08009241 	.word	0x08009241
 8009218:	08009257 	.word	0x08009257
 800921c:	08009247 	.word	0x08009247
 8009220:	08009257 	.word	0x08009257
 8009224:	08009257 	.word	0x08009257
 8009228:	08009257 	.word	0x08009257
 800922c:	0800924f 	.word	0x0800924f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009230:	f7fd fe98 	bl	8006f64 <HAL_RCC_GetPCLK1Freq>
 8009234:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009236:	e014      	b.n	8009262 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009238:	f7fd feaa 	bl	8006f90 <HAL_RCC_GetPCLK2Freq>
 800923c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800923e:	e010      	b.n	8009262 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009240:	4b5a      	ldr	r3, [pc, #360]	@ (80093ac <UART_SetConfig+0x594>)
 8009242:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009244:	e00d      	b.n	8009262 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009246:	f7fd fe1f 	bl	8006e88 <HAL_RCC_GetSysClockFreq>
 800924a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800924c:	e009      	b.n	8009262 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800924e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009252:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009254:	e005      	b.n	8009262 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009256:	2300      	movs	r3, #0
 8009258:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009260:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009264:	2b00      	cmp	r3, #0
 8009266:	f000 8089 	beq.w	800937c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800926e:	4a4e      	ldr	r2, [pc, #312]	@ (80093a8 <UART_SetConfig+0x590>)
 8009270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009274:	461a      	mov	r2, r3
 8009276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009278:	fbb3 f3f2 	udiv	r3, r3, r2
 800927c:	005a      	lsls	r2, r3, #1
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	085b      	lsrs	r3, r3, #1
 8009284:	441a      	add	r2, r3
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	fbb2 f3f3 	udiv	r3, r2, r3
 800928e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	2b0f      	cmp	r3, #15
 8009294:	d916      	bls.n	80092c4 <UART_SetConfig+0x4ac>
 8009296:	6a3b      	ldr	r3, [r7, #32]
 8009298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800929c:	d212      	bcs.n	80092c4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800929e:	6a3b      	ldr	r3, [r7, #32]
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	f023 030f 	bic.w	r3, r3, #15
 80092a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092a8:	6a3b      	ldr	r3, [r7, #32]
 80092aa:	085b      	lsrs	r3, r3, #1
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	f003 0307 	and.w	r3, r3, #7
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	8bfb      	ldrh	r3, [r7, #30]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	8bfa      	ldrh	r2, [r7, #30]
 80092c0:	60da      	str	r2, [r3, #12]
 80092c2:	e05b      	b.n	800937c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80092ca:	e057      	b.n	800937c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80092cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80092d0:	2b08      	cmp	r3, #8
 80092d2:	d828      	bhi.n	8009326 <UART_SetConfig+0x50e>
 80092d4:	a201      	add	r2, pc, #4	@ (adr r2, 80092dc <UART_SetConfig+0x4c4>)
 80092d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092da:	bf00      	nop
 80092dc:	08009301 	.word	0x08009301
 80092e0:	08009309 	.word	0x08009309
 80092e4:	08009311 	.word	0x08009311
 80092e8:	08009327 	.word	0x08009327
 80092ec:	08009317 	.word	0x08009317
 80092f0:	08009327 	.word	0x08009327
 80092f4:	08009327 	.word	0x08009327
 80092f8:	08009327 	.word	0x08009327
 80092fc:	0800931f 	.word	0x0800931f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009300:	f7fd fe30 	bl	8006f64 <HAL_RCC_GetPCLK1Freq>
 8009304:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009306:	e014      	b.n	8009332 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009308:	f7fd fe42 	bl	8006f90 <HAL_RCC_GetPCLK2Freq>
 800930c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800930e:	e010      	b.n	8009332 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009310:	4b26      	ldr	r3, [pc, #152]	@ (80093ac <UART_SetConfig+0x594>)
 8009312:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009314:	e00d      	b.n	8009332 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009316:	f7fd fdb7 	bl	8006e88 <HAL_RCC_GetSysClockFreq>
 800931a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800931c:	e009      	b.n	8009332 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800931e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009322:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009324:	e005      	b.n	8009332 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009326:	2300      	movs	r3, #0
 8009328:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009330:	bf00      	nop
    }

    if (pclk != 0U)
 8009332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009334:	2b00      	cmp	r3, #0
 8009336:	d021      	beq.n	800937c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800933c:	4a1a      	ldr	r2, [pc, #104]	@ (80093a8 <UART_SetConfig+0x590>)
 800933e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009342:	461a      	mov	r2, r3
 8009344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009346:	fbb3 f2f2 	udiv	r2, r3, r2
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	085b      	lsrs	r3, r3, #1
 8009350:	441a      	add	r2, r3
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	fbb2 f3f3 	udiv	r3, r2, r3
 800935a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800935c:	6a3b      	ldr	r3, [r7, #32]
 800935e:	2b0f      	cmp	r3, #15
 8009360:	d909      	bls.n	8009376 <UART_SetConfig+0x55e>
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009368:	d205      	bcs.n	8009376 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	b29a      	uxth	r2, r3
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	60da      	str	r2, [r3, #12]
 8009374:	e002      	b.n	800937c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	2201      	movs	r2, #1
 8009380:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	2201      	movs	r2, #1
 8009388:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	2200      	movs	r2, #0
 8009390:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	2200      	movs	r2, #0
 8009396:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009398:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800939c:	4618      	mov	r0, r3
 800939e:	3730      	adds	r7, #48	@ 0x30
 80093a0:	46bd      	mov	sp, r7
 80093a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093a6:	bf00      	nop
 80093a8:	0800c9bc 	.word	0x0800c9bc
 80093ac:	00f42400 	.word	0x00f42400

080093b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093bc:	f003 0308 	and.w	r3, r3, #8
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00a      	beq.n	80093da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	430a      	orrs	r2, r1
 80093d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00a      	beq.n	80093fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	430a      	orrs	r2, r1
 80093fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009400:	f003 0302 	and.w	r3, r3, #2
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00a      	beq.n	800941e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	430a      	orrs	r2, r1
 800941c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009422:	f003 0304 	and.w	r3, r3, #4
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00a      	beq.n	8009440 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	430a      	orrs	r2, r1
 800943e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009444:	f003 0310 	and.w	r3, r3, #16
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00a      	beq.n	8009462 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	430a      	orrs	r2, r1
 8009460:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009466:	f003 0320 	and.w	r3, r3, #32
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00a      	beq.n	8009484 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	430a      	orrs	r2, r1
 8009482:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800948c:	2b00      	cmp	r3, #0
 800948e:	d01a      	beq.n	80094c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	430a      	orrs	r2, r1
 80094a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094ae:	d10a      	bne.n	80094c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	430a      	orrs	r2, r1
 80094c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00a      	beq.n	80094e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	430a      	orrs	r2, r1
 80094e6:	605a      	str	r2, [r3, #4]
  }
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b098      	sub	sp, #96	@ 0x60
 80094f8:	af02      	add	r7, sp, #8
 80094fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009504:	f7fa fa1a 	bl	800393c <HAL_GetTick>
 8009508:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0308 	and.w	r3, r3, #8
 8009514:	2b08      	cmp	r3, #8
 8009516:	d12f      	bne.n	8009578 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009518:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009520:	2200      	movs	r2, #0
 8009522:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f88e 	bl	8009648 <UART_WaitOnFlagUntilTimeout>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d022      	beq.n	8009578 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953a:	e853 3f00 	ldrex	r3, [r3]
 800953e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009542:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009546:	653b      	str	r3, [r7, #80]	@ 0x50
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	461a      	mov	r2, r3
 800954e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009550:	647b      	str	r3, [r7, #68]	@ 0x44
 8009552:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009554:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009556:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009558:	e841 2300 	strex	r3, r2, [r1]
 800955c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800955e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1e6      	bne.n	8009532 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2220      	movs	r2, #32
 8009568:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009574:	2303      	movs	r3, #3
 8009576:	e063      	b.n	8009640 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f003 0304 	and.w	r3, r3, #4
 8009582:	2b04      	cmp	r3, #4
 8009584:	d149      	bne.n	800961a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009586:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800958a:	9300      	str	r3, [sp, #0]
 800958c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800958e:	2200      	movs	r2, #0
 8009590:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f857 	bl	8009648 <UART_WaitOnFlagUntilTimeout>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d03c      	beq.n	800961a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a8:	e853 3f00 	ldrex	r3, [r3]
 80095ac:	623b      	str	r3, [r7, #32]
   return(result);
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	461a      	mov	r2, r3
 80095bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095be:	633b      	str	r3, [r7, #48]	@ 0x30
 80095c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095c6:	e841 2300 	strex	r3, r2, [r1]
 80095ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1e6      	bne.n	80095a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3308      	adds	r3, #8
 80095d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	e853 3f00 	ldrex	r3, [r3]
 80095e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f023 0301 	bic.w	r3, r3, #1
 80095e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	3308      	adds	r3, #8
 80095f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095f2:	61fa      	str	r2, [r7, #28]
 80095f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f6:	69b9      	ldr	r1, [r7, #24]
 80095f8:	69fa      	ldr	r2, [r7, #28]
 80095fa:	e841 2300 	strex	r3, r2, [r1]
 80095fe:	617b      	str	r3, [r7, #20]
   return(result);
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1e5      	bne.n	80095d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2220      	movs	r2, #32
 800960a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009616:	2303      	movs	r3, #3
 8009618:	e012      	b.n	8009640 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2220      	movs	r2, #32
 800961e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2220      	movs	r2, #32
 8009626:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	3758      	adds	r7, #88	@ 0x58
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	603b      	str	r3, [r7, #0]
 8009654:	4613      	mov	r3, r2
 8009656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009658:	e04f      	b.n	80096fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009660:	d04b      	beq.n	80096fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009662:	f7fa f96b 	bl	800393c <HAL_GetTick>
 8009666:	4602      	mov	r2, r0
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	69ba      	ldr	r2, [r7, #24]
 800966e:	429a      	cmp	r2, r3
 8009670:	d302      	bcc.n	8009678 <UART_WaitOnFlagUntilTimeout+0x30>
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d101      	bne.n	800967c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009678:	2303      	movs	r3, #3
 800967a:	e04e      	b.n	800971a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 0304 	and.w	r3, r3, #4
 8009686:	2b00      	cmp	r3, #0
 8009688:	d037      	beq.n	80096fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	2b80      	cmp	r3, #128	@ 0x80
 800968e:	d034      	beq.n	80096fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	2b40      	cmp	r3, #64	@ 0x40
 8009694:	d031      	beq.n	80096fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	69db      	ldr	r3, [r3, #28]
 800969c:	f003 0308 	and.w	r3, r3, #8
 80096a0:	2b08      	cmp	r3, #8
 80096a2:	d110      	bne.n	80096c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2208      	movs	r2, #8
 80096aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f000 f838 	bl	8009722 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2208      	movs	r2, #8
 80096b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e029      	b.n	800971a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	69db      	ldr	r3, [r3, #28]
 80096cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096d4:	d111      	bne.n	80096fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80096de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f000 f81e 	bl	8009722 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2220      	movs	r2, #32
 80096ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80096f6:	2303      	movs	r3, #3
 80096f8:	e00f      	b.n	800971a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	69da      	ldr	r2, [r3, #28]
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	4013      	ands	r3, r2
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	429a      	cmp	r2, r3
 8009708:	bf0c      	ite	eq
 800970a:	2301      	moveq	r3, #1
 800970c:	2300      	movne	r3, #0
 800970e:	b2db      	uxtb	r3, r3
 8009710:	461a      	mov	r2, r3
 8009712:	79fb      	ldrb	r3, [r7, #7]
 8009714:	429a      	cmp	r2, r3
 8009716:	d0a0      	beq.n	800965a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009722:	b480      	push	{r7}
 8009724:	b095      	sub	sp, #84	@ 0x54
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009732:	e853 3f00 	ldrex	r3, [r3]
 8009736:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800973e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	461a      	mov	r2, r3
 8009746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009748:	643b      	str	r3, [r7, #64]	@ 0x40
 800974a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800974e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009750:	e841 2300 	strex	r3, r2, [r1]
 8009754:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1e6      	bne.n	800972a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	3308      	adds	r3, #8
 8009762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	e853 3f00 	ldrex	r3, [r3]
 800976a:	61fb      	str	r3, [r7, #28]
   return(result);
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009772:	f023 0301 	bic.w	r3, r3, #1
 8009776:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	3308      	adds	r3, #8
 800977e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009780:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009782:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009784:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009786:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009788:	e841 2300 	strex	r3, r2, [r1]
 800978c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800978e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1e3      	bne.n	800975c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009798:	2b01      	cmp	r3, #1
 800979a:	d118      	bne.n	80097ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	e853 3f00 	ldrex	r3, [r3]
 80097a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	f023 0310 	bic.w	r3, r3, #16
 80097b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	461a      	mov	r2, r3
 80097b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097ba:	61bb      	str	r3, [r7, #24]
 80097bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097be:	6979      	ldr	r1, [r7, #20]
 80097c0:	69ba      	ldr	r2, [r7, #24]
 80097c2:	e841 2300 	strex	r3, r2, [r1]
 80097c6:	613b      	str	r3, [r7, #16]
   return(result);
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1e6      	bne.n	800979c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2220      	movs	r2, #32
 80097d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80097e2:	bf00      	nop
 80097e4:	3754      	adds	r7, #84	@ 0x54
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
	...

080097f0 <__NVIC_SetPriority>:
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	4603      	mov	r3, r0
 80097f8:	6039      	str	r1, [r7, #0]
 80097fa:	71fb      	strb	r3, [r7, #7]
 80097fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009800:	2b00      	cmp	r3, #0
 8009802:	db0a      	blt.n	800981a <__NVIC_SetPriority+0x2a>
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	b2da      	uxtb	r2, r3
 8009808:	490c      	ldr	r1, [pc, #48]	@ (800983c <__NVIC_SetPriority+0x4c>)
 800980a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800980e:	0112      	lsls	r2, r2, #4
 8009810:	b2d2      	uxtb	r2, r2
 8009812:	440b      	add	r3, r1
 8009814:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8009818:	e00a      	b.n	8009830 <__NVIC_SetPriority+0x40>
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	b2da      	uxtb	r2, r3
 800981e:	4908      	ldr	r1, [pc, #32]	@ (8009840 <__NVIC_SetPriority+0x50>)
 8009820:	79fb      	ldrb	r3, [r7, #7]
 8009822:	f003 030f 	and.w	r3, r3, #15
 8009826:	3b04      	subs	r3, #4
 8009828:	0112      	lsls	r2, r2, #4
 800982a:	b2d2      	uxtb	r2, r2
 800982c:	440b      	add	r3, r1
 800982e:	761a      	strb	r2, [r3, #24]
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	e000e100 	.word	0xe000e100
 8009840:	e000ed00 	.word	0xe000ed00

08009844 <SysTick_Handler>:
 8009844:	b580      	push	{r7, lr}
 8009846:	af00      	add	r7, sp, #0
 8009848:	4b05      	ldr	r3, [pc, #20]	@ (8009860 <SysTick_Handler+0x1c>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f001 fe94 	bl	800b578 <xTaskGetSchedulerState>
 8009850:	4603      	mov	r3, r0
 8009852:	2b01      	cmp	r3, #1
 8009854:	d001      	beq.n	800985a <SysTick_Handler+0x16>
 8009856:	f002 fc8f 	bl	800c178 <xPortSysTickHandler>
 800985a:	bf00      	nop
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	e000e010 	.word	0xe000e010

08009864 <SVC_Setup>:
 8009864:	b580      	push	{r7, lr}
 8009866:	af00      	add	r7, sp, #0
 8009868:	2100      	movs	r1, #0
 800986a:	f06f 0004 	mvn.w	r0, #4
 800986e:	f7ff ffbf 	bl	80097f0 <__NVIC_SetPriority>
 8009872:	bf00      	nop
 8009874:	bd80      	pop	{r7, pc}
	...

08009878 <osKernelInitialize>:
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	f3ef 8305 	mrs	r3, IPSR
 8009882:	603b      	str	r3, [r7, #0]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d003      	beq.n	8009892 <osKernelInitialize+0x1a>
 800988a:	f06f 0305 	mvn.w	r3, #5
 800988e:	607b      	str	r3, [r7, #4]
 8009890:	e00c      	b.n	80098ac <osKernelInitialize+0x34>
 8009892:	4b0a      	ldr	r3, [pc, #40]	@ (80098bc <osKernelInitialize+0x44>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d105      	bne.n	80098a6 <osKernelInitialize+0x2e>
 800989a:	4b08      	ldr	r3, [pc, #32]	@ (80098bc <osKernelInitialize+0x44>)
 800989c:	2201      	movs	r2, #1
 800989e:	601a      	str	r2, [r3, #0]
 80098a0:	2300      	movs	r3, #0
 80098a2:	607b      	str	r3, [r7, #4]
 80098a4:	e002      	b.n	80098ac <osKernelInitialize+0x34>
 80098a6:	f04f 33ff 	mov.w	r3, #4294967295
 80098aa:	607b      	str	r3, [r7, #4]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4618      	mov	r0, r3
 80098b0:	370c      	adds	r7, #12
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	20000a84 	.word	0x20000a84

080098c0 <osKernelStart>:
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	f3ef 8305 	mrs	r3, IPSR
 80098ca:	603b      	str	r3, [r7, #0]
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <osKernelStart+0x1a>
 80098d2:	f06f 0305 	mvn.w	r3, #5
 80098d6:	607b      	str	r3, [r7, #4]
 80098d8:	e010      	b.n	80098fc <osKernelStart+0x3c>
 80098da:	4b0b      	ldr	r3, [pc, #44]	@ (8009908 <osKernelStart+0x48>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d109      	bne.n	80098f6 <osKernelStart+0x36>
 80098e2:	f7ff ffbf 	bl	8009864 <SVC_Setup>
 80098e6:	4b08      	ldr	r3, [pc, #32]	@ (8009908 <osKernelStart+0x48>)
 80098e8:	2202      	movs	r2, #2
 80098ea:	601a      	str	r2, [r3, #0]
 80098ec:	f001 f9ce 	bl	800ac8c <vTaskStartScheduler>
 80098f0:	2300      	movs	r3, #0
 80098f2:	607b      	str	r3, [r7, #4]
 80098f4:	e002      	b.n	80098fc <osKernelStart+0x3c>
 80098f6:	f04f 33ff 	mov.w	r3, #4294967295
 80098fa:	607b      	str	r3, [r7, #4]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4618      	mov	r0, r3
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	20000a84 	.word	0x20000a84

0800990c <osKernelGetTickCount>:
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	f3ef 8305 	mrs	r3, IPSR
 8009916:	603b      	str	r3, [r7, #0]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d003      	beq.n	8009926 <osKernelGetTickCount+0x1a>
 800991e:	f001 fae1 	bl	800aee4 <xTaskGetTickCountFromISR>
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	e002      	b.n	800992c <osKernelGetTickCount+0x20>
 8009926:	f001 facd 	bl	800aec4 <xTaskGetTickCount>
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4618      	mov	r0, r3
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <osThreadNew>:
 8009936:	b580      	push	{r7, lr}
 8009938:	b08e      	sub	sp, #56	@ 0x38
 800993a:	af04      	add	r7, sp, #16
 800993c:	60f8      	str	r0, [r7, #12]
 800993e:	60b9      	str	r1, [r7, #8]
 8009940:	607a      	str	r2, [r7, #4]
 8009942:	2300      	movs	r3, #0
 8009944:	613b      	str	r3, [r7, #16]
 8009946:	f3ef 8305 	mrs	r3, IPSR
 800994a:	617b      	str	r3, [r7, #20]
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d17e      	bne.n	8009a50 <osThreadNew+0x11a>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d07b      	beq.n	8009a50 <osThreadNew+0x11a>
 8009958:	2380      	movs	r3, #128	@ 0x80
 800995a:	623b      	str	r3, [r7, #32]
 800995c:	2318      	movs	r3, #24
 800995e:	61fb      	str	r3, [r7, #28]
 8009960:	2300      	movs	r3, #0
 8009962:	627b      	str	r3, [r7, #36]	@ 0x24
 8009964:	f04f 33ff 	mov.w	r3, #4294967295
 8009968:	61bb      	str	r3, [r7, #24]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d045      	beq.n	80099fc <osThreadNew+0xc6>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <osThreadNew+0x48>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	627b      	str	r3, [r7, #36]	@ 0x24
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d002      	beq.n	800998c <osThreadNew+0x56>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	61fb      	str	r3, [r7, #28]
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d008      	beq.n	80099a4 <osThreadNew+0x6e>
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	2b38      	cmp	r3, #56	@ 0x38
 8009996:	d805      	bhi.n	80099a4 <osThreadNew+0x6e>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <osThreadNew+0x72>
 80099a4:	2300      	movs	r3, #0
 80099a6:	e054      	b.n	8009a52 <osThreadNew+0x11c>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d003      	beq.n	80099b8 <osThreadNew+0x82>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	695b      	ldr	r3, [r3, #20]
 80099b4:	089b      	lsrs	r3, r3, #2
 80099b6:	623b      	str	r3, [r7, #32]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00e      	beq.n	80099de <osThreadNew+0xa8>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	2ba7      	cmp	r3, #167	@ 0xa7
 80099c6:	d90a      	bls.n	80099de <osThreadNew+0xa8>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d006      	beq.n	80099de <osThreadNew+0xa8>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	695b      	ldr	r3, [r3, #20]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d002      	beq.n	80099de <osThreadNew+0xa8>
 80099d8:	2301      	movs	r3, #1
 80099da:	61bb      	str	r3, [r7, #24]
 80099dc:	e010      	b.n	8009a00 <osThreadNew+0xca>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10c      	bne.n	8009a00 <osThreadNew+0xca>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d108      	bne.n	8009a00 <osThreadNew+0xca>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d104      	bne.n	8009a00 <osThreadNew+0xca>
 80099f6:	2300      	movs	r3, #0
 80099f8:	61bb      	str	r3, [r7, #24]
 80099fa:	e001      	b.n	8009a00 <osThreadNew+0xca>
 80099fc:	2300      	movs	r3, #0
 80099fe:	61bb      	str	r3, [r7, #24]
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d110      	bne.n	8009a28 <osThreadNew+0xf2>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	6892      	ldr	r2, [r2, #8]
 8009a0e:	9202      	str	r2, [sp, #8]
 8009a10:	9301      	str	r3, [sp, #4]
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	6a3a      	ldr	r2, [r7, #32]
 8009a1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f000 fe4d 	bl	800a6bc <xTaskCreateStatic>
 8009a22:	4603      	mov	r3, r0
 8009a24:	613b      	str	r3, [r7, #16]
 8009a26:	e013      	b.n	8009a50 <osThreadNew+0x11a>
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d110      	bne.n	8009a50 <osThreadNew+0x11a>
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	b29a      	uxth	r2, r3
 8009a32:	f107 0310 	add.w	r3, r7, #16
 8009a36:	9301      	str	r3, [sp, #4]
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f000 fe9b 	bl	800a77c <xTaskCreate>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d001      	beq.n	8009a50 <osThreadNew+0x11a>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	613b      	str	r3, [r7, #16]
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	4618      	mov	r0, r3
 8009a54:	3728      	adds	r7, #40	@ 0x28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <osThreadExit>:
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	2000      	movs	r0, #0
 8009a60:	f000 ffea 	bl	800aa38 <vTaskDelete>
 8009a64:	bf00      	nop
 8009a66:	e7fd      	b.n	8009a64 <osThreadExit+0xa>

08009a68 <osDelay>:
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	f3ef 8305 	mrs	r3, IPSR
 8009a74:	60bb      	str	r3, [r7, #8]
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d003      	beq.n	8009a84 <osDelay+0x1c>
 8009a7c:	f06f 0305 	mvn.w	r3, #5
 8009a80:	60fb      	str	r3, [r7, #12]
 8009a82:	e007      	b.n	8009a94 <osDelay+0x2c>
 8009a84:	2300      	movs	r3, #0
 8009a86:	60fb      	str	r3, [r7, #12]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d002      	beq.n	8009a94 <osDelay+0x2c>
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f001 f8c6 	bl	800ac20 <vTaskDelay>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <osDelayUntil>:
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b086      	sub	sp, #24
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	f3ef 8305 	mrs	r3, IPSR
 8009aaa:	60fb      	str	r3, [r7, #12]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <osDelayUntil+0x1c>
 8009ab2:	f06f 0305 	mvn.w	r3, #5
 8009ab6:	617b      	str	r3, [r7, #20]
 8009ab8:	e019      	b.n	8009aee <osDelayUntil+0x50>
 8009aba:	2300      	movs	r3, #0
 8009abc:	617b      	str	r3, [r7, #20]
 8009abe:	f001 fa01 	bl	800aec4 <xTaskGetTickCount>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	60bb      	str	r3, [r7, #8]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	613b      	str	r3, [r7, #16]
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d009      	beq.n	8009ae8 <osDelayUntil+0x4a>
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	db06      	blt.n	8009ae8 <osDelayUntil+0x4a>
 8009ada:	f107 0308 	add.w	r3, r7, #8
 8009ade:	6939      	ldr	r1, [r7, #16]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f001 f81d 	bl	800ab20 <vTaskDelayUntil>
 8009ae6:	e002      	b.n	8009aee <osDelayUntil+0x50>
 8009ae8:	f06f 0303 	mvn.w	r3, #3
 8009aec:	617b      	str	r3, [r7, #20]
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	4618      	mov	r0, r3
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <vApplicationGetIdleTaskMemory>:
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	4a07      	ldr	r2, [pc, #28]	@ (8009b24 <vApplicationGetIdleTaskMemory+0x2c>)
 8009b08:	601a      	str	r2, [r3, #0]
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	4a06      	ldr	r2, [pc, #24]	@ (8009b28 <vApplicationGetIdleTaskMemory+0x30>)
 8009b0e:	601a      	str	r2, [r3, #0]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2280      	movs	r2, #128	@ 0x80
 8009b14:	601a      	str	r2, [r3, #0]
 8009b16:	bf00      	nop
 8009b18:	3714      	adds	r7, #20
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	20000a88 	.word	0x20000a88
 8009b28:	20000b30 	.word	0x20000b30

08009b2c <vApplicationGetTimerTaskMemory>:
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	4a07      	ldr	r2, [pc, #28]	@ (8009b58 <vApplicationGetTimerTaskMemory+0x2c>)
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	4a06      	ldr	r2, [pc, #24]	@ (8009b5c <vApplicationGetTimerTaskMemory+0x30>)
 8009b42:	601a      	str	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	bf00      	nop
 8009b4e:	3714      	adds	r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr
 8009b58:	20000d30 	.word	0x20000d30
 8009b5c:	20000dd8 	.word	0x20000dd8

08009b60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f103 0208 	add.w	r2, r3, #8
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f04f 32ff 	mov.w	r2, #4294967295
 8009b78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f103 0208 	add.w	r2, r3, #8
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f103 0208 	add.w	r2, r3, #8
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009bae:	bf00      	nop
 8009bb0:	370c      	adds	r7, #12
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr

08009bba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bba:	b480      	push	{r7}
 8009bbc:	b085      	sub	sp, #20
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
 8009bc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	683a      	ldr	r2, [r7, #0]
 8009bde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	683a      	ldr	r2, [r7, #0]
 8009be4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	1c5a      	adds	r2, r3, #1
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	601a      	str	r2, [r3, #0]
}
 8009bf6:	bf00      	nop
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c02:	b480      	push	{r7}
 8009c04:	b085      	sub	sp, #20
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c18:	d103      	bne.n	8009c22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	60fb      	str	r3, [r7, #12]
 8009c20:	e00c      	b.n	8009c3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	3308      	adds	r3, #8
 8009c26:	60fb      	str	r3, [r7, #12]
 8009c28:	e002      	b.n	8009c30 <vListInsert+0x2e>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	60fb      	str	r3, [r7, #12]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d2f6      	bcs.n	8009c2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	685a      	ldr	r2, [r3, #4]
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	683a      	ldr	r2, [r7, #0]
 8009c4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	1c5a      	adds	r2, r3, #1
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	601a      	str	r2, [r3, #0]
}
 8009c68:	bf00      	nop
 8009c6a:	3714      	adds	r7, #20
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	6892      	ldr	r2, [r2, #8]
 8009c8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	6852      	ldr	r2, [r2, #4]
 8009c94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d103      	bne.n	8009ca8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	689a      	ldr	r2, [r3, #8]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	1e5a      	subs	r2, r3, #1
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10b      	bne.n	8009cf4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009cee:	bf00      	nop
 8009cf0:	bf00      	nop
 8009cf2:	e7fd      	b.n	8009cf0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009cf4:	f002 f9b0 	bl	800c058 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d00:	68f9      	ldr	r1, [r7, #12]
 8009d02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009d04:	fb01 f303 	mul.w	r3, r1, r3
 8009d08:	441a      	add	r2, r3
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d24:	3b01      	subs	r3, #1
 8009d26:	68f9      	ldr	r1, [r7, #12]
 8009d28:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009d2a:	fb01 f303 	mul.w	r3, r1, r3
 8009d2e:	441a      	add	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	22ff      	movs	r2, #255	@ 0xff
 8009d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	22ff      	movs	r2, #255	@ 0xff
 8009d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d114      	bne.n	8009d74 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d01a      	beq.n	8009d88 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	3310      	adds	r3, #16
 8009d56:	4618      	mov	r0, r3
 8009d58:	f001 fa48 	bl	800b1ec <xTaskRemoveFromEventList>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d012      	beq.n	8009d88 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d62:	4b0d      	ldr	r3, [pc, #52]	@ (8009d98 <xQueueGenericReset+0xd0>)
 8009d64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d68:	601a      	str	r2, [r3, #0]
 8009d6a:	f3bf 8f4f 	dsb	sy
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	e009      	b.n	8009d88 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	3310      	adds	r3, #16
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7ff fef1 	bl	8009b60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	3324      	adds	r3, #36	@ 0x24
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7ff feec 	bl	8009b60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d88:	f002 f998 	bl	800c0bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d8c:	2301      	movs	r3, #1
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	e000ed04 	.word	0xe000ed04

08009d9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b08e      	sub	sp, #56	@ 0x38
 8009da0:	af02      	add	r7, sp, #8
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
 8009da8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10b      	bne.n	8009dc8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009dc2:	bf00      	nop
 8009dc4:	bf00      	nop
 8009dc6:	e7fd      	b.n	8009dc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10b      	bne.n	8009de6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009de0:	bf00      	nop
 8009de2:	bf00      	nop
 8009de4:	e7fd      	b.n	8009de2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <xQueueGenericCreateStatic+0x56>
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <xQueueGenericCreateStatic+0x5a>
 8009df2:	2301      	movs	r3, #1
 8009df4:	e000      	b.n	8009df8 <xQueueGenericCreateStatic+0x5c>
 8009df6:	2300      	movs	r3, #0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10b      	bne.n	8009e14 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	623b      	str	r3, [r7, #32]
}
 8009e0e:	bf00      	nop
 8009e10:	bf00      	nop
 8009e12:	e7fd      	b.n	8009e10 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d102      	bne.n	8009e20 <xQueueGenericCreateStatic+0x84>
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d101      	bne.n	8009e24 <xQueueGenericCreateStatic+0x88>
 8009e20:	2301      	movs	r3, #1
 8009e22:	e000      	b.n	8009e26 <xQueueGenericCreateStatic+0x8a>
 8009e24:	2300      	movs	r3, #0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10b      	bne.n	8009e42 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	61fb      	str	r3, [r7, #28]
}
 8009e3c:	bf00      	nop
 8009e3e:	bf00      	nop
 8009e40:	e7fd      	b.n	8009e3e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e42:	2350      	movs	r3, #80	@ 0x50
 8009e44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	2b50      	cmp	r3, #80	@ 0x50
 8009e4a:	d00b      	beq.n	8009e64 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e50:	f383 8811 	msr	BASEPRI, r3
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	61bb      	str	r3, [r7, #24]
}
 8009e5e:	bf00      	nop
 8009e60:	bf00      	nop
 8009e62:	e7fd      	b.n	8009e60 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e64:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00d      	beq.n	8009e8c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e78:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	4613      	mov	r3, r2
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	68b9      	ldr	r1, [r7, #8]
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f000 f805 	bl	8009e96 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3730      	adds	r7, #48	@ 0x30
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b084      	sub	sp, #16
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	60f8      	str	r0, [r7, #12]
 8009e9e:	60b9      	str	r1, [r7, #8]
 8009ea0:	607a      	str	r2, [r7, #4]
 8009ea2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d103      	bne.n	8009eb2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	69ba      	ldr	r2, [r7, #24]
 8009eae:	601a      	str	r2, [r3, #0]
 8009eb0:	e002      	b.n	8009eb8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ec4:	2101      	movs	r1, #1
 8009ec6:	69b8      	ldr	r0, [r7, #24]
 8009ec8:	f7ff fefe 	bl	8009cc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	78fa      	ldrb	r2, [r7, #3]
 8009ed0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ed4:	bf00      	nop
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b08e      	sub	sp, #56	@ 0x38
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
 8009ee8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009eea:	2300      	movs	r3, #0
 8009eec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10b      	bne.n	8009f10 <xQueueGenericSend+0x34>
	__asm volatile
 8009ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f0a:	bf00      	nop
 8009f0c:	bf00      	nop
 8009f0e:	e7fd      	b.n	8009f0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d103      	bne.n	8009f1e <xQueueGenericSend+0x42>
 8009f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d101      	bne.n	8009f22 <xQueueGenericSend+0x46>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e000      	b.n	8009f24 <xQueueGenericSend+0x48>
 8009f22:	2300      	movs	r3, #0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10b      	bne.n	8009f40 <xQueueGenericSend+0x64>
	__asm volatile
 8009f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f3a:	bf00      	nop
 8009f3c:	bf00      	nop
 8009f3e:	e7fd      	b.n	8009f3c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d103      	bne.n	8009f4e <xQueueGenericSend+0x72>
 8009f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d101      	bne.n	8009f52 <xQueueGenericSend+0x76>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e000      	b.n	8009f54 <xQueueGenericSend+0x78>
 8009f52:	2300      	movs	r3, #0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10b      	bne.n	8009f70 <xQueueGenericSend+0x94>
	__asm volatile
 8009f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	623b      	str	r3, [r7, #32]
}
 8009f6a:	bf00      	nop
 8009f6c:	bf00      	nop
 8009f6e:	e7fd      	b.n	8009f6c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f70:	f001 fb02 	bl	800b578 <xTaskGetSchedulerState>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d102      	bne.n	8009f80 <xQueueGenericSend+0xa4>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d101      	bne.n	8009f84 <xQueueGenericSend+0xa8>
 8009f80:	2301      	movs	r3, #1
 8009f82:	e000      	b.n	8009f86 <xQueueGenericSend+0xaa>
 8009f84:	2300      	movs	r3, #0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d10b      	bne.n	8009fa2 <xQueueGenericSend+0xc6>
	__asm volatile
 8009f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8e:	f383 8811 	msr	BASEPRI, r3
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	61fb      	str	r3, [r7, #28]
}
 8009f9c:	bf00      	nop
 8009f9e:	bf00      	nop
 8009fa0:	e7fd      	b.n	8009f9e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009fa2:	f002 f859 	bl	800c058 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d302      	bcc.n	8009fb8 <xQueueGenericSend+0xdc>
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	d129      	bne.n	800a00c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009fb8:	683a      	ldr	r2, [r7, #0]
 8009fba:	68b9      	ldr	r1, [r7, #8]
 8009fbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fbe:	f000 fa0f 	bl	800a3e0 <prvCopyDataToQueue>
 8009fc2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d010      	beq.n	8009fee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fce:	3324      	adds	r3, #36	@ 0x24
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f001 f90b 	bl	800b1ec <xTaskRemoveFromEventList>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d013      	beq.n	800a004 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009fdc:	4b3f      	ldr	r3, [pc, #252]	@ (800a0dc <xQueueGenericSend+0x200>)
 8009fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fe2:	601a      	str	r2, [r3, #0]
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	e00a      	b.n	800a004 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d007      	beq.n	800a004 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ff4:	4b39      	ldr	r3, [pc, #228]	@ (800a0dc <xQueueGenericSend+0x200>)
 8009ff6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a004:	f002 f85a 	bl	800c0bc <vPortExitCritical>
				return pdPASS;
 800a008:	2301      	movs	r3, #1
 800a00a:	e063      	b.n	800a0d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d103      	bne.n	800a01a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a012:	f002 f853 	bl	800c0bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a016:	2300      	movs	r3, #0
 800a018:	e05c      	b.n	800a0d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a01a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d106      	bne.n	800a02e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a020:	f107 0314 	add.w	r3, r7, #20
 800a024:	4618      	mov	r0, r3
 800a026:	f001 f945 	bl	800b2b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a02a:	2301      	movs	r3, #1
 800a02c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a02e:	f002 f845 	bl	800c0bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a032:	f000 fe9b 	bl	800ad6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a036:	f002 f80f 	bl	800c058 <vPortEnterCritical>
 800a03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a040:	b25b      	sxtb	r3, r3
 800a042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a046:	d103      	bne.n	800a050 <xQueueGenericSend+0x174>
 800a048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a052:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a056:	b25b      	sxtb	r3, r3
 800a058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a05c:	d103      	bne.n	800a066 <xQueueGenericSend+0x18a>
 800a05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a060:	2200      	movs	r2, #0
 800a062:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a066:	f002 f829 	bl	800c0bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a06a:	1d3a      	adds	r2, r7, #4
 800a06c:	f107 0314 	add.w	r3, r7, #20
 800a070:	4611      	mov	r1, r2
 800a072:	4618      	mov	r0, r3
 800a074:	f001 f934 	bl	800b2e0 <xTaskCheckForTimeOut>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d124      	bne.n	800a0c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a07e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a080:	f000 faa6 	bl	800a5d0 <prvIsQueueFull>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d018      	beq.n	800a0bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08c:	3310      	adds	r3, #16
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	4611      	mov	r1, r2
 800a092:	4618      	mov	r0, r3
 800a094:	f001 f858 	bl	800b148 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a098:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a09a:	f000 fa31 	bl	800a500 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a09e:	f000 fe73 	bl	800ad88 <xTaskResumeAll>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f47f af7c 	bne.w	8009fa2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a0aa:	4b0c      	ldr	r3, [pc, #48]	@ (800a0dc <xQueueGenericSend+0x200>)
 800a0ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0b0:	601a      	str	r2, [r3, #0]
 800a0b2:	f3bf 8f4f 	dsb	sy
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	e772      	b.n	8009fa2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a0bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0be:	f000 fa1f 	bl	800a500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0c2:	f000 fe61 	bl	800ad88 <xTaskResumeAll>
 800a0c6:	e76c      	b.n	8009fa2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a0c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0ca:	f000 fa19 	bl	800a500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0ce:	f000 fe5b 	bl	800ad88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a0d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3738      	adds	r7, #56	@ 0x38
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	e000ed04 	.word	0xe000ed04

0800a0e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b090      	sub	sp, #64	@ 0x40
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
 800a0ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10b      	bne.n	800a110 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fc:	f383 8811 	msr	BASEPRI, r3
 800a100:	f3bf 8f6f 	isb	sy
 800a104:	f3bf 8f4f 	dsb	sy
 800a108:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a10a:	bf00      	nop
 800a10c:	bf00      	nop
 800a10e:	e7fd      	b.n	800a10c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d103      	bne.n	800a11e <xQueueGenericSendFromISR+0x3e>
 800a116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <xQueueGenericSendFromISR+0x42>
 800a11e:	2301      	movs	r3, #1
 800a120:	e000      	b.n	800a124 <xQueueGenericSendFromISR+0x44>
 800a122:	2300      	movs	r3, #0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10b      	bne.n	800a140 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a12c:	f383 8811 	msr	BASEPRI, r3
 800a130:	f3bf 8f6f 	isb	sy
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a13a:	bf00      	nop
 800a13c:	bf00      	nop
 800a13e:	e7fd      	b.n	800a13c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	2b02      	cmp	r3, #2
 800a144:	d103      	bne.n	800a14e <xQueueGenericSendFromISR+0x6e>
 800a146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d101      	bne.n	800a152 <xQueueGenericSendFromISR+0x72>
 800a14e:	2301      	movs	r3, #1
 800a150:	e000      	b.n	800a154 <xQueueGenericSendFromISR+0x74>
 800a152:	2300      	movs	r3, #0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10b      	bne.n	800a170 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a15c:	f383 8811 	msr	BASEPRI, r3
 800a160:	f3bf 8f6f 	isb	sy
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	623b      	str	r3, [r7, #32]
}
 800a16a:	bf00      	nop
 800a16c:	bf00      	nop
 800a16e:	e7fd      	b.n	800a16c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a170:	f002 f852 	bl	800c218 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a174:	f3ef 8211 	mrs	r2, BASEPRI
 800a178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a17c:	f383 8811 	msr	BASEPRI, r3
 800a180:	f3bf 8f6f 	isb	sy
 800a184:	f3bf 8f4f 	dsb	sy
 800a188:	61fa      	str	r2, [r7, #28]
 800a18a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a18c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a18e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a192:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a198:	429a      	cmp	r2, r3
 800a19a:	d302      	bcc.n	800a1a2 <xQueueGenericSendFromISR+0xc2>
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d12f      	bne.n	800a202 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a1a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a1a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1b2:	683a      	ldr	r2, [r7, #0]
 800a1b4:	68b9      	ldr	r1, [r7, #8]
 800a1b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a1b8:	f000 f912 	bl	800a3e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a1bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c4:	d112      	bne.n	800a1ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d016      	beq.n	800a1fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d0:	3324      	adds	r3, #36	@ 0x24
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f001 f80a 	bl	800b1ec <xTaskRemoveFromEventList>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00e      	beq.n	800a1fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00b      	beq.n	800a1fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	601a      	str	r2, [r3, #0]
 800a1ea:	e007      	b.n	800a1fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a1ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	b25a      	sxtb	r2, r3
 800a1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a200:	e001      	b.n	800a206 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a202:	2300      	movs	r3, #0
 800a204:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a208:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a210:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a214:	4618      	mov	r0, r3
 800a216:	3740      	adds	r7, #64	@ 0x40
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b08c      	sub	sp, #48	@ 0x30
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a228:	2300      	movs	r3, #0
 800a22a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a232:	2b00      	cmp	r3, #0
 800a234:	d10b      	bne.n	800a24e <xQueueReceive+0x32>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	623b      	str	r3, [r7, #32]
}
 800a248:	bf00      	nop
 800a24a:	bf00      	nop
 800a24c:	e7fd      	b.n	800a24a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d103      	bne.n	800a25c <xQueueReceive+0x40>
 800a254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <xQueueReceive+0x44>
 800a25c:	2301      	movs	r3, #1
 800a25e:	e000      	b.n	800a262 <xQueueReceive+0x46>
 800a260:	2300      	movs	r3, #0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10b      	bne.n	800a27e <xQueueReceive+0x62>
	__asm volatile
 800a266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	61fb      	str	r3, [r7, #28]
}
 800a278:	bf00      	nop
 800a27a:	bf00      	nop
 800a27c:	e7fd      	b.n	800a27a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a27e:	f001 f97b 	bl	800b578 <xTaskGetSchedulerState>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <xQueueReceive+0x72>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d101      	bne.n	800a292 <xQueueReceive+0x76>
 800a28e:	2301      	movs	r3, #1
 800a290:	e000      	b.n	800a294 <xQueueReceive+0x78>
 800a292:	2300      	movs	r3, #0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10b      	bne.n	800a2b0 <xQueueReceive+0x94>
	__asm volatile
 800a298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a29c:	f383 8811 	msr	BASEPRI, r3
 800a2a0:	f3bf 8f6f 	isb	sy
 800a2a4:	f3bf 8f4f 	dsb	sy
 800a2a8:	61bb      	str	r3, [r7, #24]
}
 800a2aa:	bf00      	nop
 800a2ac:	bf00      	nop
 800a2ae:	e7fd      	b.n	800a2ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2b0:	f001 fed2 	bl	800c058 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d01f      	beq.n	800a300 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2c0:	68b9      	ldr	r1, [r7, #8]
 800a2c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2c4:	f000 f8f6 	bl	800a4b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ca:	1e5a      	subs	r2, r3, #1
 800a2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00f      	beq.n	800a2f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2da:	3310      	adds	r3, #16
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f000 ff85 	bl	800b1ec <xTaskRemoveFromEventList>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d007      	beq.n	800a2f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a2e8:	4b3c      	ldr	r3, [pc, #240]	@ (800a3dc <xQueueReceive+0x1c0>)
 800a2ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a2f8:	f001 fee0 	bl	800c0bc <vPortExitCritical>
				return pdPASS;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e069      	b.n	800a3d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d103      	bne.n	800a30e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a306:	f001 fed9 	bl	800c0bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a30a:	2300      	movs	r3, #0
 800a30c:	e062      	b.n	800a3d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a310:	2b00      	cmp	r3, #0
 800a312:	d106      	bne.n	800a322 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a314:	f107 0310 	add.w	r3, r7, #16
 800a318:	4618      	mov	r0, r3
 800a31a:	f000 ffcb 	bl	800b2b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a31e:	2301      	movs	r3, #1
 800a320:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a322:	f001 fecb 	bl	800c0bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a326:	f000 fd21 	bl	800ad6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a32a:	f001 fe95 	bl	800c058 <vPortEnterCritical>
 800a32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a330:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a334:	b25b      	sxtb	r3, r3
 800a336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a33a:	d103      	bne.n	800a344 <xQueueReceive+0x128>
 800a33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33e:	2200      	movs	r2, #0
 800a340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a346:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a34a:	b25b      	sxtb	r3, r3
 800a34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a350:	d103      	bne.n	800a35a <xQueueReceive+0x13e>
 800a352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a354:	2200      	movs	r2, #0
 800a356:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a35a:	f001 feaf 	bl	800c0bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a35e:	1d3a      	adds	r2, r7, #4
 800a360:	f107 0310 	add.w	r3, r7, #16
 800a364:	4611      	mov	r1, r2
 800a366:	4618      	mov	r0, r3
 800a368:	f000 ffba 	bl	800b2e0 <xTaskCheckForTimeOut>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d123      	bne.n	800a3ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a372:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a374:	f000 f916 	bl	800a5a4 <prvIsQueueEmpty>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d017      	beq.n	800a3ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a380:	3324      	adds	r3, #36	@ 0x24
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	4611      	mov	r1, r2
 800a386:	4618      	mov	r0, r3
 800a388:	f000 fede 	bl	800b148 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a38c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a38e:	f000 f8b7 	bl	800a500 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a392:	f000 fcf9 	bl	800ad88 <xTaskResumeAll>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d189      	bne.n	800a2b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a39c:	4b0f      	ldr	r3, [pc, #60]	@ (800a3dc <xQueueReceive+0x1c0>)
 800a39e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3a2:	601a      	str	r2, [r3, #0]
 800a3a4:	f3bf 8f4f 	dsb	sy
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	e780      	b.n	800a2b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a3ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3b0:	f000 f8a6 	bl	800a500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3b4:	f000 fce8 	bl	800ad88 <xTaskResumeAll>
 800a3b8:	e77a      	b.n	800a2b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a3ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3bc:	f000 f8a0 	bl	800a500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3c0:	f000 fce2 	bl	800ad88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3c6:	f000 f8ed 	bl	800a5a4 <prvIsQueueEmpty>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f43f af6f 	beq.w	800a2b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a3d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3730      	adds	r7, #48	@ 0x30
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	e000ed04 	.word	0xe000ed04

0800a3e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10d      	bne.n	800a41a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d14d      	bne.n	800a4a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f001 f8d2 	bl	800b5b4 <xTaskPriorityDisinherit>
 800a410:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	609a      	str	r2, [r3, #8]
 800a418:	e043      	b.n	800a4a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d119      	bne.n	800a454 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6858      	ldr	r0, [r3, #4]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a428:	461a      	mov	r2, r3
 800a42a:	68b9      	ldr	r1, [r7, #8]
 800a42c:	f002 f9b6 	bl	800c79c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	685a      	ldr	r2, [r3, #4]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a438:	441a      	add	r2, r3
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	429a      	cmp	r2, r3
 800a448:	d32b      	bcc.n	800a4a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	605a      	str	r2, [r3, #4]
 800a452:	e026      	b.n	800a4a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	68d8      	ldr	r0, [r3, #12]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a45c:	461a      	mov	r2, r3
 800a45e:	68b9      	ldr	r1, [r7, #8]
 800a460:	f002 f99c 	bl	800c79c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	68da      	ldr	r2, [r3, #12]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a46c:	425b      	negs	r3, r3
 800a46e:	441a      	add	r2, r3
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	68da      	ldr	r2, [r3, #12]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d207      	bcs.n	800a490 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	689a      	ldr	r2, [r3, #8]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a488:	425b      	negs	r3, r3
 800a48a:	441a      	add	r2, r3
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2b02      	cmp	r3, #2
 800a494:	d105      	bne.n	800a4a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d002      	beq.n	800a4a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	1c5a      	adds	r2, r3, #1
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a4aa:	697b      	ldr	r3, [r7, #20]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3718      	adds	r7, #24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d018      	beq.n	800a4f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	68da      	ldr	r2, [r3, #12]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4ce:	441a      	add	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	68da      	ldr	r2, [r3, #12]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d303      	bcc.n	800a4e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	68d9      	ldr	r1, [r3, #12]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	6838      	ldr	r0, [r7, #0]
 800a4f4:	f002 f952 	bl	800c79c <memcpy>
	}
}
 800a4f8:	bf00      	nop
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a508:	f001 fda6 	bl	800c058 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a512:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a514:	e011      	b.n	800a53a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d012      	beq.n	800a544 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	3324      	adds	r3, #36	@ 0x24
 800a522:	4618      	mov	r0, r3
 800a524:	f000 fe62 	bl	800b1ec <xTaskRemoveFromEventList>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d001      	beq.n	800a532 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a52e:	f000 ff3b 	bl	800b3a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a532:	7bfb      	ldrb	r3, [r7, #15]
 800a534:	3b01      	subs	r3, #1
 800a536:	b2db      	uxtb	r3, r3
 800a538:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a53a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	dce9      	bgt.n	800a516 <prvUnlockQueue+0x16>
 800a542:	e000      	b.n	800a546 <prvUnlockQueue+0x46>
					break;
 800a544:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	22ff      	movs	r2, #255	@ 0xff
 800a54a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a54e:	f001 fdb5 	bl	800c0bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a552:	f001 fd81 	bl	800c058 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a55c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a55e:	e011      	b.n	800a584 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d012      	beq.n	800a58e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	3310      	adds	r3, #16
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 fe3d 	bl	800b1ec <xTaskRemoveFromEventList>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d001      	beq.n	800a57c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a578:	f000 ff16 	bl	800b3a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a57c:	7bbb      	ldrb	r3, [r7, #14]
 800a57e:	3b01      	subs	r3, #1
 800a580:	b2db      	uxtb	r3, r3
 800a582:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	dce9      	bgt.n	800a560 <prvUnlockQueue+0x60>
 800a58c:	e000      	b.n	800a590 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a58e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	22ff      	movs	r2, #255	@ 0xff
 800a594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a598:	f001 fd90 	bl	800c0bc <vPortExitCritical>
}
 800a59c:	bf00      	nop
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a5ac:	f001 fd54 	bl	800c058 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d102      	bne.n	800a5be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	60fb      	str	r3, [r7, #12]
 800a5bc:	e001      	b.n	800a5c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a5c2:	f001 fd7b 	bl	800c0bc <vPortExitCritical>

	return xReturn;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a5d8:	f001 fd3e 	bl	800c058 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d102      	bne.n	800a5ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	60fb      	str	r3, [r7, #12]
 800a5ec:	e001      	b.n	800a5f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a5f2:	f001 fd63 	bl	800c0bc <vPortExitCritical>

	return xReturn;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a60a:	2300      	movs	r3, #0
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	e014      	b.n	800a63a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a610:	4a0f      	ldr	r2, [pc, #60]	@ (800a650 <vQueueAddToRegistry+0x50>)
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10b      	bne.n	800a634 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a61c:	490c      	ldr	r1, [pc, #48]	@ (800a650 <vQueueAddToRegistry+0x50>)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	683a      	ldr	r2, [r7, #0]
 800a622:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a626:	4a0a      	ldr	r2, [pc, #40]	@ (800a650 <vQueueAddToRegistry+0x50>)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	00db      	lsls	r3, r3, #3
 800a62c:	4413      	add	r3, r2
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a632:	e006      	b.n	800a642 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	3301      	adds	r3, #1
 800a638:	60fb      	str	r3, [r7, #12]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2b07      	cmp	r3, #7
 800a63e:	d9e7      	bls.n	800a610 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a640:	bf00      	nop
 800a642:	bf00      	nop
 800a644:	3714      	adds	r7, #20
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	200011d8 	.word	0x200011d8

0800a654 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a654:	b580      	push	{r7, lr}
 800a656:	b086      	sub	sp, #24
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a664:	f001 fcf8 	bl	800c058 <vPortEnterCritical>
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a66e:	b25b      	sxtb	r3, r3
 800a670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a674:	d103      	bne.n	800a67e <vQueueWaitForMessageRestricted+0x2a>
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a684:	b25b      	sxtb	r3, r3
 800a686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a68a:	d103      	bne.n	800a694 <vQueueWaitForMessageRestricted+0x40>
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a694:	f001 fd12 	bl	800c0bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d106      	bne.n	800a6ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	3324      	adds	r3, #36	@ 0x24
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	68b9      	ldr	r1, [r7, #8]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f000 fd73 	bl	800b194 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a6ae:	6978      	ldr	r0, [r7, #20]
 800a6b0:	f7ff ff26 	bl	800a500 <prvUnlockQueue>
	}
 800a6b4:	bf00      	nop
 800a6b6:	3718      	adds	r7, #24
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b08e      	sub	sp, #56	@ 0x38
 800a6c0:	af04      	add	r7, sp, #16
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	607a      	str	r2, [r7, #4]
 800a6c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a6ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d10b      	bne.n	800a6e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	623b      	str	r3, [r7, #32]
}
 800a6e2:	bf00      	nop
 800a6e4:	bf00      	nop
 800a6e6:	e7fd      	b.n	800a6e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d10b      	bne.n	800a706 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f2:	f383 8811 	msr	BASEPRI, r3
 800a6f6:	f3bf 8f6f 	isb	sy
 800a6fa:	f3bf 8f4f 	dsb	sy
 800a6fe:	61fb      	str	r3, [r7, #28]
}
 800a700:	bf00      	nop
 800a702:	bf00      	nop
 800a704:	e7fd      	b.n	800a702 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a706:	23a8      	movs	r3, #168	@ 0xa8
 800a708:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	2ba8      	cmp	r3, #168	@ 0xa8
 800a70e:	d00b      	beq.n	800a728 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	61bb      	str	r3, [r7, #24]
}
 800a722:	bf00      	nop
 800a724:	bf00      	nop
 800a726:	e7fd      	b.n	800a724 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a728:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d01e      	beq.n	800a76e <xTaskCreateStatic+0xb2>
 800a730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a732:	2b00      	cmp	r3, #0
 800a734:	d01b      	beq.n	800a76e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a738:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a73e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a742:	2202      	movs	r2, #2
 800a744:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a748:	2300      	movs	r3, #0
 800a74a:	9303      	str	r3, [sp, #12]
 800a74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74e:	9302      	str	r3, [sp, #8]
 800a750:	f107 0314 	add.w	r3, r7, #20
 800a754:	9301      	str	r3, [sp, #4]
 800a756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	68b9      	ldr	r1, [r7, #8]
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f000 f851 	bl	800a808 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a766:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a768:	f000 f8f6 	bl	800a958 <prvAddNewTaskToReadyList>
 800a76c:	e001      	b.n	800a772 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a76e:	2300      	movs	r3, #0
 800a770:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a772:	697b      	ldr	r3, [r7, #20]
	}
 800a774:	4618      	mov	r0, r3
 800a776:	3728      	adds	r7, #40	@ 0x28
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b08c      	sub	sp, #48	@ 0x30
 800a780:	af04      	add	r7, sp, #16
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	603b      	str	r3, [r7, #0]
 800a788:	4613      	mov	r3, r2
 800a78a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a78c:	88fb      	ldrh	r3, [r7, #6]
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4618      	mov	r0, r3
 800a792:	f001 fd83 	bl	800c29c <pvPortMalloc>
 800a796:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00e      	beq.n	800a7bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a79e:	20a8      	movs	r0, #168	@ 0xa8
 800a7a0:	f001 fd7c 	bl	800c29c <pvPortMalloc>
 800a7a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a7a6:	69fb      	ldr	r3, [r7, #28]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d003      	beq.n	800a7b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	697a      	ldr	r2, [r7, #20]
 800a7b0:	631a      	str	r2, [r3, #48]	@ 0x30
 800a7b2:	e005      	b.n	800a7c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a7b4:	6978      	ldr	r0, [r7, #20]
 800a7b6:	f001 fe3f 	bl	800c438 <vPortFree>
 800a7ba:	e001      	b.n	800a7c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d017      	beq.n	800a7f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a7ce:	88fa      	ldrh	r2, [r7, #6]
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	9303      	str	r3, [sp, #12]
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	9302      	str	r3, [sp, #8]
 800a7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7da:	9301      	str	r3, [sp, #4]
 800a7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7de:	9300      	str	r3, [sp, #0]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	68b9      	ldr	r1, [r7, #8]
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f000 f80f 	bl	800a808 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7ea:	69f8      	ldr	r0, [r7, #28]
 800a7ec:	f000 f8b4 	bl	800a958 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	61bb      	str	r3, [r7, #24]
 800a7f4:	e002      	b.n	800a7fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a7f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a7fc:	69bb      	ldr	r3, [r7, #24]
	}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3720      	adds	r7, #32
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
	...

0800a808 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b088      	sub	sp, #32
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	607a      	str	r2, [r7, #4]
 800a814:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a818:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	461a      	mov	r2, r3
 800a820:	21a5      	movs	r1, #165	@ 0xa5
 800a822:	f001 ff29 	bl	800c678 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a830:	3b01      	subs	r3, #1
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4413      	add	r3, r2
 800a836:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	f023 0307 	bic.w	r3, r3, #7
 800a83e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	f003 0307 	and.w	r3, r3, #7
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00b      	beq.n	800a862 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	617b      	str	r3, [r7, #20]
}
 800a85c:	bf00      	nop
 800a85e:	bf00      	nop
 800a860:	e7fd      	b.n	800a85e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d01f      	beq.n	800a8a8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a868:	2300      	movs	r3, #0
 800a86a:	61fb      	str	r3, [r7, #28]
 800a86c:	e012      	b.n	800a894 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	4413      	add	r3, r2
 800a874:	7819      	ldrb	r1, [r3, #0]
 800a876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	4413      	add	r3, r2
 800a87c:	3334      	adds	r3, #52	@ 0x34
 800a87e:	460a      	mov	r2, r1
 800a880:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	4413      	add	r3, r2
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d006      	beq.n	800a89c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	3301      	adds	r3, #1
 800a892:	61fb      	str	r3, [r7, #28]
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	2b0f      	cmp	r3, #15
 800a898:	d9e9      	bls.n	800a86e <prvInitialiseNewTask+0x66>
 800a89a:	e000      	b.n	800a89e <prvInitialiseNewTask+0x96>
			{
				break;
 800a89c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a8a6:	e003      	b.n	800a8b0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a8b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8b2:	2b37      	cmp	r3, #55	@ 0x37
 800a8b4:	d901      	bls.n	800a8ba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a8b6:	2337      	movs	r3, #55	@ 0x37
 800a8b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8c4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a8cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ce:	3304      	adds	r3, #4
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7ff f965 	bl	8009ba0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d8:	3318      	adds	r3, #24
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7ff f960 	bl	8009ba0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a8e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a8f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a900:	2200      	movs	r2, #0
 800a902:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a908:	3354      	adds	r3, #84	@ 0x54
 800a90a:	224c      	movs	r2, #76	@ 0x4c
 800a90c:	2100      	movs	r1, #0
 800a90e:	4618      	mov	r0, r3
 800a910:	f001 feb2 	bl	800c678 <memset>
 800a914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a916:	4a0d      	ldr	r2, [pc, #52]	@ (800a94c <prvInitialiseNewTask+0x144>)
 800a918:	659a      	str	r2, [r3, #88]	@ 0x58
 800a91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a91c:	4a0c      	ldr	r2, [pc, #48]	@ (800a950 <prvInitialiseNewTask+0x148>)
 800a91e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a922:	4a0c      	ldr	r2, [pc, #48]	@ (800a954 <prvInitialiseNewTask+0x14c>)
 800a924:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a926:	683a      	ldr	r2, [r7, #0]
 800a928:	68f9      	ldr	r1, [r7, #12]
 800a92a:	69b8      	ldr	r0, [r7, #24]
 800a92c:	f001 fa60 	bl	800bdf0 <pxPortInitialiseStack>
 800a930:	4602      	mov	r2, r0
 800a932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a934:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d002      	beq.n	800a942 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a93c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a93e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a940:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a942:	bf00      	nop
 800a944:	3720      	adds	r7, #32
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	2000246c 	.word	0x2000246c
 800a950:	200024d4 	.word	0x200024d4
 800a954:	2000253c 	.word	0x2000253c

0800a958 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a960:	f001 fb7a 	bl	800c058 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a964:	4b2d      	ldr	r3, [pc, #180]	@ (800aa1c <prvAddNewTaskToReadyList+0xc4>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	3301      	adds	r3, #1
 800a96a:	4a2c      	ldr	r2, [pc, #176]	@ (800aa1c <prvAddNewTaskToReadyList+0xc4>)
 800a96c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a96e:	4b2c      	ldr	r3, [pc, #176]	@ (800aa20 <prvAddNewTaskToReadyList+0xc8>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d109      	bne.n	800a98a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a976:	4a2a      	ldr	r2, [pc, #168]	@ (800aa20 <prvAddNewTaskToReadyList+0xc8>)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a97c:	4b27      	ldr	r3, [pc, #156]	@ (800aa1c <prvAddNewTaskToReadyList+0xc4>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b01      	cmp	r3, #1
 800a982:	d110      	bne.n	800a9a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a984:	f000 fd34 	bl	800b3f0 <prvInitialiseTaskLists>
 800a988:	e00d      	b.n	800a9a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a98a:	4b26      	ldr	r3, [pc, #152]	@ (800aa24 <prvAddNewTaskToReadyList+0xcc>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d109      	bne.n	800a9a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a992:	4b23      	ldr	r3, [pc, #140]	@ (800aa20 <prvAddNewTaskToReadyList+0xc8>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d802      	bhi.n	800a9a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a9a0:	4a1f      	ldr	r2, [pc, #124]	@ (800aa20 <prvAddNewTaskToReadyList+0xc8>)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a9a6:	4b20      	ldr	r3, [pc, #128]	@ (800aa28 <prvAddNewTaskToReadyList+0xd0>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	4a1e      	ldr	r2, [pc, #120]	@ (800aa28 <prvAddNewTaskToReadyList+0xd0>)
 800a9ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a9b0:	4b1d      	ldr	r3, [pc, #116]	@ (800aa28 <prvAddNewTaskToReadyList+0xd0>)
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9bc:	4b1b      	ldr	r3, [pc, #108]	@ (800aa2c <prvAddNewTaskToReadyList+0xd4>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d903      	bls.n	800a9cc <prvAddNewTaskToReadyList+0x74>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9c8:	4a18      	ldr	r2, [pc, #96]	@ (800aa2c <prvAddNewTaskToReadyList+0xd4>)
 800a9ca:	6013      	str	r3, [r2, #0]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4413      	add	r3, r2
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	4a15      	ldr	r2, [pc, #84]	@ (800aa30 <prvAddNewTaskToReadyList+0xd8>)
 800a9da:	441a      	add	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	3304      	adds	r3, #4
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	4610      	mov	r0, r2
 800a9e4:	f7ff f8e9 	bl	8009bba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a9e8:	f001 fb68 	bl	800c0bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a9ec:	4b0d      	ldr	r3, [pc, #52]	@ (800aa24 <prvAddNewTaskToReadyList+0xcc>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00e      	beq.n	800aa12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a9f4:	4b0a      	ldr	r3, [pc, #40]	@ (800aa20 <prvAddNewTaskToReadyList+0xc8>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d207      	bcs.n	800aa12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa02:	4b0c      	ldr	r3, [pc, #48]	@ (800aa34 <prvAddNewTaskToReadyList+0xdc>)
 800aa04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa08:	601a      	str	r2, [r3, #0]
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa12:	bf00      	nop
 800aa14:	3708      	adds	r7, #8
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	200016ec 	.word	0x200016ec
 800aa20:	20001218 	.word	0x20001218
 800aa24:	200016f8 	.word	0x200016f8
 800aa28:	20001708 	.word	0x20001708
 800aa2c:	200016f4 	.word	0x200016f4
 800aa30:	2000121c 	.word	0x2000121c
 800aa34:	e000ed04 	.word	0xe000ed04

0800aa38 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800aa40:	f001 fb0a 	bl	800c058 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d102      	bne.n	800aa50 <vTaskDelete+0x18>
 800aa4a:	4b2d      	ldr	r3, [pc, #180]	@ (800ab00 <vTaskDelete+0xc8>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	e000      	b.n	800aa52 <vTaskDelete+0x1a>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	3304      	adds	r3, #4
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7ff f90b 	bl	8009c74 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d004      	beq.n	800aa70 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3318      	adds	r3, #24
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7ff f902 	bl	8009c74 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800aa70:	4b24      	ldr	r3, [pc, #144]	@ (800ab04 <vTaskDelete+0xcc>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	3301      	adds	r3, #1
 800aa76:	4a23      	ldr	r2, [pc, #140]	@ (800ab04 <vTaskDelete+0xcc>)
 800aa78:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800aa7a:	4b21      	ldr	r3, [pc, #132]	@ (800ab00 <vTaskDelete+0xc8>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d10b      	bne.n	800aa9c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	3304      	adds	r3, #4
 800aa88:	4619      	mov	r1, r3
 800aa8a:	481f      	ldr	r0, [pc, #124]	@ (800ab08 <vTaskDelete+0xd0>)
 800aa8c:	f7ff f895 	bl	8009bba <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800aa90:	4b1e      	ldr	r3, [pc, #120]	@ (800ab0c <vTaskDelete+0xd4>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	3301      	adds	r3, #1
 800aa96:	4a1d      	ldr	r2, [pc, #116]	@ (800ab0c <vTaskDelete+0xd4>)
 800aa98:	6013      	str	r3, [r2, #0]
 800aa9a:	e009      	b.n	800aab0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800aa9c:	4b1c      	ldr	r3, [pc, #112]	@ (800ab10 <vTaskDelete+0xd8>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	4a1b      	ldr	r2, [pc, #108]	@ (800ab10 <vTaskDelete+0xd8>)
 800aaa4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f000 fd10 	bl	800b4cc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800aaac:	f000 fd44 	bl	800b538 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800aab0:	f001 fb04 	bl	800c0bc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800aab4:	4b17      	ldr	r3, [pc, #92]	@ (800ab14 <vTaskDelete+0xdc>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d01c      	beq.n	800aaf6 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800aabc:	4b10      	ldr	r3, [pc, #64]	@ (800ab00 <vTaskDelete+0xc8>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d117      	bne.n	800aaf6 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800aac6:	4b14      	ldr	r3, [pc, #80]	@ (800ab18 <vTaskDelete+0xe0>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00b      	beq.n	800aae6 <vTaskDelete+0xae>
	__asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	60bb      	str	r3, [r7, #8]
}
 800aae0:	bf00      	nop
 800aae2:	bf00      	nop
 800aae4:	e7fd      	b.n	800aae2 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800aae6:	4b0d      	ldr	r3, [pc, #52]	@ (800ab1c <vTaskDelete+0xe4>)
 800aae8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aaec:	601a      	str	r2, [r3, #0]
 800aaee:	f3bf 8f4f 	dsb	sy
 800aaf2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aaf6:	bf00      	nop
 800aaf8:	3710      	adds	r7, #16
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	20001218 	.word	0x20001218
 800ab04:	20001708 	.word	0x20001708
 800ab08:	200016c0 	.word	0x200016c0
 800ab0c:	200016d4 	.word	0x200016d4
 800ab10:	200016ec 	.word	0x200016ec
 800ab14:	200016f8 	.word	0x200016f8
 800ab18:	20001714 	.word	0x20001714
 800ab1c:	e000ed04 	.word	0xe000ed04

0800ab20 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b08a      	sub	sp, #40	@ 0x28
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10b      	bne.n	800ab4c <vTaskDelayUntil+0x2c>
	__asm volatile
 800ab34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab38:	f383 8811 	msr	BASEPRI, r3
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	617b      	str	r3, [r7, #20]
}
 800ab46:	bf00      	nop
 800ab48:	bf00      	nop
 800ab4a:	e7fd      	b.n	800ab48 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10b      	bne.n	800ab6a <vTaskDelayUntil+0x4a>
	__asm volatile
 800ab52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab56:	f383 8811 	msr	BASEPRI, r3
 800ab5a:	f3bf 8f6f 	isb	sy
 800ab5e:	f3bf 8f4f 	dsb	sy
 800ab62:	613b      	str	r3, [r7, #16]
}
 800ab64:	bf00      	nop
 800ab66:	bf00      	nop
 800ab68:	e7fd      	b.n	800ab66 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800ab6a:	4b2a      	ldr	r3, [pc, #168]	@ (800ac14 <vTaskDelayUntil+0xf4>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00b      	beq.n	800ab8a <vTaskDelayUntil+0x6a>
	__asm volatile
 800ab72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab76:	f383 8811 	msr	BASEPRI, r3
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	60fb      	str	r3, [r7, #12]
}
 800ab84:	bf00      	nop
 800ab86:	bf00      	nop
 800ab88:	e7fd      	b.n	800ab86 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800ab8a:	f000 f8ef 	bl	800ad6c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ab8e:	4b22      	ldr	r3, [pc, #136]	@ (800ac18 <vTaskDelayUntil+0xf8>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	683a      	ldr	r2, [r7, #0]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	6a3a      	ldr	r2, [r7, #32]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d20b      	bcs.n	800abc0 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	69fa      	ldr	r2, [r7, #28]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d211      	bcs.n	800abd6 <vTaskDelayUntil+0xb6>
 800abb2:	69fa      	ldr	r2, [r7, #28]
 800abb4:	6a3b      	ldr	r3, [r7, #32]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d90d      	bls.n	800abd6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800abba:	2301      	movs	r3, #1
 800abbc:	627b      	str	r3, [r7, #36]	@ 0x24
 800abbe:	e00a      	b.n	800abd6 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	69fa      	ldr	r2, [r7, #28]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d303      	bcc.n	800abd2 <vTaskDelayUntil+0xb2>
 800abca:	69fa      	ldr	r2, [r7, #28]
 800abcc:	6a3b      	ldr	r3, [r7, #32]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d901      	bls.n	800abd6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800abd2:	2301      	movs	r3, #1
 800abd4:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	69fa      	ldr	r2, [r7, #28]
 800abda:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800abdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d006      	beq.n	800abf0 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800abe2:	69fa      	ldr	r2, [r7, #28]
 800abe4:	6a3b      	ldr	r3, [r7, #32]
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	2100      	movs	r1, #0
 800abea:	4618      	mov	r0, r3
 800abec:	f000 fd52 	bl	800b694 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800abf0:	f000 f8ca 	bl	800ad88 <xTaskResumeAll>
 800abf4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d107      	bne.n	800ac0c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800abfc:	4b07      	ldr	r3, [pc, #28]	@ (800ac1c <vTaskDelayUntil+0xfc>)
 800abfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac0c:	bf00      	nop
 800ac0e:	3728      	adds	r7, #40	@ 0x28
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	20001714 	.word	0x20001714
 800ac18:	200016f0 	.word	0x200016f0
 800ac1c:	e000ed04 	.word	0xe000ed04

0800ac20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d018      	beq.n	800ac64 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac32:	4b14      	ldr	r3, [pc, #80]	@ (800ac84 <vTaskDelay+0x64>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00b      	beq.n	800ac52 <vTaskDelay+0x32>
	__asm volatile
 800ac3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac3e:	f383 8811 	msr	BASEPRI, r3
 800ac42:	f3bf 8f6f 	isb	sy
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	60bb      	str	r3, [r7, #8]
}
 800ac4c:	bf00      	nop
 800ac4e:	bf00      	nop
 800ac50:	e7fd      	b.n	800ac4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ac52:	f000 f88b 	bl	800ad6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac56:	2100      	movs	r1, #0
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 fd1b 	bl	800b694 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac5e:	f000 f893 	bl	800ad88 <xTaskResumeAll>
 800ac62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d107      	bne.n	800ac7a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ac6a:	4b07      	ldr	r3, [pc, #28]	@ (800ac88 <vTaskDelay+0x68>)
 800ac6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac70:	601a      	str	r2, [r3, #0]
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac7a:	bf00      	nop
 800ac7c:	3710      	adds	r7, #16
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	20001714 	.word	0x20001714
 800ac88:	e000ed04 	.word	0xe000ed04

0800ac8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b08a      	sub	sp, #40	@ 0x28
 800ac90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac92:	2300      	movs	r3, #0
 800ac94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac96:	2300      	movs	r3, #0
 800ac98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac9a:	463a      	mov	r2, r7
 800ac9c:	1d39      	adds	r1, r7, #4
 800ac9e:	f107 0308 	add.w	r3, r7, #8
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fe ff28 	bl	8009af8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aca8:	6839      	ldr	r1, [r7, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	9202      	str	r2, [sp, #8]
 800acb0:	9301      	str	r3, [sp, #4]
 800acb2:	2300      	movs	r3, #0
 800acb4:	9300      	str	r3, [sp, #0]
 800acb6:	2300      	movs	r3, #0
 800acb8:	460a      	mov	r2, r1
 800acba:	4924      	ldr	r1, [pc, #144]	@ (800ad4c <vTaskStartScheduler+0xc0>)
 800acbc:	4824      	ldr	r0, [pc, #144]	@ (800ad50 <vTaskStartScheduler+0xc4>)
 800acbe:	f7ff fcfd 	bl	800a6bc <xTaskCreateStatic>
 800acc2:	4603      	mov	r3, r0
 800acc4:	4a23      	ldr	r2, [pc, #140]	@ (800ad54 <vTaskStartScheduler+0xc8>)
 800acc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800acc8:	4b22      	ldr	r3, [pc, #136]	@ (800ad54 <vTaskStartScheduler+0xc8>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d002      	beq.n	800acd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800acd0:	2301      	movs	r3, #1
 800acd2:	617b      	str	r3, [r7, #20]
 800acd4:	e001      	b.n	800acda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800acd6:	2300      	movs	r3, #0
 800acd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d102      	bne.n	800ace6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ace0:	f000 fd2c 	bl	800b73c <xTimerCreateTimerTask>
 800ace4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d11b      	bne.n	800ad24 <vTaskStartScheduler+0x98>
	__asm volatile
 800acec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acf0:	f383 8811 	msr	BASEPRI, r3
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	613b      	str	r3, [r7, #16]
}
 800acfe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad00:	4b15      	ldr	r3, [pc, #84]	@ (800ad58 <vTaskStartScheduler+0xcc>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	3354      	adds	r3, #84	@ 0x54
 800ad06:	4a15      	ldr	r2, [pc, #84]	@ (800ad5c <vTaskStartScheduler+0xd0>)
 800ad08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ad0a:	4b15      	ldr	r3, [pc, #84]	@ (800ad60 <vTaskStartScheduler+0xd4>)
 800ad0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad12:	4b14      	ldr	r3, [pc, #80]	@ (800ad64 <vTaskStartScheduler+0xd8>)
 800ad14:	2201      	movs	r2, #1
 800ad16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad18:	4b13      	ldr	r3, [pc, #76]	@ (800ad68 <vTaskStartScheduler+0xdc>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ad1e:	f001 f8f7 	bl	800bf10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad22:	e00f      	b.n	800ad44 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad2a:	d10b      	bne.n	800ad44 <vTaskStartScheduler+0xb8>
	__asm volatile
 800ad2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad30:	f383 8811 	msr	BASEPRI, r3
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	60fb      	str	r3, [r7, #12]
}
 800ad3e:	bf00      	nop
 800ad40:	bf00      	nop
 800ad42:	e7fd      	b.n	800ad40 <vTaskStartScheduler+0xb4>
}
 800ad44:	bf00      	nop
 800ad46:	3718      	adds	r7, #24
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	0800c8e0 	.word	0x0800c8e0
 800ad50:	0800b3c1 	.word	0x0800b3c1
 800ad54:	20001710 	.word	0x20001710
 800ad58:	20001218 	.word	0x20001218
 800ad5c:	2000024c 	.word	0x2000024c
 800ad60:	2000170c 	.word	0x2000170c
 800ad64:	200016f8 	.word	0x200016f8
 800ad68:	200016f0 	.word	0x200016f0

0800ad6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ad70:	4b04      	ldr	r3, [pc, #16]	@ (800ad84 <vTaskSuspendAll+0x18>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	3301      	adds	r3, #1
 800ad76:	4a03      	ldr	r2, [pc, #12]	@ (800ad84 <vTaskSuspendAll+0x18>)
 800ad78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ad7a:	bf00      	nop
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr
 800ad84:	20001714 	.word	0x20001714

0800ad88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad92:	2300      	movs	r3, #0
 800ad94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad96:	4b42      	ldr	r3, [pc, #264]	@ (800aea0 <xTaskResumeAll+0x118>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d10b      	bne.n	800adb6 <xTaskResumeAll+0x2e>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	603b      	str	r3, [r7, #0]
}
 800adb0:	bf00      	nop
 800adb2:	bf00      	nop
 800adb4:	e7fd      	b.n	800adb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800adb6:	f001 f94f 	bl	800c058 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800adba:	4b39      	ldr	r3, [pc, #228]	@ (800aea0 <xTaskResumeAll+0x118>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	3b01      	subs	r3, #1
 800adc0:	4a37      	ldr	r2, [pc, #220]	@ (800aea0 <xTaskResumeAll+0x118>)
 800adc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adc4:	4b36      	ldr	r3, [pc, #216]	@ (800aea0 <xTaskResumeAll+0x118>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d162      	bne.n	800ae92 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800adcc:	4b35      	ldr	r3, [pc, #212]	@ (800aea4 <xTaskResumeAll+0x11c>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d05e      	beq.n	800ae92 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800add4:	e02f      	b.n	800ae36 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800add6:	4b34      	ldr	r3, [pc, #208]	@ (800aea8 <xTaskResumeAll+0x120>)
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	3318      	adds	r3, #24
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fe ff46 	bl	8009c74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	3304      	adds	r3, #4
 800adec:	4618      	mov	r0, r3
 800adee:	f7fe ff41 	bl	8009c74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adf6:	4b2d      	ldr	r3, [pc, #180]	@ (800aeac <xTaskResumeAll+0x124>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d903      	bls.n	800ae06 <xTaskResumeAll+0x7e>
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae02:	4a2a      	ldr	r2, [pc, #168]	@ (800aeac <xTaskResumeAll+0x124>)
 800ae04:	6013      	str	r3, [r2, #0]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4413      	add	r3, r2
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	4a27      	ldr	r2, [pc, #156]	@ (800aeb0 <xTaskResumeAll+0x128>)
 800ae14:	441a      	add	r2, r3
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	3304      	adds	r3, #4
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	4610      	mov	r0, r2
 800ae1e:	f7fe fecc 	bl	8009bba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae26:	4b23      	ldr	r3, [pc, #140]	@ (800aeb4 <xTaskResumeAll+0x12c>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d302      	bcc.n	800ae36 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ae30:	4b21      	ldr	r3, [pc, #132]	@ (800aeb8 <xTaskResumeAll+0x130>)
 800ae32:	2201      	movs	r2, #1
 800ae34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae36:	4b1c      	ldr	r3, [pc, #112]	@ (800aea8 <xTaskResumeAll+0x120>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d1cb      	bne.n	800add6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d001      	beq.n	800ae48 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae44:	f000 fb78 	bl	800b538 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ae48:	4b1c      	ldr	r3, [pc, #112]	@ (800aebc <xTaskResumeAll+0x134>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d010      	beq.n	800ae76 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ae54:	f000 f858 	bl	800af08 <xTaskIncrementTick>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d002      	beq.n	800ae64 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ae5e:	4b16      	ldr	r3, [pc, #88]	@ (800aeb8 <xTaskResumeAll+0x130>)
 800ae60:	2201      	movs	r2, #1
 800ae62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	3b01      	subs	r3, #1
 800ae68:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d1f1      	bne.n	800ae54 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ae70:	4b12      	ldr	r3, [pc, #72]	@ (800aebc <xTaskResumeAll+0x134>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ae76:	4b10      	ldr	r3, [pc, #64]	@ (800aeb8 <xTaskResumeAll+0x130>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d009      	beq.n	800ae92 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae82:	4b0f      	ldr	r3, [pc, #60]	@ (800aec0 <xTaskResumeAll+0x138>)
 800ae84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae88:	601a      	str	r2, [r3, #0]
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae92:	f001 f913 	bl	800c0bc <vPortExitCritical>

	return xAlreadyYielded;
 800ae96:	68bb      	ldr	r3, [r7, #8]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3710      	adds	r7, #16
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	20001714 	.word	0x20001714
 800aea4:	200016ec 	.word	0x200016ec
 800aea8:	200016ac 	.word	0x200016ac
 800aeac:	200016f4 	.word	0x200016f4
 800aeb0:	2000121c 	.word	0x2000121c
 800aeb4:	20001218 	.word	0x20001218
 800aeb8:	20001700 	.word	0x20001700
 800aebc:	200016fc 	.word	0x200016fc
 800aec0:	e000ed04 	.word	0xe000ed04

0800aec4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aeca:	4b05      	ldr	r3, [pc, #20]	@ (800aee0 <xTaskGetTickCount+0x1c>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aed0:	687b      	ldr	r3, [r7, #4]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	200016f0 	.word	0x200016f0

0800aee4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aeea:	f001 f995 	bl	800c218 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800aeee:	2300      	movs	r3, #0
 800aef0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800aef2:	4b04      	ldr	r3, [pc, #16]	@ (800af04 <xTaskGetTickCountFromISR+0x20>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aef8:	683b      	ldr	r3, [r7, #0]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	200016f0 	.word	0x200016f0

0800af08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800af0e:	2300      	movs	r3, #0
 800af10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af12:	4b4f      	ldr	r3, [pc, #316]	@ (800b050 <xTaskIncrementTick+0x148>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	f040 8090 	bne.w	800b03c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800af1c:	4b4d      	ldr	r3, [pc, #308]	@ (800b054 <xTaskIncrementTick+0x14c>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	3301      	adds	r3, #1
 800af22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800af24:	4a4b      	ldr	r2, [pc, #300]	@ (800b054 <xTaskIncrementTick+0x14c>)
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d121      	bne.n	800af74 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800af30:	4b49      	ldr	r3, [pc, #292]	@ (800b058 <xTaskIncrementTick+0x150>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00b      	beq.n	800af52 <xTaskIncrementTick+0x4a>
	__asm volatile
 800af3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af3e:	f383 8811 	msr	BASEPRI, r3
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	f3bf 8f4f 	dsb	sy
 800af4a:	603b      	str	r3, [r7, #0]
}
 800af4c:	bf00      	nop
 800af4e:	bf00      	nop
 800af50:	e7fd      	b.n	800af4e <xTaskIncrementTick+0x46>
 800af52:	4b41      	ldr	r3, [pc, #260]	@ (800b058 <xTaskIncrementTick+0x150>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	60fb      	str	r3, [r7, #12]
 800af58:	4b40      	ldr	r3, [pc, #256]	@ (800b05c <xTaskIncrementTick+0x154>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a3e      	ldr	r2, [pc, #248]	@ (800b058 <xTaskIncrementTick+0x150>)
 800af5e:	6013      	str	r3, [r2, #0]
 800af60:	4a3e      	ldr	r2, [pc, #248]	@ (800b05c <xTaskIncrementTick+0x154>)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6013      	str	r3, [r2, #0]
 800af66:	4b3e      	ldr	r3, [pc, #248]	@ (800b060 <xTaskIncrementTick+0x158>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	3301      	adds	r3, #1
 800af6c:	4a3c      	ldr	r2, [pc, #240]	@ (800b060 <xTaskIncrementTick+0x158>)
 800af6e:	6013      	str	r3, [r2, #0]
 800af70:	f000 fae2 	bl	800b538 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800af74:	4b3b      	ldr	r3, [pc, #236]	@ (800b064 <xTaskIncrementTick+0x15c>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	693a      	ldr	r2, [r7, #16]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d349      	bcc.n	800b012 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af7e:	4b36      	ldr	r3, [pc, #216]	@ (800b058 <xTaskIncrementTick+0x150>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d104      	bne.n	800af92 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af88:	4b36      	ldr	r3, [pc, #216]	@ (800b064 <xTaskIncrementTick+0x15c>)
 800af8a:	f04f 32ff 	mov.w	r2, #4294967295
 800af8e:	601a      	str	r2, [r3, #0]
					break;
 800af90:	e03f      	b.n	800b012 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af92:	4b31      	ldr	r3, [pc, #196]	@ (800b058 <xTaskIncrementTick+0x150>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800afa2:	693a      	ldr	r2, [r7, #16]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d203      	bcs.n	800afb2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800afaa:	4a2e      	ldr	r2, [pc, #184]	@ (800b064 <xTaskIncrementTick+0x15c>)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800afb0:	e02f      	b.n	800b012 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	3304      	adds	r3, #4
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fe fe5c 	bl	8009c74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d004      	beq.n	800afce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	3318      	adds	r3, #24
 800afc8:	4618      	mov	r0, r3
 800afca:	f7fe fe53 	bl	8009c74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afd2:	4b25      	ldr	r3, [pc, #148]	@ (800b068 <xTaskIncrementTick+0x160>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d903      	bls.n	800afe2 <xTaskIncrementTick+0xda>
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afde:	4a22      	ldr	r2, [pc, #136]	@ (800b068 <xTaskIncrementTick+0x160>)
 800afe0:	6013      	str	r3, [r2, #0]
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afe6:	4613      	mov	r3, r2
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	4413      	add	r3, r2
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	4a1f      	ldr	r2, [pc, #124]	@ (800b06c <xTaskIncrementTick+0x164>)
 800aff0:	441a      	add	r2, r3
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	3304      	adds	r3, #4
 800aff6:	4619      	mov	r1, r3
 800aff8:	4610      	mov	r0, r2
 800affa:	f7fe fdde 	bl	8009bba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b002:	4b1b      	ldr	r3, [pc, #108]	@ (800b070 <xTaskIncrementTick+0x168>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b008:	429a      	cmp	r2, r3
 800b00a:	d3b8      	bcc.n	800af7e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b00c:	2301      	movs	r3, #1
 800b00e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b010:	e7b5      	b.n	800af7e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b012:	4b17      	ldr	r3, [pc, #92]	@ (800b070 <xTaskIncrementTick+0x168>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b018:	4914      	ldr	r1, [pc, #80]	@ (800b06c <xTaskIncrementTick+0x164>)
 800b01a:	4613      	mov	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4413      	add	r3, r2
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	440b      	add	r3, r1
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b01      	cmp	r3, #1
 800b028:	d901      	bls.n	800b02e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b02a:	2301      	movs	r3, #1
 800b02c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b02e:	4b11      	ldr	r3, [pc, #68]	@ (800b074 <xTaskIncrementTick+0x16c>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d007      	beq.n	800b046 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b036:	2301      	movs	r3, #1
 800b038:	617b      	str	r3, [r7, #20]
 800b03a:	e004      	b.n	800b046 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b03c:	4b0e      	ldr	r3, [pc, #56]	@ (800b078 <xTaskIncrementTick+0x170>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	3301      	adds	r3, #1
 800b042:	4a0d      	ldr	r2, [pc, #52]	@ (800b078 <xTaskIncrementTick+0x170>)
 800b044:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b046:	697b      	ldr	r3, [r7, #20]
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3718      	adds	r7, #24
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	20001714 	.word	0x20001714
 800b054:	200016f0 	.word	0x200016f0
 800b058:	200016a4 	.word	0x200016a4
 800b05c:	200016a8 	.word	0x200016a8
 800b060:	20001704 	.word	0x20001704
 800b064:	2000170c 	.word	0x2000170c
 800b068:	200016f4 	.word	0x200016f4
 800b06c:	2000121c 	.word	0x2000121c
 800b070:	20001218 	.word	0x20001218
 800b074:	20001700 	.word	0x20001700
 800b078:	200016fc 	.word	0x200016fc

0800b07c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b082:	4b2b      	ldr	r3, [pc, #172]	@ (800b130 <vTaskSwitchContext+0xb4>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d003      	beq.n	800b092 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b08a:	4b2a      	ldr	r3, [pc, #168]	@ (800b134 <vTaskSwitchContext+0xb8>)
 800b08c:	2201      	movs	r2, #1
 800b08e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b090:	e047      	b.n	800b122 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b092:	4b28      	ldr	r3, [pc, #160]	@ (800b134 <vTaskSwitchContext+0xb8>)
 800b094:	2200      	movs	r2, #0
 800b096:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b098:	4b27      	ldr	r3, [pc, #156]	@ (800b138 <vTaskSwitchContext+0xbc>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	60fb      	str	r3, [r7, #12]
 800b09e:	e011      	b.n	800b0c4 <vTaskSwitchContext+0x48>
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d10b      	bne.n	800b0be <vTaskSwitchContext+0x42>
	__asm volatile
 800b0a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0aa:	f383 8811 	msr	BASEPRI, r3
 800b0ae:	f3bf 8f6f 	isb	sy
 800b0b2:	f3bf 8f4f 	dsb	sy
 800b0b6:	607b      	str	r3, [r7, #4]
}
 800b0b8:	bf00      	nop
 800b0ba:	bf00      	nop
 800b0bc:	e7fd      	b.n	800b0ba <vTaskSwitchContext+0x3e>
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	3b01      	subs	r3, #1
 800b0c2:	60fb      	str	r3, [r7, #12]
 800b0c4:	491d      	ldr	r1, [pc, #116]	@ (800b13c <vTaskSwitchContext+0xc0>)
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	440b      	add	r3, r1
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d0e3      	beq.n	800b0a0 <vTaskSwitchContext+0x24>
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4413      	add	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4a16      	ldr	r2, [pc, #88]	@ (800b13c <vTaskSwitchContext+0xc0>)
 800b0e4:	4413      	add	r3, r2
 800b0e6:	60bb      	str	r3, [r7, #8]
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	685a      	ldr	r2, [r3, #4]
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	605a      	str	r2, [r3, #4]
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	685a      	ldr	r2, [r3, #4]
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	3308      	adds	r3, #8
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d104      	bne.n	800b108 <vTaskSwitchContext+0x8c>
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	685a      	ldr	r2, [r3, #4]
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	605a      	str	r2, [r3, #4]
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	4a0c      	ldr	r2, [pc, #48]	@ (800b140 <vTaskSwitchContext+0xc4>)
 800b110:	6013      	str	r3, [r2, #0]
 800b112:	4a09      	ldr	r2, [pc, #36]	@ (800b138 <vTaskSwitchContext+0xbc>)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b118:	4b09      	ldr	r3, [pc, #36]	@ (800b140 <vTaskSwitchContext+0xc4>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	3354      	adds	r3, #84	@ 0x54
 800b11e:	4a09      	ldr	r2, [pc, #36]	@ (800b144 <vTaskSwitchContext+0xc8>)
 800b120:	6013      	str	r3, [r2, #0]
}
 800b122:	bf00      	nop
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr
 800b12e:	bf00      	nop
 800b130:	20001714 	.word	0x20001714
 800b134:	20001700 	.word	0x20001700
 800b138:	200016f4 	.word	0x200016f4
 800b13c:	2000121c 	.word	0x2000121c
 800b140:	20001218 	.word	0x20001218
 800b144:	2000024c 	.word	0x2000024c

0800b148 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d10b      	bne.n	800b170 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b15c:	f383 8811 	msr	BASEPRI, r3
 800b160:	f3bf 8f6f 	isb	sy
 800b164:	f3bf 8f4f 	dsb	sy
 800b168:	60fb      	str	r3, [r7, #12]
}
 800b16a:	bf00      	nop
 800b16c:	bf00      	nop
 800b16e:	e7fd      	b.n	800b16c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b170:	4b07      	ldr	r3, [pc, #28]	@ (800b190 <vTaskPlaceOnEventList+0x48>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	3318      	adds	r3, #24
 800b176:	4619      	mov	r1, r3
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f7fe fd42 	bl	8009c02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b17e:	2101      	movs	r1, #1
 800b180:	6838      	ldr	r0, [r7, #0]
 800b182:	f000 fa87 	bl	800b694 <prvAddCurrentTaskToDelayedList>
}
 800b186:	bf00      	nop
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	20001218 	.word	0x20001218

0800b194 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b194:	b580      	push	{r7, lr}
 800b196:	b086      	sub	sp, #24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d10b      	bne.n	800b1be <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1aa:	f383 8811 	msr	BASEPRI, r3
 800b1ae:	f3bf 8f6f 	isb	sy
 800b1b2:	f3bf 8f4f 	dsb	sy
 800b1b6:	617b      	str	r3, [r7, #20]
}
 800b1b8:	bf00      	nop
 800b1ba:	bf00      	nop
 800b1bc:	e7fd      	b.n	800b1ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1be:	4b0a      	ldr	r3, [pc, #40]	@ (800b1e8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	3318      	adds	r3, #24
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f7fe fcf7 	bl	8009bba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d002      	beq.n	800b1d8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b1d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b1d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b1d8:	6879      	ldr	r1, [r7, #4]
 800b1da:	68b8      	ldr	r0, [r7, #8]
 800b1dc:	f000 fa5a 	bl	800b694 <prvAddCurrentTaskToDelayedList>
	}
 800b1e0:	bf00      	nop
 800b1e2:	3718      	adds	r7, #24
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	20001218 	.word	0x20001218

0800b1ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b086      	sub	sp, #24
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10b      	bne.n	800b21a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b206:	f383 8811 	msr	BASEPRI, r3
 800b20a:	f3bf 8f6f 	isb	sy
 800b20e:	f3bf 8f4f 	dsb	sy
 800b212:	60fb      	str	r3, [r7, #12]
}
 800b214:	bf00      	nop
 800b216:	bf00      	nop
 800b218:	e7fd      	b.n	800b216 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	3318      	adds	r3, #24
 800b21e:	4618      	mov	r0, r3
 800b220:	f7fe fd28 	bl	8009c74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b224:	4b1d      	ldr	r3, [pc, #116]	@ (800b29c <xTaskRemoveFromEventList+0xb0>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d11d      	bne.n	800b268 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	3304      	adds	r3, #4
 800b230:	4618      	mov	r0, r3
 800b232:	f7fe fd1f 	bl	8009c74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b23a:	4b19      	ldr	r3, [pc, #100]	@ (800b2a0 <xTaskRemoveFromEventList+0xb4>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d903      	bls.n	800b24a <xTaskRemoveFromEventList+0x5e>
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b246:	4a16      	ldr	r2, [pc, #88]	@ (800b2a0 <xTaskRemoveFromEventList+0xb4>)
 800b248:	6013      	str	r3, [r2, #0]
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b24e:	4613      	mov	r3, r2
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	4413      	add	r3, r2
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	4a13      	ldr	r2, [pc, #76]	@ (800b2a4 <xTaskRemoveFromEventList+0xb8>)
 800b258:	441a      	add	r2, r3
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	3304      	adds	r3, #4
 800b25e:	4619      	mov	r1, r3
 800b260:	4610      	mov	r0, r2
 800b262:	f7fe fcaa 	bl	8009bba <vListInsertEnd>
 800b266:	e005      	b.n	800b274 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	3318      	adds	r3, #24
 800b26c:	4619      	mov	r1, r3
 800b26e:	480e      	ldr	r0, [pc, #56]	@ (800b2a8 <xTaskRemoveFromEventList+0xbc>)
 800b270:	f7fe fca3 	bl	8009bba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b278:	4b0c      	ldr	r3, [pc, #48]	@ (800b2ac <xTaskRemoveFromEventList+0xc0>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b27e:	429a      	cmp	r2, r3
 800b280:	d905      	bls.n	800b28e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b282:	2301      	movs	r3, #1
 800b284:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b286:	4b0a      	ldr	r3, [pc, #40]	@ (800b2b0 <xTaskRemoveFromEventList+0xc4>)
 800b288:	2201      	movs	r2, #1
 800b28a:	601a      	str	r2, [r3, #0]
 800b28c:	e001      	b.n	800b292 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b28e:	2300      	movs	r3, #0
 800b290:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b292:	697b      	ldr	r3, [r7, #20]
}
 800b294:	4618      	mov	r0, r3
 800b296:	3718      	adds	r7, #24
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	20001714 	.word	0x20001714
 800b2a0:	200016f4 	.word	0x200016f4
 800b2a4:	2000121c 	.word	0x2000121c
 800b2a8:	200016ac 	.word	0x200016ac
 800b2ac:	20001218 	.word	0x20001218
 800b2b0:	20001700 	.word	0x20001700

0800b2b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b2bc:	4b06      	ldr	r3, [pc, #24]	@ (800b2d8 <vTaskInternalSetTimeOutState+0x24>)
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b2c4:	4b05      	ldr	r3, [pc, #20]	@ (800b2dc <vTaskInternalSetTimeOutState+0x28>)
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	605a      	str	r2, [r3, #4]
}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	20001704 	.word	0x20001704
 800b2dc:	200016f0 	.word	0x200016f0

0800b2e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b088      	sub	sp, #32
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d10b      	bne.n	800b308 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f4:	f383 8811 	msr	BASEPRI, r3
 800b2f8:	f3bf 8f6f 	isb	sy
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	613b      	str	r3, [r7, #16]
}
 800b302:	bf00      	nop
 800b304:	bf00      	nop
 800b306:	e7fd      	b.n	800b304 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d10b      	bne.n	800b326 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b312:	f383 8811 	msr	BASEPRI, r3
 800b316:	f3bf 8f6f 	isb	sy
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	60fb      	str	r3, [r7, #12]
}
 800b320:	bf00      	nop
 800b322:	bf00      	nop
 800b324:	e7fd      	b.n	800b322 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b326:	f000 fe97 	bl	800c058 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b32a:	4b1d      	ldr	r3, [pc, #116]	@ (800b3a0 <xTaskCheckForTimeOut+0xc0>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	69ba      	ldr	r2, [r7, #24]
 800b336:	1ad3      	subs	r3, r2, r3
 800b338:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b342:	d102      	bne.n	800b34a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b344:	2300      	movs	r3, #0
 800b346:	61fb      	str	r3, [r7, #28]
 800b348:	e023      	b.n	800b392 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	4b15      	ldr	r3, [pc, #84]	@ (800b3a4 <xTaskCheckForTimeOut+0xc4>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	429a      	cmp	r2, r3
 800b354:	d007      	beq.n	800b366 <xTaskCheckForTimeOut+0x86>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	69ba      	ldr	r2, [r7, #24]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d302      	bcc.n	800b366 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b360:	2301      	movs	r3, #1
 800b362:	61fb      	str	r3, [r7, #28]
 800b364:	e015      	b.n	800b392 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	697a      	ldr	r2, [r7, #20]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d20b      	bcs.n	800b388 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	1ad2      	subs	r2, r2, r3
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f7ff ff99 	bl	800b2b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b382:	2300      	movs	r3, #0
 800b384:	61fb      	str	r3, [r7, #28]
 800b386:	e004      	b.n	800b392 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	2200      	movs	r2, #0
 800b38c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b38e:	2301      	movs	r3, #1
 800b390:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b392:	f000 fe93 	bl	800c0bc <vPortExitCritical>

	return xReturn;
 800b396:	69fb      	ldr	r3, [r7, #28]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3720      	adds	r7, #32
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	200016f0 	.word	0x200016f0
 800b3a4:	20001704 	.word	0x20001704

0800b3a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b3ac:	4b03      	ldr	r3, [pc, #12]	@ (800b3bc <vTaskMissedYield+0x14>)
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	601a      	str	r2, [r3, #0]
}
 800b3b2:	bf00      	nop
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	20001700 	.word	0x20001700

0800b3c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b3c8:	f000 f852 	bl	800b470 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b3cc:	4b06      	ldr	r3, [pc, #24]	@ (800b3e8 <prvIdleTask+0x28>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d9f9      	bls.n	800b3c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b3d4:	4b05      	ldr	r3, [pc, #20]	@ (800b3ec <prvIdleTask+0x2c>)
 800b3d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3da:	601a      	str	r2, [r3, #0]
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b3e4:	e7f0      	b.n	800b3c8 <prvIdleTask+0x8>
 800b3e6:	bf00      	nop
 800b3e8:	2000121c 	.word	0x2000121c
 800b3ec:	e000ed04 	.word	0xe000ed04

0800b3f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	607b      	str	r3, [r7, #4]
 800b3fa:	e00c      	b.n	800b416 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	4613      	mov	r3, r2
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	4413      	add	r3, r2
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	4a12      	ldr	r2, [pc, #72]	@ (800b450 <prvInitialiseTaskLists+0x60>)
 800b408:	4413      	add	r3, r2
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fe fba8 	bl	8009b60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	3301      	adds	r3, #1
 800b414:	607b      	str	r3, [r7, #4]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2b37      	cmp	r3, #55	@ 0x37
 800b41a:	d9ef      	bls.n	800b3fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b41c:	480d      	ldr	r0, [pc, #52]	@ (800b454 <prvInitialiseTaskLists+0x64>)
 800b41e:	f7fe fb9f 	bl	8009b60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b422:	480d      	ldr	r0, [pc, #52]	@ (800b458 <prvInitialiseTaskLists+0x68>)
 800b424:	f7fe fb9c 	bl	8009b60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b428:	480c      	ldr	r0, [pc, #48]	@ (800b45c <prvInitialiseTaskLists+0x6c>)
 800b42a:	f7fe fb99 	bl	8009b60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b42e:	480c      	ldr	r0, [pc, #48]	@ (800b460 <prvInitialiseTaskLists+0x70>)
 800b430:	f7fe fb96 	bl	8009b60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b434:	480b      	ldr	r0, [pc, #44]	@ (800b464 <prvInitialiseTaskLists+0x74>)
 800b436:	f7fe fb93 	bl	8009b60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b43a:	4b0b      	ldr	r3, [pc, #44]	@ (800b468 <prvInitialiseTaskLists+0x78>)
 800b43c:	4a05      	ldr	r2, [pc, #20]	@ (800b454 <prvInitialiseTaskLists+0x64>)
 800b43e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b440:	4b0a      	ldr	r3, [pc, #40]	@ (800b46c <prvInitialiseTaskLists+0x7c>)
 800b442:	4a05      	ldr	r2, [pc, #20]	@ (800b458 <prvInitialiseTaskLists+0x68>)
 800b444:	601a      	str	r2, [r3, #0]
}
 800b446:	bf00      	nop
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	2000121c 	.word	0x2000121c
 800b454:	2000167c 	.word	0x2000167c
 800b458:	20001690 	.word	0x20001690
 800b45c:	200016ac 	.word	0x200016ac
 800b460:	200016c0 	.word	0x200016c0
 800b464:	200016d8 	.word	0x200016d8
 800b468:	200016a4 	.word	0x200016a4
 800b46c:	200016a8 	.word	0x200016a8

0800b470 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b476:	e019      	b.n	800b4ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b478:	f000 fdee 	bl	800c058 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b47c:	4b10      	ldr	r3, [pc, #64]	@ (800b4c0 <prvCheckTasksWaitingTermination+0x50>)
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	3304      	adds	r3, #4
 800b488:	4618      	mov	r0, r3
 800b48a:	f7fe fbf3 	bl	8009c74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b48e:	4b0d      	ldr	r3, [pc, #52]	@ (800b4c4 <prvCheckTasksWaitingTermination+0x54>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	3b01      	subs	r3, #1
 800b494:	4a0b      	ldr	r2, [pc, #44]	@ (800b4c4 <prvCheckTasksWaitingTermination+0x54>)
 800b496:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b498:	4b0b      	ldr	r3, [pc, #44]	@ (800b4c8 <prvCheckTasksWaitingTermination+0x58>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	3b01      	subs	r3, #1
 800b49e:	4a0a      	ldr	r2, [pc, #40]	@ (800b4c8 <prvCheckTasksWaitingTermination+0x58>)
 800b4a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b4a2:	f000 fe0b 	bl	800c0bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 f810 	bl	800b4cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4ac:	4b06      	ldr	r3, [pc, #24]	@ (800b4c8 <prvCheckTasksWaitingTermination+0x58>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1e1      	bne.n	800b478 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b4b4:	bf00      	nop
 800b4b6:	bf00      	nop
 800b4b8:	3708      	adds	r7, #8
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	200016c0 	.word	0x200016c0
 800b4c4:	200016ec 	.word	0x200016ec
 800b4c8:	200016d4 	.word	0x200016d4

0800b4cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	3354      	adds	r3, #84	@ 0x54
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f001 f8d5 	bl	800c688 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d108      	bne.n	800b4fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f000 ffa3 	bl	800c438 <vPortFree>
				vPortFree( pxTCB );
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 ffa0 	bl	800c438 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b4f8:	e019      	b.n	800b52e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b500:	2b01      	cmp	r3, #1
 800b502:	d103      	bne.n	800b50c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 ff97 	bl	800c438 <vPortFree>
	}
 800b50a:	e010      	b.n	800b52e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b512:	2b02      	cmp	r3, #2
 800b514:	d00b      	beq.n	800b52e <prvDeleteTCB+0x62>
	__asm volatile
 800b516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b51a:	f383 8811 	msr	BASEPRI, r3
 800b51e:	f3bf 8f6f 	isb	sy
 800b522:	f3bf 8f4f 	dsb	sy
 800b526:	60fb      	str	r3, [r7, #12]
}
 800b528:	bf00      	nop
 800b52a:	bf00      	nop
 800b52c:	e7fd      	b.n	800b52a <prvDeleteTCB+0x5e>
	}
 800b52e:	bf00      	nop
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
	...

0800b538 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b53e:	4b0c      	ldr	r3, [pc, #48]	@ (800b570 <prvResetNextTaskUnblockTime+0x38>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d104      	bne.n	800b552 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b548:	4b0a      	ldr	r3, [pc, #40]	@ (800b574 <prvResetNextTaskUnblockTime+0x3c>)
 800b54a:	f04f 32ff 	mov.w	r2, #4294967295
 800b54e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b550:	e008      	b.n	800b564 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b552:	4b07      	ldr	r3, [pc, #28]	@ (800b570 <prvResetNextTaskUnblockTime+0x38>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	4a04      	ldr	r2, [pc, #16]	@ (800b574 <prvResetNextTaskUnblockTime+0x3c>)
 800b562:	6013      	str	r3, [r2, #0]
}
 800b564:	bf00      	nop
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr
 800b570:	200016a4 	.word	0x200016a4
 800b574:	2000170c 	.word	0x2000170c

0800b578 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b57e:	4b0b      	ldr	r3, [pc, #44]	@ (800b5ac <xTaskGetSchedulerState+0x34>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d102      	bne.n	800b58c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b586:	2301      	movs	r3, #1
 800b588:	607b      	str	r3, [r7, #4]
 800b58a:	e008      	b.n	800b59e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b58c:	4b08      	ldr	r3, [pc, #32]	@ (800b5b0 <xTaskGetSchedulerState+0x38>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d102      	bne.n	800b59a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b594:	2302      	movs	r3, #2
 800b596:	607b      	str	r3, [r7, #4]
 800b598:	e001      	b.n	800b59e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b59a:	2300      	movs	r3, #0
 800b59c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b59e:	687b      	ldr	r3, [r7, #4]
	}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr
 800b5ac:	200016f8 	.word	0x200016f8
 800b5b0:	20001714 	.word	0x20001714

0800b5b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d058      	beq.n	800b67c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b5ca:	4b2f      	ldr	r3, [pc, #188]	@ (800b688 <xTaskPriorityDisinherit+0xd4>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	693a      	ldr	r2, [r7, #16]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d00b      	beq.n	800b5ec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d8:	f383 8811 	msr	BASEPRI, r3
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	60fb      	str	r3, [r7, #12]
}
 800b5e6:	bf00      	nop
 800b5e8:	bf00      	nop
 800b5ea:	e7fd      	b.n	800b5e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d10b      	bne.n	800b60c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f8:	f383 8811 	msr	BASEPRI, r3
 800b5fc:	f3bf 8f6f 	isb	sy
 800b600:	f3bf 8f4f 	dsb	sy
 800b604:	60bb      	str	r3, [r7, #8]
}
 800b606:	bf00      	nop
 800b608:	bf00      	nop
 800b60a:	e7fd      	b.n	800b608 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b610:	1e5a      	subs	r2, r3, #1
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b61e:	429a      	cmp	r2, r3
 800b620:	d02c      	beq.n	800b67c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b626:	2b00      	cmp	r3, #0
 800b628:	d128      	bne.n	800b67c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	3304      	adds	r3, #4
 800b62e:	4618      	mov	r0, r3
 800b630:	f7fe fb20 	bl	8009c74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b640:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b64c:	4b0f      	ldr	r3, [pc, #60]	@ (800b68c <xTaskPriorityDisinherit+0xd8>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	429a      	cmp	r2, r3
 800b652:	d903      	bls.n	800b65c <xTaskPriorityDisinherit+0xa8>
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b658:	4a0c      	ldr	r2, [pc, #48]	@ (800b68c <xTaskPriorityDisinherit+0xd8>)
 800b65a:	6013      	str	r3, [r2, #0]
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b660:	4613      	mov	r3, r2
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	4413      	add	r3, r2
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	4a09      	ldr	r2, [pc, #36]	@ (800b690 <xTaskPriorityDisinherit+0xdc>)
 800b66a:	441a      	add	r2, r3
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	3304      	adds	r3, #4
 800b670:	4619      	mov	r1, r3
 800b672:	4610      	mov	r0, r2
 800b674:	f7fe faa1 	bl	8009bba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b678:	2301      	movs	r3, #1
 800b67a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b67c:	697b      	ldr	r3, [r7, #20]
	}
 800b67e:	4618      	mov	r0, r3
 800b680:	3718      	adds	r7, #24
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	20001218 	.word	0x20001218
 800b68c:	200016f4 	.word	0x200016f4
 800b690:	2000121c 	.word	0x2000121c

0800b694 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b69e:	4b21      	ldr	r3, [pc, #132]	@ (800b724 <prvAddCurrentTaskToDelayedList+0x90>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6a4:	4b20      	ldr	r3, [pc, #128]	@ (800b728 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	3304      	adds	r3, #4
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7fe fae2 	bl	8009c74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6b6:	d10a      	bne.n	800b6ce <prvAddCurrentTaskToDelayedList+0x3a>
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d007      	beq.n	800b6ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6be:	4b1a      	ldr	r3, [pc, #104]	@ (800b728 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	3304      	adds	r3, #4
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	4819      	ldr	r0, [pc, #100]	@ (800b72c <prvAddCurrentTaskToDelayedList+0x98>)
 800b6c8:	f7fe fa77 	bl	8009bba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b6cc:	e026      	b.n	800b71c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b6ce:	68fa      	ldr	r2, [r7, #12]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b6d6:	4b14      	ldr	r3, [pc, #80]	@ (800b728 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68ba      	ldr	r2, [r7, #8]
 800b6dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b6de:	68ba      	ldr	r2, [r7, #8]
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d209      	bcs.n	800b6fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6e6:	4b12      	ldr	r3, [pc, #72]	@ (800b730 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	4b0f      	ldr	r3, [pc, #60]	@ (800b728 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	3304      	adds	r3, #4
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	4610      	mov	r0, r2
 800b6f4:	f7fe fa85 	bl	8009c02 <vListInsert>
}
 800b6f8:	e010      	b.n	800b71c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6fa:	4b0e      	ldr	r3, [pc, #56]	@ (800b734 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	4b0a      	ldr	r3, [pc, #40]	@ (800b728 <prvAddCurrentTaskToDelayedList+0x94>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3304      	adds	r3, #4
 800b704:	4619      	mov	r1, r3
 800b706:	4610      	mov	r0, r2
 800b708:	f7fe fa7b 	bl	8009c02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b70c:	4b0a      	ldr	r3, [pc, #40]	@ (800b738 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	68ba      	ldr	r2, [r7, #8]
 800b712:	429a      	cmp	r2, r3
 800b714:	d202      	bcs.n	800b71c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b716:	4a08      	ldr	r2, [pc, #32]	@ (800b738 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	6013      	str	r3, [r2, #0]
}
 800b71c:	bf00      	nop
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	200016f0 	.word	0x200016f0
 800b728:	20001218 	.word	0x20001218
 800b72c:	200016d8 	.word	0x200016d8
 800b730:	200016a8 	.word	0x200016a8
 800b734:	200016a4 	.word	0x200016a4
 800b738:	2000170c 	.word	0x2000170c

0800b73c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b08a      	sub	sp, #40	@ 0x28
 800b740:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b742:	2300      	movs	r3, #0
 800b744:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b746:	f000 fb13 	bl	800bd70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b74a:	4b1d      	ldr	r3, [pc, #116]	@ (800b7c0 <xTimerCreateTimerTask+0x84>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d021      	beq.n	800b796 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b752:	2300      	movs	r3, #0
 800b754:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b756:	2300      	movs	r3, #0
 800b758:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b75a:	1d3a      	adds	r2, r7, #4
 800b75c:	f107 0108 	add.w	r1, r7, #8
 800b760:	f107 030c 	add.w	r3, r7, #12
 800b764:	4618      	mov	r0, r3
 800b766:	f7fe f9e1 	bl	8009b2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b76a:	6879      	ldr	r1, [r7, #4]
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	68fa      	ldr	r2, [r7, #12]
 800b770:	9202      	str	r2, [sp, #8]
 800b772:	9301      	str	r3, [sp, #4]
 800b774:	2302      	movs	r3, #2
 800b776:	9300      	str	r3, [sp, #0]
 800b778:	2300      	movs	r3, #0
 800b77a:	460a      	mov	r2, r1
 800b77c:	4911      	ldr	r1, [pc, #68]	@ (800b7c4 <xTimerCreateTimerTask+0x88>)
 800b77e:	4812      	ldr	r0, [pc, #72]	@ (800b7c8 <xTimerCreateTimerTask+0x8c>)
 800b780:	f7fe ff9c 	bl	800a6bc <xTaskCreateStatic>
 800b784:	4603      	mov	r3, r0
 800b786:	4a11      	ldr	r2, [pc, #68]	@ (800b7cc <xTimerCreateTimerTask+0x90>)
 800b788:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b78a:	4b10      	ldr	r3, [pc, #64]	@ (800b7cc <xTimerCreateTimerTask+0x90>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d001      	beq.n	800b796 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b792:	2301      	movs	r3, #1
 800b794:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10b      	bne.n	800b7b4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	613b      	str	r3, [r7, #16]
}
 800b7ae:	bf00      	nop
 800b7b0:	bf00      	nop
 800b7b2:	e7fd      	b.n	800b7b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b7b4:	697b      	ldr	r3, [r7, #20]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3718      	adds	r7, #24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	20001748 	.word	0x20001748
 800b7c4:	0800c8e8 	.word	0x0800c8e8
 800b7c8:	0800b909 	.word	0x0800b909
 800b7cc:	2000174c 	.word	0x2000174c

0800b7d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b08a      	sub	sp, #40	@ 0x28
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
 800b7dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d10b      	bne.n	800b800 <xTimerGenericCommand+0x30>
	__asm volatile
 800b7e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ec:	f383 8811 	msr	BASEPRI, r3
 800b7f0:	f3bf 8f6f 	isb	sy
 800b7f4:	f3bf 8f4f 	dsb	sy
 800b7f8:	623b      	str	r3, [r7, #32]
}
 800b7fa:	bf00      	nop
 800b7fc:	bf00      	nop
 800b7fe:	e7fd      	b.n	800b7fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b800:	4b19      	ldr	r3, [pc, #100]	@ (800b868 <xTimerGenericCommand+0x98>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d02a      	beq.n	800b85e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	2b05      	cmp	r3, #5
 800b818:	dc18      	bgt.n	800b84c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b81a:	f7ff fead 	bl	800b578 <xTaskGetSchedulerState>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b02      	cmp	r3, #2
 800b822:	d109      	bne.n	800b838 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b824:	4b10      	ldr	r3, [pc, #64]	@ (800b868 <xTimerGenericCommand+0x98>)
 800b826:	6818      	ldr	r0, [r3, #0]
 800b828:	f107 0110 	add.w	r1, r7, #16
 800b82c:	2300      	movs	r3, #0
 800b82e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b830:	f7fe fb54 	bl	8009edc <xQueueGenericSend>
 800b834:	6278      	str	r0, [r7, #36]	@ 0x24
 800b836:	e012      	b.n	800b85e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b838:	4b0b      	ldr	r3, [pc, #44]	@ (800b868 <xTimerGenericCommand+0x98>)
 800b83a:	6818      	ldr	r0, [r3, #0]
 800b83c:	f107 0110 	add.w	r1, r7, #16
 800b840:	2300      	movs	r3, #0
 800b842:	2200      	movs	r2, #0
 800b844:	f7fe fb4a 	bl	8009edc <xQueueGenericSend>
 800b848:	6278      	str	r0, [r7, #36]	@ 0x24
 800b84a:	e008      	b.n	800b85e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b84c:	4b06      	ldr	r3, [pc, #24]	@ (800b868 <xTimerGenericCommand+0x98>)
 800b84e:	6818      	ldr	r0, [r3, #0]
 800b850:	f107 0110 	add.w	r1, r7, #16
 800b854:	2300      	movs	r3, #0
 800b856:	683a      	ldr	r2, [r7, #0]
 800b858:	f7fe fc42 	bl	800a0e0 <xQueueGenericSendFromISR>
 800b85c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b860:	4618      	mov	r0, r3
 800b862:	3728      	adds	r7, #40	@ 0x28
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	20001748 	.word	0x20001748

0800b86c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b088      	sub	sp, #32
 800b870:	af02      	add	r7, sp, #8
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b876:	4b23      	ldr	r3, [pc, #140]	@ (800b904 <prvProcessExpiredTimer+0x98>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	3304      	adds	r3, #4
 800b884:	4618      	mov	r0, r3
 800b886:	f7fe f9f5 	bl	8009c74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b890:	f003 0304 	and.w	r3, r3, #4
 800b894:	2b00      	cmp	r3, #0
 800b896:	d023      	beq.n	800b8e0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	699a      	ldr	r2, [r3, #24]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	18d1      	adds	r1, r2, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	683a      	ldr	r2, [r7, #0]
 800b8a4:	6978      	ldr	r0, [r7, #20]
 800b8a6:	f000 f8d5 	bl	800ba54 <prvInsertTimerInActiveList>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d020      	beq.n	800b8f2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	6978      	ldr	r0, [r7, #20]
 800b8bc:	f7ff ff88 	bl	800b7d0 <xTimerGenericCommand>
 800b8c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d114      	bne.n	800b8f2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b8c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8cc:	f383 8811 	msr	BASEPRI, r3
 800b8d0:	f3bf 8f6f 	isb	sy
 800b8d4:	f3bf 8f4f 	dsb	sy
 800b8d8:	60fb      	str	r3, [r7, #12]
}
 800b8da:	bf00      	nop
 800b8dc:	bf00      	nop
 800b8de:	e7fd      	b.n	800b8dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b8e6:	f023 0301 	bic.w	r3, r3, #1
 800b8ea:	b2da      	uxtb	r2, r3
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	6a1b      	ldr	r3, [r3, #32]
 800b8f6:	6978      	ldr	r0, [r7, #20]
 800b8f8:	4798      	blx	r3
}
 800b8fa:	bf00      	nop
 800b8fc:	3718      	adds	r7, #24
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	20001740 	.word	0x20001740

0800b908 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b910:	f107 0308 	add.w	r3, r7, #8
 800b914:	4618      	mov	r0, r3
 800b916:	f000 f859 	bl	800b9cc <prvGetNextExpireTime>
 800b91a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	4619      	mov	r1, r3
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f000 f805 	bl	800b930 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b926:	f000 f8d7 	bl	800bad8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b92a:	bf00      	nop
 800b92c:	e7f0      	b.n	800b910 <prvTimerTask+0x8>
	...

0800b930 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b93a:	f7ff fa17 	bl	800ad6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b93e:	f107 0308 	add.w	r3, r7, #8
 800b942:	4618      	mov	r0, r3
 800b944:	f000 f866 	bl	800ba14 <prvSampleTimeNow>
 800b948:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d130      	bne.n	800b9b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10a      	bne.n	800b96c <prvProcessTimerOrBlockTask+0x3c>
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d806      	bhi.n	800b96c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b95e:	f7ff fa13 	bl	800ad88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b962:	68f9      	ldr	r1, [r7, #12]
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f7ff ff81 	bl	800b86c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b96a:	e024      	b.n	800b9b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d008      	beq.n	800b984 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b972:	4b13      	ldr	r3, [pc, #76]	@ (800b9c0 <prvProcessTimerOrBlockTask+0x90>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d101      	bne.n	800b980 <prvProcessTimerOrBlockTask+0x50>
 800b97c:	2301      	movs	r3, #1
 800b97e:	e000      	b.n	800b982 <prvProcessTimerOrBlockTask+0x52>
 800b980:	2300      	movs	r3, #0
 800b982:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b984:	4b0f      	ldr	r3, [pc, #60]	@ (800b9c4 <prvProcessTimerOrBlockTask+0x94>)
 800b986:	6818      	ldr	r0, [r3, #0]
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	1ad3      	subs	r3, r2, r3
 800b98e:	683a      	ldr	r2, [r7, #0]
 800b990:	4619      	mov	r1, r3
 800b992:	f7fe fe5f 	bl	800a654 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b996:	f7ff f9f7 	bl	800ad88 <xTaskResumeAll>
 800b99a:	4603      	mov	r3, r0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d10a      	bne.n	800b9b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b9a0:	4b09      	ldr	r3, [pc, #36]	@ (800b9c8 <prvProcessTimerOrBlockTask+0x98>)
 800b9a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9a6:	601a      	str	r2, [r3, #0]
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	f3bf 8f6f 	isb	sy
}
 800b9b0:	e001      	b.n	800b9b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b9b2:	f7ff f9e9 	bl	800ad88 <xTaskResumeAll>
}
 800b9b6:	bf00      	nop
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	20001744 	.word	0x20001744
 800b9c4:	20001748 	.word	0x20001748
 800b9c8:	e000ed04 	.word	0xe000ed04

0800b9cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b9d4:	4b0e      	ldr	r3, [pc, #56]	@ (800ba10 <prvGetNextExpireTime+0x44>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d101      	bne.n	800b9e2 <prvGetNextExpireTime+0x16>
 800b9de:	2201      	movs	r2, #1
 800b9e0:	e000      	b.n	800b9e4 <prvGetNextExpireTime+0x18>
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d105      	bne.n	800b9fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9f0:	4b07      	ldr	r3, [pc, #28]	@ (800ba10 <prvGetNextExpireTime+0x44>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	60fb      	str	r3, [r7, #12]
 800b9fa:	e001      	b.n	800ba00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ba00:	68fb      	ldr	r3, [r7, #12]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3714      	adds	r7, #20
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr
 800ba0e:	bf00      	nop
 800ba10:	20001740 	.word	0x20001740

0800ba14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ba1c:	f7ff fa52 	bl	800aec4 <xTaskGetTickCount>
 800ba20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ba22:	4b0b      	ldr	r3, [pc, #44]	@ (800ba50 <prvSampleTimeNow+0x3c>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d205      	bcs.n	800ba38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ba2c:	f000 f93a 	bl	800bca4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2201      	movs	r2, #1
 800ba34:	601a      	str	r2, [r3, #0]
 800ba36:	e002      	b.n	800ba3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ba3e:	4a04      	ldr	r2, [pc, #16]	@ (800ba50 <prvSampleTimeNow+0x3c>)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ba44:	68fb      	ldr	r3, [r7, #12]
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	20001750 	.word	0x20001750

0800ba54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
 800ba60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ba62:	2300      	movs	r3, #0
 800ba64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	68ba      	ldr	r2, [r7, #8]
 800ba6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	68fa      	ldr	r2, [r7, #12]
 800ba70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ba72:	68ba      	ldr	r2, [r7, #8]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d812      	bhi.n	800baa0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	1ad2      	subs	r2, r2, r3
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	699b      	ldr	r3, [r3, #24]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d302      	bcc.n	800ba8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	617b      	str	r3, [r7, #20]
 800ba8c:	e01b      	b.n	800bac6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba8e:	4b10      	ldr	r3, [pc, #64]	@ (800bad0 <prvInsertTimerInActiveList+0x7c>)
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	3304      	adds	r3, #4
 800ba96:	4619      	mov	r1, r3
 800ba98:	4610      	mov	r0, r2
 800ba9a:	f7fe f8b2 	bl	8009c02 <vListInsert>
 800ba9e:	e012      	b.n	800bac6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d206      	bcs.n	800bab6 <prvInsertTimerInActiveList+0x62>
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	429a      	cmp	r2, r3
 800baae:	d302      	bcc.n	800bab6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bab0:	2301      	movs	r3, #1
 800bab2:	617b      	str	r3, [r7, #20]
 800bab4:	e007      	b.n	800bac6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bab6:	4b07      	ldr	r3, [pc, #28]	@ (800bad4 <prvInsertTimerInActiveList+0x80>)
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	3304      	adds	r3, #4
 800babe:	4619      	mov	r1, r3
 800bac0:	4610      	mov	r0, r2
 800bac2:	f7fe f89e 	bl	8009c02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bac6:	697b      	ldr	r3, [r7, #20]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3718      	adds	r7, #24
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	20001744 	.word	0x20001744
 800bad4:	20001740 	.word	0x20001740

0800bad8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b08e      	sub	sp, #56	@ 0x38
 800badc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bade:	e0ce      	b.n	800bc7e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	da19      	bge.n	800bb1a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bae6:	1d3b      	adds	r3, r7, #4
 800bae8:	3304      	adds	r3, #4
 800baea:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800baec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10b      	bne.n	800bb0a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800baf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	f3bf 8f6f 	isb	sy
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	61fb      	str	r3, [r7, #28]
}
 800bb04:	bf00      	nop
 800bb06:	bf00      	nop
 800bb08:	e7fd      	b.n	800bb06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bb0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb10:	6850      	ldr	r0, [r2, #4]
 800bb12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb14:	6892      	ldr	r2, [r2, #8]
 800bb16:	4611      	mov	r1, r2
 800bb18:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	f2c0 80ae 	blt.w	800bc7e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bb26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb28:	695b      	ldr	r3, [r3, #20]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d004      	beq.n	800bb38 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb30:	3304      	adds	r3, #4
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7fe f89e 	bl	8009c74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb38:	463b      	mov	r3, r7
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7ff ff6a 	bl	800ba14 <prvSampleTimeNow>
 800bb40:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2b09      	cmp	r3, #9
 800bb46:	f200 8097 	bhi.w	800bc78 <prvProcessReceivedCommands+0x1a0>
 800bb4a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb50 <prvProcessReceivedCommands+0x78>)
 800bb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb50:	0800bb79 	.word	0x0800bb79
 800bb54:	0800bb79 	.word	0x0800bb79
 800bb58:	0800bb79 	.word	0x0800bb79
 800bb5c:	0800bbef 	.word	0x0800bbef
 800bb60:	0800bc03 	.word	0x0800bc03
 800bb64:	0800bc4f 	.word	0x0800bc4f
 800bb68:	0800bb79 	.word	0x0800bb79
 800bb6c:	0800bb79 	.word	0x0800bb79
 800bb70:	0800bbef 	.word	0x0800bbef
 800bb74:	0800bc03 	.word	0x0800bc03
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb7e:	f043 0301 	orr.w	r3, r3, #1
 800bb82:	b2da      	uxtb	r2, r3
 800bb84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bb8a:	68ba      	ldr	r2, [r7, #8]
 800bb8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb8e:	699b      	ldr	r3, [r3, #24]
 800bb90:	18d1      	adds	r1, r2, r3
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb98:	f7ff ff5c 	bl	800ba54 <prvInsertTimerInActiveList>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d06c      	beq.n	800bc7c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba4:	6a1b      	ldr	r3, [r3, #32]
 800bba6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bba8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbb0:	f003 0304 	and.w	r3, r3, #4
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d061      	beq.n	800bc7c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bbb8:	68ba      	ldr	r2, [r7, #8]
 800bbba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbbc:	699b      	ldr	r3, [r3, #24]
 800bbbe:	441a      	add	r2, r3
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	9300      	str	r3, [sp, #0]
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbca:	f7ff fe01 	bl	800b7d0 <xTimerGenericCommand>
 800bbce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bbd0:	6a3b      	ldr	r3, [r7, #32]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d152      	bne.n	800bc7c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bbd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbda:	f383 8811 	msr	BASEPRI, r3
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	f3bf 8f4f 	dsb	sy
 800bbe6:	61bb      	str	r3, [r7, #24]
}
 800bbe8:	bf00      	nop
 800bbea:	bf00      	nop
 800bbec:	e7fd      	b.n	800bbea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbf4:	f023 0301 	bic.w	r3, r3, #1
 800bbf8:	b2da      	uxtb	r2, r3
 800bbfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbfc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bc00:	e03d      	b.n	800bc7e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc08:	f043 0301 	orr.w	r3, r3, #1
 800bc0c:	b2da      	uxtb	r2, r3
 800bc0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc10:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bc14:	68ba      	ldr	r2, [r7, #8]
 800bc16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc18:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc1c:	699b      	ldr	r3, [r3, #24]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10b      	bne.n	800bc3a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bc22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc26:	f383 8811 	msr	BASEPRI, r3
 800bc2a:	f3bf 8f6f 	isb	sy
 800bc2e:	f3bf 8f4f 	dsb	sy
 800bc32:	617b      	str	r3, [r7, #20]
}
 800bc34:	bf00      	nop
 800bc36:	bf00      	nop
 800bc38:	e7fd      	b.n	800bc36 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bc3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc3c:	699a      	ldr	r2, [r3, #24]
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc40:	18d1      	adds	r1, r2, r3
 800bc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc48:	f7ff ff04 	bl	800ba54 <prvInsertTimerInActiveList>
					break;
 800bc4c:	e017      	b.n	800bc7e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bc4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc54:	f003 0302 	and.w	r3, r3, #2
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d103      	bne.n	800bc64 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bc5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc5e:	f000 fbeb 	bl	800c438 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bc62:	e00c      	b.n	800bc7e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc6a:	f023 0301 	bic.w	r3, r3, #1
 800bc6e:	b2da      	uxtb	r2, r3
 800bc70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bc76:	e002      	b.n	800bc7e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bc78:	bf00      	nop
 800bc7a:	e000      	b.n	800bc7e <prvProcessReceivedCommands+0x1a6>
					break;
 800bc7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc7e:	4b08      	ldr	r3, [pc, #32]	@ (800bca0 <prvProcessReceivedCommands+0x1c8>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	1d39      	adds	r1, r7, #4
 800bc84:	2200      	movs	r2, #0
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7fe fac8 	bl	800a21c <xQueueReceive>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	f47f af26 	bne.w	800bae0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bc94:	bf00      	nop
 800bc96:	bf00      	nop
 800bc98:	3730      	adds	r7, #48	@ 0x30
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	20001748 	.word	0x20001748

0800bca4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b088      	sub	sp, #32
 800bca8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bcaa:	e049      	b.n	800bd40 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bcac:	4b2e      	ldr	r3, [pc, #184]	@ (800bd68 <prvSwitchTimerLists+0xc4>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	68db      	ldr	r3, [r3, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcb6:	4b2c      	ldr	r3, [pc, #176]	@ (800bd68 <prvSwitchTimerLists+0xc4>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	3304      	adds	r3, #4
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7fd ffd5 	bl	8009c74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	6a1b      	ldr	r3, [r3, #32]
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bcd8:	f003 0304 	and.w	r3, r3, #4
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d02f      	beq.n	800bd40 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	699b      	ldr	r3, [r3, #24]
 800bce4:	693a      	ldr	r2, [r7, #16]
 800bce6:	4413      	add	r3, r2
 800bce8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bcea:	68ba      	ldr	r2, [r7, #8]
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d90e      	bls.n	800bd10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	68ba      	ldr	r2, [r7, #8]
 800bcf6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bcfe:	4b1a      	ldr	r3, [pc, #104]	@ (800bd68 <prvSwitchTimerLists+0xc4>)
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	3304      	adds	r3, #4
 800bd06:	4619      	mov	r1, r3
 800bd08:	4610      	mov	r0, r2
 800bd0a:	f7fd ff7a 	bl	8009c02 <vListInsert>
 800bd0e:	e017      	b.n	800bd40 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd10:	2300      	movs	r3, #0
 800bd12:	9300      	str	r3, [sp, #0]
 800bd14:	2300      	movs	r3, #0
 800bd16:	693a      	ldr	r2, [r7, #16]
 800bd18:	2100      	movs	r1, #0
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	f7ff fd58 	bl	800b7d0 <xTimerGenericCommand>
 800bd20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d10b      	bne.n	800bd40 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bd28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd2c:	f383 8811 	msr	BASEPRI, r3
 800bd30:	f3bf 8f6f 	isb	sy
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	603b      	str	r3, [r7, #0]
}
 800bd3a:	bf00      	nop
 800bd3c:	bf00      	nop
 800bd3e:	e7fd      	b.n	800bd3c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd40:	4b09      	ldr	r3, [pc, #36]	@ (800bd68 <prvSwitchTimerLists+0xc4>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d1b0      	bne.n	800bcac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bd4a:	4b07      	ldr	r3, [pc, #28]	@ (800bd68 <prvSwitchTimerLists+0xc4>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bd50:	4b06      	ldr	r3, [pc, #24]	@ (800bd6c <prvSwitchTimerLists+0xc8>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a04      	ldr	r2, [pc, #16]	@ (800bd68 <prvSwitchTimerLists+0xc4>)
 800bd56:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bd58:	4a04      	ldr	r2, [pc, #16]	@ (800bd6c <prvSwitchTimerLists+0xc8>)
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	6013      	str	r3, [r2, #0]
}
 800bd5e:	bf00      	nop
 800bd60:	3718      	adds	r7, #24
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	20001740 	.word	0x20001740
 800bd6c:	20001744 	.word	0x20001744

0800bd70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bd76:	f000 f96f 	bl	800c058 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bd7a:	4b15      	ldr	r3, [pc, #84]	@ (800bdd0 <prvCheckForValidListAndQueue+0x60>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d120      	bne.n	800bdc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bd82:	4814      	ldr	r0, [pc, #80]	@ (800bdd4 <prvCheckForValidListAndQueue+0x64>)
 800bd84:	f7fd feec 	bl	8009b60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bd88:	4813      	ldr	r0, [pc, #76]	@ (800bdd8 <prvCheckForValidListAndQueue+0x68>)
 800bd8a:	f7fd fee9 	bl	8009b60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bd8e:	4b13      	ldr	r3, [pc, #76]	@ (800bddc <prvCheckForValidListAndQueue+0x6c>)
 800bd90:	4a10      	ldr	r2, [pc, #64]	@ (800bdd4 <prvCheckForValidListAndQueue+0x64>)
 800bd92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bd94:	4b12      	ldr	r3, [pc, #72]	@ (800bde0 <prvCheckForValidListAndQueue+0x70>)
 800bd96:	4a10      	ldr	r2, [pc, #64]	@ (800bdd8 <prvCheckForValidListAndQueue+0x68>)
 800bd98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	4b11      	ldr	r3, [pc, #68]	@ (800bde4 <prvCheckForValidListAndQueue+0x74>)
 800bda0:	4a11      	ldr	r2, [pc, #68]	@ (800bde8 <prvCheckForValidListAndQueue+0x78>)
 800bda2:	2110      	movs	r1, #16
 800bda4:	200a      	movs	r0, #10
 800bda6:	f7fd fff9 	bl	8009d9c <xQueueGenericCreateStatic>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	4a08      	ldr	r2, [pc, #32]	@ (800bdd0 <prvCheckForValidListAndQueue+0x60>)
 800bdae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bdb0:	4b07      	ldr	r3, [pc, #28]	@ (800bdd0 <prvCheckForValidListAndQueue+0x60>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d005      	beq.n	800bdc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bdb8:	4b05      	ldr	r3, [pc, #20]	@ (800bdd0 <prvCheckForValidListAndQueue+0x60>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	490b      	ldr	r1, [pc, #44]	@ (800bdec <prvCheckForValidListAndQueue+0x7c>)
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7fe fc1e 	bl	800a600 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bdc4:	f000 f97a 	bl	800c0bc <vPortExitCritical>
}
 800bdc8:	bf00      	nop
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	20001748 	.word	0x20001748
 800bdd4:	20001718 	.word	0x20001718
 800bdd8:	2000172c 	.word	0x2000172c
 800bddc:	20001740 	.word	0x20001740
 800bde0:	20001744 	.word	0x20001744
 800bde4:	200017f4 	.word	0x200017f4
 800bde8:	20001754 	.word	0x20001754
 800bdec:	0800c8f0 	.word	0x0800c8f0

0800bdf0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	3b04      	subs	r3, #4
 800be00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800be08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	3b04      	subs	r3, #4
 800be0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	f023 0201 	bic.w	r2, r3, #1
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	3b04      	subs	r3, #4
 800be1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be20:	4a0c      	ldr	r2, [pc, #48]	@ (800be54 <pxPortInitialiseStack+0x64>)
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	3b14      	subs	r3, #20
 800be2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	3b04      	subs	r3, #4
 800be36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f06f 0202 	mvn.w	r2, #2
 800be3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	3b20      	subs	r3, #32
 800be44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800be46:	68fb      	ldr	r3, [r7, #12]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3714      	adds	r7, #20
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr
 800be54:	0800be59 	.word	0x0800be59

0800be58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800be5e:	2300      	movs	r3, #0
 800be60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800be62:	4b13      	ldr	r3, [pc, #76]	@ (800beb0 <prvTaskExitError+0x58>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be6a:	d00b      	beq.n	800be84 <prvTaskExitError+0x2c>
	__asm volatile
 800be6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be70:	f383 8811 	msr	BASEPRI, r3
 800be74:	f3bf 8f6f 	isb	sy
 800be78:	f3bf 8f4f 	dsb	sy
 800be7c:	60fb      	str	r3, [r7, #12]
}
 800be7e:	bf00      	nop
 800be80:	bf00      	nop
 800be82:	e7fd      	b.n	800be80 <prvTaskExitError+0x28>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	60bb      	str	r3, [r7, #8]
}
 800be96:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be98:	bf00      	nop
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d0fc      	beq.n	800be9a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bea0:	bf00      	nop
 800bea2:	bf00      	nop
 800bea4:	3714      	adds	r7, #20
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop
 800beb0:	20000248 	.word	0x20000248
	...

0800bec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bec0:	4b07      	ldr	r3, [pc, #28]	@ (800bee0 <pxCurrentTCBConst2>)
 800bec2:	6819      	ldr	r1, [r3, #0]
 800bec4:	6808      	ldr	r0, [r1, #0]
 800bec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beca:	f380 8809 	msr	PSP, r0
 800bece:	f3bf 8f6f 	isb	sy
 800bed2:	f04f 0000 	mov.w	r0, #0
 800bed6:	f380 8811 	msr	BASEPRI, r0
 800beda:	4770      	bx	lr
 800bedc:	f3af 8000 	nop.w

0800bee0 <pxCurrentTCBConst2>:
 800bee0:	20001218 	.word	0x20001218
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bee4:	bf00      	nop
 800bee6:	bf00      	nop

0800bee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bee8:	4808      	ldr	r0, [pc, #32]	@ (800bf0c <prvPortStartFirstTask+0x24>)
 800beea:	6800      	ldr	r0, [r0, #0]
 800beec:	6800      	ldr	r0, [r0, #0]
 800beee:	f380 8808 	msr	MSP, r0
 800bef2:	f04f 0000 	mov.w	r0, #0
 800bef6:	f380 8814 	msr	CONTROL, r0
 800befa:	b662      	cpsie	i
 800befc:	b661      	cpsie	f
 800befe:	f3bf 8f4f 	dsb	sy
 800bf02:	f3bf 8f6f 	isb	sy
 800bf06:	df00      	svc	0
 800bf08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf0a:	bf00      	nop
 800bf0c:	e000ed08 	.word	0xe000ed08

0800bf10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b086      	sub	sp, #24
 800bf14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bf16:	4b47      	ldr	r3, [pc, #284]	@ (800c034 <xPortStartScheduler+0x124>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a47      	ldr	r2, [pc, #284]	@ (800c038 <xPortStartScheduler+0x128>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d10b      	bne.n	800bf38 <xPortStartScheduler+0x28>
	__asm volatile
 800bf20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf24:	f383 8811 	msr	BASEPRI, r3
 800bf28:	f3bf 8f6f 	isb	sy
 800bf2c:	f3bf 8f4f 	dsb	sy
 800bf30:	60fb      	str	r3, [r7, #12]
}
 800bf32:	bf00      	nop
 800bf34:	bf00      	nop
 800bf36:	e7fd      	b.n	800bf34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bf38:	4b3e      	ldr	r3, [pc, #248]	@ (800c034 <xPortStartScheduler+0x124>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4a3f      	ldr	r2, [pc, #252]	@ (800c03c <xPortStartScheduler+0x12c>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d10b      	bne.n	800bf5a <xPortStartScheduler+0x4a>
	__asm volatile
 800bf42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf46:	f383 8811 	msr	BASEPRI, r3
 800bf4a:	f3bf 8f6f 	isb	sy
 800bf4e:	f3bf 8f4f 	dsb	sy
 800bf52:	613b      	str	r3, [r7, #16]
}
 800bf54:	bf00      	nop
 800bf56:	bf00      	nop
 800bf58:	e7fd      	b.n	800bf56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bf5a:	4b39      	ldr	r3, [pc, #228]	@ (800c040 <xPortStartScheduler+0x130>)
 800bf5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	22ff      	movs	r2, #255	@ 0xff
 800bf6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf74:	78fb      	ldrb	r3, [r7, #3]
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bf7c:	b2da      	uxtb	r2, r3
 800bf7e:	4b31      	ldr	r3, [pc, #196]	@ (800c044 <xPortStartScheduler+0x134>)
 800bf80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf82:	4b31      	ldr	r3, [pc, #196]	@ (800c048 <xPortStartScheduler+0x138>)
 800bf84:	2207      	movs	r2, #7
 800bf86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf88:	e009      	b.n	800bf9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bf8a:	4b2f      	ldr	r3, [pc, #188]	@ (800c048 <xPortStartScheduler+0x138>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	4a2d      	ldr	r2, [pc, #180]	@ (800c048 <xPortStartScheduler+0x138>)
 800bf92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf94:	78fb      	ldrb	r3, [r7, #3]
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	005b      	lsls	r3, r3, #1
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf9e:	78fb      	ldrb	r3, [r7, #3]
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfa6:	2b80      	cmp	r3, #128	@ 0x80
 800bfa8:	d0ef      	beq.n	800bf8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bfaa:	4b27      	ldr	r3, [pc, #156]	@ (800c048 <xPortStartScheduler+0x138>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f1c3 0307 	rsb	r3, r3, #7
 800bfb2:	2b04      	cmp	r3, #4
 800bfb4:	d00b      	beq.n	800bfce <xPortStartScheduler+0xbe>
	__asm volatile
 800bfb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfba:	f383 8811 	msr	BASEPRI, r3
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	60bb      	str	r3, [r7, #8]
}
 800bfc8:	bf00      	nop
 800bfca:	bf00      	nop
 800bfcc:	e7fd      	b.n	800bfca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bfce:	4b1e      	ldr	r3, [pc, #120]	@ (800c048 <xPortStartScheduler+0x138>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	021b      	lsls	r3, r3, #8
 800bfd4:	4a1c      	ldr	r2, [pc, #112]	@ (800c048 <xPortStartScheduler+0x138>)
 800bfd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bfd8:	4b1b      	ldr	r3, [pc, #108]	@ (800c048 <xPortStartScheduler+0x138>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bfe0:	4a19      	ldr	r2, [pc, #100]	@ (800c048 <xPortStartScheduler+0x138>)
 800bfe2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	b2da      	uxtb	r2, r3
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bfec:	4b17      	ldr	r3, [pc, #92]	@ (800c04c <xPortStartScheduler+0x13c>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a16      	ldr	r2, [pc, #88]	@ (800c04c <xPortStartScheduler+0x13c>)
 800bff2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bff6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bff8:	4b14      	ldr	r3, [pc, #80]	@ (800c04c <xPortStartScheduler+0x13c>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a13      	ldr	r2, [pc, #76]	@ (800c04c <xPortStartScheduler+0x13c>)
 800bffe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c002:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c004:	f000 f8da 	bl	800c1bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c008:	4b11      	ldr	r3, [pc, #68]	@ (800c050 <xPortStartScheduler+0x140>)
 800c00a:	2200      	movs	r2, #0
 800c00c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c00e:	f000 f8f9 	bl	800c204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c012:	4b10      	ldr	r3, [pc, #64]	@ (800c054 <xPortStartScheduler+0x144>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a0f      	ldr	r2, [pc, #60]	@ (800c054 <xPortStartScheduler+0x144>)
 800c018:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c01c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c01e:	f7ff ff63 	bl	800bee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c022:	f7ff f82b 	bl	800b07c <vTaskSwitchContext>
	prvTaskExitError();
 800c026:	f7ff ff17 	bl	800be58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3718      	adds	r7, #24
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	e000ed00 	.word	0xe000ed00
 800c038:	410fc271 	.word	0x410fc271
 800c03c:	410fc270 	.word	0x410fc270
 800c040:	e000e400 	.word	0xe000e400
 800c044:	20001844 	.word	0x20001844
 800c048:	20001848 	.word	0x20001848
 800c04c:	e000ed20 	.word	0xe000ed20
 800c050:	20000248 	.word	0x20000248
 800c054:	e000ef34 	.word	0xe000ef34

0800c058 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
	__asm volatile
 800c05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c062:	f383 8811 	msr	BASEPRI, r3
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	f3bf 8f4f 	dsb	sy
 800c06e:	607b      	str	r3, [r7, #4]
}
 800c070:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c072:	4b10      	ldr	r3, [pc, #64]	@ (800c0b4 <vPortEnterCritical+0x5c>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	3301      	adds	r3, #1
 800c078:	4a0e      	ldr	r2, [pc, #56]	@ (800c0b4 <vPortEnterCritical+0x5c>)
 800c07a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c07c:	4b0d      	ldr	r3, [pc, #52]	@ (800c0b4 <vPortEnterCritical+0x5c>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2b01      	cmp	r3, #1
 800c082:	d110      	bne.n	800c0a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c084:	4b0c      	ldr	r3, [pc, #48]	@ (800c0b8 <vPortEnterCritical+0x60>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00b      	beq.n	800c0a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c092:	f383 8811 	msr	BASEPRI, r3
 800c096:	f3bf 8f6f 	isb	sy
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	603b      	str	r3, [r7, #0]
}
 800c0a0:	bf00      	nop
 800c0a2:	bf00      	nop
 800c0a4:	e7fd      	b.n	800c0a2 <vPortEnterCritical+0x4a>
	}
}
 800c0a6:	bf00      	nop
 800c0a8:	370c      	adds	r7, #12
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr
 800c0b2:	bf00      	nop
 800c0b4:	20000248 	.word	0x20000248
 800c0b8:	e000ed04 	.word	0xe000ed04

0800c0bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c0c2:	4b12      	ldr	r3, [pc, #72]	@ (800c10c <vPortExitCritical+0x50>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d10b      	bne.n	800c0e2 <vPortExitCritical+0x26>
	__asm volatile
 800c0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ce:	f383 8811 	msr	BASEPRI, r3
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	607b      	str	r3, [r7, #4]
}
 800c0dc:	bf00      	nop
 800c0de:	bf00      	nop
 800c0e0:	e7fd      	b.n	800c0de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c0e2:	4b0a      	ldr	r3, [pc, #40]	@ (800c10c <vPortExitCritical+0x50>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	3b01      	subs	r3, #1
 800c0e8:	4a08      	ldr	r2, [pc, #32]	@ (800c10c <vPortExitCritical+0x50>)
 800c0ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c0ec:	4b07      	ldr	r3, [pc, #28]	@ (800c10c <vPortExitCritical+0x50>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d105      	bne.n	800c100 <vPortExitCritical+0x44>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	f383 8811 	msr	BASEPRI, r3
}
 800c0fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c100:	bf00      	nop
 800c102:	370c      	adds	r7, #12
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr
 800c10c:	20000248 	.word	0x20000248

0800c110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c110:	f3ef 8009 	mrs	r0, PSP
 800c114:	f3bf 8f6f 	isb	sy
 800c118:	4b15      	ldr	r3, [pc, #84]	@ (800c170 <pxCurrentTCBConst>)
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	f01e 0f10 	tst.w	lr, #16
 800c120:	bf08      	it	eq
 800c122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12a:	6010      	str	r0, [r2, #0]
 800c12c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c130:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c134:	f380 8811 	msr	BASEPRI, r0
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	f3bf 8f6f 	isb	sy
 800c140:	f7fe ff9c 	bl	800b07c <vTaskSwitchContext>
 800c144:	f04f 0000 	mov.w	r0, #0
 800c148:	f380 8811 	msr	BASEPRI, r0
 800c14c:	bc09      	pop	{r0, r3}
 800c14e:	6819      	ldr	r1, [r3, #0]
 800c150:	6808      	ldr	r0, [r1, #0]
 800c152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c156:	f01e 0f10 	tst.w	lr, #16
 800c15a:	bf08      	it	eq
 800c15c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c160:	f380 8809 	msr	PSP, r0
 800c164:	f3bf 8f6f 	isb	sy
 800c168:	4770      	bx	lr
 800c16a:	bf00      	nop
 800c16c:	f3af 8000 	nop.w

0800c170 <pxCurrentTCBConst>:
 800c170:	20001218 	.word	0x20001218
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c174:	bf00      	nop
 800c176:	bf00      	nop

0800c178 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
	__asm volatile
 800c17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c182:	f383 8811 	msr	BASEPRI, r3
 800c186:	f3bf 8f6f 	isb	sy
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	607b      	str	r3, [r7, #4]
}
 800c190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c192:	f7fe feb9 	bl	800af08 <xTaskIncrementTick>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d003      	beq.n	800c1a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c19c:	4b06      	ldr	r3, [pc, #24]	@ (800c1b8 <xPortSysTickHandler+0x40>)
 800c19e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1a2:	601a      	str	r2, [r3, #0]
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	f383 8811 	msr	BASEPRI, r3
}
 800c1ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c1b0:	bf00      	nop
 800c1b2:	3708      	adds	r7, #8
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	e000ed04 	.word	0xe000ed04

0800c1bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c1bc:	b480      	push	{r7}
 800c1be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c1c0:	4b0b      	ldr	r3, [pc, #44]	@ (800c1f0 <vPortSetupTimerInterrupt+0x34>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c1c6:	4b0b      	ldr	r3, [pc, #44]	@ (800c1f4 <vPortSetupTimerInterrupt+0x38>)
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c1cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c1f8 <vPortSetupTimerInterrupt+0x3c>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a0a      	ldr	r2, [pc, #40]	@ (800c1fc <vPortSetupTimerInterrupt+0x40>)
 800c1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1d6:	099b      	lsrs	r3, r3, #6
 800c1d8:	4a09      	ldr	r2, [pc, #36]	@ (800c200 <vPortSetupTimerInterrupt+0x44>)
 800c1da:	3b01      	subs	r3, #1
 800c1dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c1de:	4b04      	ldr	r3, [pc, #16]	@ (800c1f0 <vPortSetupTimerInterrupt+0x34>)
 800c1e0:	2207      	movs	r2, #7
 800c1e2:	601a      	str	r2, [r3, #0]
}
 800c1e4:	bf00      	nop
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ec:	4770      	bx	lr
 800c1ee:	bf00      	nop
 800c1f0:	e000e010 	.word	0xe000e010
 800c1f4:	e000e018 	.word	0xe000e018
 800c1f8:	20000000 	.word	0x20000000
 800c1fc:	10624dd3 	.word	0x10624dd3
 800c200:	e000e014 	.word	0xe000e014

0800c204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c204:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c214 <vPortEnableVFP+0x10>
 800c208:	6801      	ldr	r1, [r0, #0]
 800c20a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c20e:	6001      	str	r1, [r0, #0]
 800c210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c212:	bf00      	nop
 800c214:	e000ed88 	.word	0xe000ed88

0800c218 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c218:	b480      	push	{r7}
 800c21a:	b085      	sub	sp, #20
 800c21c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c21e:	f3ef 8305 	mrs	r3, IPSR
 800c222:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2b0f      	cmp	r3, #15
 800c228:	d915      	bls.n	800c256 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c22a:	4a18      	ldr	r2, [pc, #96]	@ (800c28c <vPortValidateInterruptPriority+0x74>)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	4413      	add	r3, r2
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c234:	4b16      	ldr	r3, [pc, #88]	@ (800c290 <vPortValidateInterruptPriority+0x78>)
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	7afa      	ldrb	r2, [r7, #11]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d20b      	bcs.n	800c256 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c242:	f383 8811 	msr	BASEPRI, r3
 800c246:	f3bf 8f6f 	isb	sy
 800c24a:	f3bf 8f4f 	dsb	sy
 800c24e:	607b      	str	r3, [r7, #4]
}
 800c250:	bf00      	nop
 800c252:	bf00      	nop
 800c254:	e7fd      	b.n	800c252 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c256:	4b0f      	ldr	r3, [pc, #60]	@ (800c294 <vPortValidateInterruptPriority+0x7c>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c25e:	4b0e      	ldr	r3, [pc, #56]	@ (800c298 <vPortValidateInterruptPriority+0x80>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	429a      	cmp	r2, r3
 800c264:	d90b      	bls.n	800c27e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c26a:	f383 8811 	msr	BASEPRI, r3
 800c26e:	f3bf 8f6f 	isb	sy
 800c272:	f3bf 8f4f 	dsb	sy
 800c276:	603b      	str	r3, [r7, #0]
}
 800c278:	bf00      	nop
 800c27a:	bf00      	nop
 800c27c:	e7fd      	b.n	800c27a <vPortValidateInterruptPriority+0x62>
	}
 800c27e:	bf00      	nop
 800c280:	3714      	adds	r7, #20
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr
 800c28a:	bf00      	nop
 800c28c:	e000e3f0 	.word	0xe000e3f0
 800c290:	20001844 	.word	0x20001844
 800c294:	e000ed0c 	.word	0xe000ed0c
 800c298:	20001848 	.word	0x20001848

0800c29c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b08a      	sub	sp, #40	@ 0x28
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c2a8:	f7fe fd60 	bl	800ad6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c2ac:	4b5c      	ldr	r3, [pc, #368]	@ (800c420 <pvPortMalloc+0x184>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d101      	bne.n	800c2b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c2b4:	f000 f924 	bl	800c500 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c2b8:	4b5a      	ldr	r3, [pc, #360]	@ (800c424 <pvPortMalloc+0x188>)
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	4013      	ands	r3, r2
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f040 8095 	bne.w	800c3f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d01e      	beq.n	800c30a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c2cc:	2208      	movs	r2, #8
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4413      	add	r3, r2
 800c2d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f003 0307 	and.w	r3, r3, #7
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d015      	beq.n	800c30a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f023 0307 	bic.w	r3, r3, #7
 800c2e4:	3308      	adds	r3, #8
 800c2e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f003 0307 	and.w	r3, r3, #7
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d00b      	beq.n	800c30a <pvPortMalloc+0x6e>
	__asm volatile
 800c2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f6:	f383 8811 	msr	BASEPRI, r3
 800c2fa:	f3bf 8f6f 	isb	sy
 800c2fe:	f3bf 8f4f 	dsb	sy
 800c302:	617b      	str	r3, [r7, #20]
}
 800c304:	bf00      	nop
 800c306:	bf00      	nop
 800c308:	e7fd      	b.n	800c306 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d06f      	beq.n	800c3f0 <pvPortMalloc+0x154>
 800c310:	4b45      	ldr	r3, [pc, #276]	@ (800c428 <pvPortMalloc+0x18c>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	429a      	cmp	r2, r3
 800c318:	d86a      	bhi.n	800c3f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c31a:	4b44      	ldr	r3, [pc, #272]	@ (800c42c <pvPortMalloc+0x190>)
 800c31c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c31e:	4b43      	ldr	r3, [pc, #268]	@ (800c42c <pvPortMalloc+0x190>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c324:	e004      	b.n	800c330 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c328:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	429a      	cmp	r2, r3
 800c338:	d903      	bls.n	800c342 <pvPortMalloc+0xa6>
 800c33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1f1      	bne.n	800c326 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c342:	4b37      	ldr	r3, [pc, #220]	@ (800c420 <pvPortMalloc+0x184>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c348:	429a      	cmp	r2, r3
 800c34a:	d051      	beq.n	800c3f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c34c:	6a3b      	ldr	r3, [r7, #32]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2208      	movs	r2, #8
 800c352:	4413      	add	r3, r2
 800c354:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	6a3b      	ldr	r3, [r7, #32]
 800c35c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c360:	685a      	ldr	r2, [r3, #4]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	1ad2      	subs	r2, r2, r3
 800c366:	2308      	movs	r3, #8
 800c368:	005b      	lsls	r3, r3, #1
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d920      	bls.n	800c3b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c36e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	4413      	add	r3, r2
 800c374:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c376:	69bb      	ldr	r3, [r7, #24]
 800c378:	f003 0307 	and.w	r3, r3, #7
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d00b      	beq.n	800c398 <pvPortMalloc+0xfc>
	__asm volatile
 800c380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	613b      	str	r3, [r7, #16]
}
 800c392:	bf00      	nop
 800c394:	bf00      	nop
 800c396:	e7fd      	b.n	800c394 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39a:	685a      	ldr	r2, [r3, #4]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	1ad2      	subs	r2, r2, r3
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c3aa:	69b8      	ldr	r0, [r7, #24]
 800c3ac:	f000 f90a 	bl	800c5c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c3b0:	4b1d      	ldr	r3, [pc, #116]	@ (800c428 <pvPortMalloc+0x18c>)
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	1ad3      	subs	r3, r2, r3
 800c3ba:	4a1b      	ldr	r2, [pc, #108]	@ (800c428 <pvPortMalloc+0x18c>)
 800c3bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c3be:	4b1a      	ldr	r3, [pc, #104]	@ (800c428 <pvPortMalloc+0x18c>)
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	4b1b      	ldr	r3, [pc, #108]	@ (800c430 <pvPortMalloc+0x194>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d203      	bcs.n	800c3d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c3ca:	4b17      	ldr	r3, [pc, #92]	@ (800c428 <pvPortMalloc+0x18c>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a18      	ldr	r2, [pc, #96]	@ (800c430 <pvPortMalloc+0x194>)
 800c3d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d4:	685a      	ldr	r2, [r3, #4]
 800c3d6:	4b13      	ldr	r3, [pc, #76]	@ (800c424 <pvPortMalloc+0x188>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	431a      	orrs	r2, r3
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c3e6:	4b13      	ldr	r3, [pc, #76]	@ (800c434 <pvPortMalloc+0x198>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	4a11      	ldr	r2, [pc, #68]	@ (800c434 <pvPortMalloc+0x198>)
 800c3ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c3f0:	f7fe fcca 	bl	800ad88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	f003 0307 	and.w	r3, r3, #7
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00b      	beq.n	800c416 <pvPortMalloc+0x17a>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	60fb      	str	r3, [r7, #12]
}
 800c410:	bf00      	nop
 800c412:	bf00      	nop
 800c414:	e7fd      	b.n	800c412 <pvPortMalloc+0x176>
	return pvReturn;
 800c416:	69fb      	ldr	r3, [r7, #28]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3728      	adds	r7, #40	@ 0x28
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	20002454 	.word	0x20002454
 800c424:	20002468 	.word	0x20002468
 800c428:	20002458 	.word	0x20002458
 800c42c:	2000244c 	.word	0x2000244c
 800c430:	2000245c 	.word	0x2000245c
 800c434:	20002460 	.word	0x20002460

0800c438 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b086      	sub	sp, #24
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d04f      	beq.n	800c4ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c44a:	2308      	movs	r3, #8
 800c44c:	425b      	negs	r3, r3
 800c44e:	697a      	ldr	r2, [r7, #20]
 800c450:	4413      	add	r3, r2
 800c452:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	685a      	ldr	r2, [r3, #4]
 800c45c:	4b25      	ldr	r3, [pc, #148]	@ (800c4f4 <vPortFree+0xbc>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4013      	ands	r3, r2
 800c462:	2b00      	cmp	r3, #0
 800c464:	d10b      	bne.n	800c47e <vPortFree+0x46>
	__asm volatile
 800c466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c46a:	f383 8811 	msr	BASEPRI, r3
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	f3bf 8f4f 	dsb	sy
 800c476:	60fb      	str	r3, [r7, #12]
}
 800c478:	bf00      	nop
 800c47a:	bf00      	nop
 800c47c:	e7fd      	b.n	800c47a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00b      	beq.n	800c49e <vPortFree+0x66>
	__asm volatile
 800c486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c48a:	f383 8811 	msr	BASEPRI, r3
 800c48e:	f3bf 8f6f 	isb	sy
 800c492:	f3bf 8f4f 	dsb	sy
 800c496:	60bb      	str	r3, [r7, #8]
}
 800c498:	bf00      	nop
 800c49a:	bf00      	nop
 800c49c:	e7fd      	b.n	800c49a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	685a      	ldr	r2, [r3, #4]
 800c4a2:	4b14      	ldr	r3, [pc, #80]	@ (800c4f4 <vPortFree+0xbc>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4013      	ands	r3, r2
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d01e      	beq.n	800c4ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d11a      	bne.n	800c4ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	685a      	ldr	r2, [r3, #4]
 800c4b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c4f4 <vPortFree+0xbc>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	43db      	mvns	r3, r3
 800c4be:	401a      	ands	r2, r3
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c4c4:	f7fe fc52 	bl	800ad6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	685a      	ldr	r2, [r3, #4]
 800c4cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f8 <vPortFree+0xc0>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	4a09      	ldr	r2, [pc, #36]	@ (800c4f8 <vPortFree+0xc0>)
 800c4d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c4d6:	6938      	ldr	r0, [r7, #16]
 800c4d8:	f000 f874 	bl	800c5c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c4dc:	4b07      	ldr	r3, [pc, #28]	@ (800c4fc <vPortFree+0xc4>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	4a06      	ldr	r2, [pc, #24]	@ (800c4fc <vPortFree+0xc4>)
 800c4e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c4e6:	f7fe fc4f 	bl	800ad88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c4ea:	bf00      	nop
 800c4ec:	3718      	adds	r7, #24
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	20002468 	.word	0x20002468
 800c4f8:	20002458 	.word	0x20002458
 800c4fc:	20002464 	.word	0x20002464

0800c500 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c500:	b480      	push	{r7}
 800c502:	b085      	sub	sp, #20
 800c504:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c506:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800c50a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c50c:	4b27      	ldr	r3, [pc, #156]	@ (800c5ac <prvHeapInit+0xac>)
 800c50e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f003 0307 	and.w	r3, r3, #7
 800c516:	2b00      	cmp	r3, #0
 800c518:	d00c      	beq.n	800c534 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	3307      	adds	r3, #7
 800c51e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f023 0307 	bic.w	r3, r3, #7
 800c526:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	1ad3      	subs	r3, r2, r3
 800c52e:	4a1f      	ldr	r2, [pc, #124]	@ (800c5ac <prvHeapInit+0xac>)
 800c530:	4413      	add	r3, r2
 800c532:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c538:	4a1d      	ldr	r2, [pc, #116]	@ (800c5b0 <prvHeapInit+0xb0>)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c53e:	4b1c      	ldr	r3, [pc, #112]	@ (800c5b0 <prvHeapInit+0xb0>)
 800c540:	2200      	movs	r2, #0
 800c542:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	68ba      	ldr	r2, [r7, #8]
 800c548:	4413      	add	r3, r2
 800c54a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c54c:	2208      	movs	r2, #8
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	1a9b      	subs	r3, r3, r2
 800c552:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f023 0307 	bic.w	r3, r3, #7
 800c55a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	4a15      	ldr	r2, [pc, #84]	@ (800c5b4 <prvHeapInit+0xb4>)
 800c560:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c562:	4b14      	ldr	r3, [pc, #80]	@ (800c5b4 <prvHeapInit+0xb4>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2200      	movs	r2, #0
 800c568:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c56a:	4b12      	ldr	r3, [pc, #72]	@ (800c5b4 <prvHeapInit+0xb4>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	2200      	movs	r2, #0
 800c570:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	1ad2      	subs	r2, r2, r3
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c580:	4b0c      	ldr	r3, [pc, #48]	@ (800c5b4 <prvHeapInit+0xb4>)
 800c582:	681a      	ldr	r2, [r3, #0]
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	4a0a      	ldr	r2, [pc, #40]	@ (800c5b8 <prvHeapInit+0xb8>)
 800c58e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	4a09      	ldr	r2, [pc, #36]	@ (800c5bc <prvHeapInit+0xbc>)
 800c596:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c598:	4b09      	ldr	r3, [pc, #36]	@ (800c5c0 <prvHeapInit+0xc0>)
 800c59a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c59e:	601a      	str	r2, [r3, #0]
}
 800c5a0:	bf00      	nop
 800c5a2:	3714      	adds	r7, #20
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr
 800c5ac:	2000184c 	.word	0x2000184c
 800c5b0:	2000244c 	.word	0x2000244c
 800c5b4:	20002454 	.word	0x20002454
 800c5b8:	2000245c 	.word	0x2000245c
 800c5bc:	20002458 	.word	0x20002458
 800c5c0:	20002468 	.word	0x20002468

0800c5c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b085      	sub	sp, #20
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c5cc:	4b28      	ldr	r3, [pc, #160]	@ (800c670 <prvInsertBlockIntoFreeList+0xac>)
 800c5ce:	60fb      	str	r3, [r7, #12]
 800c5d0:	e002      	b.n	800c5d8 <prvInsertBlockIntoFreeList+0x14>
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	60fb      	str	r3, [r7, #12]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d8f7      	bhi.n	800c5d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d108      	bne.n	800c606 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	685a      	ldr	r2, [r3, #4]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	441a      	add	r2, r3
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	68ba      	ldr	r2, [r7, #8]
 800c610:	441a      	add	r2, r3
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	429a      	cmp	r2, r3
 800c618:	d118      	bne.n	800c64c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	4b15      	ldr	r3, [pc, #84]	@ (800c674 <prvInsertBlockIntoFreeList+0xb0>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	429a      	cmp	r2, r3
 800c624:	d00d      	beq.n	800c642 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	685a      	ldr	r2, [r3, #4]
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	441a      	add	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	601a      	str	r2, [r3, #0]
 800c640:	e008      	b.n	800c654 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c642:	4b0c      	ldr	r3, [pc, #48]	@ (800c674 <prvInsertBlockIntoFreeList+0xb0>)
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	601a      	str	r2, [r3, #0]
 800c64a:	e003      	b.n	800c654 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d002      	beq.n	800c662 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c662:	bf00      	nop
 800c664:	3714      	adds	r7, #20
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr
 800c66e:	bf00      	nop
 800c670:	2000244c 	.word	0x2000244c
 800c674:	20002454 	.word	0x20002454

0800c678 <memset>:
 800c678:	4402      	add	r2, r0
 800c67a:	4603      	mov	r3, r0
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d100      	bne.n	800c682 <memset+0xa>
 800c680:	4770      	bx	lr
 800c682:	f803 1b01 	strb.w	r1, [r3], #1
 800c686:	e7f9      	b.n	800c67c <memset+0x4>

0800c688 <_reclaim_reent>:
 800c688:	4b2d      	ldr	r3, [pc, #180]	@ (800c740 <_reclaim_reent+0xb8>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4283      	cmp	r3, r0
 800c68e:	b570      	push	{r4, r5, r6, lr}
 800c690:	4604      	mov	r4, r0
 800c692:	d053      	beq.n	800c73c <_reclaim_reent+0xb4>
 800c694:	69c3      	ldr	r3, [r0, #28]
 800c696:	b31b      	cbz	r3, 800c6e0 <_reclaim_reent+0x58>
 800c698:	68db      	ldr	r3, [r3, #12]
 800c69a:	b163      	cbz	r3, 800c6b6 <_reclaim_reent+0x2e>
 800c69c:	2500      	movs	r5, #0
 800c69e:	69e3      	ldr	r3, [r4, #28]
 800c6a0:	68db      	ldr	r3, [r3, #12]
 800c6a2:	5959      	ldr	r1, [r3, r5]
 800c6a4:	b9b1      	cbnz	r1, 800c6d4 <_reclaim_reent+0x4c>
 800c6a6:	3504      	adds	r5, #4
 800c6a8:	2d80      	cmp	r5, #128	@ 0x80
 800c6aa:	d1f8      	bne.n	800c69e <_reclaim_reent+0x16>
 800c6ac:	69e3      	ldr	r3, [r4, #28]
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	68d9      	ldr	r1, [r3, #12]
 800c6b2:	f000 f881 	bl	800c7b8 <_free_r>
 800c6b6:	69e3      	ldr	r3, [r4, #28]
 800c6b8:	6819      	ldr	r1, [r3, #0]
 800c6ba:	b111      	cbz	r1, 800c6c2 <_reclaim_reent+0x3a>
 800c6bc:	4620      	mov	r0, r4
 800c6be:	f000 f87b 	bl	800c7b8 <_free_r>
 800c6c2:	69e3      	ldr	r3, [r4, #28]
 800c6c4:	689d      	ldr	r5, [r3, #8]
 800c6c6:	b15d      	cbz	r5, 800c6e0 <_reclaim_reent+0x58>
 800c6c8:	4629      	mov	r1, r5
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	682d      	ldr	r5, [r5, #0]
 800c6ce:	f000 f873 	bl	800c7b8 <_free_r>
 800c6d2:	e7f8      	b.n	800c6c6 <_reclaim_reent+0x3e>
 800c6d4:	680e      	ldr	r6, [r1, #0]
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	f000 f86e 	bl	800c7b8 <_free_r>
 800c6dc:	4631      	mov	r1, r6
 800c6de:	e7e1      	b.n	800c6a4 <_reclaim_reent+0x1c>
 800c6e0:	6961      	ldr	r1, [r4, #20]
 800c6e2:	b111      	cbz	r1, 800c6ea <_reclaim_reent+0x62>
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	f000 f867 	bl	800c7b8 <_free_r>
 800c6ea:	69e1      	ldr	r1, [r4, #28]
 800c6ec:	b111      	cbz	r1, 800c6f4 <_reclaim_reent+0x6c>
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	f000 f862 	bl	800c7b8 <_free_r>
 800c6f4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c6f6:	b111      	cbz	r1, 800c6fe <_reclaim_reent+0x76>
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	f000 f85d 	bl	800c7b8 <_free_r>
 800c6fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c700:	b111      	cbz	r1, 800c708 <_reclaim_reent+0x80>
 800c702:	4620      	mov	r0, r4
 800c704:	f000 f858 	bl	800c7b8 <_free_r>
 800c708:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c70a:	b111      	cbz	r1, 800c712 <_reclaim_reent+0x8a>
 800c70c:	4620      	mov	r0, r4
 800c70e:	f000 f853 	bl	800c7b8 <_free_r>
 800c712:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c714:	b111      	cbz	r1, 800c71c <_reclaim_reent+0x94>
 800c716:	4620      	mov	r0, r4
 800c718:	f000 f84e 	bl	800c7b8 <_free_r>
 800c71c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c71e:	b111      	cbz	r1, 800c726 <_reclaim_reent+0x9e>
 800c720:	4620      	mov	r0, r4
 800c722:	f000 f849 	bl	800c7b8 <_free_r>
 800c726:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c728:	b111      	cbz	r1, 800c730 <_reclaim_reent+0xa8>
 800c72a:	4620      	mov	r0, r4
 800c72c:	f000 f844 	bl	800c7b8 <_free_r>
 800c730:	6a23      	ldr	r3, [r4, #32]
 800c732:	b11b      	cbz	r3, 800c73c <_reclaim_reent+0xb4>
 800c734:	4620      	mov	r0, r4
 800c736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c73a:	4718      	bx	r3
 800c73c:	bd70      	pop	{r4, r5, r6, pc}
 800c73e:	bf00      	nop
 800c740:	2000024c 	.word	0x2000024c

0800c744 <__errno>:
 800c744:	4b01      	ldr	r3, [pc, #4]	@ (800c74c <__errno+0x8>)
 800c746:	6818      	ldr	r0, [r3, #0]
 800c748:	4770      	bx	lr
 800c74a:	bf00      	nop
 800c74c:	2000024c 	.word	0x2000024c

0800c750 <__libc_init_array>:
 800c750:	b570      	push	{r4, r5, r6, lr}
 800c752:	4d0d      	ldr	r5, [pc, #52]	@ (800c788 <__libc_init_array+0x38>)
 800c754:	4c0d      	ldr	r4, [pc, #52]	@ (800c78c <__libc_init_array+0x3c>)
 800c756:	1b64      	subs	r4, r4, r5
 800c758:	10a4      	asrs	r4, r4, #2
 800c75a:	2600      	movs	r6, #0
 800c75c:	42a6      	cmp	r6, r4
 800c75e:	d109      	bne.n	800c774 <__libc_init_array+0x24>
 800c760:	4d0b      	ldr	r5, [pc, #44]	@ (800c790 <__libc_init_array+0x40>)
 800c762:	4c0c      	ldr	r4, [pc, #48]	@ (800c794 <__libc_init_array+0x44>)
 800c764:	f000 f8a0 	bl	800c8a8 <_init>
 800c768:	1b64      	subs	r4, r4, r5
 800c76a:	10a4      	asrs	r4, r4, #2
 800c76c:	2600      	movs	r6, #0
 800c76e:	42a6      	cmp	r6, r4
 800c770:	d105      	bne.n	800c77e <__libc_init_array+0x2e>
 800c772:	bd70      	pop	{r4, r5, r6, pc}
 800c774:	f855 3b04 	ldr.w	r3, [r5], #4
 800c778:	4798      	blx	r3
 800c77a:	3601      	adds	r6, #1
 800c77c:	e7ee      	b.n	800c75c <__libc_init_array+0xc>
 800c77e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c782:	4798      	blx	r3
 800c784:	3601      	adds	r6, #1
 800c786:	e7f2      	b.n	800c76e <__libc_init_array+0x1e>
 800c788:	0800c9dc 	.word	0x0800c9dc
 800c78c:	0800c9dc 	.word	0x0800c9dc
 800c790:	0800c9dc 	.word	0x0800c9dc
 800c794:	0800c9e0 	.word	0x0800c9e0

0800c798 <__retarget_lock_acquire_recursive>:
 800c798:	4770      	bx	lr

0800c79a <__retarget_lock_release_recursive>:
 800c79a:	4770      	bx	lr

0800c79c <memcpy>:
 800c79c:	440a      	add	r2, r1
 800c79e:	4291      	cmp	r1, r2
 800c7a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7a4:	d100      	bne.n	800c7a8 <memcpy+0xc>
 800c7a6:	4770      	bx	lr
 800c7a8:	b510      	push	{r4, lr}
 800c7aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7b2:	4291      	cmp	r1, r2
 800c7b4:	d1f9      	bne.n	800c7aa <memcpy+0xe>
 800c7b6:	bd10      	pop	{r4, pc}

0800c7b8 <_free_r>:
 800c7b8:	b538      	push	{r3, r4, r5, lr}
 800c7ba:	4605      	mov	r5, r0
 800c7bc:	2900      	cmp	r1, #0
 800c7be:	d041      	beq.n	800c844 <_free_r+0x8c>
 800c7c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7c4:	1f0c      	subs	r4, r1, #4
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	bfb8      	it	lt
 800c7ca:	18e4      	addlt	r4, r4, r3
 800c7cc:	f000 f83e 	bl	800c84c <__malloc_lock>
 800c7d0:	4a1d      	ldr	r2, [pc, #116]	@ (800c848 <_free_r+0x90>)
 800c7d2:	6813      	ldr	r3, [r2, #0]
 800c7d4:	b933      	cbnz	r3, 800c7e4 <_free_r+0x2c>
 800c7d6:	6063      	str	r3, [r4, #4]
 800c7d8:	6014      	str	r4, [r2, #0]
 800c7da:	4628      	mov	r0, r5
 800c7dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7e0:	f000 b83a 	b.w	800c858 <__malloc_unlock>
 800c7e4:	42a3      	cmp	r3, r4
 800c7e6:	d908      	bls.n	800c7fa <_free_r+0x42>
 800c7e8:	6820      	ldr	r0, [r4, #0]
 800c7ea:	1821      	adds	r1, r4, r0
 800c7ec:	428b      	cmp	r3, r1
 800c7ee:	bf01      	itttt	eq
 800c7f0:	6819      	ldreq	r1, [r3, #0]
 800c7f2:	685b      	ldreq	r3, [r3, #4]
 800c7f4:	1809      	addeq	r1, r1, r0
 800c7f6:	6021      	streq	r1, [r4, #0]
 800c7f8:	e7ed      	b.n	800c7d6 <_free_r+0x1e>
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	b10b      	cbz	r3, 800c804 <_free_r+0x4c>
 800c800:	42a3      	cmp	r3, r4
 800c802:	d9fa      	bls.n	800c7fa <_free_r+0x42>
 800c804:	6811      	ldr	r1, [r2, #0]
 800c806:	1850      	adds	r0, r2, r1
 800c808:	42a0      	cmp	r0, r4
 800c80a:	d10b      	bne.n	800c824 <_free_r+0x6c>
 800c80c:	6820      	ldr	r0, [r4, #0]
 800c80e:	4401      	add	r1, r0
 800c810:	1850      	adds	r0, r2, r1
 800c812:	4283      	cmp	r3, r0
 800c814:	6011      	str	r1, [r2, #0]
 800c816:	d1e0      	bne.n	800c7da <_free_r+0x22>
 800c818:	6818      	ldr	r0, [r3, #0]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	6053      	str	r3, [r2, #4]
 800c81e:	4408      	add	r0, r1
 800c820:	6010      	str	r0, [r2, #0]
 800c822:	e7da      	b.n	800c7da <_free_r+0x22>
 800c824:	d902      	bls.n	800c82c <_free_r+0x74>
 800c826:	230c      	movs	r3, #12
 800c828:	602b      	str	r3, [r5, #0]
 800c82a:	e7d6      	b.n	800c7da <_free_r+0x22>
 800c82c:	6820      	ldr	r0, [r4, #0]
 800c82e:	1821      	adds	r1, r4, r0
 800c830:	428b      	cmp	r3, r1
 800c832:	bf04      	itt	eq
 800c834:	6819      	ldreq	r1, [r3, #0]
 800c836:	685b      	ldreq	r3, [r3, #4]
 800c838:	6063      	str	r3, [r4, #4]
 800c83a:	bf04      	itt	eq
 800c83c:	1809      	addeq	r1, r1, r0
 800c83e:	6021      	streq	r1, [r4, #0]
 800c840:	6054      	str	r4, [r2, #4]
 800c842:	e7ca      	b.n	800c7da <_free_r+0x22>
 800c844:	bd38      	pop	{r3, r4, r5, pc}
 800c846:	bf00      	nop
 800c848:	200025a8 	.word	0x200025a8

0800c84c <__malloc_lock>:
 800c84c:	4801      	ldr	r0, [pc, #4]	@ (800c854 <__malloc_lock+0x8>)
 800c84e:	f7ff bfa3 	b.w	800c798 <__retarget_lock_acquire_recursive>
 800c852:	bf00      	nop
 800c854:	200025a4 	.word	0x200025a4

0800c858 <__malloc_unlock>:
 800c858:	4801      	ldr	r0, [pc, #4]	@ (800c860 <__malloc_unlock+0x8>)
 800c85a:	f7ff bf9e 	b.w	800c79a <__retarget_lock_release_recursive>
 800c85e:	bf00      	nop
 800c860:	200025a4 	.word	0x200025a4

0800c864 <sqrtf>:
 800c864:	b508      	push	{r3, lr}
 800c866:	ed2d 8b02 	vpush	{d8}
 800c86a:	eeb0 8a40 	vmov.f32	s16, s0
 800c86e:	f000 f817 	bl	800c8a0 <__ieee754_sqrtf>
 800c872:	eeb4 8a48 	vcmp.f32	s16, s16
 800c876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c87a:	d60c      	bvs.n	800c896 <sqrtf+0x32>
 800c87c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c89c <sqrtf+0x38>
 800c880:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c888:	d505      	bpl.n	800c896 <sqrtf+0x32>
 800c88a:	f7ff ff5b 	bl	800c744 <__errno>
 800c88e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c892:	2321      	movs	r3, #33	@ 0x21
 800c894:	6003      	str	r3, [r0, #0]
 800c896:	ecbd 8b02 	vpop	{d8}
 800c89a:	bd08      	pop	{r3, pc}
 800c89c:	00000000 	.word	0x00000000

0800c8a0 <__ieee754_sqrtf>:
 800c8a0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c8a4:	4770      	bx	lr
	...

0800c8a8 <_init>:
 800c8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8aa:	bf00      	nop
 800c8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ae:	bc08      	pop	{r3}
 800c8b0:	469e      	mov	lr, r3
 800c8b2:	4770      	bx	lr

0800c8b4 <_fini>:
 800c8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b6:	bf00      	nop
 800c8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ba:	bc08      	pop	{r3}
 800c8bc:	469e      	mov	lr, r3
 800c8be:	4770      	bx	lr
